{
    "git-add.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-add - Add file contents to the index\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 74,
            "end_index": 93,
            "value": "[verse]\n'git add' [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n\t  [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 455,
            "end_index": 480,
            "value": "This command updates the index using the current content found in\nthe working tree, to prepare the content staged for the next commit.\nIt typically adds the current content of existing paths as a whole,\nbut with some options it can also be used to add content with\nonly part of the changes made to the working tree files applied, or\nremove paths that do not exist in the working tree anymore.\n\nThe \"index\" holds a snapshot of the content of the working tree, and it\nis this snapshot that is taken as the contents of the next commit.  Thus\nafter making any changes to the working tree, and before running\nthe commit command, you must use the `add` command to add any new or\nmodified files to the index.\n\nThis command can be performed multiple times before a commit.  It only\nadds the content of the specified file(s) at the time the add command is\nrun; if you want subsequent changes included in the next commit, then\nyou must run `git add` again to add the new content to the index.\n\nThe `git status` command can be used to obtain a summary of which\nfiles have changes that are staged for the next commit.\n\nThe `git add` command will not add ignored files by default.  If any\nignored files were explicitly specified on the command line, `git add`\nwill fail with a list of ignored files.  Ignored files reached by\ndirectory recursion or filename globbing performed by Git (quote your\nglobs before the shell) will be silently ignored.  The 'git add' command can\nbe used to add ignored files with the `-f` (force) option.\n\nPlease see linkgit:git-commit[1] for alternative ways to add content to a\ncommit.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2083,
            "end_index": 2100,
            "value": "\n<pathspec>...::\n\tFiles to add content from.  Fileglobs (e.g. `*.c`) can\n\tbe given to add all matching files.  Also a\n\tleading directory name (e.g. `dir` to add `dir/file1`\n\tand `dir/file2`) can be given to update the index to\n\tmatch the current state of the directory as a whole (e.g.\n\tspecifying `dir` will record not just a file `dir/file1`\n\tmodified in the working tree, a file `dir/file2` added to\n\tthe working tree, but also a file `dir/file3` removed from\n\tthe working tree). Note that older versions of Git used\n\tto ignore removed files; use `--no-all` option if you want\n\tto add modified or new files but ignore removed ones.\n+\nFor more details about the <pathspec> syntax, see the 'pathspec' entry\nin linkgit:gitglossary[7].\n\n-n::\n--dry-run::\n\tDon't actually add the file(s), just show if they exist and/or will\n\tbe ignored.\n\n-v::\n--verbose::\n        Be verbose.\n\n-f::\n--force::\n\tAllow adding otherwise ignored files.\n\n-i::\n--interactive::\n\tAdd modified contents in the working tree interactively to\n\tthe index. Optional path arguments may be supplied to limit\n\toperation to a subset of the working tree. See ``Interactive\n\tmode'' for details.\n\n-p::\n--patch::\n\tInteractively choose hunks of patch between the index and the\n\twork tree and add them to the index. This gives the user a chance\n\tto review the difference before adding modified contents to the\n\tindex.\n+\nThis effectively runs `add --interactive`, but bypasses the\ninitial command menu and directly jumps to the `patch` subcommand.\nSee ``Interactive mode'' for details.\n\n-e::\n--edit::\n\tOpen the diff vs. the index in an editor and let the user\n\tedit it.  After the editor was closed, adjust the hunk headers\n\tand apply the patch to the index.\n+\nThe intent of this option is to pick and choose lines of the patch to\napply, or even to modify the contents of lines to be staged. This can be\nquicker and more flexible than using the interactive hunk selector.\nHowever, it is easy to confuse oneself and create a patch that does not\napply to the index. See EDITING PATCHES below.\n\n-u::\n--update::\n\tUpdate the index just where it already has an entry matching\n\t<pathspec>.  This removes as well as modifies index entries to\n\tmatch the working tree, but adds no new files.\n+\nIf no <pathspec> is given when `-u` option is used, all\ntracked files in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories).\n\n-A::\n--all::\n--no-ignore-removal::\n\tUpdate the index not only where the working tree has a file\n\tmatching <pathspec> but also where the index already has an\n\tentry. This adds, modifies, and removes index entries to\n\tmatch the working tree.\n+\nIf no <pathspec> is given when `-A` option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories).\n\n--no-all::\n--ignore-removal::\n\tUpdate the index by adding new files that are unknown to the\n\tindex and files modified in the working tree, but ignore\n\tfiles that have been removed from the working tree.  This\n\toption is a no-op when no <pathspec> is used.\n+\nThis option is primarily to help users who are used to older\nversions of Git, whose \"git add <pathspec>...\" was a synonym\nfor \"git add --no-all <pathspec>...\", i.e. ignored removed files.\n\n-N::\n--intent-to-add::\n\tRecord only the fact that the path will be added later. An entry\n\tfor the path is placed in the index with no content. This is\n\tuseful for, among other things, showing the unstaged content of\n\tsuch files with `git diff` and committing them with `git commit\n\t-a`.\n\n--refresh::\n\tDon't add the file(s), but only refresh their stat()\n\tinformation in the index.\n\n--ignore-errors::\n\tIf some files could not be added because of errors indexing\n\tthem, do not abort the operation, but continue adding the\n\tothers. The command shall still exit with non-zero status.\n\tThe configuration variable `add.ignoreErrors` can be set to\n\ttrue to make this the default behaviour.\n\n--ignore-missing::\n\tThis option can only be used together with --dry-run. By using\n\tthis option the user can check if any of the given files would\n\tbe ignored, no matter if they are already present in the work\n\ttree or not.\n\n--no-warn-embedded-repo::\n\tBy default, `git add` will warn when adding an embedded\n\trepository to the index without using `git submodule add` to\n\tcreate an entry in `.gitmodules`. This option will suppress the\n\twarning (e.g., if you are manually performing operations on\n\tsubmodules).\n\n--renormalize::\n\tApply the \"clean\" process freshly to all tracked files to\n\tforcibly add them again to the index.  This is useful after\n\tchanging `core.autocrlf` configuration or the `text` attribute\n\tin order to correct files added with wrong CRLF/LF line endings.\n\tThis option implies `-u`.\n\n--chmod=(+|-)x::\n\tOverride the executable bit of the added files.  The executable\n\tbit is only changed in the index, the files on disk are left\n\tunchanged.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n\\--::\n\tThis option can be used to separate command-line options from\n\tthe list of files, (useful when filenames might be mistaken\n\tfor command-line options).\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 7823,
            "end_index": 7842,
            "value": "\n* Adds content from all `*.txt` files under `Documentation` directory\n  and its subdirectories:\n+\n------------\n$ git add Documentation/\\*.txt\n------------\n+\nNote that the asterisk `*` is quoted from the shell in this\nexample; this lets the command include the files from\nsubdirectories of `Documentation/` directory.\n\n* Considers adding content from all git-*.sh scripts:\n+\n------------\n$ git add git-*.sh\n------------\n+\nBecause this example lets the shell expand the asterisk (i.e. you are\nlisting the files explicitly), it does not consider\n`subdir/git-foo.sh`.\n\nINTERACTIVE MODE\n----------------\nWhen the command enters the interactive mode, it shows the\noutput of the 'status' subcommand, and then goes into its\ninteractive command loop.\n\nThe command loop shows the list of subcommands available, and\ngives a prompt \"What now> \".  In general, when the prompt ends\nwith a single '>', you can pick only one of the choices given\nand type return, like this:\n\n------------\n    *** Commands ***\n      1: status       2: update       3: revert       4: add untracked\n      5: patch        6: diff         7: quit         8: help\n    What now> 1\n------------\n\nYou also could say `s` or `sta` or `status` above as long as the\nchoice is unique.\n\nThe main command loop has 6 subcommands (plus help and quit).\n\nstatus::\n\n   This shows the change between HEAD and index (i.e. what will be\n   committed if you say `git commit`), and between index and\n   working tree files (i.e. what you could stage further before\n   `git commit` using `git add`) for each path.  A sample output\n   looks like this:\n+\n------------\n              staged     unstaged path\n     1:       binary      nothing foo.png\n     2:     +403/-35        +1/-1 git-add--interactive.perl\n------------\n+\nIt shows that foo.png has differences from HEAD (but that is\nbinary so line count cannot be shown) and there is no\ndifference between indexed copy and the working tree\nversion (if the working tree version were also different,\n'binary' would have been shown in place of 'nothing').  The\nother file, git-add{litdd}interactive.perl, has 403 lines added\nand 35 lines deleted if you commit what is in the index, but\nworking tree file has further modifications (one addition and\none deletion).\n\nupdate::\n\n   This shows the status information and issues an \"Update>>\"\n   prompt.  When the prompt ends with double '>>', you can\n   make more than one selection, concatenated with whitespace or\n   comma.  Also you can say ranges.  E.g. \"2-5 7,9\" to choose\n   2,3,4,5,7,9 from the list.  If the second number in a range is\n   omitted, all remaining patches are taken.  E.g. \"7-\" to choose\n   7,8,9 from the list.  You can say '*' to choose everything.\n+\nWhat you chose are then highlighted with '*',\nlike this:\n+\n------------\n           staged     unstaged path\n  1:       binary      nothing foo.png\n* 2:     +403/-35        +1/-1 git-add--interactive.perl\n------------\n+\nTo remove selection, prefix the input with `-`\nlike this:\n+\n------------\nUpdate>> -2\n------------\n+\nAfter making the selection, answer with an empty line to stage the\ncontents of working tree files for selected paths in the index.\n\nrevert::\n\n  This has a very similar UI to 'update', and the staged\n  information for selected paths are reverted to that of the\n  HEAD version.  Reverting new paths makes them untracked.\n\nadd untracked::\n\n  This has a very similar UI to 'update' and\n  'revert', and lets you add untracked paths to the index.\n\npatch::\n\n  This lets you choose one path out of a 'status' like selection.\n  After choosing the path, it presents the diff between the index\n  and the working tree file and asks you if you want to stage\n  the change of each hunk.  You can select one of the following\n  options and type return:\n\n       y - stage this hunk\n       n - do not stage this hunk\n       q - quit; do not stage this hunk or any of the remaining ones\n       a - stage this hunk and all later hunks in the file\n       d - do not stage this hunk or any of the later hunks in the file\n       g - select a hunk to go to\n       / - search for a hunk matching the given regex\n       j - leave this hunk undecided, see next undecided hunk\n       J - leave this hunk undecided, see next hunk\n       k - leave this hunk undecided, see previous undecided hunk\n       K - leave this hunk undecided, see previous hunk\n       s - split the current hunk into smaller hunks\n       e - manually edit the current hunk\n       ? - print help\n+\nAfter deciding the fate for all hunks, if there is any hunk\nthat was chosen, the index is updated with the selected hunks.\n+\nYou can omit having to type return here, by setting the configuration\nvariable `interactive.singleKey` to `true`.\n\ndiff::\n\n  This lets you review what will be committed (i.e. between\n  HEAD and index).\n\n\nEDITING PATCHES\n---------------\n\nInvoking `git add -e` or selecting `e` from the interactive hunk\nselector will open a patch in your editor; after the editor exits, the\nresult is applied to the index. You are free to make arbitrary changes\nto the patch, but note that some changes may have confusing results, or\neven result in a patch that cannot be applied.  If you want to abort the\noperation entirely (i.e., stage nothing new in the index), simply delete\nall lines of the patch. The list below describes some common things you\nmay see in a patch, and which editing operations make sense on them.\n\n--\nadded content::\n\nAdded content is represented by lines beginning with \"{plus}\". You can\nprevent staging any addition lines by deleting them.\n\nremoved content::\n\nRemoved content is represented by lines beginning with \"-\". You can\nprevent staging their removal by converting the \"-\" to a \" \" (space).\n\nmodified content::\n\nModified content is represented by \"-\" lines (removing the old content)\nfollowed by \"{plus}\" lines (adding the replacement content). You can\nprevent staging the modification by converting \"-\" lines to \" \", and\nremoving \"{plus}\" lines. Beware that modifying only half of the pair is\nlikely to introduce confusing changes to the index.\n--\n\nThere are also more complex operations that can be performed. But beware\nthat because the patch is applied only to the index and not the working\ntree, the working tree will appear to \"undo\" the change in the index.\nFor example, introducing a new line into the index that is in neither\nthe HEAD nor the working tree will stage the new line for commit, but\nthe line will appear to be reverted in the working tree.\n\nAvoid using these constructs, or do so with extreme caution.\n\n--\nremoving untouched content::\n\nContent which does not differ between the index and working tree may be\nshown on context lines, beginning with a \" \" (space).  You can stage\ncontext lines for removal by converting the space to a \"-\". The\nresulting working tree file will appear to re-add the content.\n\nmodifying existing content::\n\nOne can also modify context lines by staging them for removal (by\nconverting \" \" to \"-\") and adding a \"{plus}\" line with the new content.\nSimilarly, one can modify \"{plus}\" lines for existing additions or\nmodifications. In all cases, the new modification will appear reverted\nin the working tree.\n\nnew content::\n\nYou may also add new content that does not exist in the patch; simply\nadd new lines, each starting with \"{plus}\". The addition will appear\nreverted in the working tree.\n--\n\nThere are also several operations which should be avoided entirely, as\nthey will make the patch impossible to apply:\n\n* adding context (\" \") or removal (\"-\") lines\n* deleting context or removal lines\n* modifying the contents of context or removal lines\n\nSEE ALSO\n--------\nlinkgit:git-status[1]\nlinkgit:git-rm[1]\nlinkgit:git-reset[1]\nlinkgit:git-mv[1]\nlinkgit:git-commit[1]\nlinkgit:git-update-index[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 15592,
            "end_index": 15601,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-am.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 20,
            "end_index": 31,
            "value": "git-am - Apply a series of patches from a mailbox\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 82,
            "end_index": 101,
            "value": "[verse]\n'git am' [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]\n\t [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n\t [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n\t [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]\n\t [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]\n\t [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]\n\t [(<mbox> | <Maildir>)...]\n'git am' (--continue | --skip | --abort | --quit | --show-current-patch[=(diff|raw)])\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 602,
            "end_index": 627,
            "value": "Splits mail messages in a mailbox into commit log message,\nauthorship information and patches, and applies them to the\ncurrent branch.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 762,
            "end_index": 779,
            "value": "\n(<mbox>|<Maildir>)...::\n\tThe list of mailbox files to read patches from. If you do not\n\tsupply this argument, the command reads from the standard input.\n\tIf you supply directories, they will be treated as Maildirs.\n\n-s::\n--signoff::\n\tAdd a `Signed-off-by` trailer to the commit message, using\n\tthe committer identity of yourself.\n\tSee the signoff option in linkgit:git-commit[1] for more information.\n\n-k::\n--keep::\n\tPass `-k` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]).\n\n--keep-non-patch::\n\tPass `-b` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]).\n\n--[no-]keep-cr::\n\tWith `--keep-cr`, call 'git mailsplit' (see linkgit:git-mailsplit[1])\n\twith the same option, to prevent it from stripping CR at the end of\n\tlines. `am.keepcr` configuration variable can be used to specify the\n\tdefault behaviour.  `--no-keep-cr` is useful to override `am.keepcr`.\n\n-c::\n--scissors::\n\tRemove everything in body before a scissors line (see\n\tlinkgit:git-mailinfo[1]). Can be activated by default using\n\tthe `mailinfo.scissors` configuration variable.\n\n--no-scissors::\n\tIgnore scissors lines (see linkgit:git-mailinfo[1]).\n\n-m::\n--message-id::\n\tPass the `-m` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]),\n\tso that the Message-ID header is added to the commit message.\n\tThe `am.messageid` configuration variable can be used to specify\n\tthe default behaviour.\n\n--no-message-id::\n\tDo not add the Message-ID header to the commit message.\n\t`no-message-id` is useful to override `am.messageid`.\n\n-q::\n--quiet::\n\tBe quiet. Only print error messages.\n\n-u::\n--utf8::\n\tPass `-u` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]).\n\tThe proposed commit log message taken from the e-mail\n\tis re-coded into UTF-8 encoding (configuration variable\n\t`i18n.commitEncoding` can be used to specify project's\n\tpreferred encoding if it is not UTF-8).\n+\nThis was optional in prior versions of git, but now it is the\ndefault.   You can use `--no-utf8` to override this.\n\n--no-utf8::\n\tPass `-n` flag to 'git mailinfo' (see\n\tlinkgit:git-mailinfo[1]).\n\n-3::\n--3way::\n--no-3way::\n\tWhen the patch does not apply cleanly, fall back on\n\t3-way merge if the patch records the identity of blobs\n\tit is supposed to apply to and we have those blobs\n\tavailable locally. `--no-3way` can be used to override\n\tam.threeWay configuration variable. For more information,\n\tsee am.threeWay in linkgit:git-config[1].\n\n--rerere-autoupdate::\n--no-rerere-autoupdate::\n\tAllow the rerere mechanism to update the index with the\n\tresult of auto-conflict resolution if possible.\n\n--ignore-space-change::\n--ignore-whitespace::\n--whitespace=<option>::\n-C<n>::\n-p<n>::\n--directory=<dir>::\n--exclude=<path>::\n--include=<path>::\n--reject::\n\tThese flags are passed to the 'git apply' (see linkgit:git-apply[1])\n\tprogram that applies\n\tthe patch.\n\n--patch-format::\n\tBy default the command will try to detect the patch format\n\tautomatically. This option allows the user to bypass the automatic\n\tdetection and specify the patch format that the patch(es) should be\n\tinterpreted as. Valid formats are mbox, mboxrd,\n\tstgit, stgit-series and hg.\n\n-i::\n--interactive::\n\tRun interactively.\n\n--committer-date-is-author-date::\n\tBy default the command records the date from the e-mail\n\tmessage as the commit author date, and uses the time of\n\tcommit creation as the committer date. This allows the\n\tuser to lie about the committer date by using the same\n\tvalue as the author date.\n\n--ignore-date::\n\tBy default the command records the date from the e-mail\n\tmessage as the commit author date, and uses the time of\n\tcommit creation as the committer date. This allows the\n\tuser to lie about the author date by using the same\n\tvalue as the committer date.\n\n--skip::\n\tSkip the current patch.  This is only meaningful when\n\trestarting an aborted patch.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand both `commit.gpgSign` configuration variable, and\n\tearlier `--gpg-sign`.\n\n--continue::\n-r::\n--resolved::\n\tAfter a patch failure (e.g. attempting to apply\n\tconflicting patch), the user has applied it by hand and\n\tthe index file stores the result of the application.\n\tMake a commit using the authorship and commit log\n\textracted from the e-mail message and the current index\n\tfile, and continue.\n\n--resolvemsg=<msg>::\n\tWhen a patch failure occurs, <msg> will be printed\n\tto the screen before exiting.  This overrides the\n\tstandard message informing you to use `--continue`\n\tor `--skip` to handle the failure.  This is solely\n\tfor internal use between 'git rebase' and 'git am'.\n\n--abort::\n\tRestore the original branch and abort the patching operation.\n\n--quit::\n\tAbort the patching operation but keep HEAD and the index\n\tuntouched.\n\n--show-current-patch[=(diff|raw)]::\n\tShow the message at which `git am` has stopped due to\n\tconflicts.  If `raw` is specified, show the raw contents of\n\tthe e-mail message; if `diff`, show the diff portion only.\n\tDefaults to `raw`.\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 5875,
            "end_index": 5898,
            "value": "\nThe commit author name is taken from the \"From: \" line of the\nmessage, and commit author date is taken from the \"Date: \" line\nof the message.  The \"Subject: \" line is used as the title of\nthe commit, after stripping common prefix \"[PATCH <anything>]\".\nThe \"Subject: \" line is supposed to concisely describe what the\ncommit is about in one line of text.\n\n\"From: \", \"Date: \", and \"Subject: \" lines starting the body override the\nrespective commit author name and title values taken from the headers.\n\nThe commit message is formed by the title taken from the\n\"Subject: \", a blank line and the body of the message up to\nwhere the patch begins.  Excess whitespace at the end of each\nline is automatically stripped.\n\nThe patch is expected to be inline, directly following the\nmessage.  Any line that is of the form:\n\n* three-dashes and end-of-line, or\n* a line that begins with \"diff -\", or\n* a line that begins with \"Index: \"\n\nis taken as the beginning of a patch, and the commit log message\nis terminated before the first occurrence of such a line.\n\nWhen initially invoking `git am`, you give it the names of the mailboxes\nto process.  Upon seeing the first patch that does not apply, it\naborts in the middle.  You can recover from this in one of two ways:\n\n. skip the current patch by re-running the command with the `--skip`\n  option.\n\n. hand resolve the conflict in the working directory, and update\n  the index file to bring it into a state that the patch should\n  have produced.  Then run the command with the `--continue` option.\n\nThe command refuses to process new mailboxes until the current\noperation is finished, so if you decide to start over from scratch,\nrun `git am --abort` before running the command with mailbox\nnames.\n\nBefore any patches are applied, ORIG_HEAD is set to the tip of the\ncurrent branch.  This is useful if you have problems with multiple\ncommits, like running 'git am' on the wrong branch or an error in the\ncommits that is more easily fixed by changing the mailbox (e.g.\nerrors in the \"From:\" lines).\n"
        },
        "HOOKS": {
            "name": "HOOKS",
            "start_index": 7930,
            "end_index": 7943,
            "value": "This command can run `applypatch-msg`, `pre-applypatch`,\nand `post-applypatch` hooks.  See linkgit:githooks[5] for more\ninformation.\n\nSEE ALSO\n--------\nlinkgit:git-apply[1].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8117,
            "end_index": 8126,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-annotate.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-annotate - Annotate file lines with commit information\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 102,
            "end_index": 121,
            "value": "[verse]\n'git annotate' [<options>] <file> [<revision>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 176,
            "end_index": 201,
            "value": "Annotates each line in the given file with information from the commit\nwhich introduced the line. Optionally annotates from a given revision.\n\nThe only difference between this command and linkgit:git-blame[1] is that\nthey use slightly different output formats, and this command exists only\nfor backward compatibility to support existing scripts, and provide a more\nfamiliar command name for people coming from other SCM systems.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 630,
            "end_index": 647,
            "value": "\ninclude::blame-options.txt[]\n\nSEE ALSO\n--------\nlinkgit:git-blame[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 716,
            "end_index": 725,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-apply.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-apply - Apply a patch to files and/or to the index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 93,
            "end_index": 112,
            "value": "[verse]\n'git apply' [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]\n\t  [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]\n\t  [--allow-binary-replacement | --binary] [--reject] [-z]\n\t  [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]\n\t  [--ignore-space-change | --ignore-whitespace]\n\t  [--whitespace=(nowarn|warn|fix|error|error-all)]\n\t  [--exclude=<path>] [--include=<path>] [--directory=<root>]\n\t  [--verbose] [--unsafe-paths] [<patch>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 612,
            "end_index": 637,
            "value": "Reads the supplied diff output (i.e. \"a patch\") and applies it to files.\nWhen running from a subdirectory in a repository, patched paths\noutside the directory are ignored.\nWith the `--index` option the patch is also applied to the index, and\nwith the `--cached` option the patch is only applied to the index.\nWithout these options, the command applies the patch only to files,\nand does not require them to be in a Git repository.\n\nThis command applies the patch but does not create a commit.  Use\nlinkgit:git-am[1] to create commits from patches generated by\nlinkgit:git-format-patch[1] and/or received by email.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1250,
            "end_index": 1267,
            "value": "\n<patch>...::\n\tThe files to read the patch from.  '-' can be used to read\n\tfrom the standard input.\n\n--stat::\n\tInstead of applying the patch, output diffstat for the\n\tinput.  Turns off \"apply\".\n\n--numstat::\n\tSimilar to `--stat`, but shows the number of added and\n\tdeleted lines in decimal notation and the pathname without\n\tabbreviation, to make it more machine friendly.  For\n\tbinary files, outputs two `-` instead of saying\n\t`0 0`.  Turns off \"apply\".\n\n--summary::\n\tInstead of applying the patch, output a condensed\n\tsummary of information obtained from git diff extended\n\theaders, such as creations, renames and mode changes.\n\tTurns off \"apply\".\n\n--check::\n\tInstead of applying the patch, see if the patch is\n\tapplicable to the current working tree and/or the index\n\tfile and detects errors.  Turns off \"apply\".\n\n--index::\n\tApply the patch to both the index and the working tree (or\n\tmerely check that it would apply cleanly to both if `--check` is\n\tin effect). Note that `--index` expects index entries and\n\tworking tree copies for relevant paths to be identical (their\n\tcontents and metadata such as file mode must match), and will\n\traise an error if they are not, even if the patch would apply\n\tcleanly to both the index and the working tree in isolation.\n\n--cached::\n\tApply the patch to just the index, without touching the working\n\ttree. If `--check` is in effect, merely check that it would\n\tapply cleanly to the index entry.\n\n--intent-to-add::\n\tWhen applying the patch only to the working tree, mark new\n\tfiles to be added to the index later (see `--intent-to-add`\n\toption in linkgit:git-add[1]). This option is ignored unless\n\trunning in a Git repository and `--index` is not specified.\n\tNote that `--index` could be implied by other options such\n\tas `--cached` or `--3way`.\n\n-3::\n--3way::\n\tWhen the patch does not apply cleanly, fall back on 3-way merge if\n\tthe patch records the identity of blobs it is supposed to apply to,\n\tand we have those blobs available locally, possibly leaving the\n\tconflict markers in the files in the working tree for the user to\n\tresolve.  This option implies the `--index` option, and is incompatible\n\twith the `--reject` and the `--cached` options.\n\n--build-fake-ancestor=<file>::\n\tNewer 'git diff' output has embedded 'index information'\n\tfor each blob to help identify the original version that\n\tthe patch applies to.  When this flag is given, and if\n\tthe original versions of the blobs are available locally,\n\tbuilds a temporary index containing those blobs.\n+\nWhen a pure mode change is encountered (which has no index information),\nthe information is read from the current index instead.\n\n-R::\n--reverse::\n\tApply the patch in reverse.\n\n--reject::\n\tFor atomicity, 'git apply' by default fails the whole patch and\n\tdoes not touch the working tree when some of the hunks\n\tdo not apply.  This option makes it apply\n\tthe parts of the patch that are applicable, and leave the\n\trejected hunks in corresponding *.rej files.\n\n-z::\n\tWhen `--numstat` has been given, do not munge pathnames,\n\tbut use a NUL-terminated machine-readable format.\n+\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable `core.quotePath` (see\nlinkgit:git-config[1]).\n\n-p<n>::\n\tRemove <n> leading path components (separated by slashes) from\n\ttraditional diff paths. E.g., with `-p2`, a patch against\n\t`a/dir/file` will be applied directly to `file`. The default is\n\t1.\n\n-C<n>::\n\tEnsure at least <n> lines of surrounding context match before\n\tand after each change.  When fewer lines of surrounding\n\tcontext exist they all must match.  By default no context is\n\tever ignored.\n\n--unidiff-zero::\n\tBy default, 'git apply' expects that the patch being\n\tapplied is a unified diff with at least one line of context.\n\tThis provides good safety measures, but breaks down when\n\tapplying a diff generated with `--unified=0`. To bypass these\n\tchecks use `--unidiff-zero`.\n+\nNote, for the reasons stated above usage of context-free patches is\ndiscouraged.\n\n--apply::\n\tIf you use any of the options marked \"Turns off\n\t'apply'\" above, 'git apply' reads and outputs the\n\trequested information without actually applying the\n\tpatch.  Give this flag after those flags to also apply\n\tthe patch.\n\n--no-add::\n\tWhen applying a patch, ignore additions made by the\n\tpatch.  This can be used to extract the common part between\n\ttwo files by first running 'diff' on them and applying\n\tthe result with this option, which would apply the\n\tdeletion part but not the addition part.\n\n--allow-binary-replacement::\n--binary::\n\tHistorically we did not allow binary patch applied\n\twithout an explicit permission from the user, and this\n\tflag was the way to do so.  Currently we always allow binary\n\tpatch application, so this is a no-op.\n\n--exclude=<path-pattern>::\n\tDon't apply changes to files matching the given path pattern. This can\n\tbe useful when importing patchsets, where you want to exclude certain\n\tfiles or directories.\n\n--include=<path-pattern>::\n\tApply changes to files matching the given path pattern. This can\n\tbe useful when importing patchsets, where you want to include certain\n\tfiles or directories.\n+\nWhen `--exclude` and `--include` patterns are used, they are examined in the\norder they appear on the command line, and the first match determines if a\npatch to each path is used.  A patch to a path that does not match any\ninclude/exclude pattern is used by default if there is no include pattern\non the command line, and ignored if there is any include pattern.\n\n--ignore-space-change::\n--ignore-whitespace::\n\tWhen applying a patch, ignore changes in whitespace in context\n\tlines if necessary.\n\tContext lines will preserve their whitespace, and they will not\n\tundergo whitespace fixing regardless of the value of the\n\t`--whitespace` option. New lines will still be fixed, though.\n\n--whitespace=<action>::\n\tWhen applying a patch, detect a new or modified line that has\n\twhitespace errors.  What are considered whitespace errors is\n\tcontrolled by `core.whitespace` configuration.  By default,\n\ttrailing whitespaces (including lines that solely consist of\n\twhitespaces) and a space character that is immediately followed\n\tby a tab character inside the initial indent of the line are\n\tconsidered whitespace errors.\n+\nBy default, the command outputs warning messages but applies the patch.\nWhen `git-apply` is used for statistics and not applying a\npatch, it defaults to `nowarn`.\n+\nYou can use different `<action>` values to control this\nbehavior:\n+\n* `nowarn` turns off the trailing whitespace warning.\n* `warn` outputs warnings for a few such errors, but applies the\n  patch as-is (default).\n* `fix` outputs warnings for a few such errors, and applies the\n  patch after fixing them (`strip` is a synonym --- the tool\n  used to consider only trailing whitespace characters as errors, and the\n  fix involved 'stripping' them, but modern Gits do more).\n* `error` outputs warnings for a few such errors, and refuses\n  to apply the patch.\n* `error-all` is similar to `error` but shows all errors.\n\n--inaccurate-eof::\n\tUnder certain circumstances, some versions of 'diff' do not correctly\n\tdetect a missing new-line at the end of the file. As a result, patches\n\tcreated by such 'diff' programs do not record incomplete lines\n\tcorrectly. This option adds support for applying such patches by\n\tworking around this bug.\n\n-v::\n--verbose::\n\tReport progress to stderr. By default, only a message about the\n\tcurrent patch being applied will be printed. This option will cause\n\tadditional information to be reported.\n\n--recount::\n\tDo not trust the line counts in the hunk headers, but infer them\n\tby inspecting the patch (e.g. after editing the patch without\n\tadjusting the hunk headers appropriately).\n\n--directory=<root>::\n\tPrepend <root> to all filenames.  If a \"-p\" argument was also passed,\n\tit is applied before prepending the new root.\n+\nFor example, a patch that talks about updating `a/git-gui.sh` to `b/git-gui.sh`\ncan be applied to the file in the working tree `modules/git-gui/git-gui.sh` by\nrunning `git apply --directory=modules/git-gui`.\n\n--unsafe-paths::\n\tBy default, a patch that affects outside the working area\n\t(either a Git controlled working tree, or the current working\n\tdirectory when \"git apply\" is used as a replacement of GNU\n\tpatch) is rejected as a mistake (or a mischief).\n+\nWhen `git apply` is used as a \"better GNU patch\", the user can pass\nthe `--unsafe-paths` option to override this safety check.  This option\nhas no effect when `--index` or `--cached` is in use.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 9807,
            "end_index": 9836,
            "value": "\napply.ignoreWhitespace::\n\tSet to 'change' if you want changes in whitespace to be ignored by default.\n\tSet to one of: no, none, never, false if you want changes in\n\twhitespace to be significant.\napply.whitespace::\n\tWhen no `--whitespace` flag is given from the command\n\tline, this configuration item is used as the default.\n"
        },
        "SUBMODULES": {
            "name": "SUBMODULES",
            "start_index": 10161,
            "end_index": 10184,
            "value": "If the patch contains any changes to submodules then 'git apply'\ntreats these changes as follows.\n\nIf `--index` is specified (explicitly or implicitly), then the submodule\ncommits must match the index exactly for the patch to apply.  If any\nof the submodules are checked-out, then these check-outs are completely\nignored, i.e., they are not required to be up to date or clean and they\nare not updated.\n\nIf `--index` is not specified, then the submodule commits in the patch\nare ignored and only the absence or presence of the corresponding\nsubdirectory is checked and (if possible) updated.\n\nSEE ALSO\n--------\nlinkgit:git-am[1].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 10813,
            "end_index": 10822,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-archimport.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-archimport - Import a GNU Arch repository into Git\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 103,
            "end_index": 122,
            "value": "[verse]\n'git archimport' [-h] [-v] [-o] [-a] [-f] [-T] [-D depth] [-t tempdir]\n               <archive/branch>[:<git-branch>] ...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 252,
            "end_index": 277,
            "value": "Imports a project from one or more GNU Arch repositories.\nIt will follow branches\nand repositories within the namespaces defined by the <archive/branch>\nparameters supplied. If it cannot find the remote branch a merge comes from\nit will just import it as a regular commit. If it can find it, it will mark it\nas a merge whenever possible (see discussion below).\n\nThe script expects you to provide the key roots where it can start the import\nfrom an 'initial import' or 'tag' type of Arch commit. It will follow and\nimport new branches within the provided roots.\n\nIt expects to be dealing with one project only. If it sees\nbranches that have different roots, it will refuse to run. In that case,\nedit your <archive/branch> parameters to define clearly the scope of the\nimport.\n\n'git archimport' uses `tla` extensively in the background to access the\nArch repository.\nMake sure you have a recent version of `tla` available in the path. `tla` must\nknow about the repositories you pass to 'git archimport'.\n\nFor the initial import, 'git archimport' expects to find itself in an empty\ndirectory. To follow the development of a project that uses Arch, rerun\n'git archimport' with the same parameters as the initial import to perform\nincremental imports.\n\nWhile 'git archimport' will try to create sensible branch names for the\narchives that it imports, it is also possible to specify Git branch names\nmanually.  To do so, write a Git branch name after each <archive/branch>\nparameter, separated by a colon.  This way, you can shorten the Arch\nbranch names and convert Arch jargon to Git jargon, for example mapping a\n\"PROJECT{litdd}devo{litdd}VERSION\" branch to \"master\".\n\nAssociating multiple Arch branches to one Git branch is possible; the\nresult will make the most sense only if no commits are made to the first\nbranch, after the second branch is created.  Still, this is useful to\nconvert Arch repositories that had been rotated periodically.\n\n"
        },
        "MERGES": {
            "name": "MERGES",
            "start_index": 2219,
            "end_index": 2234,
            "value": "Patch merge data from Arch is used to mark merges in Git as well. Git\ndoes not care much about tracking patches, and only considers a merge when a\nbranch incorporates all the commits since the point they forked. The end result\nis that Git will have a good idea of how far branches have diverged. So the\nimport process does lose some patch-trading metadata.\n\nFortunately, when you try and merge branches imported from Arch,\nGit will find a good merge base, and it has a good chance of identifying\npatches that have been traded out-of-sequence between the branches.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2798,
            "end_index": 2815,
            "value": "\n-h::\n\tDisplay usage.\n\n-v::\n\tVerbose output.\n\n-T::\n\tMany tags. Will create a tag for every commit, reflecting the commit\n\tname in the Arch repository.\n\n-f::\n\tUse the fast patchset import strategy.  This can be significantly\n\tfaster for large trees, but cannot handle directory renames or\n\tpermissions changes.  The default strategy is slow and safe.\n\n-o::\n\tUse this for compatibility with old-style branch names used by\n\tearlier versions of 'git archimport'.  Old-style branch names\n\twere category{litdd}branch, whereas new-style branch names are\n\tarchive,category{litdd}branch{litdd}version.  In both cases, names given\n\ton the command-line will override the automatically-generated\n\tones.\n\n-D <depth>::\n\tFollow merge ancestry and attempt to import trees that have been\n\tmerged from.  Specify a depth greater than 1 if patch logs have been\n\tpruned.\n\n-a::\n\tAttempt to auto-register archives at `http://mirrors.sourcecontrol.net`\n\tThis is particularly useful with the -D option.\n\n-t <tmpdir>::\n\tOverride the default tempdir.\n\n\n<archive/branch>::\n\tArchive/branch identifier in a format that `tla log` understands.\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3928,
            "end_index": 3937,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-archive.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-archive - Create an archive of files from a named tree\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git archive' [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]\n\t      [-o <file> | --output=<file>] [--worktree-attributes]\n\t      [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>\n\t      [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 345,
            "end_index": 370,
            "value": "Creates an archive of the specified format containing the tree\nstructure for the named tree, and writes it out to the standard\noutput.  If <prefix> is specified it is\nprepended to the filenames in the archive.\n\n'git archive' behaves differently when given a tree ID versus when\ngiven a commit ID or tag ID.  In the first case the current time is\nused as the modification time of each file in the archive.  In the latter\ncase the commit time as recorded in the referenced commit object is\nused instead.  Additionally the commit ID is stored in a global\nextended pax header if the tar format is used; it can be extracted\nusing 'git get-tar-commit-id'. In ZIP files it is stored as a file\ncomment.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1065,
            "end_index": 1082,
            "value": "\n--format=<fmt>::\n\tFormat of the resulting archive: 'tar' or 'zip'. If this option\n\tis not given, and the output file is specified, the format is\n\tinferred from the filename if possible (e.g. writing to \"foo.zip\"\n\tmakes the output to be in the zip format). Otherwise the output\n\tformat is `tar`.\n\n-l::\n--list::\n\tShow all available formats.\n\n-v::\n--verbose::\n\tReport progress to stderr.\n\n--prefix=<prefix>/::\n\tPrepend <prefix>/ to each filename in the archive.\n\n-o <file>::\n--output=<file>::\n\tWrite the archive to <file> instead of stdout.\n\n--add-file=<file>::\n\tAdd a non-tracked file to the archive.  Can be repeated to add\n\tmultiple files.  The path of the file in the archive is built\n\tby concatenating the value for `--prefix` (if any) and the\n\tbasename of <file>.\n\n--worktree-attributes::\n\tLook for attributes in .gitattributes files in the working tree\n\tas well (see <<ATTRIBUTES>>).\n\n<extra>::\n\tThis can be any options that the archiver backend understands.\n\tSee next section.\n\n--remote=<repo>::\n\tInstead of making a tar archive from the local repository,\n\tretrieve a tar archive from a remote repository. Note that the\n\tremote repository may place restrictions on which sha1\n\texpressions may be allowed in `<tree-ish>`. See\n\tlinkgit:git-upload-archive[1] for details.\n\n--exec=<git-upload-archive>::\n\tUsed with --remote to specify the path to the\n\t'git-upload-archive' on the remote side.\n\n<tree-ish>::\n\tThe tree or commit to produce an archive for.\n\n<path>::\n\tWithout an optional path parameter, all files and subdirectories\n\tof the current working directory are included in the archive.\n\tIf one or more paths are specified, only these are included.\n\nBACKEND EXTRA OPTIONS\n---------------------\n\nzip\n~~~\n-0::\n\tStore the files instead of deflating them.\n-9::\n\tHighest and slowest compression level.  You can specify any\n\tnumber from 1 to 9 to adjust compression speed and ratio.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 2968,
            "end_index": 2997,
            "value": "\ntar.umask::\n\tThis variable can be used to restrict the permission bits of\n\ttar archive entries.  The default is 0002, which turns off the\n\tworld write bit.  The special value \"user\" indicates that the\n\tarchiving user's umask will be used instead.  See umask(2) for\n\tdetails.  If `--remote` is used then only the configuration of\n\tthe remote repository takes effect.\n\ntar.<format>.command::\n\tThis variable specifies a shell command through which the tar\n\toutput generated by `git archive` should be piped. The command\n\tis executed using the shell with the generated tar file on its\n\tstandard input, and should produce the final output on its\n\tstandard output. Any compression-level options will be passed\n\tto the command (e.g., \"-9\"). An output file with the same\n\textension as `<format>` will be use this format if no other\n\tformat is given.\n+\nThe \"tar.gz\" and \"tgz\" formats are defined automatically and default to\n`gzip -cn`. You may override them with custom commands.\n\ntar.<format>.remote::\n\tIf true, enable `<format>` for use by remote clients via\n\tlinkgit:git-upload-archive[1]. Defaults to false for\n\tuser-defined formats, but true for the \"tar.gz\" and \"tgz\"\n\tformats.\n\n[[ATTRIBUTES]]"
        },
        "ATTRIBUTES": {
            "name": "ATTRIBUTES",
            "start_index": 4189,
            "end_index": 4212,
            "value": "\nexport-ignore::\n\tFiles and directories with the attribute export-ignore won't be\n\tadded to archive files.  See linkgit:gitattributes[5] for details.\n\nexport-subst::\n\tIf the attribute export-subst is set for a file then Git will\n\texpand several placeholders when adding this file to an archive.\n\tSee linkgit:gitattributes[5] for details.\n\nNote that attributes are by default taken from the `.gitattributes` files\nin the tree that is being archived.  If you want to tweak the way the\noutput is generated after the fact (e.g. you committed without adding an\nappropriate export-ignore in its `.gitattributes`), adjust the checked out\n`.gitattributes` file as necessary and use `--worktree-attributes`\noption.  Alternatively you can keep necessary attributes that should apply\nwhile archiving any tree in your `$GIT_DIR/info/attributes` file.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5051,
            "end_index": 5070,
            "value": "`git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)`::\n\n\tCreate a tar archive that contains the contents of the\n\tlatest commit on the current branch, and extract it in the\n\t`/var/tmp/junk` directory.\n\n`git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz`::\n\n\tCreate a compressed tarball for v1.4.0 release.\n\n`git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz`::\n\n\tSame as above, but using the builtin tar.gz handling.\n\n`git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0`::\n\n\tSame as above, but the format is inferred from the output file.\n\n`git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip >git-1.4.0.tar.gz`::\n\n\tCreate a compressed tarball for v1.4.0 release, but without a\n\tglobal extended pax header.\n\n`git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip`::\n\n\tPut everything in the current head's Documentation/ directory\n\tinto 'git-1.4.0-docs.zip', with the prefix 'git-docs/'.\n\n`git archive -o latest.zip HEAD`::\n\n\tCreate a Zip archive that contains the contents of the latest\n\tcommit on the current branch. Note that the output format is\n\tinferred by the extension of the output file.\n\n`git config tar.tar.xz.command \"xz -c\"`::\n\n\tConfigure a \"tar.xz\" format for making LZMA-compressed tarfiles.\n\tYou can use it specifying `--format=tar.xz`, or by creating an\n\toutput file like `-o foo.tar.xz`.\n\n\nSEE ALSO\n--------\nlinkgit:gitattributes[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6545,
            "end_index": 6554,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-bisect-lk2009.txt": {
        "Abstract": {
            "name": "Abstract",
            "start_index": 150,
            "end_index": 169,
            "value": "\n\"git bisect\" enables software users and developers to easily find the\ncommit that introduced a regression. We show why it is important to\nhave good tools to fight regressions. We describe how \"git bisect\"\nworks from the outside and the algorithms it uses inside. Then we\nexplain how to take advantage of \"git bisect\" to improve current\npractices. And we discuss how \"git bisect\" could improve in the\nfuture.\n\n\nIntroduction to \"git bisect\"\n----------------------------\n\nGit is a Distributed Version Control system (DVCS) created by Linus\nTorvalds and maintained by Junio Hamano.\n\nIn Git like in many other Version Control Systems (VCS), the different\nstates of the data that is managed by the system are called\ncommits. And, as VCS are mostly used to manage software source code,\nsometimes \"interesting\" changes of behavior in the software are\nintroduced in some commits.\n\nIn fact people are specially interested in commits that introduce a\n\"bad\" behavior, called a bug or a regression. They are interested in\nthese commits because a commit (hopefully) contains a very small set\nof source code changes. And it's much easier to understand and\nproperly fix a problem when you only need to check a very small set of\nchanges, than when you don't know where look in the first place.\n\nSo to help people find commits that introduce a \"bad\" behavior, the\n\"git bisect\" set of commands was invented. And it follows of course\nthat in \"git bisect\" parlance, commits where the \"interesting\nbehavior\" is present are called \"bad\" commits, while other commits are\ncalled \"good\" commits. And a commit that introduce the behavior we are\ninterested in is called a \"first bad commit\". Note that there could be\nmore than one \"first bad commit\" in the commit space we are searching.\n\nSo \"git bisect\" is designed to help find a \"first bad commit\". And to\nbe as efficient as possible, it tries to perform a binary search.\n\n\nFighting regressions overview\n-----------------------------\n\nRegressions: a big problem\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRegressions are a big problem in the software industry. But it's\ndifficult to put some real numbers behind that claim.\n\nThere are some numbers about bugs in general, like a NIST study in\n2002 <<1>> that said:\n\n_____________\nSoftware bugs, or errors, are so prevalent and so detrimental that\nthey cost the U.S. economy an estimated $59.5 billion annually, or\nabout 0.6 percent of the gross domestic product, according to a newly\nreleased study commissioned by the Department of Commerce's National\nInstitute of Standards and Technology (NIST). At the national level,\nover half of the costs are borne by software users and the remainder\nby software developers/vendors.  The study also found that, although\nall errors cannot be removed, more than a third of these costs, or an\nestimated $22.2 billion, could be eliminated by an improved testing\ninfrastructure that enables earlier and more effective identification\nand removal of software defects. These are the savings associated with\nfinding an increased percentage (but not 100 percent) of errors closer\nto the development stages in which they are introduced. Currently,\nover half of all errors are not found until \"downstream\" in the\ndevelopment process or during post-sale software use.\n_____________\n\nAnd then:\n\n_____________\nSoftware developers already spend approximately 80 percent of\ndevelopment costs on identifying and correcting defects, and yet few\nproducts of any type other than software are shipped with such high\nlevels of errors.\n_____________\n\nEventually the conclusion started with:\n\n_____________\nThe path to higher software quality is significantly improved software\ntesting.\n_____________\n\nThere are other estimates saying that 80% of the cost related to\nsoftware is about maintenance <<2>>.\n\nThough, according to Wikipedia <<3>>:\n\n_____________\nA common perception of maintenance is that it is merely fixing\nbugs. However, studies and surveys over the years have indicated that\nthe majority, over 80%, of the maintenance effort is used for\nnon-corrective actions (Pigosky 1997). This perception is perpetuated\nby users submitting problem reports that in reality are functionality\nenhancements to the system.\n_____________\n\nBut we can guess that improving on existing software is very costly\nbecause you have to watch out for regressions. At least this would\nmake the above studies consistent among themselves.\n\nOf course some kind of software is developed, then used during some\ntime without being improved on much, and then finally thrown away. In\nthis case, of course, regressions may not be a big problem. But on the\nother hand, there is a lot of big software that is continually\ndeveloped and maintained during years or even tens of years by a lot\nof people. And as there are often many people who depend (sometimes\ncritically) on such software, regressions are a really big problem.\n\nOne such software is the Linux kernel. And if we look at the Linux\nkernel, we can see that a lot of time and effort is spent to fight\nregressions. The release cycle start with a 2 weeks long merge\nwindow. Then the first release candidate (rc) version is tagged. And\nafter that about 7 or 8 more rc versions will appear with around one\nweek between each of them, before the final release.\n\nThe time between the first rc release and the final release is\nsupposed to be used to test rc versions and fight bugs and especially\nregressions. And this time is more than 80% of the release cycle\ntime. But this is not the end of the fight yet, as of course it\ncontinues after the release.\n\nAnd then this is what Ingo Molnar (a well known Linux kernel\ndeveloper) says about his use of git bisect:\n\n_____________\nI most actively use it during the merge window (when a lot of trees\nget merged upstream and when the influx of bugs is the highest) - and\nyes, there have been cases that i used it multiple times a day. My\naverage is roughly once a day.\n_____________\n\nSo regressions are fought all the time by developers, and indeed it is\nwell known that bugs should be fixed as soon as possible, so as soon\nas they are found. That's why it is interesting to have good tools for\nthis purpose.\n\nOther tools to fight regressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSo what are the tools used to fight regressions? They are nearly the\nsame as those used to fight regular bugs. The only specific tools are\ntest suites and tools similar as \"git bisect\".\n\nTest suites are very nice. But when they are used alone, they are\nsupposed to be used so that all the tests are checked after each\ncommit. This means that they are not very efficient, because many\ntests are run for no interesting result, and they suffer from\ncombinatorial explosion.\n\nIn fact the problem is that big software often has many different\nconfiguration options and that each test case should pass for each\nconfiguration after each commit. So if you have for each release: N\nconfigurations, M commits and T test cases, you should perform:\n\n-------------\nN * M * T tests\n-------------\n\nwhere N, M and T are all growing with the size your software.\n\nSo very soon it will not be possible to completely test everything.\n\nAnd if some bugs slip through your test suite, then you can add a test\nto your test suite. But if you want to use your new improved test\nsuite to find where the bug slipped in, then you will either have to\nemulate a bisection process or you will perhaps bluntly test each\ncommit backward starting from the \"bad\" commit you have which may be\nvery wasteful.\n\n\"git bisect\" overview\n---------------------\n\nStarting a bisection\n~~~~~~~~~~~~~~~~~~~~\n\nThe first \"git bisect\" subcommand to use is \"git bisect start\" to\nstart the search. Then bounds must be set to limit the commit\nspace. This is done usually by giving one \"bad\" and at least one\n\"good\" commit. They can be passed in the initial call to \"git bisect\nstart\" like this:\n\n-------------\n$ git bisect start [BAD [GOOD...]]\n-------------\n\nor they can be set using:\n\n-------------\n$ git bisect bad [COMMIT]\n-------------\n\nand:\n\n-------------\n$ git bisect good [COMMIT...]\n-------------\n\nwhere BAD, GOOD and COMMIT are all names that can be resolved to a\ncommit.\n\nThen \"git bisect\" will checkout a commit of its choosing and ask the\nuser to test it, like this:\n\n-------------\n$ git bisect start v2.6.27 v2.6.25\nBisecting: 10928 revisions left to test after this (roughly 14 steps)\n[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n-------------\n\nNote that the example that we will use is really a toy example, we\nwill be looking for the first commit that has a version like\n\"2.6.26-something\", that is the commit that has a \"SUBLEVEL = 26\" line\nin the top level Makefile. This is a toy example because there are\nbetter ways to find this commit with Git than using \"git bisect\" (for\nexample \"git blame\" or \"git log -S<string>\").\n\nDriving a bisection manually\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAt this point there are basically 2 ways to drive the search. It can\nbe driven manually by the user or it can be driven automatically by a\nscript or a command.\n\nIf the user is driving it, then at each step of the search, the user\nwill have to test the current commit and say if it is \"good\" or \"bad\"\nusing the \"git bisect good\" or \"git bisect bad\" commands respectively\nthat have been described above. For example:\n\n-------------\n$ git bisect bad\nBisecting: 5480 revisions left to test after this (roughly 13 steps)\n[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\n-------------\n\nAnd after a few more steps like that, \"git bisect\" will eventually\nfind a first bad commit:\n\n-------------\n$ git bisect bad\n2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds <torvalds@linux-foundation.org>\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\n:100644 100644 5cf82581... 4492984e... M      Makefile\n-------------\n\nAt this point we can see what the commit does, check it out (if it's\nnot already checked out) or tinker with it, for example:\n\n-------------\n$ git show HEAD\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds <torvalds@linux-foundation.org>\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\ndiff --git a/Makefile b/Makefile\nindex 5cf8258..4492984 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,7 +1,7 @@\n VERSION = 2\n PATCHLEVEL = 6\n-SUBLEVEL = 25\n-EXTRAVERSION =\n+SUBLEVEL = 26\n+EXTRAVERSION = -rc1\n NAME = Funky Weasel is Jiggy wit it\n\n # *DOCUMENTATION*\n-------------\n\nAnd when we are finished we can use \"git bisect reset\" to go back to\nthe branch we were in before we started bisecting:\n\n-------------\n$ git bisect reset\nChecking out files: 100% (21549/21549), done.\nPrevious HEAD position was 2ddcca3... Linux 2.6.26-rc1\nSwitched to branch 'master'\n-------------\n\nDriving a bisection automatically\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe other way to drive the bisection process is to tell \"git bisect\"\nto launch a script or command at each bisection step to know if the\ncurrent commit is \"good\" or \"bad\". To do that, we use the \"git bisect\nrun\" command. For example:\n\n-------------\n$ git bisect start v2.6.27 v2.6.25\nBisecting: 10928 revisions left to test after this (roughly 14 steps)\n[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n$\n$ git bisect run grep '^SUBLEVEL = 25' Makefile\nrunning grep ^SUBLEVEL = 25 Makefile\nBisecting: 5480 revisions left to test after this (roughly 13 steps)\n[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\nrunning grep ^SUBLEVEL = 25 Makefile\nSUBLEVEL = 25\nBisecting: 2740 revisions left to test after this (roughly 12 steps)\n[671294719628f1671faefd4882764886f8ad08cb] V4L/DVB(7879): Adding cx18 Support for mxl5005s\n...\n...\nrunning grep ^SUBLEVEL = 25 Makefile\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[2ddcca36c8bcfa251724fe342c8327451988be0d] Linux 2.6.26-rc1\nrunning grep ^SUBLEVEL = 25 Makefile\n2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds <torvalds@linux-foundation.org>\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\n:100644 100644 5cf82581... 4492984e... M      Makefile\nbisect run success\n-------------\n\nIn this example, we passed \"grep '^SUBLEVEL = 25' Makefile\" as\nparameter to \"git bisect run\". This means that at each step, the grep\ncommand we passed will be launched. And if it exits with code 0 (that\nmeans success) then git bisect will mark the current state as\n\"good\". If it exits with code 1 (or any code between 1 and 127\nincluded, except the special code 125), then the current state will be\nmarked as \"bad\".\n\nExit code between 128 and 255 are special to \"git bisect run\". They\nmake it stop immediately the bisection process. This is useful for\nexample if the command passed takes too long to complete, because you\ncan kill it with a signal and it will stop the bisection process.\n\nIt can also be useful in scripts passed to \"git bisect run\" to \"exit\n255\" if some very abnormal situation is detected.\n\nAvoiding untestable commits\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes it happens that the current state cannot be tested, for\nexample if it does not compile because there was a bug preventing it\nat that time. This is what the special exit code 125 is for. It tells\n\"git bisect run\" that the current commit should be marked as\nuntestable and that another one should be chosen and checked out.\n\nIf the bisection process is driven manually, you can use \"git bisect\nskip\" to do the same thing. (In fact the special exit code 125 makes\n\"git bisect run\" use \"git bisect skip\" in the background.)\n\nOr if you want more control, you can inspect the current state using\nfor example \"git bisect visualize\". It will launch gitk (or \"git log\"\nif the `DISPLAY` environment variable is not set) to help you find a\nbetter bisection point.\n\nEither way, if you have a string of untestable commits, it might\nhappen that the regression you are looking for has been introduced by\none of these untestable commits. In this case it's not possible to\ntell for sure which commit introduced the regression.\n\nSo if you used \"git bisect skip\" (or the run script exited with\nspecial code 125) you could get a result like this:\n\n-------------\nThere are only 'skip'ped commits left to test.\nThe first bad commit could be any of:\n15722f2fa328eaba97022898a305ffc8172db6b1\n78e86cf3e850bd755bb71831f42e200626fbd1e0\ne15b73ad3db9b48d7d1ade32f8cd23a751fe0ace\n070eab2303024706f2924822bfec8b9847e4ac1b\nWe cannot bisect more!\n-------------\n\nSaving a log and replaying it\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to show other people your bisection process, you can get a\nlog using for example:\n\n-------------\n$ git bisect log > bisect_log.txt\n-------------\n\nAnd it is possible to replay it using:\n\n-------------\n$ git bisect replay bisect_log.txt\n-------------\n\n\n\"git bisect\" details\n--------------------\n\nBisection algorithm\n~~~~~~~~~~~~~~~~~~~\n\nAs the Git commits form a directed acyclic graph (DAG), finding the\nbest bisection commit to test at each step is not so simple. Anyway\nLinus found and implemented a \"truly stupid\" algorithm, later improved\nby Junio Hamano, that works quite well.\n\nSo the algorithm used by \"git bisect\" to find the best bisection\ncommit when there are no skipped commits is the following:\n\n1) keep only the commits that:\n\na) are ancestor of the \"bad\" commit (including the \"bad\" commit itself),\nb) are not ancestor of a \"good\" commit (excluding the \"good\" commits).\n\nThis means that we get rid of the uninteresting commits in the DAG.\n\nFor example if we start with a graph like this:\n\n-------------\nG-Y-G-W-W-W-X-X-X-X\n\t   \\ /\n\t    W-W-B\n\t   /\nY---G-W---W\n \\ /   \\\nY-Y     X-X-X-X\n\n-> time goes this way ->\n-------------\n\nwhere B is the \"bad\" commit, \"G\" are \"good\" commits and W, X, and Y\nare other commits, we will get the following graph after this first\nstep:\n\n-------------\nW-W-W\n     \\\n      W-W-B\n     /\nW---W\n-------------\n\nSo only the W and B commits will be kept. Because commits X and Y will\nhave been removed by rules a) and b) respectively, and because commits\nG are removed by rule b) too.\n\nNote for Git users, that it is equivalent as keeping only the commit\ngiven by:\n\n-------------\ngit rev-list BAD --not GOOD1 GOOD2...\n-------------\n\nAlso note that we don't require the commits that are kept to be\ndescendants of a \"good\" commit. So in the following example, commits W\nand Z will be kept:\n\n-------------\nG-W-W-W-B\n   /\nZ-Z\n-------------\n\n2) starting from the \"good\" ends of the graph, associate to each\n   commit the number of ancestors it has plus one\n\nFor example with the following graph where H is the \"bad\" commit and A\nand D are some parents of some \"good\" commits:\n\n-------------\nA-B-C\n     \\\n      F-G-H\n     /\nD---E\n-------------\n\nthis will give:\n\n-------------\n1 2 3\nA-B-C\n     \\6 7 8\n      F-G-H\n1   2/\nD---E\n-------------\n\n3) associate to each commit: min(X, N - X)\n\nwhere X is the value associated to the commit in step 2) and N is the\ntotal number of commits in the graph.\n\nIn the above example we have N = 8, so this will give:\n\n-------------\n1 2 3\nA-B-C\n     \\2 1 0\n      F-G-H\n1   2/\nD---E\n-------------\n\n4) the best bisection point is the commit with the highest associated\n   number\n\nSo in the above example the best bisection point is commit C.\n\n5) note that some shortcuts are implemented to speed up the algorithm\n\nAs we know N from the beginning, we know that min(X, N - X) can't be\ngreater than N/2. So during steps 2) and 3), if we would associate N/2\nto a commit, then we know this is the best bisection point. So in this\ncase we can just stop processing any other commit and return the\ncurrent commit.\n\nBisection algorithm debugging\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor any commit graph, you can see the number associated with each\ncommit using \"git rev-list --bisect-all\".\n\nFor example, for the above graph, a command like:\n\n-------------\n$ git rev-list --bisect-all BAD --not GOOD1 GOOD2\n-------------\n\nwould output something like:\n\n-------------\ne15b73ad3db9b48d7d1ade32f8cd23a751fe0ace (dist=3)\n15722f2fa328eaba97022898a305ffc8172db6b1 (dist=2)\n78e86cf3e850bd755bb71831f42e200626fbd1e0 (dist=2)\na1939d9a142de972094af4dde9a544e577ddef0e (dist=2)\n070eab2303024706f2924822bfec8b9847e4ac1b (dist=1)\na3864d4f32a3bf5ed177ddef598490a08760b70d (dist=1)\na41baa717dd74f1180abf55e9341bc7a0bb9d556 (dist=1)\n9e622a6dad403b71c40979743bb9d5be17b16bd6 (dist=0)\n-------------\n\nBisection algorithm discussed\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst let's define \"best bisection point\". We will say that a commit X\nis a best bisection point or a best bisection commit if knowing its\nstate (\"good\" or \"bad\") gives as much information as possible whether\nthe state of the commit happens to be \"good\" or \"bad\".\n\nThis means that the best bisection commits are the commits where the\nfollowing function is maximum:\n\n-------------\nf(X) = min(information_if_good(X), information_if_bad(X))\n-------------\n\nwhere information_if_good(X) is the information we get if X is good\nand information_if_bad(X) is the information we get if X is bad.\n\nNow we will suppose that there is only one \"first bad commit\". This\nmeans that all its descendants are \"bad\" and all the other commits are\n\"good\". And we will suppose that all commits have an equal probability\nof being good or bad, or of being the first bad commit, so knowing the\nstate of c commits gives always the same amount of information\nwherever these c commits are on the graph and whatever c is. (So we\nsuppose that these commits being for example on a branch or near a\ngood or a bad commit does not give more or less information).\n\nLet's also suppose that we have a cleaned up graph like one after step\n1) in the bisection algorithm above. This means that we can measure\n   the information we get in terms of number of commit we can remove\n   from the graph..\n\nAnd let's take a commit X in the graph.\n\nIf X is found to be \"good\", then we know that its ancestors are all\n\"good\", so we want to say that:\n\n-------------\ninformation_if_good(X) = number_of_ancestors(X)  (TRUE)\n-------------\n\nAnd this is true because at step 1) b) we remove the ancestors of the\n\"good\" commits.\n\nIf X is found to be \"bad\", then we know that its descendants are all\n\"bad\", so we want to say that:\n\n-------------\ninformation_if_bad(X) = number_of_descendants(X)  (WRONG)\n-------------\n\nBut this is wrong because at step 1) a) we keep only the ancestors of\nthe bad commit. So we get more information when a commit is marked as\n\"bad\", because we also know that the ancestors of the previous \"bad\"\ncommit that are not ancestors of the new \"bad\" commit are not the\nfirst bad commit. We don't know if they are good or bad, but we know\nthat they are not the first bad commit because they are not ancestor\nof the new \"bad\" commit.\n\nSo when a commit is marked as \"bad\" we know we can remove all the\ncommits in the graph except those that are ancestors of the new \"bad\"\ncommit. This means that:\n\n-------------\ninformation_if_bad(X) = N - number_of_ancestors(X)  (TRUE)\n-------------\n\nwhere N is the number of commits in the (cleaned up) graph.\n\nSo in the end this means that to find the best bisection commits we\nshould maximize the function:\n\n-------------\nf(X) = min(number_of_ancestors(X), N - number_of_ancestors(X))\n-------------\n\nAnd this is nice because at step 2) we compute number_of_ancestors(X)\nand so at step 3) we compute f(X).\n\nLet's take the following graph as an example:\n\n-------------\n            G-H-I-J\n           /       \\\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N\n-------------\n\nIf we compute the following non optimal function on it:\n\n-------------\ng(X) = min(number_of_ancestors(X), number_of_descendants(X))\n-------------\n\nwe get:\n\n-------------\n            4 3 2 1\n            G-H-I-J\n1 2 3 4 5 6/       \\0\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N\n            4 3 2 1\n-------------\n\nbut with the algorithm used by git bisect we get:\n\n-------------\n            7 7 6 5\n            G-H-I-J\n1 2 3 4 5 6/       \\0\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N\n            7 7 6 5\n-------------\n\nSo we chose G, H, K or L as the best bisection point, which is better\nthan F. Because if for example L is bad, then we will know not only\nthat L, M and N are bad but also that G, H, I and J are not the first\nbad commit (since we suppose that there is only one first bad commit\nand it must be an ancestor of L).\n\nSo the current algorithm seems to be the best possible given what we\ninitially supposed.\n\nSkip algorithm\n~~~~~~~~~~~~~~\n\nWhen some commits have been skipped (using \"git bisect skip\"), then\nthe bisection algorithm is the same for step 1) to 3). But then we use\nroughly the following steps:\n\n6) sort the commit by decreasing associated value\n\n7) if the first commit has not been skipped, we can return it and stop\n   here\n\n8) otherwise filter out all the skipped commits in the sorted list\n\n9) use a pseudo random number generator (PRNG) to generate a random\n   number between 0 and 1\n\n10) multiply this random number with its square root to bias it toward\n    0\n\n11) multiply the result by the number of commits in the filtered list\n    to get an index into this list\n\n12) return the commit at the computed index\n\nSkip algorithm discussed\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter step 7) (in the skip algorithm), we could check if the second\ncommit has been skipped and return it if it is not the case. And in\nfact that was the algorithm we used from when \"git bisect skip\" was\ndeveloped in Git version 1.5.4 (released on February 1st 2008) until\nGit version 1.6.4 (released July 29th 2009).\n\nBut Ingo Molnar and H. Peter Anvin (another well known linux kernel\ndeveloper) both complained that sometimes the best bisection points\nall happened to be in an area where all the commits are\nuntestable. And in this case the user was asked to test many\nuntestable commits, which could be very inefficient.\n\nIndeed untestable commits are often untestable because a breakage was\nintroduced at one time, and that breakage was fixed only after many\nother commits were introduced.\n\nThis breakage is of course most of the time unrelated to the breakage\nwe are trying to locate in the commit graph. But it prevents us to\nknow if the interesting \"bad behavior\" is present or not.\n\nSo it is a fact that commits near an untestable commit have a high\nprobability of being untestable themselves. And the best bisection\ncommits are often found together too (due to the bisection algorithm).\n\nThis is why it is a bad idea to just chose the next best unskipped\nbisection commit when the first one has been skipped.\n\nWe found that most commits on the graph may give quite a lot of\ninformation when they are tested. And the commits that will not on\naverage give a lot of information are the one near the good and bad\ncommits.\n\nSo using a PRNG with a bias to favor commits away from the good and\nbad commits looked like a good choice.\n\nOne obvious improvement to this algorithm would be to look for a\ncommit that has an associated value near the one of the best bisection\ncommit, and that is on another branch, before using the PRNG. Because\nif such a commit exists, then it is not very likely to be untestable\ntoo, so it will probably give more information than a nearly randomly\nchosen one.\n\nChecking merge bases\n~~~~~~~~~~~~~~~~~~~~\n\nThere is another tweak in the bisection algorithm that has not been\ndescribed in the \"bisection algorithm\" above.\n\nWe supposed in the previous examples that the \"good\" commits were\nancestors of the \"bad\" commit. But this is not a requirement of \"git\nbisect\".\n\nOf course the \"bad\" commit cannot be an ancestor of a \"good\" commit,\nbecause the ancestors of the good commits are supposed to be\n\"good\". And all the \"good\" commits must be related to the bad commit.\nThey cannot be on a branch that has no link with the branch of the\n\"bad\" commit. But it is possible for a good commit to be related to a\nbad commit and yet not be neither one of its ancestor nor one of its\ndescendants.\n\nFor example, there can be a \"main\" branch, and a \"dev\" branch that was\nforked of the main branch at a commit named \"D\" like this:\n\n-------------\nA-B-C-D-E-F-G  <--main\n       \\\n        H-I-J  <--dev\n-------------\n\nThe commit \"D\" is called a \"merge base\" for branch \"main\" and \"dev\"\nbecause it's the best common ancestor for these branches for a merge.\n\nNow let's suppose that commit J is bad and commit G is good and that\nwe apply the bisection algorithm like it has been previously\ndescribed.\n\nAs described in step 1) b) of the bisection algorithm, we remove all\nthe ancestors of the good commits because they are supposed to be good\ntoo.\n\nSo we would be left with only:\n\n-------------\nH-I-J\n-------------\n\nBut what happens if the first bad commit is \"B\" and if it has been\nfixed in the \"main\" branch by commit \"F\"?\n\nThe result of such a bisection would be that we would find that H is\nthe first bad commit, when in fact it's B. So that would be wrong!\n\nAnd yes it can happen in practice that people working on one branch\nare not aware that people working on another branch fixed a bug! It\ncould also happen that F fixed more than one bug or that it is a\nrevert of some big development effort that was not ready to be\nreleased.\n\nIn fact development teams often maintain both a development branch and\na maintenance branch, and it would be quite easy for them if \"git\nbisect\" just worked when they want to bisect a regression on the\ndevelopment branch that is not on the maintenance branch. They should\nbe able to start bisecting using:\n\n-------------\n$ git bisect start dev main\n-------------\n\nTo enable that additional nice feature, when a bisection is started\nand when some good commits are not ancestors of the bad commit, we\nfirst compute the merge bases between the bad and the good commits and\nwe chose these merge bases as the first commits that will be checked\nout and tested.\n\nIf it happens that one merge base is bad, then the bisection process\nis stopped with a message like:\n\n-------------\nThe merge base BBBBBB is bad.\nThis means the bug has been fixed between BBBBBB and [GGGGGG,...].\n-------------\n\nwhere BBBBBB is the sha1 hash of the bad merge base and [GGGGGG,...]\nis a comma separated list of the sha1 of the good commits.\n\nIf some of the merge bases are skipped, then the bisection process\ncontinues, but the following message is printed for each skipped merge\nbase:\n\n-------------\nWarning: the merge base between BBBBBB and [GGGGGG,...] must be skipped.\nSo we cannot be sure the first bad commit is between MMMMMM and BBBBBB.\nWe continue anyway.\n-------------\n\nwhere BBBBBB is the sha1 hash of the bad commit, MMMMMM is the sha1\nhash of the merge base that is skipped and [GGGGGG,...]  is a comma\nseparated list of the sha1 of the good commits.\n\nSo if there is no bad merge base, the bisection process continues as\nusual after this step.\n\nBest bisecting practices\n------------------------\n\nUsing test suites and git bisect together\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you both have a test suite and use git bisect, then it becomes less\nimportant to check that all tests pass after each commit. Though of\ncourse it is probably a good idea to have some checks to avoid\nbreaking too many things because it could make bisecting other bugs\nmore difficult.\n\nYou can focus your efforts to check at a few points (for example rc\nand beta releases) that all the T test cases pass for all the N\nconfigurations. And when some tests don't pass you can use \"git\nbisect\" (or better \"git bisect run\"). So you should perform roughly:\n\n-------------\nc * N * T + b * M * log2(M) tests\n-------------\n\nwhere c is the number of rounds of test (so a small constant) and b is\nthe ratio of bug per commit (hopefully a small constant too).\n\nSo of course it's much better as it's O(N * T) vs O(N * T * M) if\nyou would test everything after each commit.\n\nThis means that test suites are good to prevent some bugs from being\ncommitted and they are also quite good to tell you that you have some\nbugs. But they are not so good to tell you where some bugs have been\nintroduced. To tell you that efficiently, git bisect is needed.\n\nThe other nice thing with test suites, is that when you have one, you\nalready know how to test for bad behavior. So you can use this\nknowledge to create a new test case for \"git bisect\" when it appears\nthat there is a regression. So it will be easier to bisect the bug and\nfix it. And then you can add the test case you just created to your\ntest suite.\n\nSo if you know how to create test cases and how to bisect, you will be\nsubject to a virtuous circle:\n\nmore tests => easier to create tests => easier to bisect => more tests\n\nSo test suites and \"git bisect\" are complementary tools that are very\npowerful and efficient when used together.\n\nBisecting build failures\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can very easily automatically bisect broken builds using something\nlike:\n\n-------------\n$ git bisect start BAD GOOD\n$ git bisect run make\n-------------\n\nPassing sh -c \"some commands\" to \"git bisect run\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor example:\n\n-------------\n$ git bisect run sh -c \"make || exit 125; ./my_app | grep 'good output'\"\n-------------\n\nOn the other hand if you do this often, then it can be worth having\nscripts to avoid too much typing.\n\nFinding performance regressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is an example script that comes slightly modified from a real\nworld script used by Junio Hamano <<4>>.\n\nThis script can be passed to \"git bisect run\" to find the commit that\nintroduced a performance regression:\n\n-------------\n#!/bin/sh\n\n# Build errors are not what I am interested in.\nmake my_app || exit 255\n\n# We are checking if it stops in a reasonable amount of time, so\n# let it run in the background...\n\n./my_app >log 2>&1 &\n\n# ... and grab its process ID.\npid=$!\n\n# ... and then wait for sufficiently long.\nsleep $NORMAL_TIME\n\n# ... and then see if the process is still there.\nif kill -0 $pid\nthen\n\t# It is still running -- that is bad.\n\tkill $pid; sleep 1; kill $pid;\n\texit 1\nelse\n\t# It has already finished (the $pid process was no more),\n\t# and we are happy.\n\texit 0"
        },
        "fi": {
            "name": "fi",
            "start_index": 32436,
            "end_index": 32454,
            "value": "\nFollowing general best practices\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is obviously a good idea not to have commits with changes that\nknowingly break things, even if some other commits later fix the\nbreakage.\n\nIt is also a good idea when using any VCS to have only one small\nlogical change in each commit.\n\nThe smaller the changes in your commit, the most effective \"git\nbisect\" will be. And you will probably need \"git bisect\" less in the\nfirst place, as small changes are easier to review even if they are\nonly reviewed by the committer.\n\nAnother good idea is to have good commit messages. They can be very\nhelpful to understand why some changes were made.\n\nThese general best practices are very helpful if you bisect often.\n\nAvoiding bug prone merges\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst merges by themselves can introduce some regressions even when\nthe merge needs no source code conflict resolution. This is because a\nsemantic change can happen in one branch while the other branch is not\naware of it.\n\nFor example one branch can change the semantic of a function while the\nother branch add more calls to the same function.\n\nThis is made much worse if many files have to be fixed to resolve\nconflicts. That's why such merges are called \"evil merges\". They can\nmake regressions very difficult to track down. It can even be\nmisleading to know the first bad commit if it happens to be such a\nmerge, because people might think that the bug comes from bad conflict\nresolution when it comes from a semantic change in one branch.\n\nAnyway \"git rebase\" can be used to linearize history. This can be used\neither to avoid merging in the first place. Or it can be used to\nbisect on a linear history instead of the non linear one, as this\nshould give more information in case of a semantic change in one\nbranch.\n\nMerges can be also made simpler by using smaller branches or by using\nmany topic branches instead of only long version related branches.\n\nAnd testing can be done more often in special integration branches\nlike linux-next for the linux kernel.\n\nAdapting your work-flow\n~~~~~~~~~~~~~~~~~~~~~~~\n\nA special work-flow to process regressions can give great results.\n\nHere is an example of a work-flow used by Andreas Ericsson:\n\n* write, in the test suite, a test script that exposes the regression\n* use \"git bisect run\" to find the commit that introduced it\n* fix the bug that is often made obvious by the previous step\n* commit both the fix and the test script (and if needed more tests)\n\nAnd here is what Andreas said about this work-flow <<5>>:\n\n_____________\nTo give some hard figures, we used to have an average report-to-fix\ncycle of 142.6 hours (according to our somewhat weird bug-tracker\nwhich just measures wall-clock time). Since we moved to Git, we've\nlowered that to 16.2 hours. Primarily because we can stay on top of\nthe bug fixing now, and because everyone's jockeying to get to fix\nbugs (we're quite proud of how lazy we are to let Git find the bugs\nfor us). Each new release results in ~40% fewer bugs (almost certainly\ndue to how we now feel about writing tests).\n_____________\n\nClearly this work-flow uses the virtuous circle between test suites\nand \"git bisect\". In fact it makes it the standard procedure to deal\nwith regression.\n\nIn other messages Andreas says that they also use the \"best practices\"\ndescribed above: small logical commits, topic branches, no evil\nmerge,... These practices all improve the bisectability of the commit\ngraph, by making it easier and more useful to bisect.\n\nSo a good work-flow should be designed around the above points. That\nis making bisecting easier, more useful and standard.\n\nInvolving QA people and if possible end users\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOne nice about \"git bisect\" is that it is not only a developer\ntool. It can effectively be used by QA people or even end users (if\nthey have access to the source code or if they can get access to all\nthe builds).\n\nThere was a discussion at one point on the linux kernel mailing list\nof whether it was ok to always ask end user to bisect, and very good\npoints were made to support the point of view that it is ok.\n\nFor example David Miller wrote <<6>>:\n\n_____________\nWhat people don't get is that this is a situation where the \"end node\nprinciple\" applies. When you have limited resources (here: developers)\nyou don't push the bulk of the burden upon them. Instead you push\nthings out to the resource you have a lot of, the end nodes (here:\nusers), so that the situation actually scales.\n_____________\n\nThis means that it is often \"cheaper\" if QA people or end users can do\nit.\n\nWhat is interesting too is that end users that are reporting bugs (or\nQA people that reproduced a bug) have access to the environment where\nthe bug happens. So they can often more easily reproduce a\nregression. And if they can bisect, then more information will be\nextracted from the environment where the bug happens, which means that\nit will be easier to understand and then fix the bug.\n\nFor open source projects it can be a good way to get more useful\ncontributions from end users, and to introduce them to QA and\ndevelopment activities.\n\nUsing complex scripts\n~~~~~~~~~~~~~~~~~~~~~\n\nIn some cases like for kernel development it can be worth developing\ncomplex scripts to be able to fully automate bisecting.\n\nHere is what Ingo Molnar says about that <<7>>:\n\n_____________\ni have a fully automated bootup-hang bisection script. It is based on\n\"git-bisect run\". I run the script, it builds and boots kernels fully\nautomatically, and when the bootup fails (the script notices that via\nthe serial log, which it continuously watches - or via a timeout, if\nthe system does not come up within 10 minutes it's a \"bad\" kernel),\nthe script raises my attention via a beep and i power cycle the test\nbox. (yeah, i should make use of a managed power outlet to 100%\nautomate it)\n_____________\n\nCombining test suites, git bisect and other systems together\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe have seen that test suites and git bisect are very powerful when\nused together. It can be even more powerful if you can combine them\nwith other systems.\n\nFor example some test suites could be run automatically at night with\nsome unusual (or even random) configurations. And if a regression is\nfound by a test suite, then \"git bisect\" can be automatically\nlaunched, and its result can be emailed to the author of the first bad\ncommit found by \"git bisect\", and perhaps other people too. And a new\nentry in the bug tracking system could be automatically created too.\n\n\nThe future of bisecting\n-----------------------\n\n\"git replace\"\n~~~~~~~~~~~~~\n\nWe saw earlier that \"git bisect skip\" is now using a PRNG to try to\navoid areas in the commit graph where commits are untestable. The\nproblem is that sometimes the first bad commit will be in an\nuntestable area.\n\nTo simplify the discussion we will suppose that the untestable area is\na simple string of commits and that it was created by a breakage\nintroduced by one commit (let's call it BBC for bisect breaking\ncommit) and later fixed by another one (let's call it BFC for bisect\nfixing commit).\n\nFor example:\n\n-------------\n...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n-------------\n\nwhere we know that Y is good and BFC is bad, and where BBC and X1 to\nX6 are untestable.\n\nIn this case if you are bisecting manually, what you can do is create\na special branch that starts just before the BBC. The first commit in\nthis branch should be the BBC with the BFC squashed into it. And the\nother commits in the branch should be the commits between BBC and BFC\nrebased on the first commit of the branch and then the commit after\nBFC also rebased on.\n\nFor example:\n\n-------------\n      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'\n     /\n...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n-------------\n\nwhere commits quoted with ' have been rebased.\n\nYou can easily create such a branch with Git using interactive rebase.\n\nFor example using:\n\n-------------\n$ git rebase -i Y Z\n-------------\n\nand then moving BFC after BBC and squashing it.\n\nAfter that you can start bisecting as usual in the new branch and you\nshould eventually find the first bad commit.\n\nFor example:\n\n-------------\n$ git bisect start Z' Y\n-------------\n\nIf you are using \"git bisect run\", you can use the same manual fix up\nas above, and then start another \"git bisect run\" in the special\nbranch. Or as the \"git bisect\" man page says, the script passed to\n\"git bisect run\" can apply a patch before it compiles and test the\nsoftware <<8>>. The patch should turn a current untestable commits\ninto a testable one. So the testing will result in \"good\" or \"bad\" and\n\"git bisect\" will be able to find the first bad commit. And the script\nshould not forget to remove the patch once the testing is done before\nexiting from the script.\n\n(Note that instead of a patch you can use \"git cherry-pick BFC\" to\napply the fix, and in this case you should use \"git reset --hard\nHEAD^\" to revert the cherry-pick after testing and before returning\nfrom the script.)\n\nBut the above ways to work around untestable areas are a little bit\nclunky. Using special branches is nice because these branches can be\nshared by developers like usual branches, but the risk is that people\nwill get many such branches. And it disrupts the normal \"git bisect\"\nwork-flow. So, if you want to use \"git bisect run\" completely\nautomatically, you have to add special code in your script to restart\nbisection in the special branches.\n\nAnyway one can notice in the above special branch example that the Z'\nand Z commits should point to the same source code state (the same\n\"tree\" in git parlance). That's because Z' result from applying the\nsame changes as Z just in a slightly different order.\n\nSo if we could just \"replace\" Z by Z' when we bisect, then we would\nnot need to add anything to a script. It would just work for anyone in\nthe project sharing the special branches and the replacements.\n\nWith the example above that would give:\n\n-------------\n      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'-...\n     /\n...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z\n-------------\n\nThat's why the \"git replace\" command was created. Technically it\nstores replacements \"refs\" in the \"refs/replace/\" hierarchy. These\n\"refs\" are like branches (that are stored in \"refs/heads/\") or tags\n(that are stored in \"refs/tags\"), and that means that they can\nautomatically be shared like branches or tags among developers.\n\n\"git replace\" is a very powerful mechanism. It can be used to fix\ncommits in already released history, for example to change the commit\nmessage or the author. And it can also be used instead of git \"grafts\"\nto link a repository with another old repository.\n\nIn fact it's this last feature that \"sold\" it to the Git community, so\nit is now in the \"master\" branch of Git's Git repository and it should\nbe released in Git 1.6.5 in October or November 2009.\n\nOne problem with \"git replace\" is that currently it stores all the\nreplacements refs in \"refs/replace/\", but it would be perhaps better\nif the replacement refs that are useful only for bisecting would be in\n\"refs/replace/bisect/\". This way the replacement refs could be used\nonly for bisecting, while other refs directly in \"refs/replace/\" would\nbe used nearly all the time.\n\nBisecting sporadic bugs\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAnother possible improvement to \"git bisect\" would be to optionally\nadd some redundancy to the tests performed so that it would be more\nreliable when tracking sporadic bugs.\n\nThis has been requested by some kernel developers because some bugs\ncalled sporadic bugs do not appear in all the kernel builds because\nthey are very dependent on the compiler output.\n\nThe idea is that every 3 test for example, \"git bisect\" could ask the\nuser to test a commit that has already been found to be \"good\" or\n\"bad\" (because one of its descendants or one of its ancestors has been\nfound to be \"good\" or \"bad\" respectively). If it happens that a commit\nhas been previously incorrectly classified then the bisection can be\naborted early, hopefully before too many mistakes have been made. Then\nthe user will have to look at what happened and then restart the\nbisection using a fixed bisect log.\n\nThere is already a project called BBChop created by Ealdwulf Wuffinga\non Github that does something like that using Bayesian Search Theory\n<<9>>:\n\n_____________\nBBChop is like 'git bisect' (or equivalent), but works when your bug\nis intermittent. That is, it works in the presence of false negatives\n(when a version happens to work this time even though it contains the\nbug). It assumes that there are no false positives (in principle, the\nsame approach would work, but adding it may be non-trivial).\n_____________\n\nBut BBChop is independent of any VCS and it would be easier for Git\nusers to have something integrated in Git.\n"
        },
        "Conclusion": {
            "name": "Conclusion",
            "start_index": 45278,
            "end_index": 45301,
            "value": "\nWe have seen that regressions are an important problem, and that \"git\nbisect\" has nice features that complement very well practices and\nother tools, especially test suites, that are generally used to fight\nregressions. But it might be needed to change some work-flows and\n(bad) habits to get the most out of it.\n\nSome improvements to the algorithms inside \"git bisect\" are possible\nand some new features could help in some cases, but overall \"git\nbisect\" works already very well, is used a lot, and is already very\nuseful. To back up that last claim, let's give the final word to Ingo\nMolnar when he was asked by the author how much time does he think\n\"git bisect\" saves him when he uses it:\n\n_____________\na _lot_.\n\nAbout ten years ago did i do my first 'bisection' of a Linux patch\nqueue. That was prior the Git (and even prior the BitKeeper) days. I\nliterally days spent sorting out patches, creating what in essence\nwere standalone commits that i guessed to be related to that bug.\n\nIt was a tool of absolute last resort. I'd rather spend days looking\nat printk output than do a manual 'patch bisection'.\n\nWith Git bisect it's a breeze: in the best case i can get a ~15 step\nkernel bisection done in 20-30 minutes, in an automated way. Even with\nmanual help or when bisecting multiple, overlapping bugs, it's rarely\nmore than an hour.\n\nIn fact it's invaluable because there are bugs i would never even\n_try_ to debug if it wasn't for git bisect. In the past there were bug\npatterns that were immediately hopeless for me to debug - at best i\ncould send the crash/bug signature to lkml and hope that someone else\ncan think of something.\n\nAnd even if a bisection fails today it tells us something valuable\nabout the bug: that it's non-deterministic - timing or kernel image\nlayout dependent.\n\nSo git bisect is unconditional goodness - and feel free to quote that\n;-)\n_____________\n"
        },
        "Acknowledgments": {
            "name": "Acknowledgments",
            "start_index": 47184,
            "end_index": 47217,
            "value": "\nMany thanks to Junio Hamano for his help in reviewing this paper, for\nreviewing the patches I sent to the Git mailing list, for discussing\nsome ideas and helping me improve them, for improving \"git bisect\" a\nlot and for his awesome work in maintaining and developing Git.\n\nMany thanks to Ingo Molnar for giving me very useful information that\nappears in this paper, for commenting on this paper, for his\nsuggestions to improve \"git bisect\" and for evangelizing \"git bisect\"\non the linux kernel mailing lists.\n\nMany thanks to Linus Torvalds for inventing, developing and\nevangelizing \"git bisect\", Git and Linux.\n\nMany thanks to the many other great people who helped one way or\nanother when I worked on Git, especially to Andreas Ericsson, Johannes\nSchindelin, H. Peter Anvin, Daniel Barkalow, Bill Lear, John Hawley,\nShawn O. Pierce, Jeff King, Sam Vilain, Jon Seymour.\n\nMany thanks to the Linux-Kongress program committee for choosing the\nauthor to given a talk and for publishing this paper.\n"
        },
        "References": {
            "name": "References",
            "start_index": 48213,
            "end_index": 48236,
            "value": "\n- [[[1]]] https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf['The Economic Impacts of Inadequate Infratructure for Software Testing'.  Nist Planning Report 02-3], see Executive Summary and Chapter 8.\n- [[[2]]] http://www.oracle.com/technetwork/java/codeconvtoc-136057.html['Code Conventions for the Java Programming Language'. Sun Microsystems.]\n- [[[3]]] https://en.wikipedia.org/wiki/Software_maintenance['Software maintenance'. Wikipedia.]\n- [[[4]]] https://lore.kernel.org/git/7vps5xsbwp.fsf_-_@assigned-by-dhcp.cox.net/[Junio C Hamano. 'Automated bisect success story'.]\n- [[[5]]] https://lwn.net/Articles/317154/[Christian Couder. 'Fully automated bisecting with \"git bisect run\"'. LWN.net.]\n- [[[6]]] https://lwn.net/Articles/277872/[Jonathan Corbet. 'Bisection divides users and developers'. LWN.net.]\n- [[[7]]] https://lore.kernel.org/lkml/20071207113734.GA14598@elte.hu/[Ingo Molnar. 'Re: BUG 2.6.23-rc3 can't see sd partitions on Alpha'. Linux-kernel mailing list.]\n- [[[8]]] https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html[Junio C Hamano and the git-list. 'git-bisect(1) Manual Page'. Linux Kernel Archives.]\n- [[[9]]] https://github.com/Ealdwulf/bbchop[Ealdwulf. 'bbchop'. GitHub.]\n"
        }
    },
    "git-bisect.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-bisect - Use binary search to find the commit that introduced a bug\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 112,
            "end_index": 131,
            "value": "[verse]\n'git bisect' <subcommand> <options>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 175,
            "end_index": 200,
            "value": "The command takes various subcommands, and different options depending\non the subcommand:\n\n git bisect start [--term-{new,bad}=<term> --term-{old,good}=<term>]\n\t\t  [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]\n git bisect (bad|new|<term-new>) [<rev>]\n git bisect (good|old|<term-old>) [<rev>...]\n git bisect terms [--term-good | --term-bad]\n git bisect skip [(<rev>|<range>)...]\n git bisect reset [<commit>]\n git bisect (visualize|view)\n git bisect replay <logfile>\n git bisect log\n git bisect run <cmd>...\n git bisect help\n\nThis command uses a binary search algorithm to find which commit in\nyour project's history introduced a bug. You use it by first telling\nit a \"bad\" commit that is known to contain the bug, and a \"good\"\ncommit that is known to be before the bug was introduced. Then `git\nbisect` picks a commit between those two endpoints and asks you\nwhether the selected commit is \"good\" or \"bad\". It continues narrowing\ndown the range until it finds the exact commit that introduced the\nchange.\n\nIn fact, `git bisect` can be used to find the commit that changed\n*any* property of your project; e.g., the commit that fixed a bug, or\nthe commit that caused a benchmark's performance to improve. To\nsupport this more general usage, the terms \"old\" and \"new\" can be used\nin place of \"good\" and \"bad\", or you can choose your own terms. See\nsection \"Alternate terms\" below for more information.\n\nBasic bisect commands: start, bad, good\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs an example, suppose you are trying to find the commit that broke a\nfeature that was known to work in version `v2.6.13-rc2` of your\nproject. You start a bisect session as follows:\n\n------------------------------------------------\n$ git bisect start\n$ git bisect bad                 # Current version is bad\n$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good\n------------------------------------------------\n\nOnce you have specified at least one bad and one good commit, `git\nbisect` selects a commit in the middle of that range of history,\nchecks it out, and outputs something similar to the following:\n\n------------------------------------------------\nBisecting: 675 revisions left to test after this (roughly 10 steps)\n------------------------------------------------\n\nYou should now compile the checked-out version and test it. If that\nversion works correctly, type\n\n------------------------------------------------\n$ git bisect good\n------------------------------------------------\n\nIf that version is broken, type\n\n------------------------------------------------\n$ git bisect bad\n------------------------------------------------\n\nThen `git bisect` will respond with something like\n\n------------------------------------------------\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n------------------------------------------------\n\nKeep repeating the process: compile the tree, test it, and depending\non whether it is good or bad run `git bisect good` or `git bisect bad`\nto ask for the next commit that needs testing.\n\nEventually there will be no more revisions left to inspect, and the\ncommand will print out a description of the first bad commit. The\nreference `refs/bisect/bad` will be left pointing at that commit.\n\n\nBisect reset\n~~~~~~~~~~~~\n\nAfter a bisect session, to clean up the bisection state and return to\nthe original HEAD, issue the following command:\n\n------------------------------------------------\n$ git bisect reset\n------------------------------------------------\n\nBy default, this will return your tree to the commit that was checked\nout before `git bisect start`.  (A new `git bisect start` will also do\nthat, as it cleans up the old bisection state.)\n\nWith an optional argument, you can return to a different commit\ninstead:\n\n------------------------------------------------\n$ git bisect reset <commit>\n------------------------------------------------\n\nFor example, `git bisect reset bisect/bad` will check out the first\nbad revision, while `git bisect reset HEAD` will leave you on the\ncurrent bisection commit and avoid switching commits at all.\n\n\nAlternate terms\n~~~~~~~~~~~~~~~\n\nSometimes you are not looking for the commit that introduced a\nbreakage, but rather for a commit that caused a change between some\nother \"old\" state and \"new\" state. For example, you might be looking\nfor the commit that introduced a particular fix. Or you might be\nlooking for the first commit in which the source-code filenames were\nfinally all converted to your company's naming standard. Or whatever.\n\nIn such cases it can be very confusing to use the terms \"good\" and\n\"bad\" to refer to \"the state before the change\" and \"the state after\nthe change\". So instead, you can use the terms \"old\" and \"new\",\nrespectively, in place of \"good\" and \"bad\". (But note that you cannot\nmix \"good\" and \"bad\" with \"old\" and \"new\" in a single session.)\n\nIn this more general usage, you provide `git bisect` with a \"new\"\ncommit that has some property and an \"old\" commit that doesn't have that\nproperty. Each time `git bisect` checks out a commit, you test if that\ncommit has the property. If it does, mark the commit as \"new\";\notherwise, mark it as \"old\". When the bisection is done, `git bisect`\nwill report which commit introduced the property.\n\nTo use \"old\" and \"new\" instead of \"good\" and bad, you must run `git\nbisect start` without commits as argument and then run the following\ncommands to add the commits:\n\n------------------------------------------------\ngit bisect old [<rev>]\n------------------------------------------------\n\nto indicate that a commit was before the sought change, or\n\n------------------------------------------------\ngit bisect new [<rev>...]\n------------------------------------------------\n\nto indicate that it was after.\n\nTo get a reminder of the currently used terms, use\n\n------------------------------------------------\ngit bisect terms\n------------------------------------------------\n\nYou can get just the old (respectively new) term with `git bisect terms\n--term-old` or `git bisect terms --term-good`.\n\nIf you would like to use your own terms instead of \"bad\"/\"good\" or\n\"new\"/\"old\", you can choose any names you like (except existing bisect\nsubcommands like `reset`, `start`, ...) by starting the\nbisection using\n\n------------------------------------------------\ngit bisect start --term-old <term-old> --term-new <term-new>\n------------------------------------------------\n\nFor example, if you are looking for a commit that introduced a\nperformance regression, you might use\n\n------------------------------------------------\ngit bisect start --term-old fast --term-new slow\n------------------------------------------------\n\nOr if you are looking for the commit that fixed a bug, you might use\n\n------------------------------------------------\ngit bisect start --term-new fixed --term-old broken\n------------------------------------------------\n\nThen, use `git bisect <term-old>` and `git bisect <term-new>` instead\nof `git bisect good` and `git bisect bad` to mark commits.\n\nBisect visualize/view\n~~~~~~~~~~~~~~~~~~~~~\n\nTo see the currently remaining suspects in 'gitk', issue the following\ncommand during the bisection process (the subcommand `view` can be used\nas an alternative to `visualize`):\n\n------------\n$ git bisect visualize\n------------\n\nIf the `DISPLAY` environment variable is not set, 'git log' is used\ninstead.  You can also give command-line options such as `-p` and\n`--stat`.\n\n------------\n$ git bisect visualize --stat\n------------\n\nBisect log and bisect replay\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter having marked revisions as good or bad, issue the following\ncommand to show what has been done so far:\n\n------------\n$ git bisect log\n------------\n\nIf you discover that you made a mistake in specifying the status of a\nrevision, you can save the output of this command to a file, edit it to\nremove the incorrect entries, and then issue the following commands to\nreturn to a corrected state:\n\n------------\n$ git bisect reset\n$ git bisect replay that-file\n------------\n\nAvoiding testing a commit\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf, in the middle of a bisect session, you know that the suggested\nrevision is not a good one to test (e.g. it fails to build and you\nknow that the failure does not have anything to do with the bug you\nare chasing), you can manually select a nearby commit and test that\none instead.\n\nFor example:\n\n------------\n$ git bisect good/bad\t\t\t# previous round was good or bad.\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n$ git bisect visualize\t\t\t# oops, that is uninteresting.\n$ git reset --hard HEAD~3\t\t# try 3 revisions before what\n\t\t\t\t\t# was suggested\n------------\n\nThen compile and test the chosen revision, and afterwards mark\nthe revision as good or bad in the usual manner.\n\nBisect skip\n~~~~~~~~~~~\n\nInstead of choosing a nearby commit by yourself, you can ask Git to do\nit for you by issuing the command:\n\n------------\n$ git bisect skip                 # Current version cannot be tested\n------------\n\nHowever, if you skip a commit adjacent to the one you are looking for,\nGit will be unable to tell exactly which of those commits was the\nfirst bad one.\n\nYou can also skip a range of commits, instead of just one commit,\nusing range notation. For example:\n\n------------\n$ git bisect skip v2.5..v2.6\n------------\n\nThis tells the bisect process that no commit after `v2.5`, up to and\nincluding `v2.6`, should be tested.\n\nNote that if you also want to skip the first commit of the range you\nwould issue the command:\n\n------------\n$ git bisect skip v2.5 v2.5..v2.6\n------------\n\nThis tells the bisect process that the commits between `v2.5` and\n`v2.6` (inclusive) should be skipped.\n\n\nCutting down bisection by giving more parameters to bisect start\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can further cut down the number of trials, if you know what part of\nthe tree is involved in the problem you are tracking down, by specifying\npath parameters when issuing the `bisect start` command:\n\n------------\n$ git bisect start -- arch/i386 include/asm-i386\n------------\n\nIf you know beforehand more than one good commit, you can narrow the\nbisect space down by specifying all of the good commits immediately after\nthe bad commit when issuing the `bisect start` command:\n\n------------\n$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n                   # v2.6.20-rc6 is bad\n                   # v2.6.20-rc4 and v2.6.20-rc1 are good\n------------\n\nBisect run\n~~~~~~~~~~\n\nIf you have a script that can tell if the current source code is good\nor bad, you can bisect by issuing the command:\n\n------------\n$ git bisect run my_script arguments\n------------\n\nNote that the script (`my_script` in the above example) should exit\nwith code 0 if the current source code is good/old, and exit with a\ncode between 1 and 127 (inclusive), except 125, if the current source\ncode is bad/new.\n\nAny other exit code will abort the bisect process. It should be noted\nthat a program that terminates via `exit(-1)` leaves $? = 255, (see the\nexit(3) manual page), as the value is chopped with `& 0377`.\n\nThe special exit code 125 should be used when the current source code\ncannot be tested. If the script exits with this code, the current\nrevision will be skipped (see `git bisect skip` above). 125 was chosen\nas the highest sensible value to use for this purpose, because 126 and 127\nare used by POSIX shells to signal specific error status (127 is for\ncommand not found, 126 is for command found but not executable--these\ndetails do not matter, as they are normal errors in the script, as far as\n`bisect run` is concerned).\n\nYou may often find that during a bisect session you want to have\ntemporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a\nheader file, or \"revision that does not have this commit needs this\npatch applied to work around another problem this bisection is not\ninterested in\") applied to the revision being tested.\n\nTo cope with such a situation, after the inner 'git bisect' finds the\nnext revision to test, the script can apply the patch\nbefore compiling, run the real test, and afterwards decide if the\nrevision (possibly with the needed patch) passed the test and then\nrewind the tree to the pristine state.  Finally the script should exit\nwith the status of the real test to let the `git bisect run` command loop\ndetermine the eventual outcome of the bisect session.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 12649,
            "end_index": 12666,
            "value": "\n--no-checkout::\n+\nDo not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update a special reference named `BISECT_HEAD` to make\nit point to the commit that should be tested.\n+\nThis option may be useful when the test you would perform in each step\ndoes not require a checked out tree.\n+\nIf the repository is bare, `--no-checkout` is assumed.\n\n--first-parent::\n+\nFollow only the first parent commit upon seeing a merge commit.\n+\nIn detecting regressions introduced through the merging of a branch, the merge\ncommit will be identified as introduction of the bug and its ancestors will be\nignored.\n+\nThis option is particularly useful in avoiding false positives when a merged\nbranch contained broken or non-buildable commits, but the merge itself was OK.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 13457,
            "end_index": 13476,
            "value": "\n* Automatically bisect a broken build between v1.2 and HEAD:\n+\n------------\n$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n$ git bisect run make                # \"make\" builds the app\n$ git bisect reset                   # quit the bisect session\n------------\n\n* Automatically bisect a test failure between origin and HEAD:\n+\n------------\n$ git bisect start HEAD origin --    # HEAD is bad, origin is good\n$ git bisect run make test           # \"make test\" builds and tests\n$ git bisect reset                   # quit the bisect session\n------------\n\n* Automatically bisect a broken test case:\n+\n------------\n$ cat ~/test.sh\n#!/bin/sh\nmake || exit 125                     # this skips broken builds\n~/check_test_case.sh                 # does the test case pass?\n$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run ~/test.sh\n$ git bisect reset                   # quit the bisect session\n------------\n+\nHere we use a `test.sh` custom script. In this script, if `make`\nfails, we skip the current commit.\n`check_test_case.sh` should `exit 0` if the test case passes,\nand `exit 1` otherwise.\n+\nIt is safer if both `test.sh` and `check_test_case.sh` are\noutside the repository to prevent interactions between the bisect,\nmake and test processes and the scripts.\n\n* Automatically bisect with temporary modifications (hot-fix):\n+\n------------\n$ cat ~/test.sh\n#!/bin/sh\n\n# tweak the working tree by merging the hot-fix branch\n# and then attempt a build\nif\tgit merge --no-commit --no-ff hot-fix &&\n\tmake\nthen\n\t# run project specific test and report its status\n\t~/check_test_case.sh\n\tstatus=$?\nelse\n\t# tell the caller this is untestable\n\tstatus=125\nfi\n\n# undo the tweak to allow clean flipping to the next commit\ngit reset --hard\n\n# return control\nexit $status\n------------\n+\nThis applies modifications from a hot-fix branch before each test run,\ne.g. in case your build or test environment changed so that older\nrevisions may need a fix which newer ones have already. (Make sure the\nhot-fix branch is based off a commit which is contained in all revisions\nwhich you are bisecting, so that the merge does not pull in too much, or\nuse `git cherry-pick` instead of `git merge`.)\n\n* Automatically bisect a broken test case:\n+\n------------\n$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n$ git bisect reset                   # quit the bisect session\n------------\n+\nThis shows that you can do without a run script if you write the test\non a single line.\n\n* Locate a good region of the object graph in a damaged repository\n+\n------------\n$ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout\n$ git bisect run sh -c '\n\tGOOD=$(git for-each-ref \"--format=%(objectname)\" refs/bisect/good-*) &&\n\tgit rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&\n\tgit pack-objects --stdout >/dev/null <tmp.$$\n\trc=$?\n\trm -f tmp.$$\n\ttest $rc = 0'\n\n$ git bisect reset                   # quit the bisect session\n------------\n+\nIn this case, when 'git bisect run' finishes, bisect/bad will refer to a commit that\nhas at least one parent whose reachable graph is fully traversable in the sense\nrequired by 'git pack objects'.\n\n* Look for a fix instead of a regression in the code\n+\n------------\n$ git bisect start\n$ git bisect new HEAD    # current commit is marked as new\n$ git bisect old HEAD~10 # the tenth commit from now is marked as old\n------------\n+\nor:\n------------\n$ git bisect start --term-old broken --term-new fixed\n$ git bisect fixed\n$ git bisect broken HEAD~10\n------------\n\nGetting help\n~~~~~~~~~~~~\n\nUse `git bisect` to get a short usage description, and `git bisect\nhelp` or `git bisect -h` to get a long usage description.\n\nSEE ALSO\n--------\nlink:git-bisect-lk2009.html[Fighting regressions with git bisect],\nlinkgit:git-blame[1].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 17359,
            "end_index": 17368,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-blame.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-blame - Show what revision and author last modified each line of a file\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 113,
            "end_index": 132,
            "value": "[verse]\n'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n\t    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n\t    [--ignore-rev <rev>] [--ignore-revs-file <file>]\n\t    [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>..<rev>]\n\t    [--] <file>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 456,
            "end_index": 481,
            "value": "\nAnnotates each line in the given file with information from the revision which\nlast modified the line. Optionally, start annotating from the given revision.\n\nWhen specified one or more times, `-L` restricts annotation to the requested\nlines.\n\nThe origin of lines is automatically followed across whole-file\nrenames (currently there is no option to turn the rename-following\noff). To follow lines moved from one file to another, or to follow\nlines that were copied and pasted from another file, etc., see the\n`-C` and `-M` options.\n\nThe report does not tell you anything about lines which have been deleted or\nreplaced; you need to use a tool such as 'git diff' or the \"pickaxe\"\ninterface briefly mentioned in the following paragraph.\n\nApart from supporting file annotation, Git also supports searching the\ndevelopment history for when a code snippet occurred in a change. This makes it\npossible to track when a code snippet was added to a file, moved or copied\nbetween files, and eventually deleted or replaced. It works by searching for\na text string in the diff. A small example of the pickaxe interface\nthat searches for `blame_usage`:\n\n-----------------------------------------------------------------------------\n$ git log --pretty=oneline -S'blame_usage'\n5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>\nea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output\n-----------------------------------------------------------------------------\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1955,
            "end_index": 1972,
            "value": "\ninclude::blame-options.txt[]\n\n-c::\n\tUse the same output mode as linkgit:git-annotate[1] (Default: off).\n\n--score-debug::\n\tInclude debugging information related to the movement of\n\tlines between files (see `-C`) and lines moved within a\n\tfile (see `-M`).  The first number listed is the score.\n\tThis is the number of alphanumeric characters detected\n\tas having been moved between or within files.  This must be above\n\ta certain threshold for 'git blame' to consider those lines\n\tof code to have been moved.\n\n-f::\n--show-name::\n\tShow the filename in the original commit.  By default\n\tthe filename is shown if there is any line that came from a\n\tfile with a different name, due to rename detection.\n\n-n::\n--show-number::\n\tShow the line number in the original commit (Default: off).\n\n-s::\n\tSuppress the author name and timestamp from the output.\n\n-e::\n--show-email::\n\tShow the author email instead of author name (Default: off).\n\tThis can also be controlled via the `blame.showEmail` config\n\toption.\n\n-w::\n\tIgnore whitespace when comparing the parent's version and\n\tthe child's to find where the lines came from.\n\n--abbrev=<n>::\n\tInstead of using the default 7+1 hexadecimal digits as the\n\tabbreviated object name, use <m>+1 digits, where <m> is at\n\tleast <n> but ensures the commit object names are unique.\n\tNote that 1 column\n\tis used for a caret to mark the boundary commit.\n\n\nTHE PORCELAIN FORMAT\n--------------------\n\nIn this format, each line is output after a header; the\nheader at the minimum has the first line which has:\n\n- 40-byte SHA-1 of the commit the line is attributed to;\n- the line number of the line in the original file;\n- the line number of the line in the final file;\n- on a line that starts a group of lines from a different\n  commit than the previous one, the number of lines in this\n  group.  On subsequent lines this field is absent.\n\nThis header line is followed by the following information\nat least once for each commit:\n\n- the author name (\"author\"), email (\"author-mail\"), time\n  (\"author-time\"), and time zone (\"author-tz\"); similarly\n  for committer.\n- the filename in the commit that the line is attributed to.\n- the first line of the commit log message (\"summary\").\n\nThe contents of the actual line is output after the above\nheader, prefixed by a TAB. This is to allow adding more\nheader elements later.\n\nThe porcelain format generally suppresses commit information that has\nalready been seen. For example, two lines that are blamed to the same\ncommit will both be shown, but the details for that commit will be shown\nonly once. This is more efficient, but may require more state be kept by\nthe reader. The `--line-porcelain` option can be used to output full\ncommit information for each line, allowing simpler (but less efficient)\nusage like:\n\n\t# count the number of lines attributed to each author\n\tgit blame --line-porcelain file |\n\tsed -n 's/^author //p' |\n\tsort | uniq -c | sort -rn\n\n\nSPECIFYING RANGES\n-----------------\n\nUnlike 'git blame' and 'git annotate' in older versions of git, the extent\nof the annotation can be limited to both line ranges and revision\nranges. The `-L` option, which limits annotation to a range of lines, may be\nspecified multiple times.\n\nWhen you are interested in finding the origin for\nlines 40-60 for file `foo`, you can use the `-L` option like so\n(they mean the same thing -- both ask for 21 lines starting at\nline 40):\n\n\tgit blame -L 40,60 foo\n\tgit blame -L 40,+21 foo\n\nAlso you can use a regular expression to specify the line range:\n\n\tgit blame -L '/^sub hello {/,/^}$/' foo\n\nwhich limits the annotation to the body of the `hello` subroutine.\n\nWhen you are not interested in changes older than version\nv2.6.18, or changes older than 3 weeks, you can use revision\nrange specifiers  similar to 'git rev-list':\n\n\tgit blame v2.6.18.. -- foo\n\tgit blame --since=3.weeks -- foo\n\nWhen revision range specifiers are used to limit the annotation,\nlines that have not changed since the range boundary (either the\ncommit v2.6.18 or the most recent commit that is more than 3\nweeks old in the above example) are blamed for that range\nboundary commit.\n\nA particularly useful way is to see if an added file has lines\ncreated by copy-and-paste from existing files.  Sometimes this\nindicates that the developer was being sloppy and did not\nrefactor the code properly.  You can first find the commit that\nintroduced the file with:\n\n\tgit log --diff-filter=A --pretty=short -- foo\n\nand then annotate the change between the commit and its\nparents, using `commit^!` notation:\n\n\tgit blame -C -C -f $commit^! -- foo\n\n\nINCREMENTAL OUTPUT\n------------------\n\nWhen called with `--incremental` option, the command outputs the\nresult as it is built.  The output generally will talk about\nlines touched by more recent commits first (i.e. the lines will\nbe annotated out of order) and is meant to be used by\ninteractive viewers.\n\nThe output format is similar to the Porcelain format, but it\ndoes not contain the actual lines from the file that is being\nannotated.\n\n. Each blame entry always starts with a line of:\n\n\t<40-byte hex sha1> <sourceline> <resultline> <num_lines>\n+\nLine numbers count from 1.\n\n. The first time that a commit shows up in the stream, it has various\n  other information about it printed out with a one-word tag at the\n  beginning of each line describing the extra commit information (author,\n  email, committer, dates, summary, etc.).\n\n. Unlike the Porcelain format, the filename information is always\n  given and terminates the entry:\n\n\t\"filename\" <whitespace-quoted-filename-goes-here>\n+\nand thus it is really quite easy to parse for some line- and word-oriented\nparser (which should be quite natural for most scripting languages).\n+\n[NOTE]\nFor people who do parsing: to make it more robust, just ignore any\nlines between the first and last one (\"<sha1>\" and \"filename\" lines)\nwhere you do not recognize the tag words (or care about that particular\none) at the beginning of the \"extended information\" lines. That way, if\nthere is ever added information (like the commit encoding or extended\ncommit commentary), a blame viewer will not care.\n\n\nMAPPING AUTHORS\n---------------\n\nSee linkgit:gitmailmap[5].\n\n\nSEE ALSO\n--------\nlinkgit:git-annotate[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8186,
            "end_index": 8195,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-branch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-branch - List, create, or delete branches\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 85,
            "end_index": 104,
            "value": "[verse]\n'git branch' [--color[=<when>] | --no-color] [--show-current]\n\t[-v [--abbrev=<n> | --no-abbrev]]\n\t[--column[=<options>] | --no-column] [--sort=<key>]\n\t[--merged [<commit>]] [--no-merged [<commit>]]\n\t[--contains [<commit>]] [--no-contains [<commit>]]\n\t[--points-at <object>] [--format=<format>]\n\t[(-r | --remotes) | (-a | --all)]\n\t[--list] [<pattern>...]\n'git branch' [--track | --no-track] [-f] <branchname> [<start-point>]\n'git branch' (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]\n'git branch' --unset-upstream [<branchname>]\n'git branch' (-m | -M) [<oldbranch>] <newbranch>\n'git branch' (-c | -C) [<oldbranch>] <newbranch>\n'git branch' (-d | -D) [-r] <branchname>...\n'git branch' --edit-description [<branchname>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 845,
            "end_index": 870,
            "value": "\nIf `--list` is given, or if there are no non-option arguments, existing\nbranches are listed; the current branch will be highlighted in green and\nmarked with an asterisk.  Any branches checked out in linked worktrees will\nbe highlighted in cyan and marked with a plus sign. Option `-r` causes the\nremote-tracking branches to be listed,\nand option `-a` shows both local and remote branches.\n\nIf a `<pattern>`\nis given, it is used as a shell wildcard to restrict the output to\nmatching branches. If multiple patterns are given, a branch is shown if\nit matches any of the patterns.\n\nNote that when providing a\n`<pattern>`, you must use `--list`; otherwise the command may be interpreted\nas branch creation.\n\nWith `--contains`, shows only the branches that contain the named commit\n(in other words, the branches whose tip commits are descendants of the\nnamed commit), `--no-contains` inverts it. With `--merged`, only branches\nmerged into the named commit (i.e. the branches whose tip commits are\nreachable from the named commit) will be listed.  With `--no-merged` only\nbranches not merged into the named commit will be listed.  If the <commit>\nargument is missing it defaults to `HEAD` (i.e. the tip of the current\nbranch).\n\nThe command's second form creates a new branch head named <branchname>\nwhich points to the current `HEAD`, or <start-point> if given. As a\nspecial case, for <start-point>, you may use `\"A...B\"` as a shortcut for\nthe merge base of `A` and `B` if there is exactly one merge base. You\ncan leave out at most one of `A` and `B`, in which case it defaults to\n`HEAD`.\n\nNote that this will create the new branch, but it will not switch the\nworking tree to it; use \"git switch <newbranch>\" to switch to the\nnew branch.\n\nWhen a local branch is started off a remote-tracking branch, Git sets up the\nbranch (specifically the `branch.<name>.remote` and `branch.<name>.merge`\nconfiguration entries) so that 'git pull' will appropriately merge from\nthe remote-tracking branch. This behavior may be changed via the global\n`branch.autoSetupMerge` configuration flag. That setting can be\noverridden by using the `--track` and `--no-track` options, and\nchanged later using `git branch --set-upstream-to`.\n\nWith a `-m` or `-M` option, <oldbranch> will be renamed to <newbranch>.\nIf <oldbranch> had a corresponding reflog, it is renamed to match\n<newbranch>, and a reflog entry is created to remember the branch\nrenaming. If <newbranch> exists, -M must be used to force the rename\nto happen.\n\nThe `-c` and `-C` options have the exact same semantics as `-m` and\n`-M`, except instead of the branch being renamed, it will be copied to a\nnew name, along with its config and reflog.\n\nWith a `-d` or `-D` option, `<branchname>` will be deleted.  You may\nspecify more than one branch for deletion.  If the branch currently\nhas a reflog then the reflog will also be deleted.\n\nUse `-r` together with `-d` to delete remote-tracking branches. Note, that it\nonly makes sense to delete remote-tracking branches if they no longer exist\nin the remote repository or if 'git fetch' was configured not to fetch\nthem again. See also the 'prune' subcommand of linkgit:git-remote[1] for a\nway to clean up all obsolete remote-tracking branches.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 4096,
            "end_index": 4113,
            "value": "\n-d::\n--delete::\n\tDelete a branch. The branch must be fully merged in its\n\tupstream branch, or in `HEAD` if no upstream was set with\n\t`--track` or `--set-upstream-to`.\n\n-D::\n\tShortcut for `--delete --force`.\n\n--create-reflog::\n\tCreate the branch's reflog.  This activates recording of\n\tall changes made to the branch ref, enabling use of date\n\tbased sha1 expressions such as \"<branchname>@\\{yesterday}\".\n\tNote that in non-bare repositories, reflogs are usually\n\tenabled by default by the `core.logAllRefUpdates` config option.\n\tThe negated form `--no-create-reflog` only overrides an earlier\n\t`--create-reflog`, but currently does not negate the setting of\n\t`core.logAllRefUpdates`.\n\n-f::\n--force::\n\tReset <branchname> to <startpoint>, even if <branchname> exists\n\talready. Without `-f`, 'git branch' refuses to change an existing branch.\n\tIn combination with `-d` (or `--delete`), allow deleting the\n\tbranch irrespective of its merged status. In combination with\n\t`-m` (or `--move`), allow renaming the branch even if the new\n\tbranch name already exists, the same applies for `-c` (or `--copy`).\n\n-m::\n--move::\n\tMove/rename a branch and the corresponding reflog.\n\n-M::\n\tShortcut for `--move --force`.\n\n-c::\n--copy::\n\tCopy a branch and the corresponding reflog.\n\n-C::\n\tShortcut for `--copy --force`.\n\n--color[=<when>]::\n\tColor branches to highlight current, local, and\n\tremote-tracking branches.\n\tThe value must be always (the default), never, or auto.\n\n--no-color::\n\tTurn off branch colors, even when the configuration file gives the\n\tdefault to color output.\n\tSame as `--color=never`.\n\n-i::\n--ignore-case::\n\tSorting and filtering branches are case insensitive.\n\n--column[=<options>]::\n--no-column::\n\tDisplay branch listing in columns. See configuration variable\n\t`column.branch` for option syntax. `--column` and `--no-column`\n\twithout options are equivalent to 'always' and 'never' respectively.\n+\nThis option is only applicable in non-verbose mode.\n\n-r::\n--remotes::\n\tList or delete (if used with -d) the remote-tracking branches.\n\tCombine with `--list` to match the optional pattern(s).\n\n-a::\n--all::\n\tList both remote-tracking branches and local branches.\n\tCombine with `--list` to match optional pattern(s).\n\n-l::\n--list::\n\tList branches.  With optional `<pattern>...`, e.g. `git\n\tbranch --list 'maint-*'`, list only the branches that match\n\tthe pattern(s).\n\n--show-current::\n\tPrint the name of the current branch. In detached HEAD state,\n\tnothing is printed.\n\n-v::\n-vv::\n--verbose::\n\tWhen in list mode,\n\tshow sha1 and commit subject line for each head, along with\n\trelationship to upstream branch (if any). If given twice, print\n\tthe path of the linked worktree (if any) and the name of the upstream\n\tbranch, as well (see also `git remote show <remote>`).  Note that the\n\tcurrent worktree's HEAD will not have its path printed (it will always\n\tbe your current directory).\n\n-q::\n--quiet::\n\tBe more quiet when creating or deleting a branch, suppressing\n\tnon-error messages.\n\n--abbrev=<n>::\n\tIn the verbose listing that show the commit object name,\n\tshow the shortest prefix that is at least '<n>' hexdigits\n\tlong that uniquely refers the object.\n\tThe default value is 7 and can be overridden by the `core.abbrev`\n\tconfig option.\n\n--no-abbrev::\n\tDisplay the full sha1s in the output listing rather than abbreviating them.\n\n-t::\n--track::\n\tWhen creating a new branch, set up `branch.<name>.remote` and\n\t`branch.<name>.merge` configuration entries to mark the\n\tstart-point branch as \"upstream\" from the new branch. This\n\tconfiguration will tell git to show the relationship between the\n\ttwo branches in `git status` and `git branch -v`. Furthermore,\n\tit directs `git pull` without arguments to pull from the\n\tupstream when the new branch is checked out.\n+\nThis behavior is the default when the start point is a remote-tracking branch.\nSet the branch.autoSetupMerge configuration variable to `false` if you\nwant `git switch`, `git checkout` and `git branch` to always behave as if `--no-track`\nwere given. Set it to `always` if you want this behavior when the\nstart-point is either a local or remote-tracking branch.\n\n--no-track::\n\tDo not set up \"upstream\" configuration, even if the\n\tbranch.autoSetupMerge configuration variable is true.\n\n--set-upstream::\n\tAs this option had confusing syntax, it is no longer supported.\n\tPlease use `--track` or `--set-upstream-to` instead.\n\n-u <upstream>::\n--set-upstream-to=<upstream>::\n\tSet up <branchname>'s tracking information so <upstream> is\n\tconsidered <branchname>'s upstream branch. If no <branchname>\n\tis specified, then it defaults to the current branch.\n\n--unset-upstream::\n\tRemove the upstream information for <branchname>. If no branch\n\tis specified it defaults to the current branch.\n\n--edit-description::\n\tOpen an editor and edit the text to explain what the branch is\n\tfor, to be used by various other commands (e.g. `format-patch`,\n\t`request-pull`, and `merge` (if enabled)). Multi-line explanations\n\tmay be used.\n\n--contains [<commit>]::\n\tOnly list branches which contain the specified commit (HEAD\n\tif not specified). Implies `--list`.\n\n--no-contains [<commit>]::\n\tOnly list branches which don't contain the specified commit\n\t(HEAD if not specified). Implies `--list`.\n\n--merged [<commit>]::\n\tOnly list branches whose tips are reachable from the\n\tspecified commit (HEAD if not specified). Implies `--list`.\n\n--no-merged [<commit>]::\n\tOnly list branches whose tips are not reachable from the\n\tspecified commit (HEAD if not specified). Implies `--list`.\n\n<branchname>::\n\tThe name of the branch to create or delete.\n\tThe new branch name must pass all checks defined by\n\tlinkgit:git-check-ref-format[1].  Some of these checks\n\tmay restrict the characters allowed in a branch name.\n\n<start-point>::\n\tThe new branch head will point to this commit.  It may be\n\tgiven as a branch name, a commit-id, or a tag.  If this\n\toption is omitted, the current HEAD will be used instead.\n\n<oldbranch>::\n\tThe name of an existing branch to rename.\n\n<newbranch>::\n\tThe new name for an existing branch. The same restrictions as for\n\t<branchname> apply.\n\n--sort=<key>::\n\tSort based on the key given. Prefix `-` to sort in descending\n\torder of the value. You may use the --sort=<key> option\n\tmultiple times, in which case the last key becomes the primary\n\tkey. The keys supported are the same as those in `git\n\tfor-each-ref`. Sort order defaults to the value configured for the\n\t`branch.sort` variable if exists, or to sorting based on the\n\tfull refname (including `refs/...` prefix). This lists\n\tdetached HEAD (if present) first, then local branches and\n\tfinally remote-tracking branches. See linkgit:git-config[1].\n\n\n--points-at <object>::\n\tOnly list branches of the given object.\n\n--format <format>::\n\tA string that interpolates `%(fieldname)` from a branch ref being shown\n\tand the object it points at.  The format is the same as\n\tthat of linkgit:git-for-each-ref[1].\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 11018,
            "end_index": 11047,
            "value": "`pager.branch` is only respected when listing branches, i.e., when\n`--list` is used or implied. The default is to use a pager.\nSee linkgit:git-config[1].\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 11201,
            "end_index": 11220,
            "value": "\nStart development from a known tag::\n+\n------------\n$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6\n$ cd my2.6\n$ git branch my2.6.14 v2.6.14   <1>\n$ git switch my2.6.14\n------------\n+\n<1> This step and the next one could be combined into a single step with\n    \"checkout -b my2.6.14 v2.6.14\".\n\nDelete an unneeded branch::\n+\n------------\n$ git clone git://git.kernel.org/.../git.git my.git\n$ cd my.git\n$ git branch -d -r origin/todo origin/html origin/man   <1>\n$ git branch -D test                                    <2>\n------------\n+\n<1> Delete the remote-tracking branches \"todo\", \"html\" and \"man\". The next\n    'fetch' or 'pull' will create them again unless you configure them not to.\n    See linkgit:git-fetch[1].\n<2> Delete the \"test\" branch even if the \"master\" branch (or whichever branch\n    is currently checked out) does not have all commits from the test branch.\n\nListing branches from a specific remote::\n+\n------------\n$ git branch -r -l '<remote>/<pattern>'                 <1>\n$ git for-each-ref 'refs/remotes/<remote>/<pattern>'    <2>\n------------\n+\n<1> Using `-a` would conflate <remote> with any local branches you happen to\n    have been prefixed with the same <remote> pattern.\n<2> `for-each-ref` can take a wide range of options. See linkgit:git-for-each-ref[1]\n\nPatterns will normally need quoting.\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 12558,
            "end_index": 12571,
            "value": "\nIf you are creating a branch that you want to switch to immediately,\nit is easier to use the \"git switch\" command with its `-c` option to\ndo the same thing with a single command.\n\nThe options `--contains`, `--no-contains`, `--merged` and `--no-merged`\nserve four related but different purposes:\n\n- `--contains <commit>` is used to find all branches which will need\n  special attention if <commit> were to be rebased or amended, since those\n  branches contain the specified <commit>.\n\n- `--no-contains <commit>` is the inverse of that, i.e. branches that don't\n  contain the specified <commit>.\n\n- `--merged` is used to find all branches which can be safely deleted,\n  since those branches are fully contained by HEAD.\n\n- `--no-merged` is used to find branches which are candidates for merging\n  into HEAD, since those branches are not fully contained by HEAD.\n\ninclude::ref-reachability-filters.txt[]\n\nSEE ALSO\n--------\nlinkgit:git-check-ref-format[1],\nlinkgit:git-fetch[1],\nlinkgit:git-remote[1],\nlink:user-manual.html#what-is-a-branch[``Understanding history: What is\na branch?''] in the Git User's Manual.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 13681,
            "end_index": 13690,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-bugreport.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-bugreport - Collect information for user to file a bug report\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 111,
            "end_index": 130,
            "value": "[verse]\n'git bugreport' [(-o | --output-directory) <path>] [(-s | --suffix) <format>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 216,
            "end_index": 241,
            "value": "Captures information about the user's machine, Git client, and repository state,\nas well as a form requesting information about the behavior the user observed,\ninto a single text file which the user can then share, for example to the Git\nmailing list, in order to report an observed bug.\n\nThe following information is requested from the user:\n\n - Reproduction steps\n - Expected behavior\n - Actual behavior\n\nThe following information is captured automatically:\n\n - 'git version --build-options'\n - uname sysname, release, version, and machine strings\n - Compiler-specific info string\n - A list of enabled hooks\n - $SHELL\n\nThis tool is invoked via the typical Git setup process, which means that in some\ncases, it might not be able to launch - for example, if a relevant config file\nis unreadable. In this kind of scenario, it may be helpful to manually gather\nthe kind of information listed above when manually asking for help.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1168,
            "end_index": 1185,
            "value": "\n-o <path>::\n--output-directory <path>::\n\tPlace the resulting bug report file in `<path>` instead of the root of\n\tthe Git repository.\n\n-s <format>::\n--suffix <format>::\n\tSpecify an alternate suffix for the bugreport name, to create a file\n\tnamed 'git-bugreport-<formatted suffix>'. This should take the form of a\n\tstrftime(3) format string; the current local time will be used.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1562,
            "end_index": 1571,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-bundle.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-bundle - Move objects and refs by archive\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 86,
            "end_index": 105,
            "value": "[verse]\n'git bundle' create [-q | --quiet | --progress | --all-progress] [--all-progress-implied]\n\t\t    [--version=<version>] <file> <git-rev-list-args>\n'git bundle' verify [-q | --quiet] <file>\n'git bundle' list-heads <file> [<refname>...]\n'git bundle' unbundle <file> [<refname>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 390,
            "end_index": 415,
            "value": "\nSome workflows require that one or more branches of development on one\nmachine be replicated on another machine, but the two machines cannot\nbe directly connected, and therefore the interactive Git protocols (git,\nssh, http) cannot be used.\n\nThe 'git bundle' command packages objects and references in an archive\nat the originating machine, which can then be imported into another\nrepository using 'git fetch', 'git pull', or 'git clone',\nafter moving the archive by some means (e.g., by sneakernet).\n\nAs no\ndirect connection between the repositories exists, the user must specify a\nbasis for the bundle that is held by the destination repository: the\nbundle assumes that all objects in the basis are already in the\ndestination repository.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1156,
            "end_index": 1173,
            "value": "\ncreate [options] <file> <git-rev-list-args>::\n\tUsed to create a bundle named 'file'.  This requires the\n\t'<git-rev-list-args>' arguments to define the bundle contents.\n\t'options' contains the options specific to the 'git bundle create'\n\tsubcommand.\n\nverify <file>::\n\tUsed to check that a bundle file is valid and will apply\n\tcleanly to the current repository.  This includes checks on the\n\tbundle format itself as well as checking that the prerequisite\n\tcommits exist and are fully linked in the current repository.\n\t'git bundle' prints a list of missing commits, if any, and exits\n\twith a non-zero status.\n\nlist-heads <file>::\n\tLists the references defined in the bundle.  If followed by a\n\tlist of references, only references matching those given are\n\tprinted out.\n\nunbundle <file>::\n\tPasses the objects in the bundle to 'git index-pack'\n\tfor storage in the repository, then prints the names of all\n\tdefined references. If a list of references is given, only\n\treferences matching those in the list are printed. This command is\n\treally plumbing, intended to be called only by 'git fetch'.\n\n<git-rev-list-args>::\n\tA list of arguments, acceptable to 'git rev-parse' and\n\t'git rev-list' (and containing a named ref, see SPECIFYING REFERENCES\n\tbelow), that specifies the specific objects and references\n\tto transport.  For example, `master~10..master` causes the\n\tcurrent master reference to be packaged along with all objects\n\tadded since its 10th ancestor commit.  There is no explicit\n\tlimit to the number of references and objects that may be\n\tpackaged.\n\n\n[<refname>...]::\n\tA list of references used to limit the references reported as\n\tavailable. This is principally of use to 'git fetch', which\n\texpects to receive only those references asked for and not\n\tnecessarily everything in the pack (in this case, 'git bundle' acts\n\tlike 'git fetch-pack').\n\n--progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless -q\n\tis specified. This flag forces progress status even if\n\tthe standard error stream is not directed to a terminal.\n\n--all-progress::\n\tWhen --stdout is specified then progress report is\n\tdisplayed during the object count and compression phases\n\tbut inhibited during the write-out phase. The reason is\n\tthat in some cases the output stream is directly linked\n\tto another command which may wish to display progress\n\tstatus of its own as it processes incoming pack data.\n\tThis flag is like --progress except that it forces progress\n\treport for the write-out phase as well even if --stdout is\n\tused.\n\n--all-progress-implied::\n\tThis is used to imply --all-progress whenever progress display\n\tis activated.  Unlike --all-progress this flag doesn't actually\n\tforce any progress display by itself.\n\n--version=<version>::\n\tSpecify the bundle version.  Version 2 is the older format and can only be\n\tused with SHA-1 repositories; the newer version 3 contains capabilities that\n\tpermit extensions. The default is the oldest supported format, based on the\n\thash algorithm in use.\n\n-q::\n--quiet::\n\tThis flag makes the command not to report its progress\n\ton the standard error stream.\n\nSPECIFYING REFERENCES\n---------------------\n\n'git bundle' will only package references that are shown by\n'git show-ref': this includes heads, tags, and remote heads.  References\nsuch as `master~1` cannot be packaged, but are perfectly suitable for\ndefining the basis.  More than one reference may be packaged, and more\nthan one basis can be specified.  The objects packaged are those not\ncontained in the union of the given bases.  Each basis can be\nspecified explicitly (e.g. `^master~10`), or implicitly (e.g.\n`master~10..master`, `--since=10.days.ago master`).\n\nIt is very important that the basis used be held by the destination.\nIt is okay to err on the side of caution, causing the bundle file\nto contain objects already in the destination, as these are ignored\nwhen unpacking at the destination.\n\n`git clone` can use any bundle created without negative refspecs\n(e.g., `new`, but not `old..new`).\nIf you want to match `git clone --mirror`, which would include your\nrefs such as `refs/remotes/*`, use `--all`.\nIf you want to provide the same set of refs that a clone directly\nfrom the source repository would get, use `--branches --tags` for\nthe `<git-rev-list-args>`.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5500,
            "end_index": 5519,
            "value": "\nAssume you want to transfer the history from a repository R1 on machine A\nto another repository R2 on machine B.\nFor whatever reason, direct connection between A and B is not allowed,\nbut we can move data from A to B via some mechanism (CD, email, etc.).\nWe want to update R2 with development made on the branch master in R1.\n\nTo bootstrap the process, you can first create a bundle that does not have\nany basis. You can use a tag to remember up to what commit you last\nprocessed, in order to make it easy to later update the other repository\nwith an incremental bundle:\n\n----------------\nmachineA$ cd R1\nmachineA$ git bundle create file.bundle master\nmachineA$ git tag -f lastR2bundle master\n----------------\n\nThen you transfer file.bundle to the target machine B. Because this\nbundle does not require any existing object to be extracted, you can\ncreate a new repository on machine B by cloning from it:\n\n----------------\nmachineB$ git clone -b master /home/me/tmp/file.bundle R2\n----------------\n\nThis will define a remote called \"origin\" in the resulting repository that\nlets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will\nhave an entry like this:\n\n------------------------\n[remote \"origin\"]\n    url = /home/me/tmp/file.bundle\n    fetch = refs/heads/*:refs/remotes/origin/*\n------------------------\n\nTo update the resulting mine.git repository, you can fetch or pull after\nreplacing the bundle stored at /home/me/tmp/file.bundle with incremental\nupdates.\n\nAfter working some more in the original repository, you can create an\nincremental bundle to update the other repository:\n\n----------------\nmachineA$ cd R1\nmachineA$ git bundle create file.bundle lastR2bundle..master\nmachineA$ git tag -f lastR2bundle master\n----------------\n\nYou then transfer the bundle to the other machine to replace\n/home/me/tmp/file.bundle, and pull from it.\n\n----------------\nmachineB$ cd R2\nmachineB$ git pull\n----------------\n\nIf you know up to what commit the intended recipient repository should\nhave the necessary objects, you can use that knowledge to specify the\nbasis, giving a cut-off point to limit the revisions and objects that go\nin the resulting bundle. The previous example used the lastR2bundle tag\nfor this purpose, but you can use any other options that you would give to\nthe linkgit:git-log[1] command. Here are more examples:\n\nYou can use a tag that is present in both:\n\n----------------\n$ git bundle create mybundle v1.0.0..master\n----------------\n\nYou can use a basis based on time:\n\n----------------\n$ git bundle create mybundle --since=10.days master\n----------------\n\nYou can use the number of commits:\n\n----------------\n$ git bundle create mybundle -10 master\n----------------\n\nYou can run `git-bundle verify` to see if you can extract from a bundle\nthat was created with a basis:\n\n----------------\n$ git bundle verify mybundle\n----------------\n\nThis will list what commits you must have in order to extract from the\nbundle and will error out if you do not have them.\n\nA bundle from a recipient repository's point of view is just like a\nregular repository which it fetches or pulls from. You can, for example, map\nreferences when fetching:\n\n----------------\n$ git fetch mybundle master:localRef\n----------------\n\nYou can also see what references it offers:\n\n----------------\n$ git ls-remote mybundle\n----------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8869,
            "end_index": 8878,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-cat-file.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-cat-file - Provide content or type and size information for repository objects\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 127,
            "end_index": 146,
            "value": "[verse]\n'git cat-file' (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv | --filters ) [--path=<path>] <object>\n'git cat-file' (--batch[=<format>] | --batch-check[=<format>]) [ --textconv | --filters ] [--follow-symlinks]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 403,
            "end_index": 428,
            "value": "In its first form, the command provides the content or the type of an object in\nthe repository. The type is required unless `-t` or `-p` is used to find the\nobject type, or `-s` is used to find the object size, or `--textconv` or\n`--filters` is used (which imply type \"blob\").\n\nIn the second form, a list of objects (separated by linefeeds) is provided on\nstdin, and the SHA-1, type, and size of each object is printed on stdout. The\noutput format can be overridden using the optional `<format>` argument. If\neither `--textconv` or `--filters` was specified, the input is expected to\nlist the object names followed by the path name, separated by a single\nwhitespace, so that the appropriate drivers can be determined.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1146,
            "end_index": 1163,
            "value": "\n<object>::\n\tThe name of the object to show.\n\tFor a more complete list of ways to spell object names, see\n\tthe \"SPECIFYING REVISIONS\" section in linkgit:gitrevisions[7].\n\n-t::\n\tInstead of the content, show the object type identified by\n\t<object>.\n\n-s::\n\tInstead of the content, show the object size identified by\n\t<object>.\n\n-e::\n\tExit with zero status if <object> exists and is a valid\n\tobject. If <object> is of an invalid format exit with non-zero and\n\temits an error on stderr.\n\n-p::\n\tPretty-print the contents of <object> based on its type.\n\n<type>::\n\tTypically this matches the real type of <object> but asking\n\tfor a type that can trivially be dereferenced from the given\n\t<object> is also permitted.  An example is to ask for a\n\t\"tree\" with <object> being a commit object that contains it,\n\tor to ask for a \"blob\" with <object> being a tag object that\n\tpoints at it.\n\n--textconv::\n\tShow the content as transformed by a textconv filter. In this case,\n\t<object> has to be of the form <tree-ish>:<path>, or :<path> in\n\torder to apply the filter to the content recorded in the index at\n\t<path>.\n\n--filters::\n\tShow the content as converted by the filters configured in\n\tthe current working tree for the given <path> (i.e. smudge filters,\n\tend-of-line conversion, etc). In this case, <object> has to be of\n\tthe form <tree-ish>:<path>, or :<path>.\n\n--path=<path>::\n\tFor use with --textconv or --filters, to allow specifying an object\n\tname and a path separately, e.g. when it is difficult to figure out\n\tthe revision from which the blob came.\n\n--batch::\n--batch=<format>::\n\tPrint object information and contents for each object provided\n\ton stdin.  May not be combined with any other options or arguments\n\texcept `--textconv` or `--filters`, in which case the input lines\n\talso need to specify the path, separated by whitespace.  See the\n\tsection `BATCH OUTPUT` below for details.\n\n--batch-check::\n--batch-check=<format>::\n\tPrint object information for each object provided on stdin.  May\n\tnot be combined with any other options or arguments except\n\t`--textconv` or `--filters`, in which case the input lines also\n\tneed to specify the path, separated by whitespace.  See the\n\tsection `BATCH OUTPUT` below for details.\n\n--batch-all-objects::\n\tInstead of reading a list of objects on stdin, perform the\n\trequested batch operation on all objects in the repository and\n\tany alternate object stores (not just reachable objects).\n\tRequires `--batch` or `--batch-check` be specified. Note that\n\tthe objects are visited in order sorted by their hashes.\n\n--buffer::\n\tNormally batch output is flushed after each object is output, so\n\tthat a process can interactively read and write from\n\t`cat-file`. With this option, the output uses normal stdio\n\tbuffering; this is much more efficient when invoking\n\t`--batch-check` on a large number of objects.\n\n--unordered::\n\tWhen `--batch-all-objects` is in use, visit objects in an\n\torder which may be more efficient for accessing the object\n\tcontents than hash order. The exact details of the order are\n\tunspecified, but if you do not require a specific order, this\n\tshould generally result in faster output, especially with\n\t`--batch`.  Note that `cat-file` will still show each object\n\tonly once, even if it is stored multiple times in the\n\trepository.\n\n--allow-unknown-type::\n\tAllow -s or -t to query broken/corrupt objects of unknown type.\n\n--follow-symlinks::\n\tWith --batch or --batch-check, follow symlinks inside the\n\trepository when requesting objects with extended SHA-1\n\texpressions of the form tree-ish:path-in-tree.  Instead of\n\tproviding output about the link itself, provide output about\n\tthe linked-to object.  If a symlink points outside the\n\ttree-ish (e.g. a link to /foo or a root-level link to ../foo),\n\tthe portion of the link which is outside the tree will be\n\tprinted.\n+\nThis option does not (currently) work correctly when an object in the\nindex is specified (e.g. `:link` instead of `HEAD:link`) rather than\none in the tree.\n+\nThis option cannot (currently) be used unless `--batch` or\n`--batch-check` is used.\n+\nFor example, consider a git repository containing:\n+\n--\n\tf: a file containing \"hello\\n\"\n\tlink: a symlink to f\n\tdir/link: a symlink to ../f\n\tplink: a symlink to ../f\n\talink: a symlink to /etc/passwd\n--\n+\nFor a regular file `f`, `echo HEAD:f | git cat-file --batch` would print\n+\n--\n\tce013625030ba8dba906f756967f9e9ca394464a blob 6\n--\n+\nAnd `echo HEAD:link | git cat-file --batch --follow-symlinks` would\nprint the same thing, as would `HEAD:dir/link`, as they both point at\n`HEAD:f`.\n+\nWithout `--follow-symlinks`, these would print data about the symlink\nitself.  In the case of `HEAD:link`, you would see\n+\n--\n\t4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1\n--\n+\nBoth `plink` and `alink` point outside the tree, so they would\nrespectively print:\n+\n--\n\tsymlink 4\n\t../f\n\n\tsymlink 11\n\t/etc/passwd\n--\n\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 6031,
            "end_index": 6046,
            "value": "If `-t` is specified, one of the <type>.\n\nIf `-s` is specified, the size of the <object> in bytes.\n\nIf `-e` is specified, no output, unless the <object> is malformed.\n\nIf `-p` is specified, the contents of <object> are pretty-printed.\n\nIf <type> is specified, the raw (though uncompressed) contents of the <object>\nwill be returned.\n\nBATCH OUTPUT\n------------\n\nIf `--batch` or `--batch-check` is given, `cat-file` will read objects\nfrom stdin, one per line, and print information about them. By default,\nthe whole line is considered as an object, as if it were fed to\nlinkgit:git-rev-parse[1].\n\nYou can specify the information shown for each object by using a custom\n`<format>`. The `<format>` is copied literally to stdout for each\nobject, with placeholders of the form `%(atom)` expanded, followed by a\nnewline. The available atoms are:\n\n`objectname`::\n\tThe 40-hex object name of the object.\n\n`objecttype`::\n\tThe type of the object (the same as `cat-file -t` reports).\n\n`objectsize`::\n\tThe size, in bytes, of the object (the same as `cat-file -s`\n\treports).\n\n`objectsize:disk`::\n\tThe size, in bytes, that the object takes up on disk. See the\n\tnote about on-disk sizes in the `CAVEATS` section below.\n\n`deltabase`::\n\tIf the object is stored as a delta on-disk, this expands to the\n\t40-hex sha1 of the delta base object. Otherwise, expands to the\n\tnull sha1 (40 zeroes). See `CAVEATS` below.\n\n`rest`::\n\tIf this atom is used in the output string, input lines are split\n\tat the first whitespace boundary. All characters before that\n\twhitespace are considered to be the object name; characters\n\tafter that first run of whitespace (i.e., the \"rest\" of the\n\tline) are output in place of the `%(rest)` atom.\n\nIf no format is specified, the default format is `%(objectname)\n%(objecttype) %(objectsize)`.\n\nIf `--batch` is specified, the object information is followed by the\nobject contents (consisting of `%(objectsize)` bytes), followed by a\nnewline.\n\nFor example, `--batch` without a custom format would produce:\n\n------------\n<sha1> SP <type> SP <size> LF\n<contents> LF\n------------\n\nWhereas `--batch-check='%(objectname) %(objecttype)'` would produce:\n\n------------\n<sha1> SP <type> LF\n------------\n\nIf a name is specified on stdin that cannot be resolved to an object in\nthe repository, then `cat-file` will ignore any custom format and print:\n\n------------\n<object> SP missing LF\n------------\n\nIf a name is specified that might refer to more than one object (an ambiguous short sha), then `cat-file` will ignore any custom format and print:\n\n------------\n<object> SP ambiguous LF\n------------\n\nIf --follow-symlinks is used, and a symlink in the repository points\noutside the repository, then `cat-file` will ignore any custom format\nand print:\n\n------------\nsymlink SP <size> LF\n<symlink> LF\n------------\n\nThe symlink will either be absolute (beginning with a /), or relative\nto the tree root.  For instance, if dir/link points to ../../foo, then\n<symlink> will be ../foo.  <size> is the size of the symlink in bytes.\n\nIf --follow-symlinks is used, the following error messages will be\ndisplayed:\n\n------------\n<object> SP missing LF\n------------\nis printed when the initial symlink requested does not exist.\n\n------------\ndangling SP <size> LF\n<object> LF\n------------\nis printed when the initial symlink exists, but something that\nit (transitive-of) points to does not.\n\n------------\nloop SP <size> LF\n<object> LF\n------------\nis printed for symlink loops (or any symlinks that\nrequire more than 40 link resolutions to resolve).\n\n------------\nnotdir SP <size> LF\n<object> LF\n------------\nis printed when, during symlink resolution, a file is used as a\ndirectory name.\n"
        },
        "CAVEATS": {
            "name": "CAVEATS",
            "start_index": 9715,
            "end_index": 9732,
            "value": "\nNote that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack.\n\nNote also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy's size or delta base\nwill be reported.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 10296,
            "end_index": 10305,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-check-attr.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-check-attr - Display gitattributes information\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 99,
            "end_index": 118,
            "value": "[verse]\n'git check-attr' [-a | --all | <attr>...] [--] <pathname>...\n'git check-attr' --stdin [-z] [-a | --all | <attr>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 242,
            "end_index": 267,
            "value": "For every pathname, this command will list if each attribute is 'unspecified',\n'set', or 'unset' as a gitattribute on that pathname.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 400,
            "end_index": 417,
            "value": "\n-a, --all::\n\tList all attributes that are associated with the specified\n\tpaths.  If this option is used, then 'unspecified' attributes\n\twill not be included in the output.\n\n--cached::\n\tConsider `.gitattributes` in the index only, ignoring the working tree.\n\n--stdin::\n\tRead pathnames from the standard input, one per line,\n\tinstead of from the command-line.\n\n-z::\n\tThe output format is modified to be machine-parsable.\n\tIf `--stdin` is also given, input paths are separated\n\twith a NUL character instead of a linefeed character.\n\n\\--::\n\tInterpret all preceding arguments as attributes and all following\n\targuments as path names.\n\nIf none of `--stdin`, `--all`, or `--` is used, the first argument\nwill be treated as an attribute and the rest of the arguments as\npathnames.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 1190,
            "end_index": 1205,
            "value": "\nThe output is of the form:\n<path> COLON SP <attribute> COLON SP <info> LF\n\nunless `-z` is in effect, in which case NUL is used as delimiter:\n<path> NUL <attribute> NUL <info> NUL\n\n\n<path> is the path of a file being queried, <attribute> is an attribute\nbeing queried and <info> can be either:\n\n'unspecified';; when the attribute is not defined for the path.\n'unset';;\twhen the attribute is defined as false.\n'set';;\t\twhen the attribute is defined as true.\n<value>;;\twhen a value has been assigned to the attribute.\n\nBuffering happens as documented under the `GIT_FLUSH` option in\nlinkgit:git[1].  The caller is responsible for avoiding deadlocks\ncaused by overfilling an input buffer or reading from an empty output\nbuffer.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1930,
            "end_index": 1949,
            "value": "\nIn the examples, the following '.gitattributes' file is used:\n---------------\n*.java diff=java -crlf myAttr\nNoMyAttr.java !myAttr\nREADME caveat=unspecified\n---------------\n\n* Listing a single attribute:\n---------------\n$ git check-attr diff org/example/MyClass.java\norg/example/MyClass.java: diff: java\n---------------\n\n* Listing multiple attributes for a file:\n---------------\n$ git check-attr crlf diff myAttr -- org/example/MyClass.java\norg/example/MyClass.java: crlf: unset\norg/example/MyClass.java: diff: java\norg/example/MyClass.java: myAttr: set\n---------------\n\n* Listing all attributes for a file:\n---------------\n$ git check-attr --all -- org/example/MyClass.java\norg/example/MyClass.java: diff: java\norg/example/MyClass.java: myAttr: set\n---------------\n\n* Listing an attribute for multiple files:\n---------------\n$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java\norg/example/MyClass.java: myAttr: set\norg/example/NoMyAttr.java: myAttr: unspecified\n---------------\n\n* Not all values are equally unambiguous:\n---------------\n$ git check-attr caveat README\nREADME: caveat: unspecified\n---------------\n\nSEE ALSO\n--------\nlinkgit:gitattributes[5].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3133,
            "end_index": 3142,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-check-ignore.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-check-ignore - Debug gitignore / exclude files\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 103,
            "end_index": 122,
            "value": "[verse]\n'git check-ignore' [<options>] <pathname>...\n'git check-ignore' [<options>] --stdin\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 214,
            "end_index": 239,
            "value": "\nFor each pathname given via the command-line or from a file via\n`--stdin`, check whether the file is excluded by .gitignore (or other\ninput files to the exclude mechanism) and output the path if it is\nexcluded.\n\nBy default, tracked files are not shown at all since they are not\nsubject to exclude rules; but see `--no-index'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 566,
            "end_index": 583,
            "value": "\n-q, --quiet::\n\tDon't output anything, just set exit status.  This is only\n\tvalid with a single pathname.\n\n-v, --verbose::\n\tInstead of printing the paths that are excluded, for each path\n\tthat matches an exclude pattern, print the exclude pattern\n\ttogether with the path.  (Matching an exclude pattern usually\n\tmeans the path is excluded, but if the pattern begins with '!'\n\tthen it is a negated pattern and matching it means the path is\n\tNOT excluded.)\n+\nFor precedence rules within and between exclude sources, see\nlinkgit:gitignore[5].\n\n--stdin::\n\tRead pathnames from the standard input, one per line,\n\tinstead of from the command-line.\n\n-z::\n\tThe output format is modified to be machine-parsable (see\n\tbelow).  If `--stdin` is also given, input paths are separated\n\twith a NUL character instead of a linefeed character.\n\n-n, --non-matching::\n\tShow given paths which don't match any pattern.\t This only\n\tmakes sense when `--verbose` is enabled, otherwise it would\n\tnot be possible to distinguish between paths which match a\n\tpattern and those which don't.\n\n--no-index::\n\tDon't look in the index when undertaking the checks. This can\n\tbe used to debug why a path became tracked by e.g. `git add .`\n\tand was not ignored by the rules as expected by the user or when\n\tdeveloping patterns including negation to match a path previously\n\tadded with `git add -f`.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 1941,
            "end_index": 1956,
            "value": "\nBy default, any of the given pathnames which match an ignore pattern\nwill be output, one per line.  If no pattern matches a given path,\nnothing will be output for that path; this means that path will not be\nignored.\n\nIf `--verbose` is specified, the output is a series of lines of the form:\n\n<source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>\n\n<pathname> is the path of a file being queried, <pattern> is the\nmatching pattern, <source> is the pattern's source file, and <linenum>\nis the line number of the pattern within that source.  If the pattern\ncontained a `!` prefix or `/` suffix, it will be preserved in the\noutput.  <source> will be an absolute path when referring to the file\nconfigured by `core.excludesFile`, or relative to the repository root\nwhen referring to `.git/info/exclude` or a per-directory exclude file.\n\nIf `-z` is specified, the pathnames in the output are delimited by the\nnull character; if `--verbose` is also specified then null characters\nare also used instead of colons and hard tabs:\n\n<source> <NULL> <linenum> <NULL> <pattern> <NULL> <pathname> <NULL>\n\nIf `-n` or `--non-matching` are specified, non-matching pathnames will\nalso be output, in which case all fields in each output record except\nfor <pathname> will be empty.  This can be useful when running\nnon-interactively, so that files can be incrementally streamed to\nSTDIN of a long-running check-ignore process, and for each of these\nfiles, STDOUT will indicate whether that file matched a pattern or\nnot.  (Without this option, it would be impossible to tell whether the\nabsence of output for a given file meant that it didn't match any\npattern, or that the output hadn't been generated yet.)\n\nBuffering happens as documented under the `GIT_FLUSH` option in\nlinkgit:git[1].  The caller is responsible for avoiding deadlocks\ncaused by overfilling an input buffer or reading from an empty output\nbuffer.\n\nEXIT STATUS\n-----------\n\n0::\n\tOne or more of the provided paths is ignored.\n\n1::\n\tNone of the provided paths are ignored.\n\n128::\n\tA fatal error was encountered.\n\nSEE ALSO\n--------\nlinkgit:gitignore[5]\nlinkgit:git-config[1]\nlinkgit:git-ls-files[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4108,
            "end_index": 4117,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-check-mailmap.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-check-mailmap - Show canonical names and email addresses of contacts\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 127,
            "end_index": 146,
            "value": "[verse]\n'git check-mailmap' [<options>] <contact>...\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 200,
            "end_index": 225,
            "value": "\nFor each ``Name $$<user@host>$$'' or ``$$<user@host>$$'' from the command-line\nor standard input (when using `--stdin`), look up the person's canonical name\nand email address (see \"Mapping Authors\" below). If found, print them;\notherwise print the input as-is.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 488,
            "end_index": 505,
            "value": "\n--stdin::\n\tRead contacts, one per line, from the standard input after exhausting\n\tcontacts provided on the command-line.\n\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 627,
            "end_index": 642,
            "value": "\nFor each contact, a single line is output, terminated by a newline.  If the\nname is provided or known to the 'mailmap', ``Name $$<user@host>$$'' is\nprinted; otherwise only ``$$<user@host>$$'' is printed.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 848,
            "end_index": 877,
            "value": "\nSee `mailmap.file` and `mailmap.blob` in linkgit:git-config[1] for how\nto specify a custom `.mailmap` target file or object.\n\n\nMAPPING AUTHORS\n---------------\n\nSee linkgit:gitmailmap[5].\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1066,
            "end_index": 1075,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-check-ref-format.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 48,
            "end_index": 59,
            "value": "git-check-ref-format - Ensures that a reference name is well formed\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 127,
            "end_index": 146,
            "value": "[verse]\n'git check-ref-format' [--normalize]\n       [--[no-]allow-onelevel] [--refspec-pattern]\n       <refname>\n'git check-ref-format' --branch <branchname-shorthand>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 314,
            "end_index": 339,
            "value": "Checks if a given 'refname' is acceptable, and exits with a non-zero\nstatus if it is not.\n\nA reference is used in Git to specify branches and tags.  A\nbranch head is stored in the `refs/heads` hierarchy, while\na tag is stored in the `refs/tags` hierarchy of the ref namespace\n(typically in `$GIT_DIR/refs/heads` and `$GIT_DIR/refs/tags`\ndirectories or, as entries in file `$GIT_DIR/packed-refs`\nif refs are packed by `git gc`).\n\nGit imposes the following rules on how references are named:\n\n. They can include slash `/` for hierarchical (directory)\n  grouping, but no slash-separated component can begin with a\n  dot `.` or end with the sequence `.lock`.\n\n. They must contain at least one `/`. This enforces the presence of a\n  category like `heads/`, `tags/` etc. but the actual names are not\n  restricted.  If the `--allow-onelevel` option is used, this rule\n  is waived.\n\n. They cannot have two consecutive dots `..` anywhere.\n\n. They cannot have ASCII control characters (i.e. bytes whose\n  values are lower than \\040, or \\177 `DEL`), space, tilde `~`,\n  caret `^`, or colon `:` anywhere.\n\n. They cannot have question-mark `?`, asterisk `*`, or open\n  bracket `[` anywhere.  See the `--refspec-pattern` option below for\n  an exception to this rule.\n\n. They cannot begin or end with a slash `/` or contain multiple\n  consecutive slashes (see the `--normalize` option below for an\n  exception to this rule)\n\n. They cannot end with a dot `.`.\n\n. They cannot contain a sequence `@{`.\n\n. They cannot be the single character `@`.\n\n. They cannot contain a `\\`.\n\nThese rules make it easy for shell script based tools to parse\nreference names, pathname expansion by the shell when a reference name is used\nunquoted (by mistake), and also avoid ambiguities in certain\nreference name expressions (see linkgit:gitrevisions[7]):\n\n. A double-dot `..` is often used as in `ref1..ref2`, and in some\n  contexts this notation means `^ref1 ref2` (i.e. not in\n  `ref1` and in `ref2`).\n\n. A tilde `~` and caret `^` are used to introduce the postfix\n  'nth parent' and 'peel onion' operation.\n\n. A colon `:` is used as in `srcref:dstref` to mean \"use srcref\\'s\n  value and store it in dstref\" in fetch and push operations.\n  It may also be used to select a specific object such as with\n  'git cat-file': \"git cat-file blob v1.3.3:refs.c\".\n\n. at-open-brace `@{` is used as a notation to access a reflog entry.\n\nWith the `--branch` option, the command takes a name and checks if\nit can be used as a valid branch name (e.g. when creating a new\nbranch). But be cautious when using the\nprevious checkout syntax that may refer to a detached HEAD state.\nThe rule `git check-ref-format --branch $name` implements\nmay be stricter than what `git check-ref-format refs/heads/$name`\nsays (e.g. a dash may appear at the beginning of a ref component,\nbut it is explicitly forbidden at the beginning of a branch name).\nWhen run with `--branch` option in a repository, the input is first\nexpanded for the ``previous checkout syntax''\n`@{-n}`.  For example, `@{-1}` is a way to refer the last thing that\nwas checked out using \"git switch\" or \"git checkout\" operation.\nThis option should be\nused by porcelains to accept this syntax anywhere a branch name is\nexpected, so they can act as if you typed the branch name. As an\nexception note that, the ``previous checkout operation'' might result\nin a commit object name when the N-th last thing checked out was not\na branch.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 3775,
            "end_index": 3792,
            "value": "\n--[no-]allow-onelevel::\n\tControls whether one-level refnames are accepted (i.e.,\n\trefnames that do not contain multiple `/`-separated\n\tcomponents).  The default is `--no-allow-onelevel`.\n\n--refspec-pattern::\n\tInterpret <refname> as a reference name pattern for a refspec\n\t(as used with remote repositories).  If this option is\n\tenabled, <refname> is allowed to contain a single `*`\n\tin the refspec (e.g., `foo/bar*/baz` or `foo/bar*baz/`\n\tbut not `foo/bar*/baz*`).\n\n--normalize::\n\tNormalize 'refname' by removing any leading slash (`/`)\n\tcharacters and collapsing runs of adjacent slashes between\n\tname components into a single slash.  If the normalized\n\trefname is valid then print it to standard output and exit\n\twith a status of 0, otherwise exit with a non-zero status.\n\t(`--print` is a deprecated way to spell `--normalize`.)\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4624,
            "end_index": 4643,
            "value": "\n* Print the name of the previous thing checked out:\n+\n------------\n$ git check-ref-format --branch @{-1}\n------------\n\n* Determine the reference name to use for a new branch:\n+\n------------\n$ ref=$(git check-ref-format --normalize \"refs/heads/$newbranch\")||\n{ echo \"we do not like '$newbranch' as a branch name.\" >&2 ; exit 1 ; }\n------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4987,
            "end_index": 4996,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-checkout-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 44,
            "end_index": 55,
            "value": "git-checkout-index - Copy files from the index to the working tree\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 123,
            "end_index": 142,
            "value": "[verse]\n'git checkout-index' [-u] [-q] [-a] [-f] [-n] [--prefix=<string>]\n\t\t   [--stage=<number>|all]\n\t\t   [--temp]\n\t\t   [-z] [--stdin]\n\t\t   [--] [<file>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 300,
            "end_index": 325,
            "value": "Will copy all files listed from the index to the working directory\n(not overwriting existing files).\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 426,
            "end_index": 443,
            "value": "\n-u::\n--index::\n\tupdate stat information for the checked out entries in\n\tthe index file.\n\n-q::\n--quiet::\n\tbe quiet if files exist or are not in the index\n\n-f::\n--force::\n\tforces overwrite of existing files\n\n-a::\n--all::\n\tchecks out all files in the index.  Cannot be used\n\ttogether with explicit filenames.\n\n-n::\n--no-create::\n\tDon't checkout new files, only refresh files already checked\n\tout.\n\n--prefix=<string>::\n\tWhen creating files, prepend <string> (usually a directory\n\tincluding a trailing /)\n\n--stage=<number>|all::\n\tInstead of checking out unmerged entries, copy out the\n\tfiles from named stage.  <number> must be between 1 and 3.\n\tNote: --stage=all automatically implies --temp.\n\n--temp::\n\tInstead of copying the files to the working directory\n\twrite the content to temporary files.  The temporary name\n\tassociations will be written to stdout.\n\n--stdin::\n\tInstead of taking list of paths from the command line,\n\tread list of paths from the standard input.  Paths are\n\tseparated by LF (i.e. one path per line) by default.\n\n-z::\n\tOnly meaningful with `--stdin`; paths are separated with\n\tNUL character instead of LF.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\nThe order of the flags used to matter, but not anymore.\n\nJust doing `git checkout-index` does nothing. You probably meant\n`git checkout-index -a`. And if you want to force it, you want\n`git checkout-index -f -a`.\n\nIntuitiveness is not the goal here. Repeatability is. The reason for\nthe \"no arguments means no work\" behavior is that from scripts you are\nsupposed to be able to do:\n\n----------------\n$ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --\n----------------\n\nwhich will force all existing `*.h` files to be replaced with their\ncached copies. If an empty command line implied \"all\", then this would\nforce-refresh everything in the index, which was not the point.  But\nsince 'git checkout-index' accepts --stdin it would be faster to use:\n\n----------------\n$ find . -name '*.h' -print0 | git checkout-index -f -z --stdin\n----------------\n\nThe `--` is just a good idea when you know the rest will be filenames;\nit will prevent problems with a filename of, for example,  `-a`.\nUsing `--` is probably a good policy in scripts.\n\n\nUsing --temp or --stage=all\n---------------------------\nWhen `--temp` is used (or implied by `--stage=all`)\n'git checkout-index' will create a temporary file for each index\nentry being checked out.  The index will not be updated with stat\ninformation.  These options can be useful if the caller needs all\nstages of all unmerged entries so that the unmerged files can be\nprocessed by an external merge tool.\n\nA listing will be written to stdout providing the association of\ntemporary file names to tracked path names.  The listing format\nhas two variations:\n\n    . tempname TAB path RS\n+\nThe first format is what gets used when `--stage` is omitted or\nis not `--stage=all`. The field tempname is the temporary file\nname holding the file content and path is the tracked path name in\nthe index.  Only the requested entries are output.\n\n    . stage1temp SP stage2temp SP stage3tmp TAB path RS\n+\nThe second format is what gets used when `--stage=all`.  The three\nstage temporary fields (stage1temp, stage2temp, stage3temp) list the\nname of the temporary file if there is a stage entry in the index\nor `.` if there is no stage entry.  Paths which only have a stage 0\nentry will always be omitted from the output.\n\nIn both formats RS (the record separator) is newline by default\nbut will be the null byte if -z was passed on the command line.\nThe temporary file names are always safe strings; they will never\ncontain directory separators or whitespace characters.  The path\nfield is always relative to the current directory and the temporary\nfile names are always relative to the top level directory.\n\nIf the object being copied out to a temporary file is a symbolic\nlink the content of the link will be written to a normal file.  It is\nup to the end-user or the Porcelain to make use of this information.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4472,
            "end_index": 4491,
            "value": "To update and refresh only the files already checked out::\n+\n----------------\n$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh\n----------------\n\nUsing 'git checkout-index' to \"export an entire tree\"::\n\tThe prefix ability basically makes it trivial to use\n\t'git checkout-index' as an \"export as tree\" function.\n\tJust read the desired tree into the index, and do:\n+\n----------------\n$ git checkout-index --prefix=git-export-dir/ -a\n----------------\n+\n`git checkout-index` will \"export\" the index into the specified\ndirectory.\n+\nThe final \"/\" is important. The exported name is literally just\nprefixed with the specified string.  Contrast this with the\nfollowing example.\n\nExport files with a prefix::\n+\n----------------\n$ git checkout-index --prefix=.merged- Makefile\n----------------\n+\nThis will check out the currently cached copy of `Makefile`\ninto the file `.merged-Makefile`.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5398,
            "end_index": 5407,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-checkout.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-checkout - Switch branches or restore working tree files\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 104,
            "end_index": 123,
            "value": "[verse]\n'git checkout' [-q] [-f] [-m] [<branch>]\n'git checkout' [-q] [-f] [-m] --detach [<branch>]\n'git checkout' [-q] [-f] [-m] [--detach] <commit>\n'git checkout' [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]\n'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...\n'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]\n'git checkout' (-p|--patch) [<tree-ish>] [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 623,
            "end_index": 648,
            "value": "Updates files in the working tree to match the version in the index\nor the specified tree.  If no pathspec was given, 'git checkout' will\nalso update `HEAD` to set the specified branch as the current\nbranch.\n\n'git checkout' [<branch>]::\n\tTo prepare for working on `<branch>`, switch to it by updating\n\tthe index and the files in the working tree, and by pointing\n\t`HEAD` at the branch. Local modifications to the files in the\n\tworking tree are kept, so that they can be committed to the\n\t`<branch>`.\n+\nIf `<branch>` is not found but there does exist a tracking branch in\nexactly one remote (call it `<remote>`) with a matching name and\n`--no-guess` is not specified, treat as equivalent to\n+\n------------\n$ git checkout -b <branch> --track <remote>/<branch>\n------------\n+\nYou could omit `<branch>`, in which case the command degenerates to\n\"check out the current branch\", which is a glorified no-op with\nrather expensive side-effects to show only the tracking information,\nif exists, for the current branch.\n\n'git checkout' -b|-B <new_branch> [<start point>]::\n\n\tSpecifying `-b` causes a new branch to be created as if\n\tlinkgit:git-branch[1] were called and then checked out.  In\n\tthis case you can use the `--track` or `--no-track` options,\n\twhich will be passed to 'git branch'.  As a convenience,\n\t`--track` without `-b` implies branch creation; see the\n\tdescription of `--track` below.\n+\nIf `-B` is given, `<new_branch>` is created if it doesn't exist; otherwise, it\nis reset. This is the transactional equivalent of\n+\n------------\n$ git branch -f <branch> [<start point>]\n$ git checkout <branch>\n------------\n+\nthat is to say, the branch is not reset/created unless \"git checkout\" is\nsuccessful.\n\n'git checkout' --detach [<branch>]::\n'git checkout' [--detach] <commit>::\n\n\tPrepare to work on top of `<commit>`, by detaching `HEAD` at it\n\t(see \"DETACHED HEAD\" section), and updating the index and the\n\tfiles in the working tree.  Local modifications to the files\n\tin the working tree are kept, so that the resulting working\n\ttree will be the state recorded in the commit plus the local\n\tmodifications.\n+\nWhen the `<commit>` argument is a branch name, the `--detach` option can\nbe used to detach `HEAD` at the tip of the branch (`git checkout\n<branch>` would check out that branch without detaching `HEAD`).\n+\nOmitting `<branch>` detaches `HEAD` at the tip of the current branch.\n\n'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...::\n'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]::\n\n\tOverwrite the contents of the files that match the pathspec.\n\tWhen the `<tree-ish>` (most often a commit) is not given,\n\toverwrite working tree with the contents in the index.\n\tWhen the `<tree-ish>` is given, overwrite both the index and\n\tthe working tree with the contents at the `<tree-ish>`.\n+\nThe index may contain unmerged entries because of a previous failed merge.\nBy default, if you try to check out such an entry from the index, the\ncheckout operation will fail and nothing will be checked out.\nUsing `-f` will ignore these unmerged entries.  The contents from a\nspecific side of the merge can be checked out of the index by\nusing `--ours` or `--theirs`.  With `-m`, changes made to the working tree\nfile can be discarded to re-create the original conflicted merge result.\n\n'git checkout' (-p|--patch) [<tree-ish>] [--] [<pathspec>...]::\n\tThis is similar to the previous mode, but lets you use the\n\tinteractive interface to show the \"diff\" output and choose which\n\thunks to use in the result.  See below for the description of\n\t`--patch` option.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 4305,
            "end_index": 4322,
            "value": "\n-q::\n--quiet::\n\tQuiet, suppress feedback messages.\n\n--progress::\n--no-progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless `--quiet`\n\tis specified. This flag enables progress reporting even if not\n\tattached to a terminal, regardless of `--quiet`.\n\n-f::\n--force::\n\tWhen switching branches, proceed even if the index or the\n\tworking tree differs from `HEAD`.  This is used to throw away\n\tlocal changes.\n+\nWhen checking out paths from the index, do not fail upon unmerged\nentries; instead, unmerged entries are ignored.\n\n--ours::\n--theirs::\n\tWhen checking out paths from the index, check out stage #2\n\t('ours') or #3 ('theirs') for unmerged paths.\n+\nNote that during `git rebase` and `git pull --rebase`, 'ours' and\n'theirs' may appear swapped; `--ours` gives the version from the\nbranch the changes are rebased onto, while `--theirs` gives the\nversion from the branch that holds your work that is being rebased.\n+\nThis is because `rebase` is used in a workflow that treats the\nhistory at the remote as the shared canonical one, and treats the\nwork done on the branch you are rebasing as the third-party work to\nbe integrated, and you are temporarily assuming the role of the\nkeeper of the canonical history during the rebase.  As the keeper of\nthe canonical history, you need to view the history from the remote\nas `ours` (i.e. \"our shared canonical history\"), while what you did\non your side branch as `theirs` (i.e. \"one contributor's work on top\nof it\").\n\n-b <new_branch>::\n\tCreate a new branch named `<new_branch>` and start it at\n\t`<start_point>`; see linkgit:git-branch[1] for details.\n\n-B <new_branch>::\n\tCreates the branch `<new_branch>` and start it at `<start_point>`;\n\tif it already exists, then reset it to `<start_point>`. This is\n\tequivalent to running \"git branch\" with \"-f\"; see\n\tlinkgit:git-branch[1] for details.\n\n-t::\n--track::\n\tWhen creating a new branch, set up \"upstream\" configuration. See\n\t\"--track\" in linkgit:git-branch[1] for details.\n+\nIf no `-b` option is given, the name of the new branch will be\nderived from the remote-tracking branch, by looking at the local part of\nthe refspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".\nThis would tell us to use `hack` as the local branch when branching\noff of `origin/hack` (or `remotes/origin/hack`, or even\n`refs/remotes/origin/hack`).  If the given name has no slash, or the above\nguessing results in an empty name, the guessing is aborted.  You can\nexplicitly give a name with `-b` in such a case.\n\n--no-track::\n\tDo not set up \"upstream\" configuration, even if the\n\t`branch.autoSetupMerge` configuration variable is true.\n\n--guess::\n--no-guess::\n\tIf `<branch>` is not found but there does exist a tracking\n\tbranch in exactly one remote (call it `<remote>`) with a\n\tmatching name, treat as equivalent to\n+\n------------\n$ git checkout -b <branch> --track <remote>/<branch>\n------------\n+\nIf the branch exists in multiple remotes and one of them is named by\nthe `checkout.defaultRemote` configuration variable, we'll use that\none for the purposes of disambiguation, even if the `<branch>` isn't\nunique across all remotes. Set it to\ne.g. `checkout.defaultRemote=origin` to always checkout remote\nbranches from there if `<branch>` is ambiguous but exists on the\n'origin' remote. See also `checkout.defaultRemote` in\nlinkgit:git-config[1].\n+\n`--guess` is the default behavior. Use `--no-guess` to disable it.\n+\nThe default behavior can be set via the `checkout.guess` configuration\nvariable.\n\n-l::\n\tCreate the new branch's reflog; see linkgit:git-branch[1] for\n\tdetails.\n\n-d::\n--detach::\n\tRather than checking out a branch to work on it, check out a\n\tcommit for inspection and discardable experiments.\n\tThis is the default behavior of `git checkout <commit>` when\n\t`<commit>` is not a branch name.  See the \"DETACHED HEAD\" section\n\tbelow for details.\n\n--orphan <new_branch>::\n\tCreate a new 'orphan' branch, named `<new_branch>`, started from\n\t`<start_point>` and switch to it.  The first commit made on this\n\tnew branch will have no parents and it will be the root of a new\n\thistory totally disconnected from all the other branches and\n\tcommits.\n+\nThe index and the working tree are adjusted as if you had previously run\n`git checkout <start_point>`.  This allows you to start a new history\nthat records a set of paths similar to `<start_point>` by easily running\n`git commit -a` to make the root commit.\n+\nThis can be useful when you want to publish the tree from a commit\nwithout exposing its full history. You might want to do this to publish\nan open source branch of a project whose current tree is \"clean\", but\nwhose full history contains proprietary or otherwise encumbered bits of\ncode.\n+\nIf you want to start a disconnected history that records a set of paths\nthat is totally different from the one of `<start_point>`, then you should\nclear the index and the working tree right after creating the orphan\nbranch by running `git rm -rf .` from the top level of the working tree.\nAfterwards you will be ready to prepare your new files, repopulating the\nworking tree, by copying them from elsewhere, extracting a tarball, etc.\n\n--ignore-skip-worktree-bits::\n\tIn sparse checkout mode, `git checkout -- <paths>` would\n\tupdate only entries matched by `<paths>` and sparse patterns\n\tin `$GIT_DIR/info/sparse-checkout`. This option ignores\n\tthe sparse patterns and adds back any files in `<paths>`.\n\n-m::\n--merge::\n\tWhen switching branches,\n\tif you have local modifications to one or more files that\n\tare different between the current branch and the branch to\n\twhich you are switching, the command refuses to switch\n\tbranches in order to preserve your modifications in context.\n\tHowever, with this option, a three-way merge between the current\n\tbranch, your working tree contents, and the new branch\n\tis done, and you will be on the new branch.\n+\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with `git add` (or `git rm` if the merge\nshould result in deletion of the path).\n+\nWhen checking out paths from the index, this option lets you recreate\nthe conflicted merge in the specified paths.\n+\nWhen switching branches with `--merge`, staged changes may be lost.\n\n--conflict=<style>::\n\tThe same as `--merge` option above, but changes the way the\n\tconflicting hunks are presented, overriding the\n\t`merge.conflictStyle` configuration variable.  Possible values are\n\t\"merge\" (default) and \"diff3\" (in addition to what is shown by\n\t\"merge\" style, shows the original contents).\n\n-p::\n--patch::\n\tInteractively select hunks in the difference between the\n\t`<tree-ish>` (or the index, if unspecified) and the working\n\ttree.  The chosen hunks are then applied in reverse to the\n\tworking tree (and if a `<tree-ish>` was specified, the index).\n+\nThis means that you can use `git checkout -p` to selectively discard\nedits from your current working tree. See the ``Interactive Mode''\nsection of linkgit:git-add[1] to learn how to operate the `--patch` mode.\n+\nNote that this option uses the no overlay mode by default (see also\n`--overlay`), and currently doesn't support overlay mode.\n\n--ignore-other-worktrees::\n\t`git checkout` refuses when the wanted ref is already checked\n\tout by another worktree. This option makes it check the ref\n\tout anyway. In other words, the ref can be held by more than one\n\tworktree.\n\n--overwrite-ignore::\n--no-overwrite-ignore::\n\tSilently overwrite ignored files when switching branches. This\n\tis the default behavior. Use `--no-overwrite-ignore` to abort\n\tthe operation when the new branch contains ignored files.\n\n--recurse-submodules::\n--no-recurse-submodules::\n\tUsing `--recurse-submodules` will update the content of all active\n\tsubmodules according to the commit recorded in the superproject. If\n\tlocal modifications in a submodule would be overwritten the checkout\n\twill fail unless `-f` is used. If nothing (or `--no-recurse-submodules`)\n\tis used, submodules working trees will not be updated.\n\tJust like linkgit:git-submodule[1], this will detach `HEAD` of the\n\tsubmodule.\n\n--overlay::\n--no-overlay::\n\tIn the default overlay mode, `git checkout` never\n\tremoves files from the index or the working tree.  When\n\tspecifying `--no-overlay`, files that appear in the index and\n\tworking tree, but not in `<tree-ish>` are removed, to make them\n\tmatch `<tree-ish>` exactly.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n<branch>::\n\tBranch to checkout; if it refers to a branch (i.e., a name that,\n\twhen prepended with \"refs/heads/\", is a valid ref), then that\n\tbranch is checked out. Otherwise, if it refers to a valid\n\tcommit, your `HEAD` becomes \"detached\" and you are no longer on\n\tany branch (see below for details).\n+\nYou can use the `@{-N}` syntax to refer to the N-th last\nbranch/commit checked out using \"git checkout\" operation. You may\nalso specify `-` which is synonymous to `@{-1}`.\n+\nAs a special case, you may use `A...B` as a shortcut for the\nmerge base of `A` and `B` if there is exactly one merge base. You can\nleave out at most one of `A` and `B`, in which case it defaults to `HEAD`.\n\n<new_branch>::\n\tName for the new branch.\n\n<start_point>::\n\tThe name of a commit at which to start the new branch; see\n\tlinkgit:git-branch[1] for details. Defaults to `HEAD`.\n+\nAs a special case, you may use `\"A...B\"` as a shortcut for the\nmerge base of `A` and `B` if there is exactly one merge base. You can\nleave out at most one of `A` and `B`, in which case it defaults to `HEAD`.\n\n<tree-ish>::\n\tTree to checkout from (when paths are given). If not specified,\n\tthe index will be used.\n+\nAs a special case, you may use `\"A...B\"` as a shortcut for the\nmerge base of `A` and `B` if there is exactly one merge base. You can\nleave out at most one of `A` and `B`, in which case it defaults to `HEAD`.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<pathspec>...::\n\tLimits the paths affected by the operation.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n\nDETACHED HEAD\n-------------\n`HEAD` normally refers to a named branch (e.g. `master`). Meanwhile, each\nbranch refers to a specific commit. Let's look at a repo with three\ncommits, one of them tagged, and with branch `master` checked out:\n\n------------\n           HEAD (refers to branch 'master')\n            |\n            v\na---b---c  branch 'master' (refers to commit 'c')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nWhen a commit is created in this state, the branch is updated to refer to\nthe new commit. Specifically, 'git commit' creates a new commit `d`, whose\nparent is commit `c`, and then updates branch `master` to refer to new\ncommit `d`. `HEAD` still refers to branch `master` and so indirectly now refers\nto commit `d`:\n\n------------\n$ edit; git add; git commit\n\n               HEAD (refers to branch 'master')\n                |\n                v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nIt is sometimes useful to be able to checkout a commit that is not at\nthe tip of any named branch, or even to create a new commit that is not\nreferenced by a named branch. Let's look at what happens when we\ncheckout commit `b` (here we show two ways this may be done):\n\n------------\n$ git checkout v2.0  # or\n$ git checkout master^^\n\n   HEAD (refers to commit 'b')\n    |\n    v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nNotice that regardless of which checkout command we use, `HEAD` now refers\ndirectly to commit `b`. This is known as being in detached `HEAD` state.\nIt means simply that `HEAD` refers to a specific commit, as opposed to\nreferring to a named branch. Let's see what happens when we create a commit:\n\n------------\n$ edit; git add; git commit\n\n     HEAD (refers to commit 'e')\n      |\n      v\n      e\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nThere is now a new commit `e`, but it is referenced only by `HEAD`. We can\nof course add yet another commit in this state:\n\n------------\n$ edit; git add; git commit\n\n\t HEAD (refers to commit 'f')\n\t  |\n\t  v\n      e---f\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nIn fact, we can perform all the normal Git operations. But, let's look\nat what happens when we then checkout `master`:\n\n------------\n$ git checkout master\n\n               HEAD (refers to branch 'master')\n      e---f     |\n     /          v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')\n------------\n\nIt is important to realize that at this point nothing refers to commit\n`f`. Eventually commit `f` (and by extension commit `e`) will be deleted\nby the routine Git garbage collection process, unless we create a reference\nbefore that happens. If we have not yet moved away from commit `f`,\nany of these will create a reference to it:\n\n------------\n$ git checkout -b foo   <1>\n$ git branch foo        <2>\n$ git tag foo           <3>\n------------\n\n<1> creates a new branch `foo`, which refers to commit `f`, and then\n    updates `HEAD` to refer to branch `foo`. In other words, we'll no longer\n    be in detached `HEAD` state after this command.\n\n<2> similarly creates a new branch `foo`, which refers to commit `f`,\n    but leaves `HEAD` detached.\n\n<3> creates a new tag `foo`, which refers to commit `f`,\n    leaving `HEAD` detached.\n\nIf we have moved away from commit `f`, then we must first recover its object\nname (typically by using git reflog), and then we can create a reference to\nit. For example, to see the last two commits to which `HEAD` referred, we\ncan use either of these commands:\n\n------------\n$ git reflog -2 HEAD # or\n$ git log -g -2 HEAD\n------------\n\nARGUMENT DISAMBIGUATION\n-----------------------\n\nWhen there is only one argument given and it is not `--` (e.g. `git\ncheckout abc`), and when the argument is both a valid `<tree-ish>`\n(e.g. a branch `abc` exists) and a valid `<pathspec>` (e.g. a file\nor a directory whose name is \"abc\" exists), Git would usually ask\nyou to disambiguate.  Because checking out a branch is so common an\noperation, however, `git checkout abc` takes \"abc\" as a `<tree-ish>`\nin such a situation.  Use `git checkout -- <pathspec>` if you want\nto checkout these paths out of the index.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 19403,
            "end_index": 19422,
            "value": "\n. The following sequence checks out the `master` branch, reverts\n  the `Makefile` to two revisions back, deletes `hello.c` by\n  mistake, and gets it back from the index.\n+\n------------\n$ git checkout master             <1>\n$ git checkout master~2 Makefile  <2>\n$ rm -f hello.c\n$ git checkout hello.c            <3>\n------------\n+\n<1> switch branch\n<2> take a file out of another commit\n<3> restore `hello.c` from the index\n+\nIf you want to check out _all_ C source files out of the index,\nyou can say\n+\n------------\n$ git checkout -- '*.c'\n------------\n+\nNote the quotes around `*.c`.  The file `hello.c` will also be\nchecked out, even though it is no longer in the working tree,\nbecause the file globbing is used to match entries in the index\n(not in the working tree by the shell).\n+\nIf you have an unfortunate branch that is named `hello.c`, this\nstep would be confused as an instruction to switch to that branch.\nYou should instead write:\n+\n------------\n$ git checkout -- hello.c\n------------\n\n. After working in the wrong branch, switching to the correct\n  branch would be done using:\n+\n------------\n$ git checkout mytopic\n------------\n+\nHowever, your \"wrong\" branch and correct `mytopic` branch may\ndiffer in files that you have modified locally, in which case\nthe above checkout would fail like this:\n+\n------------\n$ git checkout mytopic\nerror: You have local changes to 'frotz'; not switching branches.\n------------\n+\nYou can give the `-m` flag to the command, which would try a\nthree-way merge:\n+\n------------\n$ git checkout -m mytopic\nAuto-merging frotz\n------------\n+\nAfter this three-way merge, the local modifications are _not_\nregistered in your index file, so `git diff` would show you what\nchanges you made since the tip of the new branch.\n\n. When a merge conflict happens during switching branches with\n  the `-m` option, you would see something like this:\n+\n------------\n$ git checkout -m mytopic\nAuto-merging frotz\nERROR: Merge conflict in frotz\nfatal: merge program failed\n------------\n+\nAt this point, `git diff` shows the changes cleanly merged as in\nthe previous example, as well as the changes in the conflicted\nfiles.  Edit and resolve the conflict and mark it resolved with\n`git add` as usual:\n+\n------------\n$ edit frotz\n$ git add frotz\n------------\n\nSEE ALSO\n--------\nlinkgit:git-switch[1],\nlinkgit:git-restore[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 21766,
            "end_index": 21775,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-cherry-pick.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-cherry-pick - Apply the changes introduced by some existing commits\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 121,
            "end_index": 140,
            "value": "[verse]\n'git cherry-pick' [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]\n\t\t  [-S[<keyid>]] <commit>...\n'git cherry-pick' (--continue | --skip | --abort | --quit)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 305,
            "end_index": 330,
            "value": "\nGiven one or more existing commits, apply the change each one\nintroduces, recording a new commit for each.  This requires your\nworking tree to be clean (no modifications from the HEAD commit).\n\nWhen it is not obvious how to apply a change, the following\nhappens:\n\n1. The current branch and `HEAD` pointer stay at the last commit\n   successfully made.\n2. The `CHERRY_PICK_HEAD` ref is set to point at the commit that\n   introduced the change that is difficult to apply.\n3. Paths in which the change applied cleanly are updated both\n   in the index file and in your working tree.\n4. For conflicting paths, the index file records up to three\n   versions, as described in the \"TRUE MERGE\" section of\n   linkgit:git-merge[1].  The working tree files will include\n   a description of the conflict bracketed by the usual\n   conflict markers `<<<<<<<` and `>>>>>>>`.\n5. No other modifications are made.\n\nSee linkgit:git-merge[1] for some hints on resolving such\nconflicts.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1296,
            "end_index": 1313,
            "value": "\n<commit>...::\n\tCommits to cherry-pick.\n\tFor a more complete list of ways to spell commits, see\n\tlinkgit:gitrevisions[7].\n\tSets of commits can be passed but no traversal is done by\n\tdefault, as if the `--no-walk` option was specified, see\n\tlinkgit:git-rev-list[1]. Note that specifying a range will\n\tfeed all <commit>... arguments to a single revision walk\n\t(see a later example that uses 'maint master..next').\n\n-e::\n--edit::\n\tWith this option, 'git cherry-pick' will let you edit the commit\n\tmessage prior to committing.\n\n--cleanup=<mode>::\n\tThis option determines how the commit message will be cleaned up before\n\tbeing passed on to the commit machinery. See linkgit:git-commit[1] for more\n\tdetails. In particular, if the '<mode>' is given a value of `scissors`,\n\tscissors will be appended to `MERGE_MSG` before being passed on in the case\n\tof a conflict.\n\n-x::\n\tWhen recording the commit, append a line that says\n\t\"(cherry picked from commit ...)\" to the original commit\n\tmessage in order to indicate which commit this change was\n\tcherry-picked from.  This is done only for cherry\n\tpicks without conflicts.  Do not use this option if\n\tyou are cherry-picking from your private branch because\n\tthe information is useless to the recipient.  If on the\n\tother hand you are cherry-picking between two publicly\n\tvisible branches (e.g. backporting a fix to a\n\tmaintenance branch for an older release from a\n\tdevelopment branch), adding this information can be\n\tuseful.\n\n-r::\n\tIt used to be that the command defaulted to do `-x`\n\tdescribed above, and `-r` was to disable it.  Now the\n\tdefault is not to do `-x` so this option is a no-op.\n\n-m parent-number::\n--mainline parent-number::\n\tUsually you cannot cherry-pick a merge because you do not know which\n\tside of the merge should be considered the mainline.  This\n\toption specifies the parent number (starting from 1) of\n\tthe mainline and allows cherry-pick to replay the change\n\trelative to the specified parent.\n\n-n::\n--no-commit::\n\tUsually the command automatically creates a sequence of commits.\n\tThis flag applies the changes necessary to cherry-pick\n\teach named commit to your working tree and the index,\n\twithout making any commit.  In addition, when this\n\toption is used, your index does not have to match the\n\tHEAD commit.  The cherry-pick is done against the\n\tbeginning state of your index.\n+\nThis is useful when cherry-picking more than one commits'\neffect to your index in a row.\n\n-s::\n--signoff::\n\tAdd a `Signed-off-by` trailer at the end of the commit message.\n\tSee the signoff option in linkgit:git-commit[1] for more information.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand both `commit.gpgSign` configuration variable, and\n\tearlier `--gpg-sign`.\n\n--ff::\n\tIf the current HEAD is the same as the parent of the\n\tcherry-pick'ed commit, then a fast forward to this commit will\n\tbe performed.\n\n--allow-empty::\n\tBy default, cherry-picking an empty commit will fail,\n\tindicating that an explicit invocation of `git commit\n\t--allow-empty` is required. This option overrides that\n\tbehavior, allowing empty commits to be preserved automatically\n\tin a cherry-pick. Note that when \"--ff\" is in effect, empty\n\tcommits that meet the \"fast-forward\" requirement will be kept\n\teven without this option.  Note also, that use of this option only\n\tkeeps commits that were initially empty (i.e. the commit recorded the\n\tsame tree as its parent).  Commits which are made empty due to a\n\tprevious commit are dropped.  To force the inclusion of those commits\n\tuse `--keep-redundant-commits`.\n\n--allow-empty-message::\n\tBy default, cherry-picking a commit with an empty message will fail.\n\tThis option overrides that behavior, allowing commits with empty\n\tmessages to be cherry picked.\n\n--keep-redundant-commits::\n\tIf a commit being cherry picked duplicates a commit already in the\n\tcurrent history, it will become empty.  By default these\n\tredundant commits cause `cherry-pick` to stop so the user can\n\texamine the commit. This option overrides that behavior and\n\tcreates an empty commit object.  Implies `--allow-empty`.\n\n--strategy=<strategy>::\n\tUse the given merge strategy.  Should only be used once.\n\tSee the MERGE STRATEGIES section in linkgit:git-merge[1]\n\tfor details.\n\n-X<option>::\n--strategy-option=<option>::\n\tPass the merge strategy-specific option through to the\n\tmerge strategy.  See linkgit:git-merge[1] for details.\n\n--rerere-autoupdate::\n--no-rerere-autoupdate::\n\tAllow the rerere mechanism to update the index with the\n\tresult of auto-conflict resolution if possible.\n\nSEQUENCER SUBCOMMANDS\n---------------------\ninclude::sequencer.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 6113,
            "end_index": 6132,
            "value": "`git cherry-pick master`::\n\n\tApply the change introduced by the commit at the tip of the\n\tmaster branch and create a new commit with this change.\n\n`git cherry-pick ..master`::\n`git cherry-pick ^HEAD master`::\n\n\tApply the changes introduced by all commits that are ancestors\n\tof master but not of HEAD to produce new commits.\n\n`git cherry-pick maint next ^master`::\n`git cherry-pick maint master..next`::\n\n\tApply the changes introduced by all commits that are\n\tancestors of maint or next, but not master or any of its\n\tancestors.  Note that the latter does not mean `maint` and\n\teverything between `master` and `next`; specifically,\n\t`maint` will not be used if it is included in `master`.\n\n`git cherry-pick master~4 master~2`::\n\n\tApply the changes introduced by the fifth and third last\n\tcommits pointed to by master and create 2 new commits with\n\tthese changes.\n\n`git cherry-pick -n master~1 next`::\n\n\tApply to the working tree and the index the changes introduced\n\tby the second last commit pointed to by master and by the last\n\tcommit pointed to by next, but do not create any commit with\n\tthese changes.\n\n`git cherry-pick --ff ..next`::\n\n\tIf history is linear and HEAD is an ancestor of next, update\n\tthe working tree and advance the HEAD pointer to match next.\n\tOtherwise, apply the changes introduced by those commits that\n\tare in next but not HEAD to the current branch, creating a new\n\tcommit for each new change.\n\n`git rev-list --reverse master -- README | git cherry-pick -n --stdin`::\n\n\tApply the changes introduced by all commits on the master\n\tbranch that touched README to the working tree and index,\n\tso the result can be inspected and made into a single new\n\tcommit if suitable.\n\nThe following sequence attempts to backport a patch, bails out because\nthe code the patch applies to has changed too much, and then tries\nagain, this time exercising more care about matching up context lines.\n\n------------\n$ git cherry-pick topic^             <1>\n$ git diff                           <2>\n$ git reset --merge ORIG_HEAD        <3>\n$ git cherry-pick -Xpatience topic^  <4>\n------------\n<1> apply the change that would be shown by `git show topic^`.\n    In this example, the patch does not apply cleanly, so\n    information about the conflict is written to the index and\n    working tree and no new commit results.\n<2> summarize changes to be reconciled\n<3> cancel the cherry-pick.  In other words, return to the\n    pre-cherry-pick state, preserving any local modifications\n    you had in the working tree.\n<4> try to apply the change introduced by `topic^` again,\n    spending extra time to avoid mistakes based on incorrectly\n    matching context lines.\n\nSEE ALSO\n--------\nlinkgit:git-revert[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8839,
            "end_index": 8848,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-cherry.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-cherry - Find commits yet to be applied to upstream\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git cherry' [-v] [<upstream> [<head> [<limit>]]]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 172,
            "end_index": 197,
            "value": "Determine whether there are commits in `<head>..<upstream>` that are\nequivalent to those in the range `<limit>..<head>`.\n\nThe equivalence test is based on the diff, after removing whitespace\nand line numbers.  git-cherry therefore detects when commits have been\n\"copied\" by means of linkgit:git-cherry-pick[1], linkgit:git-am[1] or\nlinkgit:git-rebase[1].\n\nOutputs the SHA1 of every commit in `<limit>..<head>`, prefixed with\n`-` for commits that have an equivalent in <upstream>, and `+` for\ncommits that do not.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 710,
            "end_index": 727,
            "value": "\n-v::\n\tShow the commit subjects next to the SHA1s.\n\n<upstream>::\n\tUpstream branch to search for equivalent commits.\n\tDefaults to the upstream branch of HEAD.\n\n<head>::\n\tWorking branch; defaults to HEAD.\n\n<limit>::\n\tDo not report commits up to (and including) limit.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 992,
            "end_index": 1011,
            "value": "\nPatch workflows\n~~~~~~~~~~~~~~~\n\ngit-cherry is frequently used in patch-based workflows (see\nlinkgit:gitworkflows[7]) to determine if a series of patches has been\napplied by the upstream maintainer.  In such a workflow you might\ncreate and send a topic branch like this:\n\n------------\n$ git checkout -b topic origin/master\n# work and create some commits\n$ git format-patch origin/master\n$ git send-email ... 00*\n------------\n\nLater, you can see whether your changes have been applied by saying\n(still on `topic`):\n\n------------\n$ git fetch  # update your notion of origin/master\n$ git cherry -v\n------------\n\nConcrete example\n~~~~~~~~~~~~~~~~\n\nIn a situation where topic consisted of three commits, and the\nmaintainer applied two of them, the situation might look like:\n\n------------\n$ git log --graph --oneline --decorate --boundary origin/master...topic\n* 7654321 (origin/master) upstream tip commit\n[... snip some other commits ...]\n* cccc111 cherry-pick of C\n* aaaa111 cherry-pick of A\n[... snip a lot more that has happened ...]\n| * cccc000 (topic) commit C\n| * bbbb000 commit B\n| * aaaa000 commit A\n|/\no 1234567 branch point\n------------\n\nIn such cases, git-cherry shows a concise summary of what has yet to\nbe applied:\n\n------------\n$ git cherry origin/master topic\n- cccc000... commit C\n+ bbbb000... commit B\n- aaaa000... commit A\n------------\n\nHere, we see that the commits A and C (marked with `-`) can be\ndropped from your `topic` branch when you rebase it on top of\n`origin/master`, while the commit B (marked with `+`) still needs to\nbe kept so that it will be sent to be applied to `origin/master`.\n\n\nUsing a limit\n~~~~~~~~~~~~~\n\nThe optional <limit> is useful in cases where your topic is based on\nother work that is not in upstream.  Expanding on the previous\nexample, this might look like:\n\n------------\n$ git log --graph --oneline --decorate --boundary origin/master...topic\n* 7654321 (origin/master) upstream tip commit\n[... snip some other commits ...]\n* cccc111 cherry-pick of C\n* aaaa111 cherry-pick of A\n[... snip a lot more that has happened ...]\n| * cccc000 (topic) commit C\n| * bbbb000 commit B\n| * aaaa000 commit A\n| * 0000fff (base) unpublished stuff F\n[... snip ...]\n| * 0000aaa unpublished stuff A\n|/\no 1234567 merge-base between upstream and topic\n------------\n\nBy specifying `base` as the limit, you can avoid listing commits\nbetween `base` and `topic`:\n\n------------\n$ git cherry origin/master topic base\n- cccc000... commit C\n+ bbbb000... commit B\n- aaaa000... commit A\n------------\n\n\nSEE ALSO\n--------\nlinkgit:git-patch-id[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3573,
            "end_index": 3582,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-citool.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-citool - Graphical alternative to git-commit\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 88,
            "end_index": 107,
            "value": "[verse]\n'git citool'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 128,
            "end_index": 153,
            "value": "A Tcl/Tk based graphical interface to review modified files, stage\nthem into the index, enter a commit message and record the new\ncommit onto the current branch.  This interface is an alternative\nto the less interactive 'git commit' program.\n\n'git citool' is actually a standard alias for `git gui citool`.\nSee linkgit:git-gui[1] for more details.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 501,
            "end_index": 510,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-clean.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-clean - Remove untracked files from the working tree\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 94,
            "end_index": 113,
            "value": "[verse]\n'git clean' [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <path>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 198,
            "end_index": 223,
            "value": "\nCleans the working tree by recursively removing files that are not\nunder version control, starting from the current directory.\n\nNormally, only files unknown to Git are removed, but if the `-x`\noption is specified, ignored files are also removed. This can, for\nexample, be useful to remove all build products.\n\nIf any optional `<path>...` arguments are given, only those paths\nare affected.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 614,
            "end_index": 631,
            "value": "\n-d::\n\tNormally, when no <path> is specified, git clean will not\n\trecurse into untracked directories to avoid removing too much.\n\tSpecify -d to have it recurse into such directories as well.\n\tIf any paths are specified, -d is irrelevant; all untracked\n\tfiles matching the specified paths (with exceptions for nested\n\tgit directories mentioned under `--force`) will be removed.\n\n-f::\n--force::\n\tIf the Git configuration variable clean.requireForce is not set\n\tto false, 'git clean' will refuse to delete files or directories\n\tunless given -f or -i.  Git will refuse to modify untracked\n\tnested git repositories (directories with a .git subdirectory)\n\tunless a second -f is given.\n\n-i::\n--interactive::\n\tShow what would be done and clean files interactively. See\n\t``Interactive mode'' for details.\n\n-n::\n--dry-run::\n\tDon't actually remove anything, just show what would be done.\n\n-q::\n--quiet::\n\tBe quiet, only report errors, but not the files that are\n\tsuccessfully removed.\n\n-e <pattern>::\n--exclude=<pattern>::\n\tUse the given exclude pattern in addition to the standard ignore rules\n\t(see linkgit:gitignore[5]).\n\n-x::\n\tDon't use the standard ignore rules (see linkgit:gitignore[5]), but\n\tstill use the ignore rules given with `-e` options from the command\n\tline.  This allows removing all untracked\n\tfiles, including build products.  This can be used (possibly in\n\tconjunction with 'git restore' or 'git reset') to create a pristine\n\tworking directory to test a clean build.\n\n-X::\n\tRemove only files ignored by Git.  This may be useful to rebuild\n\teverything from scratch, but keep manually created files.\n\nInteractive mode\n----------------\nWhen the command enters the interactive mode, it shows the\nfiles and directories to be cleaned, and goes into its\ninteractive command loop.\n\nThe command loop shows the list of subcommands available, and\ngives a prompt \"What now> \".  In general, when the prompt ends\nwith a single '>', you can pick only one of the choices given\nand type return, like this:\n\n------------\n    *** Commands ***\n\t1: clean                2: filter by pattern    3: select by numbers\n\t4: ask each             5: quit                 6: help\n    What now> 1\n------------\n\nYou also could say `c` or `clean` above as long as the choice is unique.\n\nThe main command loop has 6 subcommands.\n\nclean::\n\n   Start cleaning files and directories, and then quit.\n\nfilter by pattern::\n\n   This shows the files and directories to be deleted and issues an\n   \"Input ignore patterns>>\" prompt. You can input space-separated\n   patterns to exclude files and directories from deletion.\n   E.g. \"*.c *.h\" will excludes files end with \".c\" and \".h\" from\n   deletion. When you are satisfied with the filtered result, press\n   ENTER (empty) back to the main menu.\n\nselect by numbers::\n\n   This shows the files and directories to be deleted and issues an\n   \"Select items to delete>>\" prompt. When the prompt ends with double\n   '>>' like this, you can make more than one selection, concatenated\n   with whitespace or comma.  Also you can say ranges.  E.g. \"2-5 7,9\"\n   to choose 2,3,4,5,7,9 from the list.  If the second number in a\n   range is omitted, all remaining items are selected.  E.g. \"7-\" to\n   choose 7,8,9 from the list.  You can say '*' to choose everything.\n   Also when you are satisfied with the filtered result, press ENTER\n   (empty) back to the main menu.\n\nask each::\n\n  This will start to clean, and you must confirm one by one in order\n  to delete items. Please note that this action is not as efficient\n  as the above two actions.\n\nquit::\n\n  This lets you quit without do cleaning.\n\nhelp::\n\n  Show brief usage of interactive git-clean.\n\nSEE ALSO\n--------\nlinkgit:gitignore[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4326,
            "end_index": 4335,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-clone.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-clone - Clone a repository into a new directory\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 90,
            "end_index": 109,
            "value": "[verse]\n'git clone' [--template=<template_directory>]\n\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n\t  [--dissociate] [--separate-git-dir <git dir>]\n\t  [--depth <depth>] [--[no-]single-branch] [--no-tags]\n\t  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]\n\t  [--[no-]remote-submodules] [--jobs <n>] [--sparse]\n\t  [--filter=<filter>] [--] <repository>\n\t  [<directory>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 580,
            "end_index": 605,
            "value": "\nClones a repository into a newly created directory, creates\nremote-tracking branches for each branch in the cloned repository\n(visible using `git branch --remotes`), and creates and checks out an\ninitial branch that is forked from the cloned repository's\ncurrently active branch.\n\nAfter the clone, a plain `git fetch` without arguments will update\nall the remote-tracking branches, and a `git pull` without\narguments will in addition merge the remote master branch into the\ncurrent master branch, if any (this is untrue when \"--single-branch\"\nis given; see below).\n\nThis default configuration is achieved by creating references to\nthe remote branch heads under `refs/remotes/origin` and\nby initializing `remote.origin.url` and `remote.origin.fetch`\nconfiguration variables.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1381,
            "end_index": 1398,
            "value": "\n-l::\n--local::\n\tWhen the repository to clone from is on a local machine,\n\tthis flag bypasses the normal \"Git aware\" transport\n\tmechanism and clones the repository by making a copy of\n\tHEAD and everything under objects and refs directories.\n\tThe files under `.git/objects/` directory are hardlinked\n\tto save space when possible.\n+\nIf the repository is specified as a local path (e.g., `/path/to/repo`),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying `--no-local` will\noverride the default when `/path/to/repo` is given, using the regular\nGit transport instead.\n+\n*NOTE*: this operation can race with concurrent modification to the\nsource repository, similar to running `cp -r src dst` while modifying\n`src`.\n\n--no-hardlinks::\n\tForce the cloning process from a repository on a local\n\tfilesystem to copy the files under the `.git/objects`\n\tdirectory instead of using hardlinks. This may be desirable\n\tif you are trying to make a back-up of your repository.\n\n-s::\n--shared::\n\tWhen the repository to clone is on the local machine,\n\tinstead of using hard links, automatically setup\n\t`.git/objects/info/alternates` to share the objects\n\twith the source repository.  The resulting repository\n\tstarts out without any object of its own.\n+\n*NOTE*: this is a possibly dangerous operation; do *not* use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as `git commit`)\nwhich automatically call `git maintenance run --auto`. (See\nlinkgit:git-maintenance[1].) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt.\n+\nNote that running `git repack` without the `--local` option in a repository\ncloned with `--shared` will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of `clone --shared`.\nIt is safe, however, to run `git gc`, which uses the `--local` option by\ndefault.\n+\nIf you want to break the dependency of a repository cloned with `--shared` on\nits source repository, you can simply run `git repack -a` to copy all\nobjects from the source repository into a pack in the cloned repository.\n\n--reference[-if-able] <repository>::\n\tIf the reference repository is on the local machine,\n\tautomatically setup `.git/objects/info/alternates` to\n\tobtain objects from the reference repository.  Using\n\tan already existing repository as an alternate will\n\trequire fewer objects to be copied from the repository\n\tbeing cloned, reducing network and local storage costs.\n\tWhen using the `--reference-if-able`, a non existing\n\tdirectory is skipped with a warning instead of aborting\n\tthe clone.\n+\n*NOTE*: see the NOTE for the `--shared` option, and also the\n`--dissociate` option.\n\n--dissociate::\n\tBorrow the objects from reference repositories specified\n\twith the `--reference` options only to reduce network\n\ttransfer, and stop borrowing from them after a clone is made\n\tby making necessary local copies of borrowed objects.  This\n\toption can also be used when cloning locally from a\n\trepository that already borrows objects from another\n\trepository--the new repository will borrow objects from the\n\tsame repository, and this option can be used to stop the\n\tborrowing.\n\n-q::\n--quiet::\n\tOperate quietly.  Progress is not reported to the standard\n\terror stream.\n\n-v::\n--verbose::\n\tRun verbosely. Does not affect the reporting of progress status\n\tto the standard error stream.\n\n--progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless `--quiet`\n\tis specified. This flag forces progress status even if the\n\tstandard error stream is not directed to a terminal.\n\n--server-option=<option>::\n\tTransmit the given string to the server when communicating using\n\tprotocol version 2.  The given string must not contain a NUL or LF\n\tcharacter.  The server's handling of server options, including\n\tunknown ones, is server-specific.\n\tWhen multiple `--server-option=<option>` are given, they are all\n\tsent to the other side in the order listed on the command line.\n\n-n::\n--no-checkout::\n\tNo checkout of HEAD is performed after the clone is complete.\n\n--bare::\n\tMake a 'bare' Git repository.  That is, instead of\n\tcreating `<directory>` and placing the administrative\n\tfiles in `<directory>/.git`, make the `<directory>`\n\titself the `$GIT_DIR`. This obviously implies the `--no-checkout`\n\tbecause there is nowhere to check out the working tree.\n\tAlso the branch heads at the remote are copied directly\n\tto corresponding local branch heads, without mapping\n\tthem to `refs/remotes/origin/`.  When this option is\n\tused, neither remote-tracking branches nor the related\n\tconfiguration variables are created.\n\n--sparse::\n\tInitialize the sparse-checkout file so the working\n\tdirectory starts with only the files in the root\n\tof the repository. The sparse-checkout file can be\n\tmodified to grow the working directory as needed.\n\n--filter=<filter-spec>::\n\tUse the partial clone feature and request that the server sends\n\ta subset of reachable objects according to a given object filter.\n\tWhen using `--filter`, the supplied `<filter-spec>` is used for\n\tthe partial clone filter. For example, `--filter=blob:none` will\n\tfilter out all blobs (file contents) until needed by Git. Also,\n\t`--filter=blob:limit=<size>` will filter out all blobs of size\n\tat least `<size>`. For more details on filter specifications, see\n\tthe `--filter` option in linkgit:git-rev-list[1].\n\n--mirror::\n\tSet up a mirror of the source repository.  This implies `--bare`.\n\tCompared to `--bare`, `--mirror` not only maps local branches of the\n\tsource to local branches of the target, it maps all refs (including\n\tremote-tracking branches, notes etc.) and sets up a refspec configuration such\n\tthat all these refs are overwritten by a `git remote update` in the\n\ttarget repository.\n\n-o <name>::\n--origin <name>::\n\tInstead of using the remote name `origin` to keep track of the upstream\n\trepository, use `<name>`.  Overrides `clone.defaultRemoteName` from the\n\tconfig.\n\n-b <name>::\n--branch <name>::\n\tInstead of pointing the newly created HEAD to the branch pointed\n\tto by the cloned repository's HEAD, point to `<name>` branch\n\tinstead. In a non-bare repository, this is the branch that will\n\tbe checked out.\n\t`--branch` can also take tags and detaches the HEAD at that commit\n\tin the resulting repository.\n\n-u <upload-pack>::\n--upload-pack <upload-pack>::\n\tWhen given, and the repository to clone from is accessed\n\tvia ssh, this specifies a non-default path for the command\n\trun on the other end.\n\n--template=<template_directory>::\n\tSpecify the directory from which templates will be used;\n\t(See the \"TEMPLATE DIRECTORY\" section of linkgit:git-init[1].)\n\n-c <key>=<value>::\n--config <key>=<value>::\n\tSet a configuration variable in the newly-created repository;\n\tthis takes effect immediately after the repository is\n\tinitialized, but before the remote history is fetched or any\n\tfiles checked out.  The key is in the same format as expected by\n\tlinkgit:git-config[1] (e.g., `core.eol=true`). If multiple\n\tvalues are given for the same key, each value will be written to\n\tthe config file. This makes it safe, for example, to add\n\tadditional fetch refspecs to the origin remote.\n+\nDue to limitations of the current implementation, some configuration\nvariables do not take effect until after the initial fetch and checkout.\nConfiguration variables known to not take effect are:\n`remote.<name>.mirror` and `remote.<name>.tagOpt`.  Use the\ncorresponding `--mirror` and `--no-tags` options instead.\n\n--depth <depth>::\n\tCreate a 'shallow' clone with a history truncated to the\n\tspecified number of commits. Implies `--single-branch` unless\n\t`--no-single-branch` is given to fetch the histories near the\n\ttips of all branches. If you want to clone submodules shallowly,\n\talso pass `--shallow-submodules`.\n\n--shallow-since=<date>::\n\tCreate a shallow clone with a history after the specified time.\n\n--shallow-exclude=<revision>::\n\tCreate a shallow clone with a history, excluding commits\n\treachable from a specified remote branch or tag.  This option\n\tcan be specified multiple times.\n\n--[no-]single-branch::\n\tClone only the history leading to the tip of a single branch,\n\teither specified by the `--branch` option or the primary\n\tbranch remote's `HEAD` points at.\n\tFurther fetches into the resulting repository will only update the\n\tremote-tracking branch for the branch this option was used for the\n\tinitial cloning.  If the HEAD at the remote did not point at any\n\tbranch when `--single-branch` clone was made, no remote-tracking\n\tbranch is created.\n\n--no-tags::\n\tDon't clone any tags, and set\n\t`remote.<remote>.tagOpt=--no-tags` in the config, ensuring\n\tthat future `git pull` and `git fetch` operations won't follow\n\tany tags. Subsequent explicit tag fetches will still work,\n\t(see linkgit:git-fetch[1]).\n+\nCan be used in conjunction with `--single-branch` to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing.\n\n--recurse-submodules[=<pathspec>]::\n\tAfter the clone is created, initialize and clone submodules\n\twithin based on the provided pathspec.  If no pathspec is\n\tprovided, all submodules are initialized and cloned.\n\tThis option can be given multiple times for pathspecs consisting\n\tof multiple entries.  The resulting clone has `submodule.active` set to\n\tthe provided pathspec, or \".\" (meaning all submodules) if no\n\tpathspec is provided.\n+\nSubmodules are initialized and cloned using their default settings. This is\nequivalent to running\n`git submodule update --init --recursive <pathspec>` immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of `--no-checkout`/`-n`, `--bare`,\nor `--mirror` is given)\n\n--[no-]shallow-submodules::\n\tAll submodules which are cloned will be shallow with a depth of 1.\n\n--[no-]remote-submodules::\n\tAll submodules which are cloned will use the status of the submodule's\n\tremote-tracking branch to update the submodule, rather than the\n\tsuperproject's recorded SHA-1. Equivalent to passing `--remote` to\n\t`git submodule update`.\n\n--separate-git-dir=<git dir>::\n\tInstead of placing the cloned repository where it is supposed\n\tto be, place the cloned repository at the specified directory,\n\tthen make a filesystem-agnostic Git symbolic link to there.\n\tThe result is Git repository can be separated from working\n\ttree.\n\n-j <n>::\n--jobs <n>::\n\tThe number of submodules fetched at the same time.\n\tDefaults to the `submodule.fetchJobs` option.\n\n<repository>::\n\tThe (possibly remote) repository to clone from.  See the\n\t<<URLS,GIT URLS>> section below for more information on specifying\n\trepositories.\n\n<directory>::\n\tThe name of a new directory to clone into.  The \"humanish\"\n\tpart of the source repository is used if no directory is\n\texplicitly given (`repo` for `/path/to/repo.git` and `foo`\n\tfor `host.xz:foo/.git`).  Cloning into an existing directory\n\tis only allowed if the directory is empty.\n\n:git-clone: 1\ninclude::urls.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 12912,
            "end_index": 12931,
            "value": "\n* Clone from upstream:\n+\n------------\n$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n$ cd my-linux\n$ make\n------------\n\n\n* Make a local clone that borrows from the current directory, without checking things out:\n+\n------------\n$ git clone -l -s -n . ../copy\n$ cd ../copy\n$ git show-branch\n------------\n\n\n* Clone from upstream while borrowing from an existing local directory:\n+\n------------\n$ git clone --reference /git/linux.git \\\n\tgit://git.kernel.org/pub/scm/.../linux.git \\\n\tmy-linux\n$ cd my-linux\n------------\n\n\n* Create a bare repository to publish your changes to the public:\n+\n------------\n$ git clone --bare -l /home/proj/.git /pub/scm/proj.git\n------------\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 13617,
            "end_index": 13626,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-column.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-column - Display data in columns\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 76,
            "end_index": 95,
            "value": "[verse]\n'git column' [--command=<name>] [--[raw-]mode=<mode>] [--width=<width>]\n\t     [--indent=<string>] [--nl=<string>] [--padding=<n>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 233,
            "end_index": 258,
            "value": "This command formats the lines of its standard input into a table with\nmultiple columns. Each input line occupies one cell of the table. It\nis used internally by other git commands to format output into\ncolumns.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 470,
            "end_index": 487,
            "value": "\n--command=<name>::\n\tLook up layout mode using configuration variable column.<name> and\n\tcolumn.ui.\n\n--mode=<mode>::\n\tSpecify layout mode. See configuration variable column.ui for option\n\tsyntax in linkgit:git-config[1].\n\n--raw-mode=<n>::\n\tSame as --mode but take mode encoded as a number. This is mainly used\n\tby other commands that have already parsed layout mode.\n\n--width=<width>::\n\tSpecify the terminal width. By default 'git column' will detect the\n\tterminal width, or fall back to 80 if it is unable to do so.\n\n--indent=<string>::\n\tString to be printed at the beginning of each line.\n\n--nl=<N>::\n\tString to be printed at the end of each line,\n\tincluding newline character.\n\n--padding=<N>::\n\tThe number of spaces between columns. One space by default.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1244,
            "end_index": 1263,
            "value": "\nFormat data by columns:\n------------\n$ seq 1 24 | git column --mode=column --padding=5\n1      4      7      10     13     16     19     22\n2      5      8      11     14     17     20     23\n3      6      9      12     15     18     21     24\n------------\n\nFormat data by rows:\n------------\n$ seq 1 21 | git column --mode=row --padding=5\n1      2      3      4      5      6      7\n8      9      10     11     12     13     14\n15     16     17     18     19     20     21\n------------\n\nList some tags in a table with unequal column widths:\n------------\n$ git tag --list 'v2.4.*' --column=row,dense\nv2.4.0  v2.4.0-rc0  v2.4.0-rc1  v2.4.0-rc2  v2.4.0-rc3\nv2.4.1  v2.4.10     v2.4.11     v2.4.12     v2.4.2\nv2.4.3  v2.4.4      v2.4.5      v2.4.6      v2.4.7\nv2.4.8  v2.4.9\n------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2047,
            "end_index": 2056,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-commit-graph.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-commit-graph - Write and verify Git commit-graph files\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 111,
            "end_index": 130,
            "value": "[verse]\n'git commit-graph verify' [--object-dir <dir>] [--shallow] [--[no-]progress]\n'git commit-graph write' <options> [--object-dir <dir>] [--[no-]progress]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 290,
            "end_index": 315,
            "value": "\nManage the serialized commit-graph file.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 358,
            "end_index": 375,
            "value": "\n--object-dir::\n\tUse given directory for the location of packfiles and commit-graph\n\tfile. This parameter exists to specify the location of an alternate\n\tthat only has the objects directory, not a full `.git` directory. The\n\tcommit-graph file is expected to be in the `<dir>/info` directory and\n\tthe packfiles are expected to be in `<dir>/pack`. If the directory\n\tcould not be made into an absolute path, or does not match any known\n\tobject directory, `git commit-graph ...` will exit with non-zero\n\tstatus.\n\n--[no-]progress::\n\tTurn progress on/off explicitly. If neither is specified, progress is\n\tshown if standard error is connected to a terminal.\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 1025,
            "end_index": 1044,
            "value": "'write'::\n\nWrite a commit-graph file based on the commits found in packfiles. If\nthe config option `core.commitGraph` is disabled, then this command will\noutput a warning, then return success without writing a commit-graph file.\n+\nWith the `--stdin-packs` option, generate the new commit graph by\nwalking objects only in the specified pack-indexes. (Cannot be combined\nwith `--stdin-commits` or `--reachable`.)\n+\nWith the `--stdin-commits` option, generate the new commit graph by\nwalking commits starting at the commits specified in stdin as a list\nof OIDs in hex, one OID per line. OIDs that resolve to non-commits\n(either directly, or by peeling tags) are silently ignored. OIDs that\nare malformed, or do not exist generate an error. (Cannot be combined\nwith `--stdin-packs` or `--reachable`.)\n+\nWith the `--reachable` option, generate the new commit graph by walking\ncommits starting at all refs. (Cannot be combined with `--stdin-commits`\nor `--stdin-packs`.)\n+\nWith the `--append` option, include all commits that are present in the\nexisting commit-graph file.\n+\nWith the `--changed-paths` option, compute and write information about the\npaths changed between a commit and its first parent. This operation can\ntake a while on large repositories. It provides significant performance gains\nfor getting history of a directory or a file with `git log -- <path>`. If\nthis option is given, future commit-graph writes will automatically assume\nthat this option was intended. Use `--no-changed-paths` to stop storing this\ndata.\n+\nWith the `--max-new-filters=<n>` option, generate at most `n` new Bloom\nfilters (if `--changed-paths` is specified). If `n` is `-1`, no limit is\nenforced. Only commits present in the new layer count against this\nlimit. To retroactively compute Bloom filters over earlier layers, it is\nadvised to use `--split=replace`.  Overrides the `commitGraph.maxNewFilters`\nconfiguration.\n+\nWith the `--split[=<strategy>]` option, write the commit-graph as a\nchain of multiple commit-graph files stored in\n`<dir>/info/commit-graphs`. Commit-graph layers are merged based on the\nstrategy and other splitting options. The new commits not already in the\ncommit-graph are added in a new \"tip\" file. This file is merged with the\nexisting file if the following merge conditions are met:\n+\n* If `--split=no-merge` is specified, a merge is never performed, and\nthe remaining options are ignored. `--split=replace` overwrites the\nexisting chain with a new one. A bare `--split` defers to the remaining\noptions. (Note that merging a chain of commit graphs replaces the\nexisting chain with a length-1 chain where the first and only\nincremental holds the entire graph).\n+\n* If `--size-multiple=<X>` is not specified, let `X` equal 2. If the new\ntip file would have `N` commits and the previous tip has `M` commits and\n`X` times `N` is greater than  `M`, instead merge the two files into a\nsingle file.\n+\n* If `--max-commits=<M>` is specified with `M` a positive integer, and the\nnew tip file would have more than `M` commits, then instead merge the new\ntip with the previous tip.\n+\nFinally, if `--expire-time=<datetime>` is not specified, let `datetime`\nbe the current time. After writing the split commit-graph, delete all\nunused commit-graph whose modified times are older than `datetime`.\n\n'verify'::\n\nRead the commit-graph file and verify its contents against the object\ndatabase. Used to check for corrupted data.\n+\nWith the `--shallow` option, only check the tip commit-graph file in\na chain of split commit-graphs.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4571,
            "end_index": 4590,
            "value": "\n* Write a commit-graph file for the packed commits in your local `.git`\n  directory.\n+\n------------------------------------------------\n$ git commit-graph write\n------------------------------------------------\n\n* Write a commit-graph file, extending the current commit-graph file\n  using commits in `<pack-index>`.\n+\n------------------------------------------------\n$ echo <pack-index> | git commit-graph write --stdin-packs\n------------------------------------------------\n\n* Write a commit-graph file containing all reachable commits.\n+\n------------------------------------------------\n$ git show-ref -s | git commit-graph write --stdin-commits\n------------------------------------------------\n\n* Write a commit-graph file containing all commits in the current\n  commit-graph file along with those reachable from `HEAD`.\n+\n------------------------------------------------\n$ git rev-parse HEAD | git commit-graph write --stdin-commits --append\n------------------------------------------------\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5586,
            "end_index": 5595,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-commit-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-commit-tree - Create a new commit object\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git commit-tree' <tree> [(-p <parent>)...]\n'git commit-tree' [(-p <parent>)...] [-S[<keyid>]] [(-m <message>)...]\n\t\t  [(-F <file>)...] <tree>\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 266,
            "end_index": 291,
            "value": "This is usually not what an end user wants to run directly.  See\nlinkgit:git-commit[1] instead.\n\nCreates a new commit object based on the provided tree object and\nemits the new commit object id on stdout. The log message is read\nfrom the standard input, unless `-m` or `-F` options are given.\n\nThe `-m` and `-F` options can be given any number of times, in any\norder. The commit log message will be composed in the order in which\nthe options are given.\n\nA commit object may have any number of parents. With exactly one\nparent, it is an ordinary commit. Having more than one parent makes\nthe commit a merge between several lines of history. Initial (root)\ncommits have no parents.\n\nWhile a tree represents a particular directory state of a working\ndirectory, a commit represents that state in \"time\", and explains how\nto get there.\n\nNormally a commit would identify a new \"HEAD\" state, and while Git\ndoesn't care where you save the note about that state, in practice we\ntend to just write the result to the file that is pointed at by\n`.git/HEAD`, so that we can always see what the last committed\nstate was.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1398,
            "end_index": 1415,
            "value": "\n<tree>::\n\tAn existing tree object.\n\n-p <parent>::\n\tEach `-p` indicates the id of a parent commit object.\n\n-m <message>::\n\tA paragraph in the commit log message. This can be given more than\n\tonce and each <message> becomes its own paragraph.\n\n-F <file>::\n\tRead the commit log message from the given file. Use `-` to read\n\tfrom the standard input. This can be given more than once and the\n\tcontent of each file becomes its own paragraph.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand a `--gpg-sign` option given earlier on the command line.\n\nCommit Information\n------------------\n\nA commit encapsulates:\n\n- all parent object ids\n- author name, email and date\n- committer name and email and the commit time.\n\nA commit comment is read from stdin. If a changelog\nentry is not provided via \"<\" redirection, 'git commit-tree' will just wait\nfor one to be entered and terminated with ^D.\n\ninclude::date-formats.txt[]\n"
        },
        "Discussion": {
            "name": "Discussion",
            "start_index": 2530,
            "end_index": 2553,
            "value": "\ninclude::i18n.txt[]\n"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 2574,
            "end_index": 2587,
            "value": "/etc/mailname\n\nSEE ALSO\n--------\nlinkgit:git-write-tree[1]\nlinkgit:git-commit[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2668,
            "end_index": 2677,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-commit.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-commit - Record changes to the repository\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 85,
            "end_index": 104,
            "value": "[verse]\n'git commit' [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n\t   [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n\t   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n\t   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n\t   [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n\t   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t   [-S[<keyid>]] [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 532,
            "end_index": 557,
            "value": "Create a new commit containing the current contents of the index and\nthe given log message describing the changes. The new commit is a\ndirect child of HEAD, usually the tip of the current branch, and the\nbranch is updated to point to it (unless no branch is associated with\nthe working tree, in which case HEAD is \"detached\" as described in\nlinkgit:git-checkout[1]).\n\nThe content to be committed can be specified in several ways:\n\n1. by using linkgit:git-add[1] to incrementally \"add\" changes to the\n   index before using the 'commit' command (Note: even modified files\n   must be \"added\");\n\n2. by using linkgit:git-rm[1] to remove files from the working tree\n   and the index, again before using the 'commit' command;\n\n3. by listing files as arguments to the 'commit' command\n   (without --interactive or --patch switch), in which\n   case the commit will ignore changes staged in the index, and instead\n   record the current content of the listed files (which must already\n   be known to Git);\n\n4. by using the -a switch with the 'commit' command to automatically\n   \"add\" changes from all known files (i.e. all files that are already\n   listed in the index) and to automatically \"rm\" files in the index\n   that have been removed from the working tree, and then perform the\n   actual commit;\n\n5. by using the --interactive or --patch switches with the 'commit' command\n   to decide one by one which files or hunks should be part of the commit\n   in addition to contents in the index,\n   before finalizing the operation. See the ``Interactive Mode'' section of\n   linkgit:git-add[1] to learn how to operate these modes.\n\nThe `--dry-run` option can be used to obtain a\nsummary of what is included by any of the above for the next\ncommit by giving the same set of parameters (options and paths).\n\nIf you make a commit and then find a mistake immediately after\nthat, you can recover from it with 'git reset'.\n\n:git-commit: 1\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2479,
            "end_index": 2496,
            "value": "\n-a::\n--all::\n\tTell the command to automatically stage files that have\n\tbeen modified and deleted, but new files you have not\n\ttold Git about are not affected.\n\n-p::\n--patch::\n\tUse the interactive patch selection interface to chose\n\twhich changes to commit. See linkgit:git-add[1] for\n\tdetails.\n\n-C <commit>::\n--reuse-message=<commit>::\n\tTake an existing commit object, and reuse the log message\n\tand the authorship information (including the timestamp)\n\twhen creating the commit.\n\n-c <commit>::\n--reedit-message=<commit>::\n\tLike '-C', but with `-c` the editor is invoked, so that\n\tthe user can further edit the commit message.\n\n--fixup=<commit>::\n\tConstruct a commit message for use with `rebase --autosquash`.\n\tThe commit message will be the subject line from the specified\n\tcommit with a prefix of \"fixup! \".  See linkgit:git-rebase[1]\n\tfor details.\n\n--squash=<commit>::\n\tConstruct a commit message for use with `rebase --autosquash`.\n\tThe commit message subject line is taken from the specified\n\tcommit with a prefix of \"squash! \".  Can be used with additional\n\tcommit message options (`-m`/`-c`/`-C`/`-F`). See\n\tlinkgit:git-rebase[1] for details.\n\n--reset-author::\n\tWhen used with -C/-c/--amend options, or when committing after a\n\tconflicting cherry-pick, declare that the authorship of the\n\tresulting commit now belongs to the committer. This also renews\n\tthe author timestamp.\n\n--short::\n\tWhen doing a dry-run, give the output in the short-format. See\n\tlinkgit:git-status[1] for details. Implies `--dry-run`.\n\n--branch::\n\tShow the branch and tracking info even in short-format.\n\n--porcelain::\n\tWhen doing a dry-run, give the output in a porcelain-ready\n\tformat. See linkgit:git-status[1] for details. Implies\n\t`--dry-run`.\n\n--long::\n\tWhen doing a dry-run, give the output in the long-format.\n\tImplies `--dry-run`.\n\n-z::\n--null::\n\tWhen showing `short` or `porcelain` status output, print the\n\tfilename verbatim and terminate the entries with NUL, instead of LF.\n\tIf no format is given, implies the `--porcelain` output format.\n\tWithout the `-z` option, filenames with \"unusual\" characters are\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]).\n\n-F <file>::\n--file=<file>::\n\tTake the commit message from the given file.  Use '-' to\n\tread the message from the standard input.\n\n--author=<author>::\n\tOverride the commit author. Specify an explicit author using the\n\tstandard `A U Thor <author@example.com>` format. Otherwise <author>\n\tis assumed to be a pattern and is used to search for an existing\n\tcommit by that author (i.e. rev-list --all -i --author=<author>);\n\tthe commit author is then copied from the first such commit found.\n\n--date=<date>::\n\tOverride the author date used in the commit.\n\n-m <msg>::\n--message=<msg>::\n\tUse the given <msg> as the commit message.\n\tIf multiple `-m` options are given, their values are\n\tconcatenated as separate paragraphs.\n+\nThe `-m` option is mutually exclusive with `-c`, `-C`, and `-F`.\n\n-t <file>::\n--template=<file>::\n\tWhen editing the commit message, start the editor with the\n\tcontents in the given file.  The `commit.template` configuration\n\tvariable is often used to give this option implicitly to the\n\tcommand.  This mechanism can be used by projects that want to\n\tguide participants with some hints on what to write in the message\n\tin what order.  If the user exits the editor without editing the\n\tmessage, the commit is aborted.  This has no effect when a message\n\tis given by other means, e.g. with the `-m` or `-F` options.\n\ninclude::signoff-option.txt[]\n\n-n::\n--no-verify::\n\tThis option bypasses the pre-commit and commit-msg hooks.\n\tSee also linkgit:githooks[5].\n\n--allow-empty::\n\tUsually recording a commit that has the exact same tree as its\n\tsole parent commit is a mistake, and the command prevents you\n\tfrom making such a commit.  This option bypasses the safety, and\n\tis primarily for use by foreign SCM interface scripts.\n\n--allow-empty-message::\n       Like --allow-empty this command is primarily for use by foreign\n       SCM interface scripts. It allows you to create a commit with an\n       empty commit message without using plumbing commands like\n       linkgit:git-commit-tree[1].\n\n--cleanup=<mode>::\n\tThis option determines how the supplied commit message should be\n\tcleaned up before committing.  The '<mode>' can be `strip`,\n\t`whitespace`, `verbatim`, `scissors` or `default`.\n+\n--\nstrip::\n\tStrip leading and trailing empty lines, trailing whitespace,\n\tcommentary and collapse consecutive empty lines.\nwhitespace::\n\tSame as `strip` except #commentary is not removed.\nverbatim::\n\tDo not change the message at all.\nscissors::\n\tSame as `whitespace` except that everything from (and including)\n\tthe line found below is truncated, if the message is to be edited.\n\t\"`#`\" can be customized with core.commentChar.\n\n\t\t# ------------------------ >8 ------------------------\n\ndefault::\n\tSame as `strip` if the message is to be edited.\n\tOtherwise `whitespace`.\n--\n+\nThe default can be changed by the `commit.cleanup` configuration\nvariable (see linkgit:git-config[1]).\n\n-e::\n--edit::\n\tThe message taken from file with `-F`, command line with\n\t`-m`, and from commit object with `-C` are usually used as\n\tthe commit log message unmodified. This option lets you\n\tfurther edit the message taken from these sources.\n\n--no-edit::\n\tUse the selected commit message without launching an editor.\n\tFor example, `git commit --amend --no-edit` amends a commit\n\twithout changing its commit message.\n\n--amend::\n\tReplace the tip of the current branch by creating a new\n\tcommit. The recorded tree is prepared as usual (including\n\tthe effect of the `-i` and `-o` options and explicit\n\tpathspec), and the message from the original commit is used\n\tas the starting point, instead of an empty message, when no\n\tother message is specified from the command line via options\n\tsuch as `-m`, `-F`, `-c`, etc.  The new commit has the same\n\tparents and author as the current one (the `--reset-author`\n\toption can countermand this).\n+\n--\nIt is a rough equivalent for:\n------\n\t$ git reset --soft HEAD^\n\t$ ... do something else to come up with the right tree ...\n\t$ git commit -c ORIG_HEAD\n\n------\nbut can be used to amend a merge commit.\n--\n+\nYou should understand the implications of rewriting history if you\namend a commit that has already been published.  (See the \"RECOVERING\nFROM UPSTREAM REBASE\" section in linkgit:git-rebase[1].)\n\n--no-post-rewrite::\n\tBypass the post-rewrite hook.\n\n-i::\n--include::\n\tBefore making a commit out of staged contents so far,\n\tstage the contents of paths given on the command line\n\tas well.  This is usually not what you want unless you\n\tare concluding a conflicted merge.\n\n-o::\n--only::\n\tMake a commit by taking the updated working tree contents\n\tof the paths specified on the\n\tcommand line, disregarding any contents that have been\n\tstaged for other paths. This is the default mode of operation of\n\t'git commit' if any paths are given on the command line,\n\tin which case this option can be omitted.\n\tIf this option is specified together with `--amend`, then\n\tno paths need to be specified, which can be used to amend\n\tthe last commit without committing changes that have\n\talready been staged. If used together with `--allow-empty`\n\tpaths are also not required, and an empty commit will be created.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n-u[<mode>]::\n--untracked-files[=<mode>]::\n\tShow untracked files.\n+\n--\nThe mode parameter is optional (defaults to 'all'), and is used to\nspecify the handling of untracked files; when -u is not used, the\ndefault is 'normal', i.e. show untracked files and directories.\n\nThe possible options are:\n\n\t- 'no'     - Show no untracked files\n\t- 'normal' - Shows untracked files and directories\n\t- 'all'    - Also shows individual files in untracked directories.\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in linkgit:git-config[1].\n--\n\n-v::\n--verbose::\n\tShow unified diff between the HEAD commit and what\n\twould be committed at the bottom of the commit message\n\ttemplate to help the user describe the commit by reminding\n\twhat changes the commit has.\n\tNote that this diff output doesn't have its\n\tlines prefixed with '#'. This diff will not be a part\n\tof the commit message. See the `commit.verbose` configuration\n\tvariable in linkgit:git-config[1].\n+\nIf specified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the unstaged\nchanges to tracked files.\n\n-q::\n--quiet::\n\tSuppress commit summary message.\n\n--dry-run::\n\tDo not create a commit, but show a list of paths that are\n\tto be committed, paths with local changes that will be left\n\tuncommitted and paths that are untracked.\n\n--status::\n\tInclude the output of linkgit:git-status[1] in the commit\n\tmessage template when using an editor to prepare the commit\n\tmessage.  Defaults to on, but can be used to override\n\tconfiguration variable commit.status.\n\n--no-status::\n\tDo not include the output of linkgit:git-status[1] in the\n\tcommit message template when using an editor to prepare the\n\tdefault commit message.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand both `commit.gpgSign` configuration variable, and\n\tearlier `--gpg-sign`.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<pathspec>...::\n\tWhen pathspec is given on the command line, commit the contents of\n\tthe files that match the pathspec without recording the changes\n\talready added to the index. The contents of these files are also\n\tstaged for the next commit on top of what have been staged before.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 12903,
            "end_index": 12922,
            "value": "When recording your own work, the contents of modified files in\nyour working tree are temporarily stored to a staging area\ncalled the \"index\" with 'git add'.  A file can be\nreverted back, only in the index but not in the working tree,\nto that of the last commit with `git restore --staged <file>`,\nwhich effectively reverts 'git add' and prevents the changes to\nthis file from participating in the next commit.  After building\nthe state to be committed incrementally with these commands,\n`git commit` (without any pathname parameter) is used to record what\nhas been staged so far.  This is the most basic form of the\ncommand.  An example:\n\n------------\n$ edit hello.c\n$ git rm goodbye.c\n$ git add hello.c\n$ git commit\n------------\n\nInstead of staging files after each individual change, you can\ntell `git commit` to notice the changes to the files whose\ncontents are tracked in\nyour working tree and do corresponding `git add` and `git rm`\nfor you.  That is, this example does the same as the earlier\nexample if there is no other change in your working tree:\n\n------------\n$ edit hello.c\n$ rm goodbye.c\n$ git commit -a\n------------\n\nThe command `git commit -a` first looks at your working tree,\nnotices that you have modified hello.c and removed goodbye.c,\nand performs necessary `git add` and `git rm` for you.\n\nAfter staging changes to many files, you can alter the order the\nchanges are recorded in, by giving pathnames to `git commit`.\nWhen pathnames are given, the command makes a commit that\nonly records the changes made to the named paths:\n\n------------\n$ edit hello.c hello.h\n$ git add hello.c hello.h\n$ edit Makefile\n$ git commit Makefile\n------------\n\nThis makes a commit that records the modification to `Makefile`.\nThe changes staged for `hello.c` and `hello.h` are not included\nin the resulting commit.  However, their changes are not lost --\nthey are still staged and merely held back.  After the above\nsequence, if you do:\n\n------------\n$ git commit\n------------\n\nthis second commit would record the changes to `hello.c` and\n`hello.h` as expected.\n\nAfter a merge (initiated by 'git merge' or 'git pull') stops\nbecause of conflicts, cleanly merged\npaths are already staged to be committed for you, and paths that\nconflicted are left in unmerged state.  You would have to first\ncheck which paths are conflicting with 'git status'\nand after fixing them manually in your working tree, you would\nstage the result as usual with 'git add':\n\n------------\n$ git status | grep unmerged\nunmerged: hello.c\n$ edit hello.c\n$ git add hello.c\n------------\n\nAfter resolving conflicts and staging the result, `git ls-files -u`\nwould stop mentioning the conflicted path.  When you are done,\nrun `git commit` to finally record the merge:\n\n------------\n$ git commit\n------------\n\nAs with the case to record your own changes, you can use `-a`\noption to save typing.  One difference is that during a merge\nresolution, you cannot use `git commit` with pathnames to\nalter the order the changes are committed, because the merge\nshould be recorded as a single commit.  In fact, the command\nrefuses to run when given pathnames (but see `-i` option).\n\nCOMMIT INFORMATION\n------------------\n\nAuthor and committer information is taken from the following environment\nvariables, if set:\n\n\tGIT_AUTHOR_NAME\n\tGIT_AUTHOR_EMAIL\n\tGIT_AUTHOR_DATE\n\tGIT_COMMITTER_NAME\n\tGIT_COMMITTER_EMAIL\n\tGIT_COMMITTER_DATE\n\n(nb \"<\", \">\" and \"\\n\"s are stripped)\n\nThe author and committer names are by convention some form of a personal name\n(that is, the name by which other humans refer to you), although Git does not\nenforce or require any particular form. Arbitrary Unicode may be used, subject\nto the constraints listed above. This name has no effect on authentication; for\nthat, see the `credential.username` variable in linkgit:git-config[1].\n\nIn case (some of) these environment variables are not set, the information\nis taken from the configuration items `user.name` and `user.email`, or, if not\npresent, the environment variable EMAIL, or, if that is not set,\nsystem user name and the hostname used for outgoing mail (taken\nfrom `/etc/mailname` and falling back to the fully qualified hostname when\nthat file does not exist).\n\nThe `author.name` and `committer.name` and their corresponding email options\noverride `user.name` and `user.email` if set and are overridden themselves by\nthe environment variables.\n\nThe typical usage is to set just the `user.name` and `user.email` variables;\nthe other options are provided for more complex use cases.\n\n:git-commit: 1\ninclude::date-formats.txt[]\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 17481,
            "end_index": 17504,
            "value": "\nThough not required, it's a good idea to begin the commit message\nwith a single short (less than 50 character) line summarizing the\nchange, followed by a blank line and then a more thorough description.\nThe text up to the first blank line in a commit message is treated\nas the commit title, and that title is used throughout Git.\nFor example, linkgit:git-format-patch[1] turns a commit into email, and it uses\nthe title on the Subject line and the rest of the commit in the body.\n\ninclude::i18n.txt[]\n\nENVIRONMENT AND CONFIGURATION VARIABLES\n---------------------------------------\nThe editor used to edit the commit log message will be chosen from the\n`GIT_EDITOR` environment variable, the core.editor configuration variable, the\n`VISUAL` environment variable, or the `EDITOR` environment variable (in that\norder).  See linkgit:git-var[1] for details.\n"
        },
        "HOOKS": {
            "name": "HOOKS",
            "start_index": 18359,
            "end_index": 18372,
            "value": "This command can run `commit-msg`, `prepare-commit-msg`, `pre-commit`,\n`post-commit` and `post-rewrite` hooks.  See linkgit:githooks[5] for more\ninformation.\n"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 18530,
            "end_index": 18543,
            "value": "\n`$GIT_DIR/COMMIT_EDITMSG`::\n\tThis file contains the commit message of a commit in progress.\n\tIf `git commit` exits due to an error before creating a commit,\n\tany commit message that has been provided by the user (e.g., in\n\tan editor session) will be available in this file, but will be\n\toverwritten by the next invocation of `git commit`.\n\nSEE ALSO\n--------\nlinkgit:git-add[1],\nlinkgit:git-rm[1],\nlinkgit:git-mv[1],\nlinkgit:git-merge[1],\nlinkgit:git-commit-tree[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 19009,
            "end_index": 19018,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-config.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-config - Get and set repository or global options\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 94,
            "end_index": 113,
            "value": "[verse]\n'git config' [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] name [value [value-pattern]]\n'git config' [<file-option>] [--type=<type>] --add name value\n'git config' [<file-option>] [--type=<type>] [--fixed-value] --replace-all name value [value-pattern]\n'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get name [value-pattern]\n'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all name [value-pattern]\n'git config' [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]\n'git config' [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch name URL\n'git config' [<file-option>] [--fixed-value] --unset name [value-pattern]\n'git config' [<file-option>] [--fixed-value] --unset-all name [value-pattern]\n'git config' [<file-option>] --rename-section old_name new_name\n'git config' [<file-option>] --remove-section name\n'git config' [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list\n'git config' [<file-option>] --get-color name [default]\n'git config' [<file-option>] --get-colorbool name [stdout-is-tty]\n'git config' [<file-option>] -e | --edit\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 1451,
            "end_index": 1476,
            "value": "You can query/set/replace/unset options with this command. The name is\nactually the section and the key separated by a dot, and the value will be\nescaped.\n\nMultiple lines can be added to an option by using the `--add` option.\nIf you want to update or unset an option which can occur on multiple\nlines, a `value-pattern` (which is an extended regular expression,\nunless the `--fixed-value` option is given) needs to be given.  Only the\nexisting values that match the pattern are updated or unset.  If\nyou want to handle the lines that do *not* match the pattern, just\nprepend a single exclamation mark in front (see also <<EXAMPLES>>),\nbut note that this only works when the `--fixed-value` option is not\nin use.\n\nThe `--type=<type>` option instructs 'git config' to ensure that incoming and\noutgoing values are canonicalize-able under the given <type>.  If no\n`--type=<type>` is given, no canonicalization will be performed. Callers may\nunset an existing `--type` specifier with `--no-type`.\n\nWhen reading, the values are read from the system, global and\nrepository local configuration files by default, and options\n`--system`, `--global`, `--local`, `--worktree` and\n`--file <filename>` can be used to tell the command to read from only\nthat location (see <<FILES>>).\n\nWhen writing, the new value is written to the repository local\nconfiguration file by default, and options `--system`, `--global`,\n`--worktree`, `--file <filename>` can be used to tell the command to\nwrite to that location (you can say `--local` but that is the\ndefault).\n\nThis command will fail with non-zero status upon error.  Some exit\ncodes are:\n\n- The section or key is invalid (ret=1),\n- no section or name was provided (ret=2),\n- the config file is invalid (ret=3),\n- the config file cannot be written (ret=4),\n- you try to unset an option which does not exist (ret=5),\n- you try to unset/set an option for which multiple lines match (ret=5), or\n- you try to use an invalid regexp (ret=6).\n\nOn success, the command returns the exit code 0.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 3493,
            "end_index": 3510,
            "value": "\n--replace-all::\n\tDefault behavior is to replace at most one line. This replaces\n\tall lines matching the key (and optionally the `value-pattern`).\n\n--add::\n\tAdds a new line to the option without altering any existing\n\tvalues.  This is the same as providing '^$' as the `value-pattern`\n\tin `--replace-all`.\n\n--get::\n\tGet the value for a given key (optionally filtered by a regex\n\tmatching the value). Returns error code 1 if the key was not\n\tfound and the last value if multiple key values were found.\n\n--get-all::\n\tLike get, but returns all values for a multi-valued key.\n\n--get-regexp::\n\tLike --get-all, but interprets the name as a regular expression and\n\twrites out the key names.  Regular expression matching is currently\n\tcase-sensitive and done against a canonicalized version of the key\n\tin which section and variable names are lowercased, but subsection\n\tnames are not.\n\n--get-urlmatch name URL::\n\tWhen given a two-part name section.key, the value for\n\tsection.<url>.key whose <url> part matches the best to the\n\tgiven URL is returned (if no such key exists, the value for\n\tsection.key is used as a fallback).  When given just the\n\tsection as name, do so for all the keys in the section and\n\tlist them.  Returns error code 1 if no value is found.\n\n--global::\n\tFor writing options: write to global `~/.gitconfig` file\n\trather than the repository `.git/config`, write to\n\t`$XDG_CONFIG_HOME/git/config` file if this file exists and the\n\t`~/.gitconfig` file doesn't.\n+\nFor reading options: read only from global `~/.gitconfig` and from\n`$XDG_CONFIG_HOME/git/config` rather than from all available files.\n+\nSee also <<FILES>>.\n\n--system::\n\tFor writing options: write to system-wide\n\t`$(prefix)/etc/gitconfig` rather than the repository\n\t`.git/config`.\n+\nFor reading options: read only from system-wide `$(prefix)/etc/gitconfig`\nrather than from all available files.\n+\nSee also <<FILES>>.\n\n--local::\n\tFor writing options: write to the repository `.git/config` file.\n\tThis is the default behavior.\n+\nFor reading options: read only from the repository `.git/config` rather than\nfrom all available files.\n+\nSee also <<FILES>>.\n\n--worktree::\n\tSimilar to `--local` except that `.git/config.worktree` is\n\tread from or written to if `extensions.worktreeConfig` is\n\tpresent. If not it's the same as `--local`.\n\n-f config-file::\n--file config-file::\n\tUse the given config file instead of the one specified by GIT_CONFIG.\n\n--blob blob::\n\tSimilar to `--file` but use the given blob instead of a file. E.g.\n\tyou can use 'master:.gitmodules' to read values from the file\n\t'.gitmodules' in the master branch. See \"SPECIFYING REVISIONS\"\n\tsection in linkgit:gitrevisions[7] for a more complete list of\n\tways to spell blob names.\n\n--remove-section::\n\tRemove the given section from the configuration file.\n\n--rename-section::\n\tRename the given section to a new name.\n\n--unset::\n\tRemove the line matching the key from config file.\n\n--unset-all::\n\tRemove all lines matching the key from config file.\n\n-l::\n--list::\n\tList all variables set in config file, along with their values.\n\n--fixed-value::\n\tWhen used with the `value-pattern` argument, treat `value-pattern` as\n\tan exact string instead of a regular expression. This will restrict\n\tthe name/value pairs that are matched to only those where the value\n\tis exactly equal to the `value-pattern`.\n\n--type <type>::\n  'git config' will ensure that any input or output is valid under the given\n  type constraint(s), and will canonicalize outgoing values in `<type>`'s\n  canonical form.\n+\nValid `<type>`'s include:\n+\n- 'bool': canonicalize values as either \"true\" or \"false\".\n- 'int': canonicalize values as simple decimal numbers. An optional suffix of\n  'k', 'm', or 'g' will cause the value to be multiplied by 1024, 1048576, or\n  1073741824 upon input.\n- 'bool-or-int': canonicalize according to either 'bool' or 'int', as described\n  above.\n- 'path': canonicalize by adding a leading `~` to the value of `$HOME` and\n  `~user` to the home directory for the specified user. This specifier has no\n  effect when setting the value (but you can use `git config section.variable\n  ~/` from the command line to let your shell do the expansion.)\n- 'expiry-date': canonicalize by converting from a fixed or relative date-string\n  to a timestamp. This specifier has no effect when setting the value.\n- 'color': When getting a value, canonicalize by converting to an ANSI color\n  escape sequence. When setting a value, a sanity-check is performed to ensure\n  that the given value is canonicalize-able as an ANSI color, but it is written\n  as-is.\n+\n\n--bool::\n--int::\n--bool-or-int::\n--path::\n--expiry-date::\n  Historical options for selecting a type specifier. Prefer instead `--type`\n  (see above).\n\n--no-type::\n  Un-sets the previously set type specifier (if one was previously set). This\n  option requests that 'git config' not canonicalize the retrieved variable.\n  `--no-type` has no effect without `--type=<type>` or `--<type>`.\n\n-z::\n--null::\n\tFor all options that output values and/or keys, always\n\tend values with the null character (instead of a\n\tnewline). Use newline instead as a delimiter between\n\tkey and value. This allows for secure parsing of the\n\toutput without getting confused e.g. by values that\n\tcontain line breaks.\n\n--name-only::\n\tOutput only the names of config variables for `--list` or\n\t`--get-regexp`.\n\n--show-origin::\n\tAugment the output of all queried config options with the\n\torigin type (file, standard input, blob, command line) and\n\tthe actual origin (config file path, ref, or blob id if\n\tapplicable).\n\n--show-scope::\n\tSimilar to `--show-origin` in that it augments the output of\n\tall queried config options with the scope of that value\n\t(local, global, system, command).\n\n--get-colorbool name [stdout-is-tty]::\n\n\tFind the color setting for `name` (e.g. `color.diff`) and output\n\t\"true\" or \"false\".  `stdout-is-tty` should be either \"true\" or\n\t\"false\", and is taken into account when configuration says\n\t\"auto\".  If `stdout-is-tty` is missing, then checks the standard\n\toutput of the command itself, and exits with status 0 if color\n\tis to be used, or exits with status 1 otherwise.\n\tWhen the color setting for `name` is undefined, the command uses\n\t`color.ui` as fallback.\n\n--get-color name [default]::\n\n\tFind the color configured for `name` (e.g. `color.diff.new`) and\n\toutput it as the ANSI color escape sequence to the standard\n\toutput.  The optional `default` parameter is used instead, if\n\tthere is no color configured for `name`.\n+\n`--type=color [--default=<default>]` is preferred over `--get-color`\n(but note that `--get-color` will omit the trailing newline printed by\n`--type=color`).\n\n-e::\n--edit::\n\tOpens an editor to modify the specified config file; either\n\t`--system`, `--global`, or repository (default).\n\n--[no-]includes::\n\tRespect `include.*` directives in config files when looking up\n\tvalues. Defaults to `off` when a specific file is given (e.g.,\n\tusing `--file`, `--global`, etc) and `on` when searching all\n\tconfig files.\n\n--default <value>::\n  When using `--get`, and the requested variable is not found, behave as if\n  <value> were the value assigned to the that variable.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 10665,
            "end_index": 10694,
            "value": "`pager.config` is only respected when listing configuration, i.e., when\nusing `--list` or any of the `--get-*` which may return multiple results.\nThe default is to use a pager.\n\n[[FILES]]"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 10881,
            "end_index": 10894,
            "value": "\nIf not set explicitly with `--file`, there are four files where\n'git config' will search for configuration options:\n\n$(prefix)/etc/gitconfig::\n\tSystem-wide configuration file.\n\n$XDG_CONFIG_HOME/git/config::\n\tSecond user-specific configuration file. If $XDG_CONFIG_HOME is not set\n\tor empty, `$HOME/.config/git/config` will be used. Any single-valued\n\tvariable set in this file will be overwritten by whatever is in\n\t`~/.gitconfig`.  It is a good idea not to create this file if\n\tyou sometimes use older versions of Git, as support for this\n\tfile was added fairly recently.\n\n~/.gitconfig::\n\tUser-specific configuration file. Also called \"global\"\n\tconfiguration file.\n\n$GIT_DIR/config::\n\tRepository specific configuration file.\n\n$GIT_DIR/config.worktree::\n\tThis is optional and is only searched when\n\t`extensions.worktreeConfig` is present in $GIT_DIR/config.\n\nIf no further options are given, all reading options will read all of these\nfiles that are available. If the global or the system-wide configuration\nfile are not available they will be ignored. If the repository configuration\nfile is not available or readable, 'git config' will exit with a non-zero\nerror code. However, in neither case will an error message be issued.\n\nThe files are read in the order given above, with last value found taking\nprecedence over values read earlier.  When multiple values are taken then all\nvalues of a key from all files will be used.\n\nYou may override individual configuration parameters when running any git\ncommand by using the `-c` option. See linkgit:git[1] for details.\n\nAll writing options will per default write to the repository specific\nconfiguration file. Note that this also affects options like `--replace-all`\nand `--unset`. *'git config' will only ever change one file at a time*.\n\nYou can override these rules either by command-line options or by environment\nvariables. The `--global`, `--system` and `--worktree` options will limit\nthe file used to the global, system-wide or per-worktree file respectively.\nThe `GIT_CONFIG` environment variable has a similar effect, but you\ncan specify any filename you want.\n\n"
        },
        "ENVIRONMENT": {
            "name": "ENVIRONMENT",
            "start_index": 13016,
            "end_index": 13041,
            "value": "\nGIT_CONFIG::\n\tTake the configuration from the given file instead of .git/config.\n\tUsing the \"--global\" option forces this to ~/.gitconfig. Using the\n\t\"--system\" option forces this to $(prefix)/etc/gitconfig.\n\nGIT_CONFIG_NOSYSTEM::\n\tWhether to skip reading settings from the system-wide\n\t$(prefix)/etc/gitconfig file. See linkgit:git[1] for details.\n\nSee also <<FILES>>.\n\nGIT_CONFIG_COUNT::\nGIT_CONFIG_KEY_<n>::\nGIT_CONFIG_VALUE_<n>::\n\tIf GIT_CONFIG_COUNT is set to a positive number, all environment pairs\n\tGIT_CONFIG_KEY_<n> and GIT_CONFIG_VALUE_<n> up to that number will be\n\tadded to the process's runtime configuration. The config pairs are\n\tzero-indexed. Any missing key or value is treated as an error. An empty\n\tGIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no\n\tpairs are processed. These environment variables will override values\n\tin configuration files, but will be overridden by any explicit options\n\tpassed via `git -c`.\n+\nThis is useful for cases where you want to spawn multiple git commands\nwith a common configuration but cannot depend on a configuration file,\nfor example when writing scripts.\n\n\n[[EXAMPLES]]"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 14188,
            "end_index": 14207,
            "value": "\nGiven a .git/config like this:\n\n------------\n#\n# This is the config file, and\n# a '#' or ';' character indicates\n# a comment\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; Our diff algorithm\n[diff]\n\texternal = /usr/local/bin/diff-wrapper\n\trenames = true\n\n; Proxy settings\n[core]\n\tgitproxy=proxy-command for kernel.org\n\tgitproxy=default-proxy ; for all the rest\n\n; HTTP\n[http]\n\tsslVerify\n[http \"https://weak.example.com\"]\n\tsslVerify = false\n\tcookieFile = /tmp/cookie.txt\n------------\n\nyou can set the filemode to true with\n\n------------\n% git config core.filemode true\n------------\n\nThe hypothetical proxy command entries actually have a postfix to discern\nwhat URL they apply to. Here is how to change the entry for kernel.org\nto \"ssh\".\n\n------------\n% git config core.gitproxy '\"ssh\" for kernel.org' 'for kernel.org$'\n------------\n\nThis makes sure that only the key/value pair for kernel.org is replaced.\n\nTo delete the entry for renames, do\n\n------------\n% git config --unset diff.renames\n------------\n\nIf you want to delete an entry for a multivar (like core.gitproxy above),\nyou have to provide a regex matching the value of exactly one line.\n\nTo query the value for a given key, do\n\n------------\n% git config --get core.filemode\n------------\n\nor\n\n------------\n% git config core.filemode\n------------\n\nor, to query a multivar:\n\n------------\n% git config --get core.gitproxy \"for kernel.org$\"\n------------\n\nIf you want to know all the values for a multivar, do:\n\n------------\n% git config --get-all core.gitproxy\n------------\n\nIf you like to live dangerously, you can replace *all* core.gitproxy by a\nnew one with\n\n------------\n% git config --replace-all core.gitproxy ssh\n------------\n\nHowever, if you really only want to replace the line for the default proxy,\ni.e. the one without a \"for ...\" postfix, do something like this:\n\n------------\n% git config core.gitproxy ssh '! for '\n------------\n\nTo actually match only values with an exclamation mark, you have to\n\n------------\n% git config section.key value '[!]'\n------------\n\nTo add a new proxy, without altering any of the existing ones, use\n\n------------\n% git config --add core.gitproxy '\"proxy-command\" for example.com'\n------------\n\nAn example to use customized color from the configuration in your\nscript:\n\n------------\n#!/bin/sh\nWS=$(git config --get-color color.diff.whitespace \"blue reverse\")\nRESET=$(git config --get-color \"\" \"reset\")\necho \"${WS}your whitespace color or blue reverse${RESET}\"\n------------\n\nFor URLs in `https://weak.example.com`, `http.sslVerify` is set to\nfalse, while it is set to `true` for all others:\n\n------------\n% git config --type=bool --get-urlmatch http.sslverify https://good.example.com\ntrue\n% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com\nfalse\n% git config --get-urlmatch http https://weak.example.com\nhttp.cookieFile /tmp/cookie.txt\nhttp.sslverify false\n------------\n\ninclude::config.txt[]\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 17157,
            "end_index": 17168,
            "value": "When using the deprecated `[section.subsection]` syntax, changing a value\nwill result in adding a multi-line key instead of a change, if the subsection\nis given with at least one uppercase character. For example when the config\nlooks like\n\n--------\n  [section.subsection]\n    key = value1\n--------\n\nand running `git config section.Subsection.key value2` will result in\n\n--------\n  [section.subsection]\n    key = value1\n    key = value2\n--------\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 17614,
            "end_index": 17623,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-count-objects.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-count-objects - Count unpacked number of objects and their disk consumption\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 133,
            "end_index": 152,
            "value": "[verse]\n'git count-objects' [-v] [-H | --human-readable]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 209,
            "end_index": 234,
            "value": "This counts the number of unpacked object files and disk space consumed by\nthem, to help you decide when it is a good time to repack.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 369,
            "end_index": 386,
            "value": "\n-v::\n--verbose::\n\tReport in more detail:\n+\ncount: the number of loose objects\n+\nsize: disk space consumed by loose objects, in KiB (unless -H is specified)\n+\nin-pack: the number of in-pack objects\n+\nsize-pack: disk space consumed by the packs, in KiB (unless -H is specified)\n+\nprune-packable: the number of loose objects that are also present in\nthe packs. These objects could be pruned using `git prune-packed`.\n+\ngarbage: the number of files in object database that are neither valid loose\nobjects nor valid packs\n+\nsize-garbage: disk space consumed by garbage files, in KiB (unless -H is\nspecified)\n+\nalternate: absolute path of alternate object databases; may appear\nmultiple times, one line per path. Note that if the path contains\nnon-printable characters, it may be surrounded by double-quotes and\ncontain C-style backslashed escape sequences.\n\n-H::\n--human-readable::\n\nPrint sizes in human readable format\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1301,
            "end_index": 1310,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-credential-cache--daemon.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 64,
            "end_index": 75,
            "value": "git-credential-cache--daemon - Temporarily store user credentials in memory\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 151,
            "end_index": 170,
            "value": "[verse]\ngit credential-cache--daemon [--debug] <socket>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 226,
            "end_index": 251,
            "value": "\nNOTE: You probably don't want to invoke this command yourself; it is\nstarted automatically when you use linkgit:git-credential-cache[1].\n\nThis command listens on the Unix domain socket specified by `<socket>`\nfor `git-credential-cache` clients. Clients may store and retrieve\ncredentials. Each credential is held for a timeout specified by the\nclient; once no credentials are held, the daemon exits.\n\nIf the `--debug` option is specified, the daemon does not close its\nstderr stream, and may output extra diagnostics to it even after it has\nbegun listening for clients.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 822,
            "end_index": 831,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-credential-cache.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 48,
            "end_index": 59,
            "value": "git-credential-cache - Helper to temporarily store passwords in memory\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 130,
            "end_index": 149,
            "value": "-----------------------------\ngit config credential.helper 'cache [<options>]'\n-----------------------------\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 258,
            "end_index": 283,
            "value": "\nThis command caches credentials in memory for use by future Git\nprograms. The stored credentials never touch the disk, and are forgotten\nafter a configurable timeout.  The cache is accessible over a Unix\ndomain socket, restricted to the current user by filesystem permissions.\n\nYou probably don't want to invoke this command directly; it is meant to\nbe used as a credential helper by other parts of Git. See\nlinkgit:gitcredentials[7] or `EXAMPLES` below.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 739,
            "end_index": 756,
            "value": "\n--timeout <seconds>::\n\n\tNumber of seconds to cache credentials (default: 900).\n\n--socket <path>::\n\n\tUse `<path>` to contact a running cache daemon (or start a new\n\tcache daemon if one is not started).\n\tDefaults to `$XDG_CACHE_HOME/git/credential/socket` unless\n\t`~/.git-credential-cache/` exists in which case\n\t`~/.git-credential-cache/socket` is used instead.\n\tIf your home directory is on a network-mounted filesystem, you\n\tmay need to change this to a local filesystem. You must specify\n\tan absolute path.\n\nCONTROLLING THE DAEMON\n----------------------\n\nIf you would like the daemon to exit early, forgetting all cached\ncredentials before their timeout, you can issue an `exit` action:\n\n--------------------------------------\ngit credential-cache exit\n--------------------------------------\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1551,
            "end_index": 1570,
            "value": "\nThe point of this helper is to reduce the number of times you must type\nyour username or password. For example:\n\n------------------------------------\n$ git config credential.helper cache\n$ git push http://example.com/repo.git\nUsername: <type your username>\nPassword: <type your password>\n\n[work for 5 more minutes]\n$ git push http://example.com/repo.git\n[your credentials are used automatically]\n------------------------------------\n\nYou can provide options via the credential.helper configuration\nvariable (this example drops the cache time to 5 minutes):\n\n-------------------------------------------------------\n$ git config credential.helper 'cache --timeout=300'\n-------------------------------------------------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2294,
            "end_index": 2303,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-credential-store.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 48,
            "end_index": 59,
            "value": "git-credential-store - Helper to store credentials on disk\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 118,
            "end_index": 137,
            "value": "-------------------\ngit config credential.helper 'store [<options>]'\n-------------------\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 226,
            "end_index": 251,
            "value": "\nNOTE: Using this helper will store your passwords unencrypted on disk,\nprotected only by filesystem permissions. If this is not an acceptable\nsecurity tradeoff, try linkgit:git-credential-cache[1], or find a helper\nthat integrates with secure storage provided by your operating system.\n\nThis command stores credentials indefinitely on disk for use by future\nGit programs.\n\nYou probably don't want to invoke this command directly; it is meant to\nbe used as a credential helper by other parts of git. See\nlinkgit:gitcredentials[7] or `EXAMPLES` below.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 802,
            "end_index": 819,
            "value": "\n--file=<path>::\n\n\tUse `<path>` to lookup and store credentials. The file will have its\n\tfilesystem permissions set to prevent other users on the system\n\tfrom reading it, but will not be encrypted or otherwise\n\tprotected. If not specified, credentials will be searched for from\n\t`~/.git-credentials` and `$XDG_CONFIG_HOME/git/credentials`, and\n\tcredentials will be written to `~/.git-credentials` if it exists, or\n\t`$XDG_CONFIG_HOME/git/credentials` if it exists and the former does\n\tnot. See also <<FILES>>.\n\n[[FILES]]"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 1338,
            "end_index": 1351,
            "value": "\nIf not set explicitly with `--file`, there are two files where\ngit-credential-store will search for credentials in order of precedence:\n\n~/.git-credentials::\n\tUser-specific credentials file.\n\n$XDG_CONFIG_HOME/git/credentials::\n\tSecond user-specific credentials file. If '$XDG_CONFIG_HOME' is not set\n\tor empty, `$HOME/.config/git/credentials` will be used. Any credentials\n\tstored in this file will not be used if `~/.git-credentials` has a\n\tmatching credential as well. It is a good idea not to create this file\n\tif you sometimes use older versions of Git that do not support it.\n\nFor credential lookups, the files are read in the order given above, with the\nfirst matching credential found taking precedence over credentials found in\nfiles further down the list.\n\nCredential storage will by default write to the first existing file in the\nlist. If none of these files exist, `~/.git-credentials` will be created and\nwritten to.\n\nWhen erasing credentials, matching credentials will be erased from all files.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2361,
            "end_index": 2380,
            "value": "\nThe point of this helper is to reduce the number of times you must type\nyour username or password. For example:\n\n------------------------------------------\n$ git config credential.helper store\n$ git push http://example.com/repo.git\nUsername: <type your username>\nPassword: <type your password>\n\n[several days later]\n$ git push http://example.com/repo.git\n[your credentials are used automatically]\n------------------------------------------\n\nSTORAGE FORMAT\n--------------\n\nThe `.git-credentials` file is stored in plaintext. Each credential is\nstored on its own line as a URL like:\n\n------------------------------\nhttps://user:pass@example.com\n------------------------------\n\nNo other kinds of lines (e.g. empty lines or comment lines) are\nallowed in the file, even though some may be silently ignored. Do\nnot view or edit the file with editors.\n\nWhen Git needs authentication for a particular URL context,\ncredential-store will consider that context a pattern to match against\neach entry in the credentials file.  If the protocol, hostname, and\nusername (if we already have one) match, then the password is returned\nto Git. See the discussion of configuration in linkgit:gitcredentials[7]\nfor more information.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3592,
            "end_index": 3601,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-credential.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-credential - Retrieve and store user credentials\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 100,
            "end_index": 119,
            "value": "------------------\ngit credential <fill|approve|reject>\n------------------\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 194,
            "end_index": 219,
            "value": "\nGit has an internal interface for storing and retrieving credentials\nfrom system-specific helpers, as well as prompting the user for\nusernames and passwords. The git-credential command exposes this\ninterface to scripts which may want to retrieve, store, or prompt for\ncredentials in the same manner as Git. The design of this scriptable\ninterface models the internal C API; see credential.h for more\nbackground on the concepts.\n\ngit-credential takes an \"action\" option on the command-line (one of\n`fill`, `approve`, or `reject`) and reads a credential description\non stdin (see <<IOFMT,INPUT/OUTPUT FORMAT>>).\n\nIf the action is `fill`, git-credential will attempt to add \"username\"\nand \"password\" attributes to the description by reading config files,\nby contacting any configured credential helpers, or by prompting the\nuser. The username and password attributes of the credential\ndescription are then printed to stdout together with the attributes\nalready provided.\n\nIf the action is `approve`, git-credential will send the description\nto any configured credential helpers, which may store the credential\nfor later use.\n\nIf the action is `reject`, git-credential will send the description to\nany configured credential helpers, which may erase any stored\ncredential matching the description.\n\nIf the action is `approve` or `reject`, no output should be emitted.\n\nTYPICAL USE OF GIT CREDENTIAL\n-----------------------------\n\nAn application using git-credential will typically use `git\ncredential` following these steps:\n\n  1. Generate a credential description based on the context.\n+\nFor example, if we want a password for\n`https://example.com/foo.git`, we might generate the following\ncredential description (don't forget the blank line at the end; it\ntells `git credential` that the application finished feeding all the\ninformation it has):\n\n\t protocol=https\n\t host=example.com\n\t path=foo.git\n\n  2. Ask git-credential to give us a username and password for this\n     description. This is done by running `git credential fill`,\n     feeding the description from step (1) to its standard input. The complete\n     credential description (including the credential per se, i.e. the\n     login and password) will be produced on standard output, like:\n\n\tprotocol=https\n\thost=example.com\n\tusername=bob\n\tpassword=secr3t\n+\nIn most cases, this means the attributes given in the input will be\nrepeated in the output, but Git may also modify the credential\ndescription, for example by removing the `path` attribute when the\nprotocol is HTTP(s) and `credential.useHttpPath` is false.\n+\nIf the `git credential` knew about the password, this step may\nnot have involved the user actually typing this password (the\nuser may have typed a password to unlock the keychain instead,\nor no user interaction was done if the keychain was already\nunlocked) before it returned `password=secr3t`.\n\n  3. Use the credential (e.g., access the URL with the username and\n     password from step (2)), and see if it's accepted.\n\n  4. Report on the success or failure of the password. If the\n     credential allowed the operation to complete successfully, then\n     it can be marked with an \"approve\" action to tell `git\n     credential` to reuse it in its next invocation. If the credential\n     was rejected during the operation, use the \"reject\" action so\n     that `git credential` will ask for a new password in its next\n     invocation. In either case, `git credential` should be fed with\n     the credential description obtained from step (2) (which also\n     contain the ones provided in step (1)).\n\n[[IOFMT]]\nINPUT/OUTPUT FORMAT\n-------------------\n\n`git credential` reads and/or writes (depending on the action used)\ncredential information in its standard input/output. This information\ncan correspond either to keys for which `git credential` will obtain\nthe login information (e.g. host, protocol, path), or to the actual\ncredential data to be obtained (username/password).\n\nThe credential is split into a set of named attributes, with one\nattribute per line. Each attribute is specified by a key-value pair,\nseparated by an `=` (equals) sign, followed by a newline.\n\nThe key may contain any bytes except `=`, newline, or NUL. The value may\ncontain any bytes except newline or NUL.\n\nIn both cases, all bytes are treated as-is (i.e., there is no quoting,\nand one cannot transmit a value with newline or NUL in it). The list of\nattributes is terminated by a blank line or end-of-file.\n\nGit understands the following attributes:\n\n`protocol`::\n\n\tThe protocol over which the credential will be used (e.g.,\n\t`https`).\n\n`host`::\n\n\tThe remote hostname for a network credential.  This includes\n\tthe port number if one was specified (e.g., \"example.com:8088\").\n\n`path`::\n\n\tThe path with which the credential will be used. E.g., for\n\taccessing a remote https repository, this will be the\n\trepository's path on the server.\n\n`username`::\n\n\tThe credential's username, if we already have one (e.g., from a\n\tURL, the configuration, the user, or from a previously run helper).\n\n`password`::\n\n\tThe credential's password, if we are asking it to be stored.\n\n`url`::\n\n\tWhen this special attribute is read by `git credential`, the\n\tvalue is parsed as a URL and treated as if its constituent parts\n\twere read (e.g., `url=https://example.com` would behave as if\n\t`protocol=https` and `host=example.com` had been provided). This\n\tcan help callers avoid parsing URLs themselves.\n+\nNote that specifying a protocol is mandatory and if the URL\ndoesn't specify a hostname (e.g., \"cert:///path/to/file\") the\ncredential will contain a hostname attribute whose value is an\nempty string.\n+\nComponents which are missing from the URL (e.g., there is no\nusername in the example above) will be left unset.\n"
        }
    },
    "git-cvsexportcommit.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 46,
            "end_index": 57,
            "value": "git-cvsexportcommit - Export a single commit to a CVS checkout\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 121,
            "end_index": 140,
            "value": "[verse]\n'git cvsexportcommit' [-h] [-u] [-v] [-c] [-P] [-p] [-a] [-d cvsroot]\n\t[-w cvsworkdir] [-W] [-f] [-m msgprefix] [PARENTCOMMIT] COMMITID\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 285,
            "end_index": 310,
            "value": "Exports a commit from Git to a CVS checkout, making it easier\nto merge patches from a Git repository into a CVS repository.\n\nSpecify the name of a CVS checkout using the -w switch or execute it\nfrom the root of the CVS working copy. In the latter case GIT_DIR must\nbe defined. See examples below.\n\nIt does its best to do the safe thing, it will check that the files are\nunchanged and up to date in the CVS checkout, and it will not autocommit\nby default.\n\nSupports file additions, removals, and commits that affect binary files.\n\nIf the commit is a merge commit, you must tell 'git cvsexportcommit' what\nparent the changeset should be done against.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 959,
            "end_index": 976,
            "value": "\n-c::\n\tCommit automatically if the patch applied cleanly. It will not\n\tcommit if any hunks fail to apply or there were other problems.\n\n-p::\n\tBe pedantic (paranoid) when applying patches. Invokes patch with\n\t--fuzz=0\n\n-a::\n\tAdd authorship information. Adds Author line, and Committer (if\n\tdifferent from Author) to the message.\n\n-d::\n\tSet an alternative CVSROOT to use.  This corresponds to the CVS\n\t-d parameter.  Usually users will not want to set this, except\n\tif using CVS in an asymmetric fashion.\n\n-f::\n\tForce the merge even if the files are not up to date.\n\n-P::\n\tForce the parent commit, even if it is not a direct parent.\n\n-m::\n\tPrepend the commit message with the provided prefix.\n\tUseful for patch series and the like.\n\n-u::\n\tUpdate affected files from CVS repository before attempting export.\n\n-k::\n\tReverse CVS keyword expansion (e.g. $Revision: 1.2.3.4$\n\tbecomes $Revision$) in working CVS checkout before applying patch.\n\n-w::\n\tSpecify the location of the CVS checkout to use for the export. This\n\toption does not require GIT_DIR to be set before execution if the\n\tcurrent directory is within a Git repository.  The default is the\n\tvalue of 'cvsexportcommit.cvsdir'.\n\n-W::\n\tTell cvsexportcommit that the current working directory is not only\n\ta Git checkout, but also the CVS checkout.  Therefore, Git will\n\treset the working directory to the parent commit before proceeding.\n\n-v::\n\tVerbose.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 2383,
            "end_index": 2412,
            "value": "cvsexportcommit.cvsdir::\n\tThe default location of the CVS checkout to use for the export.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2502,
            "end_index": 2521,
            "value": "\nMerge one patch into CVS::\n+\n------------\n$ export GIT_DIR=~/project/.git\n$ cd ~/project_cvs_checkout\n$ git cvsexportcommit -v <commit-sha1>\n$ cvs commit -F .msg <files>\n------------\n\nMerge one patch into CVS (-c and -w options). The working directory is within the Git Repo::\n+\n------------\n\t$ git cvsexportcommit -v -c -w ~/project_cvs_checkout <commit-sha1>\n------------\n\nMerge pending patches into CVS automatically -- only if you really know what you are doing::\n+\n------------\n$ export GIT_DIR=~/project/.git\n$ cd ~/project_cvs_checkout\n$ git cherry cvshead myhead | sed -n 's/^+ //p' | xargs -l1 git cvsexportcommit -c -p -v\n------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3167,
            "end_index": 3176,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-cvsimport.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-cvsimport - Salvage your data out of another SCM people love to hate\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 119,
            "end_index": 138,
            "value": "[verse]\n'git cvsimport' [-o <branch-for-HEAD>] [-h] [-v] [-d <CVSROOT>]\n\t      [-A <author-conv-file>] [-p <options-for-cvsps>] [-P <file>]\n\t      [-C <git_repository>] [-z <fuzz>] [-i] [-k] [-u] [-s <subst>]\n\t      [-a] [-m] [-M <regex>] [-S <regex>] [-L <commitlimit>]\n\t      [-r <remote>] [-R] [<CVS_module>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 451,
            "end_index": 476,
            "value": "*WARNING:* `git cvsimport` uses cvsps version 2, which is considered\ndeprecated; it does not work with cvsps version 3 and later.  If you are\nperforming a one-shot import of a CVS repository consider using\nhttp://cvs2svn.tigris.org/cvs2git.html[cvs2git] or\nhttp://www.catb.org/esr/cvs-fast-export/[cvs-fast-export].\n\nImports a CVS repository into Git. It will either create a new\nrepository, or incrementally import into an existing one.\n\nSplitting the CVS log into patch sets is done by 'cvsps'.\nAt least version 2.1 is required.\n\n*WARNING:* for certain situations the import leads to incorrect results.\nPlease see the section <<issues,ISSUES>> for further reference.\n\nYou should *never* do any work of your own on the branches that are\ncreated by 'git cvsimport'.  By default initial import will create and populate a\n\"master\" branch from the CVS repository's main branch which you're free\nto work with; after that, you need to 'git merge' incremental imports, or\nany CVS branches, yourself.  It is advisable to specify a named remote via\n-r to separate and protect the incoming branches.\n\nIf you intend to set up a shared public repository that all developers can\nread/write, or if you want to use linkgit:git-cvsserver[1], then you\nprobably want to make a bare clone of the imported repository,\nand use the clone as the shared repository.\nSee linkgit:gitcvs-migration[7].\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1853,
            "end_index": 1870,
            "value": "\n-v::\n\tVerbosity: let 'cvsimport' report what it is doing.\n\n-d <CVSROOT>::\n\tThe root of the CVS archive. May be local (a simple path) or remote;\n\tcurrently, only the :local:, :ext: and :pserver: access methods\n\tare supported. If not given, 'git cvsimport' will try to read it\n\tfrom `CVS/Root`. If no such file exists, it checks for the\n\t`CVSROOT` environment variable.\n\n<CVS_module>::\n\tThe CVS module you want to import. Relative to <CVSROOT>.\n\tIf not given, 'git cvsimport' tries to read it from\n\t`CVS/Repository`.\n\n-C <target-dir>::\n\tThe Git repository to import to.  If the directory doesn't\n        exist, it will be created.  Default is the current directory.\n\n-r <remote>::\n\tThe Git remote to import this CVS repository into.\n\tMoves all CVS branches into remotes/<remote>/<branch>\n\takin to the way 'git clone' uses 'origin' by default.\n\n-o <branch-for-HEAD>::\n\tWhen no remote is specified (via -r) the `HEAD` branch\n\tfrom CVS is imported to the 'origin' branch within the Git\n\trepository, as `HEAD` already has a special meaning for Git.\n\tWhen a remote is specified the `HEAD` branch is named\n\tremotes/<remote>/master mirroring 'git clone' behaviour.\n\tUse this option if you want to import into a different\n\tbranch.\n+\nUse '-o master' for continuing an import that was initially done by\nthe old cvs2git tool.\n\n-i::\n\tImport-only: don't perform a checkout after importing.  This option\n\tensures the working directory and index remain untouched and will\n\tnot create them if they do not exist.\n\n-k::\n\tKill keywords: will extract files with '-kk' from the CVS archive\n\tto avoid noisy changesets. Highly recommended, but off by default\n\tto preserve compatibility with early imported trees.\n\n-u::\n\tConvert underscores in tag and branch names to dots.\n\n-s <subst>::\n\tSubstitute the character \"/\" in branch names with <subst>\n\n-p <options-for-cvsps>::\n\tAdditional options for cvsps.\n\tThe options `-u` and '-A' are implicit and should not be used here.\n+\nIf you need to pass multiple options, separate them with a comma.\n\n-z <fuzz>::\n\tPass the timestamp fuzz factor to cvsps, in seconds. If unset,\n\tcvsps defaults to 300s.\n\n-P <cvsps-output-file>::\n\tInstead of calling cvsps, read the provided cvsps output file. Useful\n\tfor debugging or when cvsps is being handled outside cvsimport.\n\n-m::\n\tAttempt to detect merges based on the commit message. This option\n\twill enable default regexes that try to capture the source\n\tbranch name from the commit message.\n\n-M <regex>::\n\tAttempt to detect merges based on the commit message with a custom\n\tregex. It can be used with `-m` to enable the default regexes\n\tas well. You must escape forward slashes.\n+\nThe regex must capture the source branch name in $1.\n+\nThis option can be used several times to provide several detection regexes.\n\n-S <regex>::\n\tSkip paths matching the regex.\n\n-a::\n\tImport all commits, including recent ones. cvsimport by default\n\tskips commits that have a timestamp less than 10 minutes ago.\n\n-L <limit>::\n\tLimit the number of commits imported. Workaround for cases where\n\tcvsimport leaks memory.\n\n-A <author-conv-file>::\n\tCVS by default uses the Unix username when writing its\n\tcommit logs. Using this option and an author-conv-file\n\tmaps the name recorded in CVS to author name, e-mail and\n\toptional time zone:\n+\n---------\n\texon=Andreas Ericsson <ae@op5.se>\n\tspawn=Simon Pawn <spawn@frog-pond.org> America/Chicago\n\n---------\n+\n'git cvsimport' will make it appear as those authors had\ntheir GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly\nall along.  If a time zone is specified, GIT_AUTHOR_DATE will\nhave the corresponding offset applied.\n+\nFor convenience, this data is saved to `$GIT_DIR/cvs-authors`\neach time the '-A' option is provided and read from that same\nfile each time 'git cvsimport' is run.\n+\nIt is not recommended to use this feature if you intend to\nexport changes back to CVS again later with\n'git cvsexportcommit'.\n\n-R::\n\tGenerate a `$GIT_DIR/cvs-revisions` file containing a mapping from CVS\n\trevision numbers to newly-created Git commit IDs.  The generated file\n\twill contain one line for each (filename, revision) pair imported;\n\teach line will look like\n+\n---------\nsrc/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7\n---------\n+\nThe revision data is appended to the file if it already exists, for use when\ndoing incremental imports.\n+\nThis option may be useful if you have CVS revision numbers stored in commit\nmessages, bug-tracking systems, email archives, and the like.\n\n-h::\n\tPrint a short usage message and exit.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 6379,
            "end_index": 6394,
            "value": "If `-v` is specified, the script reports what it is doing.\n\nOtherwise, success is indicated the Unix way, i.e. by simply exiting with\na zero exit status.\n\n[[issues]]"
        },
        "ISSUES": {
            "name": "ISSUES",
            "start_index": 6559,
            "end_index": 6574,
            "value": "Problems related to timestamps:\n\n * If timestamps of commits in the CVS repository are not stable enough\n   to be used for ordering commits changes may show up in the wrong\n   order.\n * If any files were ever \"cvs import\"ed more than once (e.g., import of\n   more than one vendor release) the HEAD contains the wrong content.\n * If the timestamp order of different files cross the revision order\n   within the commit matching time window the order of commits may be\n   wrong.\n\nProblems related to branches:\n\n * Branches on which no commits have been made are not imported.\n * All files from the branching point are added to a branch even if\n   never added in CVS.\n * This applies to files added to the source branch *after* a daughter\n   branch was created: if previously no commit was made on the daughter\n   branch they will erroneously be added to the daughter branch in git.\n\nProblems related to tags:\n\n* Multiple tags on the same revision are not imported.\n\nIf you suspect that any of these issues may apply to the repository you\nwant to import, consider using cvs2git:\n\n* cvs2git (part of cvs2svn), `http://subversion.apache.org/`\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7711,
            "end_index": 7720,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-cvsserver.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-cvsserver - A CVS server emulator for Git\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 91,
            "end_index": 110,
            "value": "\nSSH:\n\n[verse]\nexport CVS_SERVER=\"git cvsserver\"\n'cvs' -d :ext:user@server/path/repo.git co <HEAD_name>\n\npserver (/etc/inetd.conf):\n\n[verse]\ncvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver\n\nUsage:\n\n[verse]\n'git-cvsserver' [<options>] [pserver|server] [<directory> ...]\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 412,
            "end_index": 429,
            "value": "\nAll these options obviously only make sense if enforced by the server side.\nThey have been implemented to resemble the linkgit:git-daemon[1] options as\nclosely as possible.\n\n--base-path <path>::\nPrepend 'path' to requested CVSROOT\n\n--strict-paths::\nDon't allow recursing into subdirectories\n\n--export-all::\nDon't check for `gitcvs.enabled` in config. You also have to specify a list\nof allowed directories (see below) if you want to use this option.\n\n-V::\n--version::\nPrint version information and exit\n\n-h::\n-H::\n--help::\nPrint usage information and exit\n\n<directory>::\nYou can specify a list of allowed directories. If no directories\nare given, all are allowed. This is an additional restriction, gitcvs\naccess still needs to be enabled by the `gitcvs.enabled` config option\nunless `--export-all` was given, too.\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 1246,
            "end_index": 1271,
            "value": "\nThis application is a CVS emulation layer for Git.\n\nIt is highly functional. However, not all methods are implemented,\nand for those methods that are implemented,\nnot all switches are implemented.\n\nTesting has been done using both the CLI CVS client, and the Eclipse CVS\nplugin. Most functionality works fine with both of these clients.\n"
        },
        "LIMITATIONS": {
            "name": "LIMITATIONS",
            "start_index": 1609,
            "end_index": 1634,
            "value": "\nCVS clients cannot tag, branch or perform Git merges.\n\n'git-cvsserver' maps Git branches to CVS modules. This is very different\nfrom what most CVS users would expect since in CVS modules usually represent\none or more directories.\n"
        },
        "INSTALLATION": {
            "name": "INSTALLATION",
            "start_index": 1865,
            "end_index": 1892,
            "value": "\n1. If you are going to offer CVS access via pserver, add a line in\n   /etc/inetd.conf like\n+\n--\n------\n   cvspserver stream tcp nowait nobody git-cvsserver pserver\n\n------\nNote: Some inetd servers let you specify the name of the executable\nindependently of the value of argv[0] (i.e. the name the program assumes\nit was executed with). In this case the correct line in /etc/inetd.conf\nlooks like\n\n------\n   cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver\n\n------\n\nOnly anonymous access is provided by pserve by default. To commit you\nwill have to create pserver accounts, simply add a gitcvs.authdb\nsetting in the config file of the repositories you want the cvsserver\nto allow writes to, for example:\n\n------\n\n   [gitcvs]\n\tauthdb = /etc/cvsserver/passwd\n\n------\nThe format of these files is username followed by the encrypted password,\nfor example:\n\n------\n   myuser:$1Oyx5r9mdGZ2\n   myuser:$1$BA)@$vbnMJMDym7tA32AamXrm./\n------\nYou can use the 'htpasswd' facility that comes with Apache to make these\nfiles, but Apache's MD5 crypt method differs from the one used by most C\nlibrary's crypt() function, so don't use the -m option.\n\nAlternatively you can produce the password with perl's crypt() operator:\n-----\n   perl -e 'my ($user, $pass) = @ARGV; printf \"%s:%s\\n\", $user, crypt($user, $pass)' $USER password\n-----\n\nThen provide your password via the pserver method, for example:\n------\n   cvs -d:pserver:someuser:somepassword <at> server/path/repo.git co <HEAD_name>\n------\nNo special setup is needed for SSH access, other than having Git tools\nin the PATH. If you have clients that do not accept the CVS_SERVER\nenvironment variable, you can rename 'git-cvsserver' to `cvs`.\n\nNote: Newer CVS versions (>= 1.12.11) also support specifying\nCVS_SERVER directly in CVSROOT like\n\n------\ncvs -d \":ext;CVS_SERVER=git cvsserver:user@server/path/repo.git\" co <HEAD_name>\n------\nThis has the advantage that it will be saved in your 'CVS/Root' files and\nyou don't need to worry about always setting the correct environment\nvariable.  SSH users restricted to 'git-shell' don't need to override the default\nwith CVS_SERVER (and shouldn't) as 'git-shell' understands `cvs` to mean\n'git-cvsserver' and pretends that the other end runs the real 'cvs' better.\n--\n2. For each repo that you want accessible from CVS you need to edit config in\n   the repo and add the following section.\n+\n--\n------\n   [gitcvs]\n        enabled=1\n        # optional for debugging\n\tlogFile=/path/to/logfile\n\n------\nNote: you need to ensure each user that is going to invoke 'git-cvsserver' has\nwrite access to the log file and to the database (see\n<<dbbackend,Database Backend>>. If you want to offer write access over\nSSH, the users of course also need write access to the Git repository itself.\n\nYou also need to ensure that each repository is \"bare\" (without a Git index\nfile) for `cvs commit` to work. See linkgit:gitcvs-migration[7].\n\n[[configaccessmethod]]\nAll configuration variables can also be overridden for a specific method of\naccess. Valid method names are \"ext\" (for SSH access) and \"pserver\". The\nfollowing example configuration would disable pserver access while still\nallowing access over SSH.\n------\n   [gitcvs]\n        enabled=0\n\n   [gitcvs \"ext\"]\n        enabled=1\n------\n--\n3. If you didn't specify the CVSROOT/CVS_SERVER directly in the checkout command,\n   automatically saving it in your 'CVS/Root' files, then you need to set them\n   explicitly in your environment.  CVSROOT should be set as per normal, but the\n   directory should point at the appropriate Git repo.  As above, for SSH clients\n   _not_ restricted to 'git-shell', CVS_SERVER should be set to 'git-cvsserver'.\n+\n--\n------\n     export CVSROOT=:ext:user@server:/var/git/project.git\n     export CVS_SERVER=\"git cvsserver\"\n------\n--\n4. For SSH clients that will make commits, make sure their server-side\n   .ssh/environment files (or .bashrc, etc., according to their specific shell)\n   export appropriate values for GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL,\n   GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL.  For SSH clients whose login\n   shell is bash, .bashrc may be a reasonable alternative.\n\n5. Clients should now be able to check out the project. Use the CVS 'module'\n   name to indicate what Git 'head' you want to check out.  This also sets the\n   name of your newly checked-out directory, unless you tell it otherwise with\n   `-d <dir_name>`.  For example, this checks out 'master' branch to the\n   `project-master` directory:\n+\n------\n     cvs co -d project-master master\n------\n\n[[dbbackend]]\nDATABASE BACKEND\n----------------\n\n'git-cvsserver' uses one database per Git head (i.e. CVS module) to\nstore information about the repository to maintain consistent\nCVS revision numbers. The database needs to be\nupdated (i.e. written to) after every commit.\n\nIf the commit is done directly by using `git` (as opposed to\nusing 'git-cvsserver') the update will need to happen on the\nnext repository access by 'git-cvsserver', independent of\naccess method and requested operation.\n\nThat means that even if you offer only read access (e.g. by using\nthe pserver method), 'git-cvsserver' should have write access to\nthe database to work reliably (otherwise you need to make sure\nthat the database is up to date any time 'git-cvsserver' is executed).\n\nBy default it uses SQLite databases in the Git directory, named\n`gitcvs.<module_name>.sqlite`. Note that the SQLite backend creates\ntemporary files in the same directory as the database file on\nwrite so it might not be enough to grant the users using\n'git-cvsserver' write access to the database file without granting\nthem write access to the directory, too.\n\nThe database cannot be reliably regenerated in a\nconsistent form after the branch it is tracking has changed.\nExample: For merged branches, 'git-cvsserver' only tracks\none branch of development, and after a 'git merge' an\nincrementally updated database may track a different branch\nthan a database regenerated from scratch, causing inconsistent\nCVS revision numbers. `git-cvsserver` has no way of knowing which\nbranch it would have picked if it had been run incrementally\npre-merge. So if you have to fully or partially (from old\nbackup) regenerate the database, you should be suspicious\nof pre-existing CVS sandboxes.\n\nYou can configure the database backend with the following\nconfiguration variables:\n\nConfiguring database backend\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n'git-cvsserver' uses the Perl DBI module. Please also read\nits documentation if changing these variables, especially\nabout `DBI->connect()`.\n\ngitcvs.dbName::\n\tDatabase name. The exact meaning depends on the\n\tselected database driver, for SQLite this is a filename.\n\tSupports variable substitution (see below). May\n\tnot contain semicolons (`;`).\n\tDefault: '%Ggitcvs.%m.sqlite'\n\ngitcvs.dbDriver::\n\tUsed DBI driver. You can specify any available driver\n\tfor this here, but it might not work. cvsserver is tested\n\twith 'DBD::SQLite', reported to work with\n\t'DBD::Pg', and reported *not* to work with 'DBD::mysql'.\n\tPlease regard this as an experimental feature. May not\n\tcontain colons (`:`).\n\tDefault: 'SQLite'\n\ngitcvs.dbuser::\n\tDatabase user. Only useful if setting `dbDriver`, since\n\tSQLite has no concept of database users. Supports variable\n\tsubstitution (see below).\n\ngitcvs.dbPass::\n\tDatabase password.  Only useful if setting `dbDriver`, since\n\tSQLite has no concept of database passwords.\n\ngitcvs.dbTableNamePrefix::\n\tDatabase table name prefix.  Supports variable substitution\n\t(see below).  Any non-alphabetic characters will be replaced\n\twith underscores.\n\nAll variables can also be set per access method, see <<configaccessmethod,above>>.\n\nVariable substitution\n^^^^^^^^^^^^^^^^^^^^^\nIn `dbDriver` and `dbUser` you can use the following variables:\n\n%G::\n\tGit directory name\n%g::\n\tGit directory name, where all characters except for\n\talphanumeric ones, `.`, and `-` are replaced with\n\t`_` (this should make it easier to use the directory\n\tname in a filename if wanted)\n%m::\n\tCVS module/Git head name\n%a::\n\taccess method (one of \"ext\" or \"pserver\")\n%u::\n\tName of the user running 'git-cvsserver'.\n\tIf no name can be determined, the\n\tnumeric uid is used.\n"
        },
        "ENVIRONMENT": {
            "name": "ENVIRONMENT",
            "start_index": 10102,
            "end_index": 10127,
            "value": "\nThese variables obviate the need for command-line options in some\ncircumstances, allowing easier restricted usage through git-shell.\n\nGIT_CVSSERVER_BASE_PATH takes the place of the argument to --base-path.\n\nGIT_CVSSERVER_ROOT specifies a single-directory whitelist. The\nrepository must still be configured to allow access through\ngit-cvsserver, as described above.\n\nWhen these environment variables are set, the corresponding\ncommand-line arguments may not be used.\n\nECLIPSE CVS CLIENT NOTES\n------------------------\n\nTo get a checkout with the Eclipse CVS client:\n\n1. Select \"Create a new project -> From CVS checkout\"\n2. Create a new location. See the notes below for details on how to choose the\n   right protocol.\n3. Browse the 'modules' available. It will give you a list of the heads in\n   the repository. You will not be able to browse the tree from there. Only\n   the heads.\n4. Pick `HEAD` when it asks what branch/tag to check out. Untick the\n   \"launch commit wizard\" to avoid committing the .project file.\n\nProtocol notes: If you are using anonymous access via pserver, just select that.\nThose using SSH access should choose the 'ext' protocol, and configure 'ext'\naccess on the Preferences->Team->CVS->ExtConnection pane. Set CVS_SERVER to\n\"`git cvsserver`\". Note that password support is not good when using 'ext',\nyou will definitely want to have SSH keys setup.\n\nAlternatively, you can just use the non-standard extssh protocol that Eclipse\noffer. In that case CVS_SERVER is ignored, and you will have to replace\nthe cvs utility on the server with 'git-cvsserver' or manipulate your `.bashrc`\nso that calling 'cvs' effectively calls 'git-cvsserver'.\n\nCLIENTS KNOWN TO WORK\n---------------------\n\n- CVS 1.12.9 on Debian\n- CVS 1.11.17 on MacOSX (from Fink package)\n- Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)\n- TortoiseCVS\n\nOPERATIONS SUPPORTED\n--------------------\n\nAll the operations required for normal use are supported, including\ncheckout, diff, status, update, log, add, remove, commit.\n\nMost CVS command arguments that read CVS tags or revision numbers\n(typically -r) work, and also support any git refspec\n(tag, branch, commit ID, etc).\nHowever, CVS revision numbers for non-default branches are not well\nemulated, and cvs log does not show tags or branches at\nall.  (Non-main-branch CVS revision numbers superficially resemble CVS\nrevision numbers, but they actually encode a git commit ID directly,\nrather than represent the number of revisions since the branch point.)\n\nNote that there are two ways to checkout a particular branch.\nAs described elsewhere on this page, the \"module\" parameter\nof cvs checkout is interpreted as a branch name, and it becomes\nthe main branch.  It remains the main branch for a given sandbox\neven if you temporarily make another branch sticky with\ncvs update -r.  Alternatively, the -r argument can indicate\nsome other branch to actually checkout, even though the module\nis still the \"main\" branch.  Tradeoffs (as currently\nimplemented): Each new \"module\" creates a new database on disk with\na history for the given module, and after the database is created,\noperations against that main branch are fast.  Or alternatively,\n-r doesn't take any extra disk space, but may be significantly slower for\nmany operations, like cvs update.\n\nIf you want to refer to a git refspec that has characters that are\nnot allowed by CVS, you have two options.  First, it may just work\nto supply the git refspec directly to the appropriate CVS -r argument;\nsome CVS clients don't seem to do much sanity checking of the argument.\nSecond, if that fails, you can use a special character escape mechanism\nthat only uses characters that are valid in CVS tags.  A sequence\nof 4 or 5 characters of the form (underscore (`\"_\"`), dash (`\"-\"`),\none or two characters, and dash (`\"-\"`)) can encode various characters based\non the one or two letters: `\"s\"` for slash (`\"/\"`), `\"p\"` for\nperiod (`\".\"`), `\"u\"` for underscore (`\"_\"`), or two hexadecimal digits\nfor any byte value at all (typically an ASCII number, or perhaps a part\nof a UTF-8 encoded character).\n\nLegacy monitoring operations are not supported (edit, watch and related).\nExports and tagging (tags and branches) are not supported at this stage.\n\nCRLF Line Ending Conversions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default the server leaves the `-k` mode blank for all files,\nwhich causes the CVS client to treat them as a text files, subject\nto end-of-line conversion on some platforms.\n\nYou can make the server use the end-of-line conversion attributes to\nset the `-k` modes for files by setting the `gitcvs.usecrlfattr`\nconfig variable.  See linkgit:gitattributes[5] for more information\nabout end-of-line conversion.\n\nAlternatively, if `gitcvs.usecrlfattr` config is not enabled\nor the attributes do not allow automatic detection for a filename, then\nthe server uses the `gitcvs.allBinary` config for the default setting.\nIf `gitcvs.allBinary` is set, then file not otherwise\nspecified will default to '-kb' mode. Otherwise the `-k` mode\nis left blank. But if `gitcvs.allBinary` is set to \"guess\", then\nthe correct `-k` mode will be guessed based on the contents of\nthe file.\n\nFor best consistency with 'cvs', it is probably best to override the\ndefaults by setting `gitcvs.usecrlfattr` to true,\nand `gitcvs.allBinary` to \"guess\".\n"
        },
        "DEPENDENCIES": {
            "name": "DEPENDENCIES",
            "start_index": 15460,
            "end_index": 15487,
            "value": "'git-cvsserver' depends on DBD::SQLite.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 15527,
            "end_index": 15536,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-daemon.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-daemon - A really simple server for Git repositories\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 96,
            "end_index": 115,
            "value": "[verse]\n'git daemon' [--verbose] [--syslog] [--export-all]\n\t     [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]\n\t     [--strict-paths] [--base-path=<path>] [--base-path-relaxed]\n\t     [--user-path | --user-path=<path>]\n\t     [--interpolated-path=<pathtemplate>]\n\t     [--reuseaddr] [--detach] [--pid-file=<file>]\n\t     [--enable=<service>] [--disable=<service>]\n\t     [--allow-override=<service>] [--forbid-override=<service>]\n\t     [--access-hook=<path>] [--[no-]informative-errors]\n\t     [--inetd |\n\t      [--listen=<host_or_ipaddr>] [--port=<n>]\n\t      [--user=<user> [--group=<group>]]]\n\t     [--log-destination=(stderr|syslog|none)]\n\t     [<directory>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 790,
            "end_index": 815,
            "value": "A really simple TCP Git daemon that normally listens on port \"DEFAULT_GIT_PORT\"\naka 9418.  It waits for a connection asking for a service, and will serve\nthat service if it is enabled.\n\nIt verifies that the directory has the magic file \"git-daemon-export-ok\", and\nit will refuse to export any Git directory that hasn't explicitly been marked\nfor export this way (unless the `--export-all` parameter is specified). If you\npass some directory paths as 'git daemon' arguments, you can further restrict\nthe offers to a whitelist comprising of those.\n\nBy default, only `upload-pack` service is enabled, which serves\n'git fetch-pack' and 'git ls-remote' clients, which are invoked\nfrom 'git fetch', 'git pull', and 'git clone'.\n\nThis is ideally suited for read-only updates, i.e., pulling from\nGit repositories.\n\nAn `upload-archive` also exists to serve 'git archive'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1678,
            "end_index": 1695,
            "value": "\n--strict-paths::\n\tMatch paths exactly (i.e. don't allow \"/foo/repo\" when the real path is\n\t\"/foo/repo.git\" or \"/foo/repo/.git\") and don't do user-relative paths.\n\t'git daemon' will refuse to start when this option is enabled and no\n\twhitelist is specified.\n\n--base-path=<path>::\n\tRemap all the path requests as relative to the given path.\n\tThis is sort of \"Git root\" - if you run 'git daemon' with\n\t'--base-path=/srv/git' on example.com, then if you later try to pull\n\t'git://example.com/hello.git', 'git daemon' will interpret the path\n\tas `/srv/git/hello.git`.\n\n--base-path-relaxed::\n\tIf --base-path is enabled and repo lookup fails, with this option\n\t'git daemon' will attempt to lookup without prefixing the base path.\n\tThis is useful for switching to --base-path usage, while still\n\tallowing the old paths.\n\n--interpolated-path=<pathtemplate>::\n\tTo support virtual hosting, an interpolated path template can be\n\tused to dynamically construct alternate paths.  The template\n\tsupports %H for the target hostname as supplied by the client but\n\tconverted to all lowercase, %CH for the canonical hostname,\n\t%IP for the server's IP address, %P for the port number,\n\tand %D for the absolute path of the named repository.\n\tAfter interpolation, the path is validated against the directory\n\twhitelist.\n\n--export-all::\n\tAllow pulling from all directories that look like Git repositories\n\t(have the 'objects' and 'refs' subdirectories), even if they\n\tdo not have the 'git-daemon-export-ok' file.\n\n--inetd::\n\tHave the server run as an inetd service. Implies --syslog (may be\n\toverridden with `--log-destination=`).\n\tIncompatible with --detach, --port, --listen, --user and --group\n\toptions.\n\n--listen=<host_or_ipaddr>::\n\tListen on a specific IP address or hostname.  IP addresses can\n\tbe either an IPv4 address or an IPv6 address if supported.  If IPv6\n\tis not supported, then --listen=hostname is also not supported and\n\t--listen must be given an IPv4 address.\n\tCan be given more than once.\n\tIncompatible with `--inetd` option.\n\n--port=<n>::\n\tListen on an alternative port.  Incompatible with `--inetd` option.\n\n--init-timeout=<n>::\n\tTimeout (in seconds) between the moment the connection is established\n\tand the client request is received (typically a rather low value, since\n\tthat should be basically immediate).\n\n--timeout=<n>::\n\tTimeout (in seconds) for specific client sub-requests. This includes\n\tthe time it takes for the server to process the sub-request and the\n\ttime spent waiting for the next client's request.\n\n--max-connections=<n>::\n\tMaximum number of concurrent clients, defaults to 32.  Set it to\n\tzero for no limit.\n\n--syslog::\n\tShort for `--log-destination=syslog`.\n\n--log-destination=<destination>::\n\tSend log messages to the specified destination.\n\tNote that this option does not imply --verbose,\n\tthus by default only error conditions will be logged.\n\tThe <destination> must be one of:\n+\n--\nstderr::\n\tWrite to standard error.\n\tNote that if `--detach` is specified,\n\tthe process disconnects from the real standard error,\n\tmaking this destination effectively equivalent to `none`.\nsyslog::\n\tWrite to syslog, using the `git-daemon` identifier.\nnone::\n\tDisable all logging.\n--\n+\nThe default destination is `syslog` if `--inetd` or `--detach` is specified,\notherwise `stderr`.\n\n--user-path::\n--user-path=<path>::\n\tAllow {tilde}user notation to be used in requests.  When\n\tspecified with no parameter, requests to\n\tgit://host/{tilde}alice/foo is taken as a request to access\n\t'foo' repository in the home directory of user `alice`.\n\tIf `--user-path=path` is specified, the same request is\n\ttaken as a request to access `path/foo` repository in\n\tthe home directory of user `alice`.\n\n--verbose::\n\tLog details about the incoming connections and requested files.\n\n--reuseaddr::\n\tUse SO_REUSEADDR when binding the listening socket.\n\tThis allows the server to restart without waiting for\n\told connections to time out.\n\n--detach::\n\tDetach from the shell. Implies --syslog.\n\n--pid-file=<file>::\n\tSave the process id in 'file'.  Ignored when the daemon\n\tis run under `--inetd`.\n\n--user=<user>::\n--group=<group>::\n\tChange daemon's uid and gid before entering the service loop.\n\tWhen only `--user` is given without `--group`, the\n\tprimary group ID for the user is used.  The values of\n\tthe option are given to `getpwnam(3)` and `getgrnam(3)`\n\tand numeric IDs are not supported.\n+\nGiving these options is an error when used with `--inetd`; use\nthe facility of inet daemon to achieve the same before spawning\n'git daemon' if needed.\n+\nLike many programs that switch user id, the daemon does not reset\nenvironment variables such as `$HOME` when it runs git programs,\ne.g. `upload-pack` and `receive-pack`. When using this option, you\nmay also want to set and export `HOME` to point at the home\ndirectory of `<user>` before starting the daemon, and make sure any\nGit configuration files in that directory are readable by `<user>`.\n\n--enable=<service>::\n--disable=<service>::\n\tEnable/disable the service site-wide per default.  Note\n\tthat a service disabled site-wide can still be enabled\n\tper repository if it is marked overridable and the\n\trepository enables the service with a configuration\n\titem.\n\n--allow-override=<service>::\n--forbid-override=<service>::\n\tAllow/forbid overriding the site-wide default with per\n\trepository configuration.  By default, all the services\n\tmay be overridden.\n\n--[no-]informative-errors::\n\tWhen informative errors are turned on, git-daemon will report\n\tmore verbose errors to the client, differentiating conditions\n\tlike \"no such repository\" from \"repository not exported\". This\n\tis more convenient for clients, but may leak information about\n\tthe existence of unexported repositories.  When informative\n\terrors are not enabled, all errors report \"access denied\" to the\n\tclient. The default is --no-informative-errors.\n\n--access-hook=<path>::\n\tEvery time a client connects, first run an external command\n\tspecified by the <path> with service name (e.g. \"upload-pack\"),\n\tpath to the repository, hostname (%H), canonical hostname\n\t(%CH), IP address (%IP), and TCP port (%P) as its command-line\n\targuments. The external command can decide to decline the\n\tservice by exiting with a non-zero status (or to allow it by\n\texiting with a zero status).  It can also look at the $REMOTE_ADDR\n\tand `$REMOTE_PORT` environment variables to learn about the\n\trequestor when making this decision.\n+\nThe external command can optionally write a single line to its\nstandard output to be sent to the requestor as an error message when\nit declines the service.\n\n<directory>::\n\tA directory to add to the whitelist of allowed directories. Unless\n\t--strict-paths is specified this will also include subdirectories\n\tof each named directory.\n"
        },
        "SERVICES": {
            "name": "SERVICES",
            "start_index": 8436,
            "end_index": 8455,
            "value": "\nThese services can be globally enabled/disabled using the\ncommand-line options of this command.  If finer-grained\ncontrol is desired (e.g. to allow 'git archive' to be run\nagainst only in a few selected repositories the daemon serves),\nthe per-repository configuration file can be used to enable or\ndisable them.\n\nupload-pack::\n\tThis serves 'git fetch-pack' and 'git ls-remote'\n\tclients.  It is enabled by default, but a repository can\n\tdisable it by setting `daemon.uploadpack` configuration\n\titem to `false`.\n\nupload-archive::\n\tThis serves 'git archive --remote'.  It is disabled by\n\tdefault, but a repository can enable it by setting\n\t`daemon.uploadarch` configuration item to `true`.\n\nreceive-pack::\n\tThis serves 'git send-pack' clients, allowing anonymous\n\tpush.  It is disabled by default, as there is _no_\n\tauthentication in the protocol (in other words, anybody\n\tcan push anything into the repository, including removal\n\tof refs).  This is solely meant for a closed LAN setting\n\twhere everybody is friendly.  This service can be\n\tenabled by setting `daemon.receivepack` configuration item to\n\t`true`.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 9565,
            "end_index": 9584,
            "value": "We assume the following in /etc/services::\n+\n------------\n$ grep 9418 /etc/services\ngit\t\t9418/tcp\t\t# Git Version Control System\n------------\n\n'git daemon' as inetd server::\n\tTo set up 'git daemon' as an inetd service that handles any\n\trepository under the whitelisted set of directories, /pub/foo\n\tand /pub/bar, place an entry like the following into\n\t/etc/inetd all on one line:\n+\n------------------------------------------------\n\tgit stream tcp nowait nobody  /usr/bin/git\n\t\tgit daemon --inetd --verbose --export-all\n\t\t/pub/foo /pub/bar\n------------------------------------------------\n\n\n'git daemon' as inetd server for virtual hosts::\n\tTo set up 'git daemon' as an inetd service that handles\n\trepositories for different virtual hosts, `www.example.com`\n\tand `www.example.org`, place an entry like the following into\n\t`/etc/inetd` all on one line:\n+\n------------------------------------------------\n\tgit stream tcp nowait nobody /usr/bin/git\n\t\tgit daemon --inetd --verbose --export-all\n\t\t--interpolated-path=/pub/%H%D\n\t\t/pub/www.example.org/software\n\t\t/pub/www.example.com/software\n\t\t/software\n------------------------------------------------\n+\nIn this example, the root-level directory `/pub` will contain\na subdirectory for each virtual host name supported.\nFurther, both hosts advertise repositories simply as\n`git://www.example.com/software/repo.git`.  For pre-1.4.0\nclients, a symlink from `/software` into the appropriate\ndefault repository could be made as well.\n\n\n'git daemon' as regular daemon for virtual hosts::\n\tTo set up 'git daemon' as a regular, non-inetd service that\n\thandles repositories for multiple virtual hosts based on\n\ttheir IP addresses, start the daemon like this:\n+\n------------------------------------------------\n\tgit daemon --verbose --export-all\n\t\t--interpolated-path=/pub/%IP/%D\n\t\t/pub/192.168.1.200/software\n\t\t/pub/10.10.220.23/software\n------------------------------------------------\n+\nIn this example, the root-level directory `/pub` will contain\na subdirectory for each virtual host IP address supported.\nRepositories can still be accessed by hostname though, assuming\nthey correspond to these IP addresses.\n\nselectively enable/disable services per repository::\n\tTo enable 'git archive --remote' and disable 'git fetch' against\n\ta repository, have the following in the configuration file in the\n\trepository (that is the file 'config' next to `HEAD`, 'refs' and\n\t'objects').\n+\n----------------------------------------------------------------\n\t[daemon]\n\t\tuploadpack = false\n\t\tuploadarch = true\n----------------------------------------------------------------\n\n"
        },
        "ENVIRONMENT": {
            "name": "ENVIRONMENT",
            "start_index": 12182,
            "end_index": 12207,
            "value": "'git daemon' will set REMOTE_ADDR to the IP address of the client\nthat connected to it, if the IP address is available. REMOTE_ADDR will\nbe available in the environment of hooks called when\nservices are performed.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 12421,
            "end_index": 12430,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-describe.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-describe - Give an object a human readable name based on an available ref\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 121,
            "end_index": 140,
            "value": "[verse]\n'git describe' [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>...]\n'git describe' [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]\n'git describe' <blob>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 325,
            "end_index": 350,
            "value": "The command finds the most recent tag that is reachable from a\ncommit.  If the tag points to the commit, then only the tag is\nshown.  Otherwise, it suffixes the tag name with the number of\nadditional commits on top of the tagged object and the\nabbreviated object name of the most recent commit. The result\nis a \"human-readable\" object name which can also be used to\nidentify the commit to other git commands.\n\nBy default (without --all or --tags) `git describe` only shows\nannotated tags.  For more information about creating annotated tags\nsee the -a and -s options to linkgit:git-tag[1].\n\nIf the given object refers to a blob, it will be described\nas `<commit-ish>:<path>`, such that the blob can be found\nat `<path>` in the `<commit-ish>`, which itself describes the\nfirst commit in which this blob occurs in a reverse revision walk\nfrom HEAD.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1197,
            "end_index": 1214,
            "value": "\n<commit-ish>...::\n\tCommit-ish object names to describe.  Defaults to HEAD if omitted.\n\n--dirty[=<mark>]::\n--broken[=<mark>]::\n\tDescribe the state of the working tree.  When the working\n\ttree matches HEAD, the output is the same as \"git describe\n\tHEAD\".  If the working tree has local modification \"-dirty\"\n\tis appended to it.  If a repository is corrupt and Git\n\tcannot determine if there is local modification, Git will\n\terror out, unless `--broken' is given, which appends\n\tthe suffix \"-broken\" instead.\n\n--all::\n\tInstead of using only the annotated tags, use any ref\n\tfound in `refs/` namespace.  This option enables matching\n\tany known branch, remote-tracking branch, or lightweight tag.\n\n--tags::\n\tInstead of using only the annotated tags, use any tag\n\tfound in `refs/tags` namespace.  This option enables matching\n\ta lightweight (non-annotated) tag.\n\n--contains::\n\tInstead of finding the tag that predates the commit, find\n\tthe tag that comes after the commit, and thus contains it.\n\tAutomatically implies --tags.\n\n--abbrev=<n>::\n\tInstead of using the default 7 hexadecimal digits as the\n\tabbreviated object name, use <n> digits, or as many digits\n\tas needed to form a unique object name.  An <n> of 0\n\twill suppress long format, only showing the closest tag.\n\n--candidates=<n>::\n\tInstead of considering only the 10 most recent tags as\n\tcandidates to describe the input commit-ish consider\n\tup to <n> candidates.  Increasing <n> above 10 will take\n\tslightly longer but may produce a more accurate result.\n\tAn <n> of 0 will cause only exact matches to be output.\n\n--exact-match::\n\tOnly output exact matches (a tag directly references the\n\tsupplied commit).  This is a synonym for --candidates=0.\n\n--debug::\n\tVerbosely display information about the searching strategy\n\tbeing employed to standard error.  The tag name will still\n\tbe printed to standard out.\n\n--long::\n\tAlways output the long format (the tag, the number of commits\n\tand the abbreviated commit name) even when it matches a tag.\n\tThis is useful when you want to see parts of the commit object name\n\tin \"describe\" output, even when the commit in question happens to be\n\ta tagged version.  Instead of just emitting the tag name, it will\n\tdescribe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2\n\tthat points at object deadbee....).\n\n--match <pattern>::\n\tOnly consider tags matching the given `glob(7)` pattern,\n\texcluding the \"refs/tags/\" prefix. If used with `--all`, it also\n\tconsiders local branches and remote-tracking references matching the\n\tpattern, excluding respectively \"refs/heads/\" and \"refs/remotes/\"\n\tprefix; references of other types are never considered. If given\n\tmultiple times, a list of patterns will be accumulated, and tags\n\tmatching any of the patterns will be considered.  Use `--no-match` to\n\tclear and reset the list of patterns.\n\n--exclude <pattern>::\n\tDo not consider tags matching the given `glob(7)` pattern, excluding\n\tthe \"refs/tags/\" prefix. If used with `--all`, it also does not consider\n\tlocal branches and remote-tracking references matching the pattern,\n\texcluding respectively \"refs/heads/\" and \"refs/remotes/\" prefix;\n\treferences of other types are never considered. If given multiple times,\n\ta list of patterns will be accumulated and tags matching any of the\n\tpatterns will be excluded. When combined with --match a tag will be\n\tconsidered when it matches at least one --match pattern and does not\n\tmatch any of the --exclude patterns. Use `--no-exclude` to clear and\n\treset the list of patterns.\n\n--always::\n\tShow uniquely abbreviated commit object as fallback.\n\n--first-parent::\n\tFollow only the first parent commit upon seeing a merge commit.\n\tThis is useful when you wish to not match tags on branches merged\n\tin the history of the target commit.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4984,
            "end_index": 5003,
            "value": "\nWith something like git.git current tree, I get:\n\n\t[torvalds@g5 git]$ git describe parent\n\tv1.0.4-14-g2414721\n\ni.e. the current head of my \"parent\" branch is based on v1.0.4,\nbut since it has a few commits on top of that,\ndescribe has added the number of additional commits (\"14\") and\nan abbreviated object name for the commit itself (\"2414721\")\nat the end.\n\nThe number of additional commits is the number\nof commits which would be displayed by \"git log v1.0.4..parent\".\nThe hash suffix is \"-g\" + unambiguous abbreviation for the tip commit\nof parent (which was `2414721b194453f058079d897d13c4e377f92dc6`).\nThe \"g\" prefix stands for \"git\" and is used to allow describing the version of\na software depending on the SCM the software is managed with. This is useful\nin an environment where people may use different SCMs.\n\nDoing a 'git describe' on a tag-name will just show the tag name:\n\n\t[torvalds@g5 git]$ git describe v1.0.4\n\tv1.0.4\n\nWith --all, the command can use branch heads as references, so\nthe output shows the reference path as well:\n\n\t[torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2\n\ttags/v1.0.0-21-g975b\n\n\t[torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^\n\theads/lt/describe-7-g975b\n\nWith --abbrev set to 0, the command can be used to find the\nclosest tagname without any suffix:\n\n\t[torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2\n\ttags/v1.0.0\n\nNote that the suffix you get if you type these commands today may be\nlonger than what Linus saw above when he ran these commands, as your\nGit repository may have new commits whose object names begin with\n975b that did not exist back then, and \"-g975b\" suffix alone may not\nbe sufficient to disambiguate these commits.\n\n\nSEARCH STRATEGY\n---------------\n\nFor each commit-ish supplied, 'git describe' will first look for\na tag which tags exactly that commit.  Annotated tags will always\nbe preferred over lightweight tags, and tags with newer dates will\nalways be preferred over tags with older dates.  If an exact match\nis found, its name will be output and searching will stop.\n\nIf an exact match was not found, 'git describe' will walk back\nthrough the commit history to locate an ancestor commit which\nhas been tagged.  The ancestor's tag will be output along with an\nabbreviation of the input commit-ish's SHA-1. If `--first-parent` was\nspecified then the walk will only consider the first parent of each\ncommit.\n\nIf multiple tags were found during the walk then the tag which\nhas the fewest commits different from the input commit-ish will be\nselected and output.  Here fewest commits different is defined as\nthe number of commits which would be shown by `git log tag..input`\nwill be the smallest number of commits possible.\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 7706,
            "end_index": 7717,
            "value": "\nTree objects as well as tag objects not pointing at commits, cannot be described.\nWhen describing blobs, the lightweight tags pointing at blobs are ignored,\nbut the blob is still described as <committ-ish>:<path> despite the lightweight\ntag being favorable.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7976,
            "end_index": 7985,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-diff-files.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-diff-files - Compares files in the working tree and the index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 114,
            "end_index": 133,
            "value": "[verse]\n'git diff-files' [-q] [-0|-1|-2|-3|-c|--cc] [<common diff options>] [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 221,
            "end_index": 246,
            "value": "Compares the files in the working tree and the index.  When paths\nare specified, compares only those named paths.  Otherwise all\nentries in the index are compared.  The output format is the\nsame as for 'git diff-index' and 'git diff-tree'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 486,
            "end_index": 503,
            "value": "\ninclude::diff-options.txt[]\n\n-1 --base::\n-2 --ours::\n-3 --theirs::\n-0::\n\tDiff against the \"base\" version, \"our branch\" or \"their\n\tbranch\" respectively.  With these options, diffs for\n\tmerged entries are not shown.\n+\nThe default is to diff against our branch (-2) and the\ncleanly resolved paths.  The option -0 can be given to\nomit diff output for unmerged entries and just show \"Unmerged\".\n\n-c::\n--cc::\n\tThis compares stage 2 (our branch), stage 3 (their\n\tbranch) and the working tree file and outputs a combined\n\tdiff, similar to the way 'diff-tree' shows a merge\n\tcommit with these flags.\n\n-q::\n\tRemain silent even on nonexistent files\n\n\ninclude::diff-format.txt[]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1170,
            "end_index": 1179,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-diff-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-diff-index - Compare a tree to the working tree or index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git diff-index' [-m] [--cached] [--merge-base] [<common diff options>] <tree-ish> [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 231,
            "end_index": 256,
            "value": "Compares the content and mode of the blobs found in a tree object\nwith the corresponding tracked files in the working tree, or with the\ncorresponding paths in the index.  When <path> arguments are present,\ncompares only paths matching those patterns.  Otherwise all tracked\nfiles are compared.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 550,
            "end_index": 567,
            "value": "\ninclude::diff-options.txt[]\n\n<tree-ish>::\n\tThe id of a tree object to diff against.\n\n--cached::\n\tDo not consider the on-disk file at all.\n\n--merge-base::\n\tInstead of comparing <tree-ish> directly, use the merge base\n\tbetween <tree-ish> and HEAD instead.  <tree-ish> must be a\n\tcommit.\n\n-m::\n\tBy default, files recorded in the index but not checked\n\tout are reported as deleted.  This flag makes\n\t'git diff-index' say that all non-checked-out files are up\n\tto date.\n\ninclude::diff-format.txt[]\n\nOPERATING MODES\n---------------\nYou can choose whether you want to trust the index file entirely\n(using the `--cached` flag) or ask the diff logic to show any files\nthat don't match the stat state as being \"tentatively changed\".  Both\nof these operations are very useful indeed.\n\nCACHED MODE\n-----------\nIf `--cached` is specified, it allows you to ask:\n\n\tshow me the differences between HEAD and the current index\n\tcontents (the ones I'd write using 'git write-tree')\n\nFor example, let's say that you have worked on your working directory, updated\nsome files in the index and are ready to commit. You want to see exactly\n*what* you are going to commit, without having to write a new tree\nobject and compare it that way, and to do that, you just do\n\n\tgit diff-index --cached HEAD\n\nExample: let's say I had renamed `commit.c` to `git-commit.c`, and I had\ndone an `update-index` to make that effective in the index file.\n`git diff-files` wouldn't show anything at all, since the index file\nmatches my working directory. But doing a 'git diff-index' does:\n\n  torvalds@ppc970:~/git> git diff-index --cached HEAD\n  -100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c\n  +100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c\n\nYou can see easily that the above is a rename.\n\nIn fact, `git diff-index --cached` *should* always be entirely equivalent to\nactually doing a 'git write-tree' and comparing that. Except this one is much\nnicer for the case where you just want to check where you are.\n\nSo doing a `git diff-index --cached` is basically very useful when you are\nasking yourself \"what have I already marked for being committed, and\nwhat's the difference to a previous tree\".\n\nNON-CACHED MODE\n---------------\nThe \"non-cached\" mode takes a different approach, and is potentially\nthe more useful of the two in that what it does can't be emulated with\na 'git write-tree' + 'git diff-tree'. Thus that's the default mode.\nThe non-cached version asks the question:\n\n  show me the differences between HEAD and the currently checked out\n  tree - index contents _and_ files that aren't up to date\n\nwhich is obviously a very useful question too, since that tells you what\nyou *could* commit. Again, the output matches the 'git diff-tree -r'\noutput to a tee, but with a twist.\n\nThe twist is that if some file doesn't match the index, we don't have\na backing store thing for it, and we use the magic \"all-zero\" sha1 to\nshow that. So let's say that you have edited `kernel/sched.c`, but\nhave not actually done a 'git update-index' on it yet - there is no\n\"object\" associated with the new state, and you get:\n\n  torvalds@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD\n  :100644 100664 7476bb... 000000...      kernel/sched.c\n\ni.e., it shows that the tree has changed, and that `kernel/sched.c` is\nnot up to date and may contain new stuff. The all-zero sha1 means that to\nget the real diff, you need to look at the object in the working directory\ndirectly rather than do an object-to-object diff.\n\nNOTE: As with other commands of this type, 'git diff-index' does not\nactually look at the contents of the file at all. So maybe\n`kernel/sched.c` hasn't actually changed, and it's just that you\ntouched it. In either case, it's a note that you need to\n'git update-index' it to make the index be in sync.\n\nNOTE: You can have a mixture of files show up as \"has been updated\"\nand \"is still dirty in the working directory\" together. You can always\ntell which file is in which state, since the \"has been updated\" ones\nshow a valid sha1, and the \"not in sync with the index\" ones will\nalways have the special all-zero sha1.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4704,
            "end_index": 4713,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-diff-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-diff-tree - Compares the content and mode of blobs found via two tree objects\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 128,
            "end_index": 147,
            "value": "[verse]\n'git diff-tree' [--stdin] [-m] [-s] [-v] [--no-commit-id] [--pretty]\n\t      [-t] [-r] [-c | --cc] [--combined-all-paths] [--root] [--merge-base]\n\t      [<common diff options>] <tree-ish> [<tree-ish>] [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 367,
            "end_index": 392,
            "value": "Compares the content and mode of the blobs found via two tree objects.\n\nIf there is only one <tree-ish> given, the commit is compared with its parents\n(see --stdin below).\n\nNote that 'git diff-tree' can use the tree encapsulated in a commit object.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 641,
            "end_index": 658,
            "value": "\ninclude::diff-options.txt[]\n\n<tree-ish>::\n\tThe id of a tree object.\n\n<path>...::\n\tIf provided, the results are limited to a subset of files\n\tmatching one of the provided pathspecs.\n\n-r::\n        recurse into sub-trees\n\n-t::\n\tshow tree entry itself as well as subtrees.  Implies -r.\n\n--root::\n\tWhen `--root` is specified the initial commit will be shown as a big\n\tcreation event. This is equivalent to a diff against the NULL tree.\n\n--merge-base::\n\tInstead of comparing the <tree-ish>s directly, use the merge\n\tbase between the two <tree-ish>s as the \"before\" side.  There\n\tmust be two <tree-ish>s given and they must both be commits.\n\n--stdin::\n\tWhen `--stdin` is specified, the command does not take\n\t<tree-ish> arguments from the command line.  Instead, it\n\treads lines containing either two <tree>, one <commit>, or a\n\tlist of <commit> from its standard input.  (Use a single space\n\tas separator.)\n+\nWhen two trees are given, it compares the first tree with the second.\nWhen a single commit is given, it compares the commit with its\nparents.  The remaining commits, when given, are used as if they are\nparents of the first commit.\n+\nWhen comparing two trees, the ID of both trees (separated by a space\nand terminated by a newline) is printed before the difference.  When\ncomparing commits, the ID of the first (or only) commit, followed by a\nnewline, is printed.\n+\nThe following flags further affect the behavior when comparing\ncommits (but not trees).\n\n-m::\n\tBy default, 'git diff-tree --stdin' does not show\n\tdifferences for merge commits.  With this flag, it shows\n\tdifferences to that commit from all of its parents. See\n\talso `-c`.\n\n-s::\n\tBy default, 'git diff-tree --stdin' shows differences,\n\teither in machine-readable form (without `-p`) or in patch\n\tform (with `-p`).  This output can be suppressed.  It is\n\tonly useful with `-v` flag.\n\n-v::\n\tThis flag causes 'git diff-tree --stdin' to also show\n\tthe commit message before the differences.\n\ninclude::pretty-options.txt[]\n\n--no-commit-id::\n\t'git diff-tree' outputs a line with the commit ID when\n\tapplicable.  This flag suppressed the commit ID output.\n\n-c::\n\tThis flag changes the way a merge commit is displayed\n\t(which means it is useful only when the command is given\n\tone <tree-ish>, or `--stdin`).  It shows the differences\n\tfrom each of the parents to the merge result simultaneously\n\tinstead of showing pairwise diff between a parent and the\n\tresult one at a time (which is what the `-m` option does).\n\tFurthermore, it lists only files which were modified\n\tfrom all parents.\n\n--cc::\n\tThis flag changes the way a merge commit patch is displayed,\n\tin a similar way to the `-c` option. It implies the `-c`\n\tand `-p` options and further compresses the patch output\n\tby omitting uninteresting hunks whose the contents in the parents\n\thave only two variants and the merge result picks one of them\n\twithout modification.  When all hunks are uninteresting, the commit\n\titself and the commit log message is not shown, just like in any other\n\t\"empty diff\" case.\n\n--combined-all-paths::\n\tThis flag causes combined diffs (used for merge commits) to\n\tlist the name of the file from all parents.  It thus only has\n\teffect when -c or --cc are specified, and is likely only\n\tuseful if filename changes are detected (i.e. when either\n\trename or copy detection have been requested).\n\n--always::\n\tShow the commit itself and the commit log message even\n\tif the diff itself is empty.\n\n\ninclude::pretty-formats.txt[]\n\ninclude::diff-format.txt[]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4152,
            "end_index": 4161,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-diff.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-diff - Show changes between commits, commit and working tree, etc\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 106,
            "end_index": 125,
            "value": "[verse]\n'git diff' [<options>] [<commit>] [--] [<path>...]\n'git diff' [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]\n'git diff' [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]\n'git diff' [<options>] <commit>...<commit> [--] [<path>...]\n'git diff' [<options>] <blob> <blob>\n'git diff' [<options>] --no-index [--] <path> <path>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 496,
            "end_index": 521,
            "value": "Show changes between the working tree and the index or a tree, changes\nbetween the index and a tree, changes between two trees, changes resulting\nfrom a merge, changes between two blob objects, or changes between two\nfiles on disk.\n\n'git diff' [<options>] [--] [<path>...]::\n\n\tThis form is to view the changes you made relative to\n\tthe index (staging area for the next commit).  In other\n\twords, the differences are what you _could_ tell Git to\n\tfurther add to the index but you still haven't.  You can\n\tstage these changes by using linkgit:git-add[1].\n\n'git diff' [<options>] --no-index [--] <path> <path>::\n\n\tThis form is to compare the given two paths on the\n\tfilesystem.  You can omit the `--no-index` option when\n\trunning the command in a working tree controlled by Git and\n\tat least one of the paths points outside the working tree,\n\tor when running the command outside a working tree\n\tcontrolled by Git. This form implies `--exit-code`.\n\n'git diff' [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]::\n\n\tThis form is to view the changes you staged for the next\n\tcommit relative to the named <commit>.  Typically you\n\twould want comparison with the latest commit, so if you\n\tdo not give <commit>, it defaults to HEAD.\n\tIf HEAD does not exist (e.g. unborn branches) and\n\t<commit> is not given, it shows all staged changes.\n\t--staged is a synonym of --cached.\n+\nIf --merge-base is given, instead of using <commit>, use the merge base\nof <commit> and HEAD.  `git diff --merge-base A` is equivalent to\n`git diff $(git merge-base A HEAD)`.\n\n'git diff' [<options>] <commit> [--] [<path>...]::\n\n\tThis form is to view the changes you have in your\n\tworking tree relative to the named <commit>.  You can\n\tuse HEAD to compare it with the latest commit, or a\n\tbranch name to compare with the tip of a different\n\tbranch.\n\n'git diff' [<options>] [--merge-base] <commit> <commit> [--] [<path>...]::\n\n\tThis is to view the changes between two arbitrary\n\t<commit>.\n+\nIf --merge-base is given, use the merge base of the two commits for the\n\"before\" side.  `git diff --merge-base A B` is equivalent to\n`git diff $(git merge-base A B) B`.\n\n'git diff' [<options>] <commit> <commit>... <commit> [--] [<path>...]::\n\n\tThis form is to view the results of a merge commit.  The first\n\tlisted <commit> must be the merge itself; the remaining two or\n\tmore commits should be its parents.  A convenient way to produce\n\tthe desired set of revisions is to use the `^@` suffix.\n\tFor instance, if `master` names a merge commit, `git diff master\n\tmaster^@` gives the same combined diff as `git show master`.\n\n'git diff' [<options>] <commit>..<commit> [--] [<path>...]::\n\n\tThis is synonymous to the earlier form (without the `..`) for\n\tviewing the changes between two arbitrary <commit>.  If <commit> on\n\tone side is omitted, it will have the same effect as\n\tusing HEAD instead.\n\n'git diff' [<options>] <commit>\\...<commit> [--] [<path>...]::\n\n\tThis form is to view the changes on the branch containing\n\tand up to the second <commit>, starting at a common ancestor\n\tof both <commit>.  `git diff A...B` is equivalent to\n\t`git diff $(git merge-base A B) B`.  You can omit any one\n\tof <commit>, which has the same effect as using HEAD instead.\n\nJust in case you are doing something exotic, it should be\nnoted that all of the <commit> in the above description, except\nin the `--merge-base` case and in the last two forms that use `..`\nnotations, can be any <tree>.\n\nFor a more complete list of ways to spell <commit>, see\n\"SPECIFYING REVISIONS\" section in linkgit:gitrevisions[7].\nHowever, \"diff\" is about comparing two _endpoints_, not ranges,\nand the range notations (`<commit>..<commit>` and\n`<commit>...<commit>`) do not mean a range as defined in the\n\"SPECIFYING RANGES\" section in linkgit:gitrevisions[7].\n\n'git diff' [<options>] <blob> <blob>::\n\n\tThis form is to view the differences between the raw\n\tcontents of two blob objects.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 4436,
            "end_index": 4453,
            "value": "\n:git-diff: 1\ninclude::diff-options.txt[]\n\n-1 --base::\n-2 --ours::\n-3 --theirs::\n\tCompare the working tree with the \"base\" version (stage #1),\n\t\"our branch\" (stage #2) or \"their branch\" (stage #3).  The\n\tindex contains these stages only for unmerged entries i.e.\n\twhile resolving conflicts.  See linkgit:git-read-tree[1]\n\tsection \"3-Way Merge\" for detailed information.\n\n-0::\n\tOmit diff output for unmerged entries and just show\n\t\"Unmerged\".  Can be used only when comparing the working tree\n\twith the index.\n\n<path>...::\n\tThe <paths> parameters, when given, are used to limit\n\tthe diff to the named paths (you can give directory\n\tnames and get diff for all files under them).\n\n\ninclude::diff-format.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5158,
            "end_index": 5177,
            "value": "\nVarious ways to check your working tree::\n+\n------------\n$ git diff            <1>\n$ git diff --cached   <2>\n$ git diff HEAD       <3>\n------------\n+\n<1> Changes in the working tree not yet staged for the next commit.\n<2> Changes between the index and your last commit; what you\n    would be committing if you run `git commit` without `-a` option.\n<3> Changes in the working tree since your last commit; what you\n    would be committing if you run `git commit -a`\n\nComparing with arbitrary commits::\n+\n------------\n$ git diff test            <1>\n$ git diff HEAD -- ./test  <2>\n$ git diff HEAD^ HEAD      <3>\n------------\n+\n<1> Instead of using the tip of the current branch, compare with the\n    tip of \"test\" branch.\n<2> Instead of comparing with the tip of \"test\" branch, compare with\n    the tip of the current branch, but limit the comparison to the\n    file \"test\".\n<3> Compare the version before the last commit and the last commit.\n\nComparing branches::\n+\n------------\n$ git diff topic master    <1>\n$ git diff topic..master   <2>\n$ git diff topic...master  <3>\n------------\n+\n<1> Changes between the tips of the topic and the master branches.\n<2> Same as above.\n<3> Changes that occurred on the master branch since when the topic\n    branch was started off it.\n\nLimiting the diff output::\n+\n------------\n$ git diff --diff-filter=MRC            <1>\n$ git diff --name-status                <2>\n$ git diff arch/i386 include/asm-i386   <3>\n------------\n+\n<1> Show only modification, rename, and copy, but not addition\n    or deletion.\n<2> Show only names and the nature of change, but not actual\n    diff output.\n<3> Limit diff output to named subtrees.\n\nMunging the diff output::\n+\n------------\n$ git diff --find-copies-harder -B -C  <1>\n$ git diff -R                          <2>\n------------\n+\n<1> Spend extra cycles to find renames, copies and complete\n    rewrites (very expensive).\n<2> Output diff in reverse.\n\nSEE ALSO\n--------\ndiff(1),\nlinkgit:git-difftool[1],\nlinkgit:git-log[1],\nlinkgit:gitdiffcore[7],\nlinkgit:git-format-patch[1],\nlinkgit:git-apply[1],\nlinkgit:git-show[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7266,
            "end_index": 7275,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-difftool.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-difftool - Show changes using common diff tools\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git difftool' [<options>] [<commit> [<commit>]] [--] [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 188,
            "end_index": 213,
            "value": "'git difftool' is a Git command that allows you to compare and edit files\nbetween revisions using common diff tools.  'git difftool' is a frontend\nto 'git diff' and accepts the same options and arguments. See\nlinkgit:git-diff[1].\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 443,
            "end_index": 460,
            "value": "\n-d::\n--dir-diff::\n\tCopy the modified files to a temporary location and perform\n\ta directory diff on them. This mode never prompts before\n\tlaunching the diff tool.\n\n-y::\n--no-prompt::\n\tDo not prompt before launching a diff tool.\n\n--prompt::\n\tPrompt before each invocation of the diff tool.\n\tThis is the default behaviour; the option is provided to\n\toverride any configuration settings.\n\n--rotate-to=<file>::\n\tStart showing the diff for the given path,\n\tthe paths before it will move to end and output.\n\n--skip-to=<file>::\n\tStart showing the diff for the given path, skipping all\n\tthe paths before it.\n\n-t <tool>::\n--tool=<tool>::\n\tUse the diff tool specified by <tool>.  Valid values include\n\temerge, kompare, meld, and vimdiff. Run `git difftool --tool-help`\n\tfor the list of valid <tool> settings.\n+\nIf a diff tool is not specified, 'git difftool'\nwill use the configuration variable `diff.tool`.  If the\nconfiguration variable `diff.tool` is not set, 'git difftool'\nwill pick a suitable default.\n+\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable `difftool.<tool>.path`. For example, you\ncan configure the absolute path to kdiff3 by setting\n`difftool.kdiff3.path`. Otherwise, 'git difftool' assumes the\ntool is available in PATH.\n+\nInstead of running one of the known diff tools,\n'git difftool' can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable `difftool.<tool>.cmd`.\n+\nWhen 'git difftool' is invoked with this tool (either through the\n`-t` or `--tool` option or the `diff.tool` configuration variable)\nthe configured command line will be invoked with the following\nvariables available: `$LOCAL` is set to the name of the temporary\nfile containing the contents of the diff pre-image and `$REMOTE`\nis set to the name of the temporary file containing the contents\nof the diff post-image.  `$MERGED` is the name of the file which is\nbeing compared. `$BASE` is provided for compatibility\nwith custom merge tool commands and has the same value as `$MERGED`.\n\n--tool-help::\n\tPrint a list of diff tools that may be used with `--tool`.\n\n--[no-]symlinks::\n\t'git difftool''s default behavior is create symlinks to the\n\tworking tree when run in `--dir-diff` mode and the right-hand\n\tside of the comparison yields the same content as the file in\n\tthe working tree.\n+\nSpecifying `--no-symlinks` instructs 'git difftool' to create copies\ninstead.  `--no-symlinks` is the default on Windows.\n\n-x <command>::\n--extcmd=<command>::\n\tSpecify a custom command for viewing diffs.\n\t'git-difftool' ignores the configured defaults and runs\n\t`$command $LOCAL $REMOTE` when this option is specified.\n\tAdditionally, `$BASE` is set in the environment.\n\n-g::\n--[no-]gui::\n\tWhen 'git-difftool' is invoked with the `-g` or `--gui` option\n\tthe default diff tool will be read from the configured\n\t`diff.guitool` variable instead of `diff.tool`. The `--no-gui`\n\toption can be used to override this setting. If `diff.guitool`\n\tis not set, we will fallback in the order of `merge.guitool`,\n\t`diff.tool`, `merge.tool` until a tool is found.\n\n--[no-]trust-exit-code::\n\t'git-difftool' invokes a diff tool individually on each file.\n\tErrors reported by the diff tool are ignored by default.\n\tUse `--trust-exit-code` to make 'git-difftool' exit when an\n\tinvoked diff tool returns a non-zero exit code.\n+\n'git-difftool' will forward the exit code of the invoked tool when\n`--trust-exit-code` is used.\n\nSee linkgit:git-diff[1] for the full list of supported options.\n\nCONFIG VARIABLES\n----------------\n'git difftool' falls back to 'git mergetool' config variables when the\ndifftool equivalents have not been defined.\n\ndiff.tool::\n\tThe default diff tool to use.\n\ndiff.guitool::\n\tThe default diff tool to use when `--gui` is specified.\n\ndifftool.<tool>.path::\n\tOverride the path for the given tool.  This is useful in case\n\tyour tool is not in the PATH.\n\ndifftool.<tool>.cmd::\n\tSpecify the command to invoke the specified diff tool.\n+\nSee the `--tool=<tool>` option above for more details.\n\ndifftool.prompt::\n\tPrompt before each invocation of the diff tool.\n\ndifftool.trustExitCode::\n\tExit difftool if the invoked diff tool returns a non-zero exit status.\n+\nSee the `--trust-exit-code` option above for more details.\n\nSEE ALSO\n--------\nlinkgit:git-diff[1]::\n\t Show changes between commits, commit and working tree, etc\n\nlinkgit:git-mergetool[1]::\n\tRun merge conflict resolution tools to resolve merge conflicts\n\nlinkgit:git-config[1]::\n\t Get and set repository or global options\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5003,
            "end_index": 5012,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fast-export.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-fast-export - Git data exporter\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 86,
            "end_index": 105,
            "value": "[verse]\n'git fast-export [<options>]' | 'git fast-import'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 163,
            "end_index": 188,
            "value": "This program dumps the given revisions in a form suitable to be piped\ninto 'git fast-import'.\n\nYou can use it as a human-readable bundle replacement (see\nlinkgit:git-bundle[1]), or as a format that can be edited before being\nfed to 'git fast-import' in order to do history rewrites (an ability\nrelied on by tools like 'git filter-repo').\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 526,
            "end_index": 543,
            "value": "\n--progress=<n>::\n\tInsert 'progress' statements every <n> objects, to be shown by\n\t'git fast-import' during import.\n\n--signed-tags=(verbatim|warn|warn-strip|strip|abort)::\n\tSpecify how to handle signed tags.  Since any transformation\n\tafter the export can change the tag names (which can also happen\n\twhen excluding revisions) the signatures will not match.\n+\nWhen asking to 'abort' (which is the default), this program will die\nwhen encountering a signed tag.  With 'strip', the tags will silently\nbe made unsigned, with 'warn-strip' they will be made unsigned but a\nwarning will be displayed, with 'verbatim', they will be silently\nexported and with 'warn', they will be exported, but you will see a\nwarning.\n\n--tag-of-filtered-object=(abort|drop|rewrite)::\n\tSpecify how to handle tags whose tagged object is filtered out.\n\tSince revisions and files to export can be limited by path,\n\ttagged objects may be filtered completely.\n+\nWhen asking to 'abort' (which is the default), this program will die\nwhen encountering such a tag.  With 'drop' it will omit such tags from\nthe output.  With 'rewrite', if the tagged object is a commit, it will\nrewrite the tag to tag an ancestor commit (via parent rewriting; see\nlinkgit:git-rev-list[1])\n\n-M::\n-C::\n\tPerform move and/or copy detection, as described in the\n\tlinkgit:git-diff[1] manual page, and use it to generate\n\trename and copy commands in the output dump.\n+\nNote that earlier versions of this command did not complain and\nproduced incorrect results if you gave these options.\n\n--export-marks=<file>::\n\tDumps the internal marks table to <file> when complete.\n\tMarks are written one per line as `:markid SHA-1`. Only marks\n\tfor revisions are dumped; marks for blobs are ignored.\n\tBackends can use this file to validate imports after they\n\thave been completed, or to save the marks table across\n\tincremental runs.  As <file> is only opened and truncated\n\tat completion, the same path can also be safely given to\n\t--import-marks.\n\tThe file will not be written if no new object has been\n\tmarked/exported.\n\n--import-marks=<file>::\n\tBefore processing any input, load the marks specified in\n\t<file>.  The input file must exist, must be readable, and\n\tmust use the same format as produced by --export-marks.\n\n--mark-tags::\n\tIn addition to labelling blobs and commits with mark ids, also\n\tlabel tags.  This is useful in conjunction with\n\t`--export-marks` and `--import-marks`, and is also useful (and\n\tnecessary) for exporting of nested tags.  It does not hurt\n\tother cases and would be the default, but many fast-import\n\tfrontends are not prepared to accept tags with mark\n\tidentifiers.\n+\nAny commits (or tags) that have already been marked will not be\nexported again.  If the backend uses a similar --import-marks file,\nthis allows for incremental bidirectional exporting of the repository\nby keeping the marks the same across runs.\n\n--fake-missing-tagger::\n\tSome old repositories have tags without a tagger.  The\n\tfast-import protocol was pretty strict about that, and did not\n\tallow that.  So fake a tagger to be able to fast-import the\n\toutput.\n\n--use-done-feature::\n\tStart the stream with a 'feature done' stanza, and terminate\n\tit with a 'done' command.\n\n--no-data::\n\tSkip output of blob objects and instead refer to blobs via\n\ttheir original SHA-1 hash.  This is useful when rewriting the\n\tdirectory structure or history of a repository without\n\ttouching the contents of individual files.  Note that the\n\tresulting stream can only be used by a repository which\n\talready contains the necessary objects.\n\n--full-tree::\n\tThis option will cause fast-export to issue a \"deleteall\"\n\tdirective for each commit followed by a full list of all files\n\tin the commit (as opposed to just listing the files which are\n\tdifferent from the commit's first parent).\n\n--anonymize::\n\tAnonymize the contents of the repository while still retaining\n\tthe shape of the history and stored tree.  See the section on\n\t`ANONYMIZING` below.\n\n--anonymize-map=<from>[:<to>]::\n\tConvert token `<from>` to `<to>` in the anonymized output. If\n\t`<to>` is omitted, map `<from>` to itself (i.e., do not\n\tanonymize it). See the section on `ANONYMIZING` below.\n\n--reference-excluded-parents::\n\tBy default, running a command such as `git fast-export\n\tmaster~5..master` will not include the commit master{tilde}5\n\tand will make master{tilde}4 no longer have master{tilde}5 as\n\ta parent (though both the old master{tilde}4 and new\n\tmaster{tilde}4 will have all the same files).  Use\n\t--reference-excluded-parents to instead have the stream\n\trefer to commits in the excluded range of history by their\n\tsha1sum.  Note that the resulting stream can only be used by a\n\trepository which already contains the necessary parent\n\tcommits.\n\n--show-original-ids::\n\tAdd an extra directive to the output for commits and blobs,\n\t`original-oid <SHA1SUM>`.  While such directives will likely be\n\tignored by importers such as git-fast-import, it may be useful\n\tfor intermediary filters (e.g. for rewriting commit messages\n\twhich refer to older commits, or for stripping blobs by id).\n\n--reencode=(yes|no|abort)::\n\tSpecify how to handle `encoding` header in commit objects.  When\n\tasking to 'abort' (which is the default), this program will die\n\twhen encountering such a commit object.  With 'yes', the commit\n\tmessage will be re-encoded into UTF-8.  With 'no', the original\n\tencoding will be preserved.\n\n--refspec::\n\tApply the specified refspec to each ref exported. Multiple of them can\n\tbe specified.\n\n[<git-rev-list-args>...]::\n\tA list of arguments, acceptable to 'git rev-parse' and\n\t'git rev-list', that specifies the specific objects and references\n\tto export.  For example, `master~10..master` causes the\n\tcurrent master reference to be exported along with all objects\n\tadded since its 10th ancestor commit and (unless the\n\t--reference-excluded-parents option is specified) all files\n\tcommon to master{tilde}9 and master{tilde}10.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 6469,
            "end_index": 6488,
            "value": "\n-------------------------------------------------------------------\n$ git fast-export --all | (cd /empty/repository && git fast-import)\n-------------------------------------------------------------------\n\nThis will export the whole repository and import it into the existing\nempty repository.  Except for reencoding commits that are not in\nUTF-8, it would be a one-to-one mirror.\n\n-----------------------------------------------------\n$ git fast-export master~5..master |\n\tsed \"s|refs/heads/master|refs/heads/other|\" |\n\tgit fast-import\n-----------------------------------------------------\n\nThis makes a new branch called 'other' from 'master~5..master'\n(i.e. if 'master' has linear history, it will take the last 5 commits).\n\nNote that this assumes that none of the blobs and commit messages\nreferenced by that revision range contains the string\n'refs/heads/master'.\n\n"
        },
        "ANONYMIZING": {
            "name": "ANONYMIZING",
            "start_index": 7358,
            "end_index": 7383,
            "value": "\nIf the `--anonymize` option is given, git will attempt to remove all\nidentifying information from the repository while still retaining enough\nof the original tree and history patterns to reproduce some bugs. The\ngoal is that a git bug which is found on a private repository will\npersist in the anonymized repository, and the latter can be shared with\ngit developers to help solve the bug.\n\nWith this option, git will replace all refnames, paths, blob contents,\ncommit and tag messages, names, and email addresses in the output with\nanonymized data.  Two instances of the same string will be replaced\nequivalently (e.g., two commits with the same author will have the same\nanonymized author in the output, but bear no resemblance to the original\nauthor string). The relationship between commits, branches, and tags is\nretained, as well as the commit timestamps (but the commit messages and\nrefnames bear no resemblance to the originals). The relative makeup of\nthe tree is retained (e.g., if you have a root tree with 10 files and 3\ntrees, so will the output), but their names and the contents of the\nfiles will be replaced.\n\nIf you think you have found a git bug, you can start by exporting an\nanonymized stream of the whole repository:\n\n---------------------------------------------------\n$ git fast-export --anonymize --all >anon-stream\n---------------------------------------------------\n\nThen confirm that the bug persists in a repository created from that\nstream (many bugs will not, as they really do depend on the exact\nrepository contents):\n\n---------------------------------------------------\n$ git init anon-repo\n$ cd anon-repo\n$ git fast-import <../anon-stream\n$ ... test your bug ...\n---------------------------------------------------\n\nIf the anonymized repository shows the bug, it may be worth sharing\n`anon-stream` along with a regular bug report. Note that the anonymized\nstream compresses very well, so gzipping it is encouraged. If you want\nto examine the stream to see that it does not contain any private data,\nyou can peruse it directly before sending. You may also want to try:\n\n---------------------------------------------------\n$ perl -pe 's/\\d+/X/g' <anon-stream | sort -u | less\n---------------------------------------------------\n\nwhich shows all of the unique lines (with numbers converted to \"X\", to\ncollapse \"User 0\", \"User 1\", etc into \"User X\"). This produces a much\nsmaller output, and it is usually easy to quickly confirm that there is\nno private data in the stream.\n\nReproducing some bugs may require referencing particular commits or\npaths, which becomes challenging after refnames and paths have been\nanonymized. You can ask for a particular token to be left as-is or\nmapped to a new value. For example, if you have a bug which reproduces\nwith `git rev-list sensitive -- secret.c`, you can run:\n\n---------------------------------------------------\n$ git fast-export --anonymize --all \\\n      --anonymize-map=sensitive:foo \\\n      --anonymize-map=secret.c:bar.c \\\n      >stream\n---------------------------------------------------\n\nAfter importing the stream, you can then run `git rev-list foo -- bar.c`\nin the anonymized repository.\n\nNote that paths and refnames are split into tokens at slash boundaries.\nThe command above would anonymize `subdir/secret.c` as something like\n`path123/bar.c`; you could then search for `bar.c` in the anonymized\nrepository to determine the final pathname.\n\nTo make referencing the final pathname simpler, you can map each path\ncomponent; so if you also anonymize `subdir` to `publicdir`, then the\nfinal pathname would be `publicdir/bar.c`.\n"
        },
        "LIMITATIONS": {
            "name": "LIMITATIONS",
            "start_index": 10997,
            "end_index": 11022,
            "value": "\nSince 'git fast-import' cannot tag trees, you will not be\nable to export the linux.git repository completely, as it contains\na tag referencing a tree instead of a commit.\n\nSEE ALSO\n--------\nlinkgit:git-fast-import[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 11240,
            "end_index": 11249,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fast-import.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-fast-import - Backend for fast Git data importers\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 104,
            "end_index": 123,
            "value": "[verse]\nfrontend | 'git fast-import' [<options>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 172,
            "end_index": 197,
            "value": "This program is usually not what the end user wants to run directly.\nMost end users want to use one of the existing frontend programs,\nwhich parses a specific type of foreign source and feeds the contents\nstored there to 'git fast-import'.\n\nfast-import reads a mixed command/data stream from standard input and\nwrites one or more packfiles directly into the current repository.\nWhen EOF is received on standard input, fast import writes out\nupdated branch and tag refs, fully updating the current repository\nwith the newly imported data.\n\nThe fast-import backend itself can import into an empty repository (one that\nhas already been initialized by 'git init') or incrementally\nupdate an existing populated repository.  Whether or not incremental\nimports are supported from a particular foreign source depends on\nthe frontend program in use.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1039,
            "end_index": 1056,
            "value": "\n--force::\n\tForce updating modified existing branches, even if doing\n\tso would cause commits to be lost (as the new commit does\n\tnot contain the old commit).\n\n--quiet::\n\tDisable the output shown by --stats, making fast-import usually\n\tbe silent when it is successful.  However, if the import stream\n\thas directives intended to show user output (e.g. `progress`\n\tdirectives), the corresponding messages will still be shown.\n\n--stats::\n\tDisplay some basic statistics about the objects fast-import has\n\tcreated, the packfiles they were stored into, and the\n\tmemory used by fast-import during this run.  Showing this output\n\tis currently the default, but can be disabled with --quiet.\n\n--allow-unsafe-features::\n\tMany command-line options can be provided as part of the\n\tfast-import stream itself by using the `feature` or `option`\n\tcommands. However, some of these options are unsafe (e.g.,\n\tallowing fast-import to access the filesystem outside of the\n\trepository). These options are disabled by default, but can be\n\tallowed by providing this option on the command line.  This\n\tcurrently impacts only the `export-marks`, `import-marks`, and\n\t`import-marks-if-exists` feature commands.\n+\n\tOnly enable this option if you trust the program generating the\n\tfast-import stream! This option is enabled automatically for\n\tremote-helpers that use the `import` capability, as they are\n\talready trusted to run their own code.\n\nOptions for Frontends\n~~~~~~~~~~~~~~~~~~~~~\n\n--cat-blob-fd=<fd>::\n\tWrite responses to `get-mark`, `cat-blob`, and `ls` queries to the\n\tfile descriptor <fd> instead of `stdout`.  Allows `progress`\n\toutput intended for the end-user to be separated from other\n\toutput.\n\n--date-format=<fmt>::\n\tSpecify the type of dates the frontend will supply to\n\tfast-import within `author`, `committer` and `tagger` commands.\n\tSee ``Date Formats'' below for details about which formats\n\tare supported, and their syntax.\n\n--done::\n\tTerminate with error if there is no `done` command at the end of\n\tthe stream.  This option might be useful for detecting errors\n\tthat cause the frontend to terminate before it has started to\n\twrite a stream.\n\nLocations of Marks Files\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n--export-marks=<file>::\n\tDumps the internal marks table to <file> when complete.\n\tMarks are written one per line as `:markid SHA-1`.\n\tFrontends can use this file to validate imports after they\n\thave been completed, or to save the marks table across\n\tincremental runs.  As <file> is only opened and truncated\n\tat checkpoint (or completion) the same path can also be\n\tsafely given to --import-marks.\n\n--import-marks=<file>::\n\tBefore processing any input, load the marks specified in\n\t<file>.  The input file must exist, must be readable, and\n\tmust use the same format as produced by --export-marks.\n\tMultiple options may be supplied to import more than one\n\tset of marks.  If a mark is defined to different values,\n\tthe last file wins.\n\n--import-marks-if-exists=<file>::\n\tLike --import-marks but instead of erroring out, silently\n\tskips the file if it does not exist.\n\n--[no-]relative-marks::\n\tAfter specifying --relative-marks the paths specified\n\twith --import-marks= and --export-marks= are relative\n\tto an internal directory in the current repository.\n\tIn git-fast-import this means that the paths are relative\n\tto the .git/info/fast-import directory. However, other\n\timporters may use a different location.\n+\nRelative and non-relative marks may be combined by interweaving\n--(no-)-relative-marks with the --(import|export)-marks= options.\n\nSubmodule Rewriting\n~~~~~~~~~~~~~~~~~~~\n\n--rewrite-submodules-from=<name>:<file>::\n--rewrite-submodules-to=<name>:<file>::\n  Rewrite the object IDs for the submodule specified by <name> from the values\n\tused in the from <file> to those used in the to <file>. The from marks should\n\thave been created by `git fast-export`, and the to marks should have been\n\tcreated by `git fast-import` when importing that same submodule.\n+\n<name> may be any arbitrary string not containing a colon character, but the\nsame value must be used with both options when specifying corresponding marks.\nMultiple submodules may be specified with different values for <name>. It is an\nerror not to use these options in corresponding pairs.\n+\nThese options are primarily useful when converting a repository from one hash\nalgorithm to another; without them, fast-import will fail if it encounters a\nsubmodule because it has no way of writing the object ID into the new hash\nalgorithm.\n\nPerformance and Compression Tuning\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n--active-branches=<n>::\n\tMaximum number of branches to maintain active at once.\n\tSee ``Memory Utilization'' below for details.  Default is 5.\n\n--big-file-threshold=<n>::\n\tMaximum size of a blob that fast-import will attempt to\n\tcreate a delta for, expressed in bytes.  The default is 512m\n\t(512 MiB).  Some importers may wish to lower this on systems\n\twith constrained memory.\n\n--depth=<n>::\n\tMaximum delta depth, for blob and tree deltification.\n\tDefault is 50.\n\n--export-pack-edges=<file>::\n\tAfter creating a packfile, print a line of data to\n\t<file> listing the filename of the packfile and the last\n\tcommit on each branch that was written to that packfile.\n\tThis information may be useful after importing projects\n\twhose total object set exceeds the 4 GiB packfile limit,\n\tas these commits can be used as edge points during calls\n\tto 'git pack-objects'.\n\n--max-pack-size=<n>::\n\tMaximum size of each output packfile.\n\tThe default is unlimited.\n\nfastimport.unpackLimit::\n\tSee linkgit:git-config[1]\n"
        },
        "PERFORMANCE": {
            "name": "PERFORMANCE",
            "start_index": 6618,
            "end_index": 6643,
            "value": "The design of fast-import allows it to import large projects in a minimum\namount of memory usage and processing time.  Assuming the frontend\nis able to keep up with fast-import and feed it a constant stream of data,\nimport times for projects holding 10+ years of history and containing\n100,000+ individual commits are generally completed in just 1-2\nhours on quite modest (~$2,000 USD) hardware.\n\nMost bottlenecks appear to be in foreign source data access (the\nsource just cannot extract revisions fast enough) or disk IO (fast-import\nwrites as fast as the disk will take the data).  Imports will run\nfaster if the source data is stored on a different drive than the\ndestination Git repository (due to less IO contention).\n\n\nDEVELOPMENT COST\n----------------\nA typical frontend for fast-import tends to weigh in at approximately 200\nlines of Perl/Python/Ruby code.  Most developers have been able to\ncreate working importers in just a couple of hours, even though it\nis their first exposure to fast-import, and sometimes even to Git.  This is\nan ideal situation, given that most conversion tools are throw-away\n(use once, and never look back).\n\n\nPARALLEL OPERATION\n------------------\nLike 'git push' or 'git fetch', imports handled by fast-import are safe to\nrun alongside parallel `git repack -a -d` or `git gc` invocations,\nor any other Git operation (including 'git prune', as loose objects\nare never used by fast-import).\n\nfast-import does not lock the branch or tag refs it is actively importing.\nAfter the import, during its ref update phase, fast-import tests each\nexisting branch ref to verify the update will be a fast-forward\nupdate (the commit stored in the ref is contained in the new\nhistory of the commit to be written).  If the update is not a\nfast-forward update, fast-import will skip updating that ref and instead\nprints a warning message.  fast-import will always attempt to update all\nbranch refs, and does not stop on the first failure.\n\nBranch updates can be forced with --force, but it's recommended that\nthis only be used on an otherwise quiet repository.  Using --force\nis not necessary for an initial import into an empty repository.\n\n\nTECHNICAL DISCUSSION\n--------------------\nfast-import tracks a set of branches in memory.  Any branch can be created\nor modified at any point during the import process by sending a\n`commit` command on the input stream.  This design allows a frontend\nprogram to process an unlimited number of branches simultaneously,\ngenerating commits in the order they are available from the source\ndata.  It also simplifies the frontend programs considerably.\n\nfast-import does not use or alter the current working directory, or any\nfile within it.  (It does however update the current Git repository,\nas referenced by `GIT_DIR`.)  Therefore an import frontend may use\nthe working directory for its own purposes, such as extracting file\nrevisions from the foreign source.  This ignorance of the working\ndirectory also allows fast-import to run very quickly, as it does not\nneed to perform any costly file update operations when switching\nbetween branches.\n\nINPUT FORMAT\n------------\nWith the exception of raw file data (which Git does not interpret)\nthe fast-import input format is text (ASCII) based.  This text based\nformat simplifies development and debugging of frontend programs,\nespecially when a higher level language such as Perl, Python or\nRuby is being used.\n\nfast-import is very strict about its input.  Where we say SP below we mean\n*exactly* one space.  Likewise LF means one (and only one) linefeed\nand HT one (and only one) horizontal tab.\nSupplying additional whitespace characters will cause unexpected\nresults, such as branch names or file names with leading or trailing\nspaces in their name, or early termination of fast-import when it encounters\nunexpected input.\n\nStream Comments\n~~~~~~~~~~~~~~~\nTo aid in debugging frontends fast-import ignores any line that\nbegins with `#` (ASCII pound/hash) up to and including the line\nending `LF`.  A comment line may contain any sequence of bytes\nthat does not contain an LF and therefore may be used to include\nany detailed debugging information that might be specific to the\nfrontend and useful when inspecting a fast-import data stream.\n\nDate Formats\n~~~~~~~~~~~~\nThe following date formats are supported.  A frontend should select\nthe format it will use for this import by passing the format name\nin the --date-format=<fmt> command-line option.\n\n`raw`::\n\tThis is the Git native format and is `<time> SP <offutc>`.\n\tIt is also fast-import's default format, if --date-format was\n\tnot specified.\n+\nThe time of the event is specified by `<time>` as the number of\nseconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is\nwritten as an ASCII decimal integer.\n+\nThe local offset is specified by `<offutc>` as a positive or negative\noffset from UTC.  For example EST (which is 5 hours behind UTC)\nwould be expressed in `<tz>` by ``-0500'' while UTC is ``+0000''.\nThe local offset does not affect `<time>`; it is used only as an\nadvisement to help formatting routines display the timestamp.\n+\nIf the local offset is not available in the source material, use\n``+0000'', or the most common local offset.  For example many\norganizations have a CVS repository which has only ever been accessed\nby users who are located in the same location and time zone.  In this\ncase a reasonable offset from UTC could be assumed.\n+\nUnlike the `rfc2822` format, this format is very strict.  Any\nvariation in formatting will cause fast-import to reject the value,\nand some sanity checks on the numeric values may also be performed.\n\n`raw-permissive`::\n\tThis is the same as `raw` except that no sanity checks on\n\tthe numeric epoch and local offset are performed.  This can\n\tbe useful when trying to filter or import an existing history\n\twith e.g. bogus timezone values.\n\n`rfc2822`::\n\tThis is the standard email format as described by RFC 2822.\n+\nAn example value is ``Tue Feb 6 11:22:18 2007 -0500''.  The Git\nparser is accurate, but a little on the lenient side.  It is the\nsame parser used by 'git am' when applying patches\nreceived from email.\n+\nSome malformed strings may be accepted as valid dates.  In some of\nthese cases Git will still be able to obtain the correct date from\nthe malformed string.  There are also some types of malformed\nstrings which Git will parse wrong, and yet consider valid.\nSeriously malformed strings will be rejected.\n+\nUnlike the `raw` format above, the time zone/UTC offset information\ncontained in an RFC 2822 date string is used to adjust the date\nvalue to UTC prior to storage.  Therefore it is important that\nthis information be as accurate as possible.\n+\nIf the source material uses RFC 2822 style dates,\nthe frontend should let fast-import handle the parsing and conversion\n(rather than attempting to do it itself) as the Git parser has\nbeen well tested in the wild.\n+\nFrontends should prefer the `raw` format if the source material\nalready uses UNIX-epoch format, can be coaxed to give dates in that\nformat, or its format is easily convertible to it, as there is no\nambiguity in parsing.\n\n`now`::\n\tAlways use the current time and time zone.  The literal\n\t`now` must always be supplied for `<when>`.\n+\nThis is a toy format.  The current time and time zone of this system\nis always copied into the identity string at the time it is being\ncreated by fast-import.  There is no way to specify a different time or\ntime zone.\n+\nThis particular format is supplied as it's short to implement and\nmay be useful to a process that wants to create a new commit\nright now, without needing to use a working directory or\n'git update-index'.\n+\nIf separate `author` and `committer` commands are used in a `commit`\nthe timestamps may not match, as the system clock will be polled\ntwice (once for each command).  The only way to ensure that both\nauthor and committer identity information has the same timestamp\nis to omit `author` (thus copying from `committer`) or to use a\ndate format other than `now`.\n\nCommands\n~~~~~~~~\nfast-import accepts several commands to update the current repository\nand control the current import process.  More detailed discussion\n(with examples) of each command follows later.\n\n`commit`::\n\tCreates a new branch or updates an existing branch by\n\tcreating a new commit and updating the branch to point at\n\tthe newly created commit.\n\n`tag`::\n\tCreates an annotated tag object from an existing commit or\n\tbranch.  Lightweight tags are not supported by this command,\n\tas they are not recommended for recording meaningful points\n\tin time.\n\n`reset`::\n\tReset an existing branch (or a new branch) to a specific\n\trevision.  This command must be used to change a branch to\n\ta specific revision without making a commit on it.\n\n`blob`::\n\tConvert raw file data into a blob, for future use in a\n\t`commit` command.  This command is optional and is not\n\tneeded to perform an import.\n\n`alias`::\n\tRecord that a mark refers to a given object without first\n\tcreating any new object.  Using --import-marks and referring\n\tto missing marks will cause fast-import to fail, so aliases\n\tcan provide a way to set otherwise pruned commits to a valid\n\tvalue (e.g. the nearest non-pruned ancestor).\n\n`checkpoint`::\n\tForces fast-import to close the current packfile, generate its\n\tunique SHA-1 checksum and index, and start a new packfile.\n\tThis command is optional and is not needed to perform\n\tan import.\n\n`progress`::\n\tCauses fast-import to echo the entire line to its own\n\tstandard output.  This command is optional and is not needed\n\tto perform an import.\n\n`done`::\n\tMarks the end of the stream. This command is optional\n\tunless the `done` feature was requested using the\n\t`--done` command-line option or `feature done` command.\n\n`get-mark`::\n\tCauses fast-import to print the SHA-1 corresponding to a mark\n\tto the file descriptor set with `--cat-blob-fd`, or `stdout` if\n\tunspecified.\n\n`cat-blob`::\n\tCauses fast-import to print a blob in 'cat-file --batch'\n\tformat to the file descriptor set with `--cat-blob-fd` or\n\t`stdout` if unspecified.\n\n`ls`::\n\tCauses fast-import to print a line describing a directory\n\tentry in 'ls-tree' format to the file descriptor set with\n\t`--cat-blob-fd` or `stdout` if unspecified.\n\n`feature`::\n\tEnable the specified feature. This requires that fast-import\n\tsupports the specified feature, and aborts if it does not.\n\n`option`::\n\tSpecify any of the options listed under OPTIONS that do not\n\tchange stream semantic to suit the frontend's needs. This\n\tcommand is optional and is not needed to perform an import.\n\n`commit`\n~~~~~~~~\nCreate or update a branch with a new commit, recording one logical\nchange to the project.\n\n....\n\t'commit' SP <ref> LF\n\tmark?\n\toriginal-oid?\n\t('author' (SP <name>)? SP LT <email> GT SP <when> LF)?\n\t'committer' (SP <name>)? SP LT <email> GT SP <when> LF\n\t('encoding' SP <encoding>)?\n\tdata\n\t('from' SP <commit-ish> LF)?\n\t('merge' SP <commit-ish> LF)*\n\t(filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*\n\tLF?\n....\n\nwhere `<ref>` is the name of the branch to make the commit on.\nTypically branch names are prefixed with `refs/heads/` in\nGit, so importing the CVS branch symbol `RELENG-1_0` would use\n`refs/heads/RELENG-1_0` for the value of `<ref>`.  The value of\n`<ref>` must be a valid refname in Git.  As `LF` is not valid in\na Git refname, no quoting or escaping syntax is supported here.\n\nA `mark` command may optionally appear, requesting fast-import to save a\nreference to the newly created commit for future use by the frontend\n(see below for format).  It is very common for frontends to mark\nevery commit they create, thereby allowing future branch creation\nfrom any imported commit.\n\nThe `data` command following `committer` must supply the commit\nmessage (see below for `data` command syntax).  To import an empty\ncommit message use a 0 length data.  Commit messages are free-form\nand are not interpreted by Git.  Currently they must be encoded in\nUTF-8, as fast-import does not permit other encodings to be specified.\n\nZero or more `filemodify`, `filedelete`, `filecopy`, `filerename`,\n`filedeleteall` and `notemodify` commands\nmay be included to update the contents of the branch prior to\ncreating the commit.  These commands may be supplied in any order.\nHowever it is recommended that a `filedeleteall` command precede\nall `filemodify`, `filecopy`, `filerename` and `notemodify` commands in\nthe same commit, as `filedeleteall` wipes the branch clean (see below).\n\nThe `LF` after the command is optional (it used to be required).  Note\nthat for reasons of backward compatibility, if the commit ends with a\n`data` command (i.e. it has no `from`, `merge`, `filemodify`,\n`filedelete`, `filecopy`, `filerename`, `filedeleteall` or\n`notemodify` commands) then two `LF` commands may appear at the end of\nthe command instead of just one.\n\n`author`\n^^^^^^^^\nAn `author` command may optionally appear, if the author information\nmight differ from the committer information.  If `author` is omitted\nthen fast-import will automatically use the committer's information for\nthe author portion of the commit.  See below for a description of\nthe fields in `author`, as they are identical to `committer`.\n\n`committer`\n^^^^^^^^^^^\nThe `committer` command indicates who made this commit, and when\nthey made it.\n\nHere `<name>` is the person's display name (for example\n``Com M Itter'') and `<email>` is the person's email address\n(``\\cm@example.com'').  `LT` and `GT` are the literal less-than (\\x3c)\nand greater-than (\\x3e) symbols.  These are required to delimit\nthe email address from the other fields in the line.  Note that\n`<name>` and `<email>` are free-form and may contain any sequence\nof bytes, except `LT`, `GT` and `LF`.  `<name>` is typically UTF-8 encoded.\n\nThe time of the change is specified by `<when>` using the date format\nthat was selected by the --date-format=<fmt> command-line option.\nSee ``Date Formats'' above for the set of supported formats, and\ntheir syntax.\n\n`encoding`\n^^^^^^^^^^\nThe optional `encoding` command indicates the encoding of the commit\nmessage.  Most commits are UTF-8 and the encoding is omitted, but this\nallows importing commit messages into git without first reencoding them.\n\n`from`\n^^^^^^\nThe `from` command is used to specify the commit to initialize\nthis branch from.  This revision will be the first ancestor of the\nnew commit.  The state of the tree built at this commit will begin\nwith the state at the `from` commit, and be altered by the content\nmodifications in this commit.\n\nOmitting the `from` command in the first commit of a new branch\nwill cause fast-import to create that commit with no ancestor. This\ntends to be desired only for the initial commit of a project.\nIf the frontend creates all files from scratch when making a new\nbranch, a `merge` command may be used instead of `from` to start\nthe commit with an empty tree.\nOmitting the `from` command on existing branches is usually desired,\nas the current commit on that branch is automatically assumed to\nbe the first ancestor of the new commit.\n\nAs `LF` is not valid in a Git refname or SHA-1 expression, no\nquoting or escaping syntax is supported within `<commit-ish>`.\n\nHere `<commit-ish>` is any of the following:\n\n* The name of an existing branch already in fast-import's internal branch\n  table.  If fast-import doesn't know the name, it's treated as a SHA-1\n  expression.\n\n* A mark reference, `:<idnum>`, where `<idnum>` is the mark number.\n+\nThe reason fast-import uses `:` to denote a mark reference is this character\nis not legal in a Git branch name.  The leading `:` makes it easy\nto distinguish between the mark 42 (`:42`) and the branch 42 (`42`\nor `refs/heads/42`), or an abbreviated SHA-1 which happened to\nconsist only of base-10 digits.\n+\nMarks must be declared (via `mark`) before they can be used.\n\n* A complete 40 byte or abbreviated commit SHA-1 in hex.\n\n* Any valid Git SHA-1 expression that resolves to a commit.  See\n  ``SPECIFYING REVISIONS'' in linkgit:gitrevisions[7] for details.\n\n* The special null SHA-1 (40 zeros) specifies that the branch is to be\n  removed.\n\nThe special case of restarting an incremental import from the\ncurrent branch value should be written as:\n----\n\tfrom refs/heads/branch^0\n----\nThe `^0` suffix is necessary as fast-import does not permit a branch to\nstart from itself, and the branch is created in memory before the\n`from` command is even read from the input.  Adding `^0` will force\nfast-import to resolve the commit through Git's revision parsing library,\nrather than its internal branch table, thereby loading in the\nexisting value of the branch.\n\n`merge`\n^^^^^^^\nIncludes one additional ancestor commit.  The additional ancestry\nlink does not change the way the tree state is built at this commit.\nIf the `from` command is\nomitted when creating a new branch, the first `merge` commit will be\nthe first ancestor of the current commit, and the branch will start\nout with no files.  An unlimited number of `merge` commands per\ncommit are permitted by fast-import, thereby establishing an n-way merge.\n\nHere `<commit-ish>` is any of the commit specification expressions\nalso accepted by `from` (see above).\n\n`filemodify`\n^^^^^^^^^^^^\nIncluded in a `commit` command to add a new file or change the\ncontent of an existing file.  This command has two different means\nof specifying the content of the file.\n\nExternal data format::\n\tThe data content for the file was already supplied by a prior\n\t`blob` command.  The frontend just needs to connect it.\n+\n....\n\t'M' SP <mode> SP <dataref> SP <path> LF\n....\n+\nHere usually `<dataref>` must be either a mark reference (`:<idnum>`)\nset by a prior `blob` command, or a full 40-byte SHA-1 of an\nexisting Git blob object.  If `<mode>` is `040000`` then\n`<dataref>` must be the full 40-byte SHA-1 of an existing\nGit tree object or a mark reference set with `--import-marks`.\n\nInline data format::\n\tThe data content for the file has not been supplied yet.\n\tThe frontend wants to supply it as part of this modify\n\tcommand.\n+\n....\n\t'M' SP <mode> SP 'inline' SP <path> LF\n\tdata\n....\n+\nSee below for a detailed description of the `data` command.\n\nIn both formats `<mode>` is the type of file entry, specified\nin octal.  Git only supports the following modes:\n\n* `100644` or `644`: A normal (not-executable) file.  The majority\n  of files in most projects use this mode.  If in doubt, this is\n  what you want.\n* `100755` or `755`: A normal, but executable, file.\n* `120000`: A symlink, the content of the file will be the link target.\n* `160000`: A gitlink, SHA-1 of the object refers to a commit in\n  another repository. Git links can only be specified by SHA or through\n  a commit mark. They are used to implement submodules.\n* `040000`: A subdirectory.  Subdirectories can only be specified by\n  SHA or through a tree mark set with `--import-marks`.\n\nIn both formats `<path>` is the complete path of the file to be added\n(if not already existing) or modified (if already existing).\n\nA `<path>` string must use UNIX-style directory separators (forward\nslash `/`), may contain any byte other than `LF`, and must not\nstart with double quote (`\"`).\n\nA path can use C-style string quoting; this is accepted in all cases\nand mandatory if the filename starts with double quote or contains\n`LF`. In C-style quoting, the complete name should be surrounded with\ndouble quotes, and any `LF`, backslash, or double quote characters\nmust be escaped by preceding them with a backslash (e.g.,\n`\"path/with\\n, \\\\ and \\\" in it\"`).\n\nThe value of `<path>` must be in canonical form. That is it must not:\n\n* contain an empty directory component (e.g. `foo//bar` is invalid),\n* end with a directory separator (e.g. `foo/` is invalid),\n* start with a directory separator (e.g. `/foo` is invalid),\n* contain the special component `.` or `..` (e.g. `foo/./bar` and\n  `foo/../bar` are invalid).\n\nThe root of the tree can be represented by an empty string as `<path>`.\n\nIt is recommended that `<path>` always be encoded using UTF-8.\n\n`filedelete`\n^^^^^^^^^^^^\nIncluded in a `commit` command to remove a file or recursively\ndelete an entire directory from the branch.  If the file or directory\nremoval makes its parent directory empty, the parent directory will\nbe automatically removed too.  This cascades up the tree until the\nfirst non-empty directory or the root is reached.\n\n....\n\t'D' SP <path> LF\n....\n\nhere `<path>` is the complete path of the file or subdirectory to\nbe removed from the branch.\nSee `filemodify` above for a detailed description of `<path>`.\n\n`filecopy`\n^^^^^^^^^^\nRecursively copies an existing file or subdirectory to a different\nlocation within the branch.  The existing file or directory must\nexist.  If the destination exists it will be completely replaced\nby the content copied from the source.\n\n....\n\t'C' SP <path> SP <path> LF\n....\n\nhere the first `<path>` is the source location and the second\n`<path>` is the destination.  See `filemodify` above for a detailed\ndescription of what `<path>` may look like.  To use a source path\nthat contains SP the path must be quoted.\n\nA `filecopy` command takes effect immediately.  Once the source\nlocation has been copied to the destination any future commands\napplied to the source location will not impact the destination of\nthe copy.\n\n`filerename`\n^^^^^^^^^^^^\nRenames an existing file or subdirectory to a different location\nwithin the branch.  The existing file or directory must exist. If\nthe destination exists it will be replaced by the source directory.\n\n....\n\t'R' SP <path> SP <path> LF\n....\n\nhere the first `<path>` is the source location and the second\n`<path>` is the destination.  See `filemodify` above for a detailed\ndescription of what `<path>` may look like.  To use a source path\nthat contains SP the path must be quoted.\n\nA `filerename` command takes effect immediately.  Once the source\nlocation has been renamed to the destination any future commands\napplied to the source location will create new files there and not\nimpact the destination of the rename.\n\nNote that a `filerename` is the same as a `filecopy` followed by a\n`filedelete` of the source location.  There is a slight performance\nadvantage to using `filerename`, but the advantage is so small\nthat it is never worth trying to convert a delete/add pair in\nsource material into a rename for fast-import.  This `filerename`\ncommand is provided just to simplify frontends that already have\nrename information and don't want bother with decomposing it into a\n`filecopy` followed by a `filedelete`.\n\n`filedeleteall`\n^^^^^^^^^^^^^^^\nIncluded in a `commit` command to remove all files (and also all\ndirectories) from the branch.  This command resets the internal\nbranch structure to have no files in it, allowing the frontend\nto subsequently add all interesting files from scratch.\n\n....\n\t'deleteall' LF\n....\n\nThis command is extremely useful if the frontend does not know\n(or does not care to know) what files are currently on the branch,\nand therefore cannot generate the proper `filedelete` commands to\nupdate the content.\n\nIssuing a `filedeleteall` followed by the needed `filemodify`\ncommands to set the correct content will produce the same results\nas sending only the needed `filemodify` and `filedelete` commands.\nThe `filedeleteall` approach may however require fast-import to use slightly\nmore memory per active branch (less than 1 MiB for even most large\nprojects); so frontends that can easily obtain only the affected\npaths for a commit are encouraged to do so.\n\n`notemodify`\n^^^^^^^^^^^^\nIncluded in a `commit` `<notes_ref>` command to add a new note\nannotating a `<commit-ish>` or change this annotation contents.\nInternally it is similar to filemodify 100644 on `<commit-ish>`\npath (maybe split into subdirectories). It's not advised to\nuse any other commands to write to the `<notes_ref>` tree except\n`filedeleteall` to delete all existing notes in this tree.\nThis command has two different means of specifying the content\nof the note.\n\nExternal data format::\n\tThe data content for the note was already supplied by a prior\n\t`blob` command.  The frontend just needs to connect it to the\n\tcommit that is to be annotated.\n+\n....\n\t'N' SP <dataref> SP <commit-ish> LF\n....\n+\nHere `<dataref>` can be either a mark reference (`:<idnum>`)\nset by a prior `blob` command, or a full 40-byte SHA-1 of an\nexisting Git blob object.\n\nInline data format::\n\tThe data content for the note has not been supplied yet.\n\tThe frontend wants to supply it as part of this modify\n\tcommand.\n+\n....\n\t'N' SP 'inline' SP <commit-ish> LF\n\tdata\n....\n+\nSee below for a detailed description of the `data` command.\n\nIn both formats `<commit-ish>` is any of the commit specification\nexpressions also accepted by `from` (see above).\n\n`mark`\n~~~~~~\nArranges for fast-import to save a reference to the current object, allowing\nthe frontend to recall this object at a future point in time, without\nknowing its SHA-1.  Here the current object is the object creation\ncommand the `mark` command appears within.  This can be `commit`,\n`tag`, and `blob`, but `commit` is the most common usage.\n\n....\n\t'mark' SP ':' <idnum> LF\n....\n\nwhere `<idnum>` is the number assigned by the frontend to this mark.\nThe value of `<idnum>` is expressed as an ASCII decimal integer.\nThe value 0 is reserved and cannot be used as\na mark.  Only values greater than or equal to 1 may be used as marks.\n\nNew marks are created automatically.  Existing marks can be moved\nto another object simply by reusing the same `<idnum>` in another\n`mark` command.\n\n`original-oid`\n~~~~~~~~~~~~~~\nProvides the name of the object in the original source control system.\nfast-import will simply ignore this directive, but filter processes\nwhich operate on and modify the stream before feeding to fast-import\nmay have uses for this information\n\n....\n\t'original-oid' SP <object-identifier> LF\n....\n\nwhere `<object-identifier>` is any string not containing LF.\n\n`tag`\n~~~~~\nCreates an annotated tag referring to a specific commit.  To create\nlightweight (non-annotated) tags see the `reset` command below.\n\n....\n\t'tag' SP <name> LF\n\tmark?\n\t'from' SP <commit-ish> LF\n\toriginal-oid?\n\t'tagger' (SP <name>)? SP LT <email> GT SP <when> LF\n\tdata\n....\n\nwhere `<name>` is the name of the tag to create.\n\nTag names are automatically prefixed with `refs/tags/` when stored\nin Git, so importing the CVS branch symbol `RELENG-1_0-FINAL` would\nuse just `RELENG-1_0-FINAL` for `<name>`, and fast-import will write the\ncorresponding ref as `refs/tags/RELENG-1_0-FINAL`.\n\nThe value of `<name>` must be a valid refname in Git and therefore\nmay contain forward slashes.  As `LF` is not valid in a Git refname,\nno quoting or escaping syntax is supported here.\n\nThe `from` command is the same as in the `commit` command; see\nabove for details.\n\nThe `tagger` command uses the same format as `committer` within\n`commit`; again see above for details.\n\nThe `data` command following `tagger` must supply the annotated tag\nmessage (see below for `data` command syntax).  To import an empty\ntag message use a 0 length data.  Tag messages are free-form and are\nnot interpreted by Git.  Currently they must be encoded in UTF-8,\nas fast-import does not permit other encodings to be specified.\n\nSigning annotated tags during import from within fast-import is not\nsupported.  Trying to include your own PGP/GPG signature is not\nrecommended, as the frontend does not (easily) have access to the\ncomplete set of bytes which normally goes into such a signature.\nIf signing is required, create lightweight tags from within fast-import with\n`reset`, then create the annotated versions of those tags offline\nwith the standard 'git tag' process.\n\n`reset`\n~~~~~~~\nCreates (or recreates) the named branch, optionally starting from\na specific revision.  The reset command allows a frontend to issue\na new `from` command for an existing branch, or to create a new\nbranch from an existing commit without creating a new commit.\n\n....\n\t'reset' SP <ref> LF\n\t('from' SP <commit-ish> LF)?\n\tLF?\n....\n\nFor a detailed description of `<ref>` and `<commit-ish>` see above\nunder `commit` and `from`.\n\nThe `LF` after the command is optional (it used to be required).\n\nThe `reset` command can also be used to create lightweight\n(non-annotated) tags.  For example:\n\n====\n\treset refs/tags/938\n\tfrom :938\n====\n\nwould create the lightweight tag `refs/tags/938` referring to\nwhatever commit mark `:938` references.\n\n`blob`\n~~~~~~\nRequests writing one file revision to the packfile.  The revision\nis not connected to any commit; this connection must be formed in\na subsequent `commit` command by referencing the blob through an\nassigned mark.\n\n....\n\t'blob' LF\n\tmark?\n\toriginal-oid?\n\tdata\n....\n\nThe mark command is optional here as some frontends have chosen\nto generate the Git SHA-1 for the blob on their own, and feed that\ndirectly to `commit`.  This is typically more work than it's worth\nhowever, as marks are inexpensive to store and easy to use.\n\n`data`\n~~~~~~\nSupplies raw data (for use as blob/file content, commit messages, or\nannotated tag messages) to fast-import.  Data can be supplied using an exact\nbyte count or delimited with a terminating line.  Real frontends\nintended for production-quality conversions should always use the\nexact byte count format, as it is more robust and performs better.\nThe delimited format is intended primarily for testing fast-import.\n\nComment lines appearing within the `<raw>` part of `data` commands\nare always taken to be part of the body of the data and are therefore\nnever ignored by fast-import.  This makes it safe to import any\nfile/message content whose lines might start with `#`.\n\nExact byte count format::\n\tThe frontend must specify the number of bytes of data.\n+\n....\n\t'data' SP <count> LF\n\t<raw> LF?\n....\n+\nwhere `<count>` is the exact number of bytes appearing within\n`<raw>`.  The value of `<count>` is expressed as an ASCII decimal\ninteger.  The `LF` on either side of `<raw>` is not\nincluded in `<count>` and will not be included in the imported data.\n+\nThe `LF` after `<raw>` is optional (it used to be required) but\nrecommended.  Always including it makes debugging a fast-import\nstream easier as the next command always starts in column 0\nof the next line, even if `<raw>` did not end with an `LF`.\n\nDelimited format::\n\tA delimiter string is used to mark the end of the data.\n\tfast-import will compute the length by searching for the delimiter.\n\tThis format is primarily useful for testing and is not\n\trecommended for real data.\n+\n....\n\t'data' SP '<<' <delim> LF\n\t<raw> LF\n\t<delim> LF\n\tLF?\n....\n+\nwhere `<delim>` is the chosen delimiter string.  The string `<delim>`\nmust not appear on a line by itself within `<raw>`, as otherwise\nfast-import will think the data ends earlier than it really does.  The `LF`\nimmediately trailing `<raw>` is part of `<raw>`.  This is one of\nthe limitations of the delimited format, it is impossible to supply\na data chunk which does not have an LF as its last byte.\n+\nThe `LF` after `<delim> LF` is optional (it used to be required).\n\n`alias`\n~~~~~~~\nRecord that a mark refers to a given object without first creating any\nnew object.\n\n....\n\t'alias' LF\n\tmark\n\t'to' SP <commit-ish> LF\n\tLF?\n....\n\nFor a detailed description of `<commit-ish>` see above under `from`.\n\n\n`checkpoint`\n~~~~~~~~~~~~\nForces fast-import to close the current packfile, start a new one, and to\nsave out all current branch refs, tags and marks.\n\n....\n\t'checkpoint' LF\n\tLF?\n....\n\nNote that fast-import automatically switches packfiles when the current\npackfile reaches --max-pack-size, or 4 GiB, whichever limit is\nsmaller.  During an automatic packfile switch fast-import does not update\nthe branch refs, tags or marks.\n\nAs a `checkpoint` can require a significant amount of CPU time and\ndisk IO (to compute the overall pack SHA-1 checksum, generate the\ncorresponding index file, and update the refs) it can easily take\nseveral minutes for a single `checkpoint` command to complete.\n\nFrontends may choose to issue checkpoints during extremely large\nand long running imports, or when they need to allow another Git\nprocess access to a branch.  However given that a 30 GiB Subversion\nrepository can be loaded into Git through fast-import in about 3 hours,\nexplicit checkpointing may not be necessary.\n\nThe `LF` after the command is optional (it used to be required).\n\n`progress`\n~~~~~~~~~~\nCauses fast-import to print the entire `progress` line unmodified to\nits standard output channel (file descriptor 1) when the command is\nprocessed from the input stream.  The command otherwise has no impact\non the current import, or on any of fast-import's internal state.\n\n....\n\t'progress' SP <any> LF\n\tLF?\n....\n\nThe `<any>` part of the command may contain any sequence of bytes\nthat does not contain `LF`.  The `LF` after the command is optional.\nCallers may wish to process the output through a tool such as sed to\nremove the leading part of the line, for example:\n\n====\n\tfrontend | git fast-import | sed 's/^progress //'\n====\n\nPlacing a `progress` command immediately after a `checkpoint` will\ninform the reader when the `checkpoint` has been completed and it\ncan safely access the refs that fast-import updated.\n\n`get-mark`\n~~~~~~~~~~\nCauses fast-import to print the SHA-1 corresponding to a mark to\nstdout or to the file descriptor previously arranged with the\n`--cat-blob-fd` argument. The command otherwise has no impact on the\ncurrent import; its purpose is to retrieve SHA-1s that later commits\nmight want to refer to in their commit messages.\n\n....\n\t'get-mark' SP ':' <idnum> LF\n....\n\nSee ``Responses To Commands'' below for details about how to read\nthis output safely.\n\n`cat-blob`\n~~~~~~~~~~\nCauses fast-import to print a blob to a file descriptor previously\narranged with the `--cat-blob-fd` argument.  The command otherwise\nhas no impact on the current import; its main purpose is to\nretrieve blobs that may be in fast-import's memory but not\naccessible from the target repository.\n\n....\n\t'cat-blob' SP <dataref> LF\n....\n\nThe `<dataref>` can be either a mark reference (`:<idnum>`)\nset previously or a full 40-byte SHA-1 of a Git blob, preexisting or\nready to be written.\n\nOutput uses the same format as `git cat-file --batch`:\n\n====\n\t<sha1> SP 'blob' SP <size> LF\n\t<contents> LF\n====\n\nThis command can be used where a `filemodify` directive can appear,\nallowing it to be used in the middle of a commit.  For a `filemodify`\nusing an inline directive, it can also appear right before the `data`\ndirective.\n\nSee ``Responses To Commands'' below for details about how to read\nthis output safely.\n\n`ls`\n~~~~\nPrints information about the object at a path to a file descriptor\npreviously arranged with the `--cat-blob-fd` argument.  This allows\nprinting a blob from the active commit (with `cat-blob`) or copying a\nblob or tree from a previous commit for use in the current one (with\n`filemodify`).\n\nThe `ls` command can also be used where a `filemodify` directive can\nappear, allowing it to be used in the middle of a commit.\n\nReading from the active commit::\n\tThis form can only be used in the middle of a `commit`.\n\tThe path names a directory entry within fast-import's\n\tactive commit.  The path must be quoted in this case.\n+\n....\n\t'ls' SP <path> LF\n....\n\nReading from a named tree::\n\tThe `<dataref>` can be a mark reference (`:<idnum>`) or the\n\tfull 40-byte SHA-1 of a Git tag, commit, or tree object,\n\tpreexisting or waiting to be written.\n\tThe path is relative to the top level of the tree\n\tnamed by `<dataref>`.\n+\n....\n\t'ls' SP <dataref> SP <path> LF\n....\n\nSee `filemodify` above for a detailed description of `<path>`.\n\nOutput uses the same format as `git ls-tree <tree> -- <path>`:\n\n====\n\t<mode> SP ('blob' | 'tree' | 'commit') SP <dataref> HT <path> LF\n====\n\nThe <dataref> represents the blob, tree, or commit object at <path>\nand can be used in later 'get-mark', 'cat-blob', 'filemodify', or\n'ls' commands.\n\nIf there is no file or subtree at that path, 'git fast-import' will\ninstead report\n\n====\n\tmissing SP <path> LF\n====\n\nSee ``Responses To Commands'' below for details about how to read\nthis output safely.\n\n`feature`\n~~~~~~~~~\nRequire that fast-import supports the specified feature, or abort if\nit does not.\n\n....\n\t'feature' SP <feature> ('=' <argument>)? LF\n....\n\nThe <feature> part of the command may be any one of the following:\n\ndate-format::\nexport-marks::\nrelative-marks::\nno-relative-marks::\nforce::\n\tAct as though the corresponding command-line option with\n\ta leading `--` was passed on the command line\n\t(see OPTIONS, above).\n\nimport-marks::\nimport-marks-if-exists::\n\tLike --import-marks except in two respects: first, only one\n\t\"feature import-marks\" or \"feature import-marks-if-exists\"\n\tcommand is allowed per stream; second, an --import-marks=\n\tor --import-marks-if-exists command-line option overrides\n\tany of these \"feature\" commands in the stream; third,\n\t\"feature import-marks-if-exists\" like a corresponding\n\tcommand-line option silently skips a nonexistent file.\n\nget-mark::\ncat-blob::\nls::\n\tRequire that the backend support the 'get-mark', 'cat-blob',\n\tor 'ls' command respectively.\n\tVersions of fast-import not supporting the specified command\n\twill exit with a message indicating so.\n\tThis lets the import error out early with a clear message,\n\trather than wasting time on the early part of an import\n\tbefore the unsupported command is detected.\n\nnotes::\n\tRequire that the backend support the 'notemodify' (N)\n\tsubcommand to the 'commit' command.\n\tVersions of fast-import not supporting notes will exit\n\twith a message indicating so.\n\ndone::\n\tError out if the stream ends without a 'done' command.\n\tWithout this feature, errors causing the frontend to end\n\tabruptly at a convenient point in the stream can go\n\tundetected.  This may occur, for example, if an import\n\tfront end dies in mid-operation without emitting SIGTERM\n\tor SIGKILL at its subordinate git fast-import instance.\n\n`option`\n~~~~~~~~\nProcesses the specified option so that git fast-import behaves in a\nway that suits the frontend's needs.\nNote that options specified by the frontend are overridden by any\noptions the user may specify to git fast-import itself.\n\n....\n    'option' SP <option> LF\n....\n\nThe `<option>` part of the command may contain any of the options\nlisted in the OPTIONS section that do not change import semantics,\nwithout the leading `--` and is treated in the same way.\n\nOption commands must be the first commands on the input (not counting\nfeature commands), to give an option command after any non-option\ncommand is an error.\n\nThe following command-line options change import semantics and may therefore\nnot be passed as option:\n\n* date-format\n* import-marks\n* export-marks\n* cat-blob-fd\n* force\n\n`done`\n~~~~~~\nIf the `done` feature is not in use, treated as if EOF was read.\nThis can be used to tell fast-import to finish early.\n\nIf the `--done` command-line option or `feature done` command is\nin use, the `done` command is mandatory and marks the end of the\nstream.\n\nRESPONSES TO COMMANDS\n---------------------\nNew objects written by fast-import are not available immediately.\nMost fast-import commands have no visible effect until the next\ncheckpoint (or completion).  The frontend can send commands to\nfill fast-import's input pipe without worrying about how quickly\nthey will take effect, which improves performance by simplifying\nscheduling.\n\nFor some frontends, though, it is useful to be able to read back\ndata from the current repository as it is being updated (for\nexample when the source material describes objects in terms of\npatches to be applied to previously imported objects).  This can\nbe accomplished by connecting the frontend and fast-import via\nbidirectional pipes:\n\n====\n\tmkfifo fast-import-output\n\tfrontend <fast-import-output |\n\tgit fast-import >fast-import-output\n====\n\nA frontend set up this way can use `progress`, `get-mark`, `ls`, and\n`cat-blob` commands to read information from the import in progress.\n\nTo avoid deadlock, such frontends must completely consume any\npending output from `progress`, `ls`, `get-mark`, and `cat-blob` before\nperforming writes to fast-import that might block.\n\nCRASH REPORTS\n-------------\nIf fast-import is supplied invalid input it will terminate with a\nnon-zero exit status and create a crash report in the top level of\nthe Git repository it was importing into.  Crash reports contain\na snapshot of the internal fast-import state as well as the most\nrecent commands that lead up to the crash.\n\nAll recent commands (including stream comments, file changes and\nprogress commands) are shown in the command history within the crash\nreport, but raw file data and commit messages are excluded from the\ncrash report.  This exclusion saves space within the report file\nand reduces the amount of buffering that fast-import must perform\nduring execution.\n\nAfter writing a crash report fast-import will close the current\npackfile and export the marks table.  This allows the frontend\ndeveloper to inspect the repository state and resume the import from\nthe point where it crashed.  The modified branches and tags are not\nupdated during a crash, as the import did not complete successfully.\nBranch and tag information can be found in the crash report and\nmust be applied manually if the update is needed.\n\nAn example crash:\n\n====\n\t$ cat >in <<END_OF_INPUT\n\t# my very first test commit\n\tcommit refs/heads/master\n\tcommitter Shawn O. Pearce <spearce> 19283 -0400\n\t# who is that guy anyway?\n\tdata <<EOF\n\tthis is my commit\n\tEOF\n\tM 644 inline .gitignore\n\tdata <<EOF\n\t.gitignore\n\tEOF\n\tM 777 inline bob\n\tEND_OF_INPUT\n\n\t$ git fast-import <in\n\tfatal: Corrupt mode: M 777 inline bob\n\tfast-import: dumping crash report to .git/fast_import_crash_8434\n\n\t$ cat .git/fast_import_crash_8434\n\tfast-import crash report:\n\t    fast-import process: 8434\n\t    parent process     : 1391\n\t    at Sat Sep 1 00:58:12 2007\n\n\tfatal: Corrupt mode: M 777 inline bob\n\n\tMost Recent Commands Before Crash\n\t---------------------------------\n\t  # my very first test commit\n\t  commit refs/heads/master\n\t  committer Shawn O. Pearce <spearce> 19283 -0400\n\t  # who is that guy anyway?\n\t  data <<EOF\n\t  M 644 inline .gitignore\n\t  data <<EOF\n\t* M 777 inline bob\n\n\tActive Branch LRU\n\t-----------------\n\t    active_branches = 1 cur, 5 max\n\n\t  pos  clock name\n\t  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t   1)      0 refs/heads/master\n\n\tInactive Branches\n\t-----------------\n\trefs/heads/master:\n\t  status      : active loaded dirty\n\t  tip commit  : 0000000000000000000000000000000000000000\n\t  old tree    : 0000000000000000000000000000000000000000\n\t  cur tree    : 0000000000000000000000000000000000000000\n\t  commit clock: 0\n\t  last pack   :\n\n\n\t-------------------\n\tEND OF CRASH REPORT\n====\n\nTIPS AND TRICKS\n---------------\nThe following tips and tricks have been collected from various\nusers of fast-import, and are offered here as suggestions.\n\nUse One Mark Per Commit\n~~~~~~~~~~~~~~~~~~~~~~~\nWhen doing a repository conversion, use a unique mark per commit\n(`mark :<n>`) and supply the --export-marks option on the command\nline.  fast-import will dump a file which lists every mark and the Git\nobject SHA-1 that corresponds to it.  If the frontend can tie\nthe marks back to the source repository, it is easy to verify the\naccuracy and completeness of the import by comparing each Git\ncommit to the corresponding source revision.\n\nComing from a system such as Perforce or Subversion this should be\nquite simple, as the fast-import mark can also be the Perforce changeset\nnumber or the Subversion revision number.\n\nFreely Skip Around Branches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDon't bother trying to optimize the frontend to stick to one branch\nat a time during an import.  Although doing so might be slightly\nfaster for fast-import, it tends to increase the complexity of the frontend\ncode considerably.\n\nThe branch LRU builtin to fast-import tends to behave very well, and the\ncost of activating an inactive branch is so low that bouncing around\nbetween branches has virtually no impact on import performance.\n\nHandling Renames\n~~~~~~~~~~~~~~~~\nWhen importing a renamed file or directory, simply delete the old\nname(s) and modify the new name(s) during the corresponding commit.\nGit performs rename detection after-the-fact, rather than explicitly\nduring a commit.\n\nUse Tag Fixup Branches\n~~~~~~~~~~~~~~~~~~~~~~\nSome other SCM systems let the user create a tag from multiple\nfiles which are not from the same commit/changeset.  Or to create\ntags which are a subset of the files available in the repository.\n\nImporting these tags as-is in Git is impossible without making at\nleast one commit which ``fixes up'' the files to match the content\nof the tag.  Use fast-import's `reset` command to reset a dummy branch\noutside of your normal branch space to the base commit for the tag,\nthen commit one or more file fixup commits, and finally tag the\ndummy branch.\n\nFor example since all normal branches are stored under `refs/heads/`\nname the tag fixup branch `TAG_FIXUP`.  This way it is impossible for\nthe fixup branch used by the importer to have namespace conflicts\nwith real branches imported from the source (the name `TAG_FIXUP`\nis not `refs/heads/TAG_FIXUP`).\n\nWhen committing fixups, consider using `merge` to connect the\ncommit(s) which are supplying file revisions to the fixup branch.\nDoing so will allow tools such as 'git blame' to track\nthrough the real commit history and properly annotate the source\nfiles.\n\nAfter fast-import terminates the frontend will need to do `rm .git/TAG_FIXUP`\nto remove the dummy branch.\n\nImport Now, Repack Later\n~~~~~~~~~~~~~~~~~~~~~~~~\nAs soon as fast-import completes the Git repository is completely valid\nand ready for use.  Typically this takes only a very short time,\neven for considerably large projects (100,000+ commits).\n\nHowever repacking the repository is necessary to improve data\nlocality and access performance.  It can also take hours on extremely\nlarge projects (especially if -f and a large --window parameter is\nused).  Since repacking is safe to run alongside readers and writers,\nrun the repack in the background and let it finish when it finishes.\nThere is no reason to wait to explore your new Git project!\n\nIf you choose to wait for the repack, don't try to run benchmarks\nor performance tests until repacking is completed.  fast-import outputs\nsuboptimal packfiles that are simply never seen in real use\nsituations.\n\nRepacking Historical Data\n~~~~~~~~~~~~~~~~~~~~~~~~~\nIf you are repacking very old imported data (e.g. older than the\nlast year), consider expending some extra CPU time and supplying\n--window=50 (or higher) when you run 'git repack'.\nThis will take longer, but will also produce a smaller packfile.\nYou only need to expend the effort once, and everyone using your\nproject will benefit from the smaller repository.\n\nInclude Some Progress Messages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nEvery once in a while have your frontend emit a `progress` message\nto fast-import.  The contents of the messages are entirely free-form,\nso one suggestion would be to output the current month and year\neach time the current commit date moves into the next month.\nYour users will feel better knowing how much of the data stream\nhas been processed.\n\n\nPACKFILE OPTIMIZATION\n---------------------\nWhen packing a blob fast-import always attempts to deltify against the last\nblob written.  Unless specifically arranged for by the frontend,\nthis will probably not be a prior version of the same file, so the\ngenerated delta will not be the smallest possible.  The resulting\npackfile will be compressed, but will not be optimal.\n\nFrontends which have efficient access to all revisions of a\nsingle file (for example reading an RCS/CVS ,v file) can choose\nto supply all revisions of that file as a sequence of consecutive\n`blob` commands.  This allows fast-import to deltify the different file\nrevisions against each other, saving space in the final packfile.\nMarks can be used to later identify individual file revisions during\na sequence of `commit` commands.\n\nThe packfile(s) created by fast-import do not encourage good disk access\npatterns.  This is caused by fast-import writing the data in the order\nit is received on standard input, while Git typically organizes\ndata within packfiles to make the most recent (current tip) data\nappear before historical data.  Git also clusters commits together,\nspeeding up revision traversal through better cache locality.\n\nFor this reason it is strongly recommended that users repack the\nrepository with `git repack -a -d` after fast-import completes, allowing\nGit to reorganize the packfiles for faster data access.  If blob\ndeltas are suboptimal (see above) then also adding the `-f` option\nto force recomputation of all deltas can significantly reduce the\nfinal packfile size (30-50% smaller can be quite typical).\n\nInstead of running `git repack` you can also run `git gc\n--aggressive`, which will also optimize other things after an import\n(e.g. pack loose refs). As noted in the \"AGGRESSIVE\" section in\nlinkgit:git-gc[1] the `--aggressive` option will find new deltas with\nthe `-f` option to linkgit:git-repack[1]. For the reasons elaborated\non above using `--aggressive` after a fast-import is one of the few\ncases where it's known to be worthwhile.\n\nMEMORY UTILIZATION\n------------------\nThere are a number of factors which affect how much memory fast-import\nrequires to perform an import.  Like critical sections of core\nGit, fast-import uses its own memory allocators to amortize any overheads\nassociated with malloc.  In practice fast-import tends to amortize any\nmalloc overheads to 0, due to its use of large block allocations.\n\nper object\n~~~~~~~~~~\nfast-import maintains an in-memory structure for every object written in\nthis execution.  On a 32 bit system the structure is 32 bytes,\non a 64 bit system the structure is 40 bytes (due to the larger\npointer sizes).  Objects in the table are not deallocated until\nfast-import terminates.  Importing 2 million objects on a 32 bit system\nwill require approximately 64 MiB of memory.\n\nThe object table is actually a hashtable keyed on the object name\n(the unique SHA-1).  This storage configuration allows fast-import to reuse\nan existing or already written object and avoid writing duplicates\nto the output packfile.  Duplicate blobs are surprisingly common\nin an import, typically due to branch merges in the source.\n\nper mark\n~~~~~~~~\nMarks are stored in a sparse array, using 1 pointer (4 bytes or 8\nbytes, depending on pointer size) per mark.  Although the array\nis sparse, frontends are still strongly encouraged to use marks\nbetween 1 and n, where n is the total number of marks required for\nthis import.\n\nper branch\n~~~~~~~~~~\nBranches are classified as active and inactive.  The memory usage\nof the two classes is significantly different.\n\nInactive branches are stored in a structure which uses 96 or 120\nbytes (32 bit or 64 bit systems, respectively), plus the length of\nthe branch name (typically under 200 bytes), per branch.  fast-import will\neasily handle as many as 10,000 inactive branches in under 2 MiB\nof memory.\n\nActive branches have the same overhead as inactive branches, but\nalso contain copies of every tree that has been recently modified on\nthat branch.  If subtree `include` has not been modified since the\nbranch became active, its contents will not be loaded into memory,\nbut if subtree `src` has been modified by a commit since the branch\nbecame active, then its contents will be loaded in memory.\n\nAs active branches store metadata about the files contained on that\nbranch, their in-memory storage size can grow to a considerable size\n(see below).\n\nfast-import automatically moves active branches to inactive status based on\na simple least-recently-used algorithm.  The LRU chain is updated on\neach `commit` command.  The maximum number of active branches can be\nincreased or decreased on the command line with --active-branches=.\n\nper active tree\n~~~~~~~~~~~~~~~\nTrees (aka directories) use just 12 bytes of memory on top of the\nmemory required for their entries (see ``per active file'' below).\nThe cost of a tree is virtually 0, as its overhead amortizes out\nover the individual file entries.\n\nper active file entry\n~~~~~~~~~~~~~~~~~~~~~\nFiles (and pointers to subtrees) within active trees require 52 or 64\nbytes (32/64 bit platforms) per entry.  To conserve space, file and\ntree names are pooled in a common string table, allowing the filename\n``Makefile'' to use just 16 bytes (after including the string header\noverhead) no matter how many times it occurs within the project.\n\nThe active branch LRU, when coupled with the filename string pool\nand lazy loading of subtrees, allows fast-import to efficiently import\nprojects with 2,000+ branches and 45,114+ files in a very limited\nmemory footprint (less than 2.7 MiB per active branch).\n"
        },
        "SIGNALS": {
            "name": "SIGNALS",
            "start_index": 59452,
            "end_index": 59469,
            "value": "Sending *SIGUSR1* to the 'git fast-import' process ends the current\npackfile early, simulating a `checkpoint` command.  The impatient\noperator can use this facility to peek at the objects and refs from an\nimport in progress, at the cost of some added running time and worse\ncompression.\n\nSEE ALSO\n--------\nlinkgit:git-fast-export[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 59802,
            "end_index": 59811,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fetch-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-fetch-pack - Receive missing objects from another repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 113,
            "end_index": 132,
            "value": "[verse]\n'git fetch-pack' [--all] [--quiet|-q] [--keep|-k] [--thin] [--include-tag]\n\t[--upload-pack=<git-upload-pack>]\n\t[--depth=<n>] [--no-progress]\n\t[-v] <repository> [<refs>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 312,
            "end_index": 337,
            "value": "Usually you would want to use 'git fetch', which is a\nhigher level wrapper of this command, instead.\n\nInvokes 'git-upload-pack' on a possibly remote repository\nand asks it to send objects missing from this repository, to\nupdate the named heads.  The list of commits available locally\nis found out by scanning the local refs/ hierarchy and sent to\n'git-upload-pack' running on the other end.\n\nThis command degenerates to download everything to complete the\nasked refs from the remote side when the local side does not\nhave a common ancestor commit.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 886,
            "end_index": 903,
            "value": "\n--all::\n\tFetch all remote refs.\n\n--stdin::\n\tTake the list of refs from stdin, one per line. If there\n\tare refs specified on the command line in addition to this\n\toption, then the refs from stdin are processed after those\n\ton the command line.\n+\nIf `--stateless-rpc` is specified together with this option then\nthe list of refs must be in packet format (pkt-line). Each ref must\nbe in a separate packet, and the list must end with a flush packet.\n\n-q::\n--quiet::\n\tPass `-q` flag to 'git unpack-objects'; this makes the\n\tcloning process less verbose.\n\n-k::\n--keep::\n\tDo not invoke 'git unpack-objects' on received data, but\n\tcreate a single packfile out of it instead, and store it\n\tin the object database. If provided twice then the pack is\n\tlocked against repacking.\n\n--thin::\n\tFetch a \"thin\" pack, which records objects in deltified form based\n\ton objects not included in the pack to reduce network traffic.\n\n--include-tag::\n\tIf the remote side supports it, annotated tags objects will\n\tbe downloaded on the same connection as the other objects if\n\tthe object the tag references is downloaded.  The caller must\n\totherwise determine the tags this option made available.\n\n--upload-pack=<git-upload-pack>::\n\tUse this to specify the path to 'git-upload-pack' on the\n\tremote side, if is not found on your $PATH.\n\tInstallations of sshd ignores the user's environment\n\tsetup scripts for login shells (e.g. .bash_profile) and\n\tyour privately installed git may not be found on the system\n\tdefault $PATH.  Another workaround suggested is to set\n\tup your $PATH in \".bashrc\", but this flag is for people\n\twho do not want to pay the overhead for non-interactive\n\tshells by having a lean .bashrc file (they set most of\n\tthe things up in .bash_profile).\n\n--exec=<git-upload-pack>::\n\tSame as --upload-pack=<git-upload-pack>.\n\n--depth=<n>::\n\tLimit fetching to ancestor-chains not longer than n.\n\t'git-upload-pack' treats the special depth 2147483647 as\n\tinfinite even if there is an ancestor-chain that long.\n\n--shallow-since=<date>::\n\tDeepen or shorten the history of a shallow repository to\n\tinclude all reachable commits after <date>.\n\n--shallow-exclude=<revision>::\n\tDeepen or shorten the history of a shallow repository to\n\texclude commits reachable from a specified remote branch or tag.\n\tThis option can be specified multiple times.\n\n--deepen-relative::\n\tArgument --depth specifies the number of commits from the\n\tcurrent shallow boundary instead of from the tip of each\n\tremote branch history.\n\n--no-progress::\n\tDo not show the progress.\n\n--check-self-contained-and-connected::\n\tOutput \"connectivity-ok\" if the received pack is\n\tself-contained and connected.\n\n-v::\n\tRun verbosely.\n\n<repository>::\n\tThe URL to the remote repository.\n\n<refs>...::\n\tThe remote heads to update from. This is relative to\n\t$GIT_DIR (e.g. \"HEAD\", \"refs/heads/master\").  When\n\tunspecified, update from all heads the remote side has.\n+\nIf the remote has enabled the options `uploadpack.allowTipSHA1InWant`,\n`uploadpack.allowReachableSHA1InWant`, or `uploadpack.allowAnySHA1InWant`,\nthey may alternatively be 40-hex sha1s present on the remote.\n\nSEE ALSO\n--------\nlinkgit:git-fetch[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4053,
            "end_index": 4062,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fetch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-fetch - Download objects and refs from another repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 100,
            "end_index": 119,
            "value": "[verse]\n'git fetch' [<options>] [<repository> [<refspec>...]]\n'git fetch' [<options>] <group>\n'git fetch' --multiple [<options>] [(<repository> | <group>)...]\n'git fetch' --all [<options>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 309,
            "end_index": 334,
            "value": "Fetch branches and/or tags (collectively, \"refs\") from one or more\nother repositories, along with the objects necessary to complete their\nhistories.  Remote-tracking branches are updated (see the description\nof <refspec> below for ways to control this behavior).\n\nBy default, any tag that points into the histories being fetched is\nalso fetched; the effect is to fetch tags that\npoint at branches that you are interested in.  This default behavior\ncan be changed by using the --tags or --no-tags options or by\nconfiguring remote.<name>.tagOpt.  By using a refspec that fetches tags\nexplicitly, you can fetch tags that do not point into branches you\nare interested in as well.\n\n'git fetch' can fetch from either a single named repository or URL,\nor from several repositories at once if <group> is given and\nthere is a remotes.<group> entry in the configuration file.\n(See linkgit:git-config[1]).\n\nWhen no remote is specified, by default the `origin` remote will be used,\nunless there's an upstream branch configured for the current branch.\n\nThe names of refs that are fetched, together with the object names\nthey point at, are written to `.git/FETCH_HEAD`.  This information\nmay be used by scripts or other git commands, such as linkgit:git-pull[1].\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1583,
            "end_index": 1600,
            "value": "\ninclude::fetch-options.txt[]\n\ninclude::pull-fetch-param.txt[]\n\n--stdin::\n\tRead refspecs, one per line, from stdin in addition to those provided\n\tas arguments. The \"tag <name>\" format is not supported.\n\ninclude::urls-remotes.txt[]\n\n\nCONFIGURED REMOTE-TRACKING BRANCHES[[CRTB]]\n-------------------------------------------\n\nYou often interact with the same remote repository by\nregularly and repeatedly fetching from it.  In order to keep track\nof the progress of such a remote repository, `git fetch` allows you\nto configure `remote.<repository>.fetch` configuration variables.\n\nTypically such a variable may look like this:\n\n------------------------------------------------\n[remote \"origin\"]\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n------------------------------------------------\n\nThis configuration is used in two ways:\n\n* When `git fetch` is run without specifying what branches\n  and/or tags to fetch on the command line, e.g. `git fetch origin`\n  or `git fetch`, `remote.<repository>.fetch` values are used as\n  the refspecs--they specify which refs to fetch and which local refs\n  to update.  The example above will fetch\n  all branches that exist in the `origin` (i.e. any ref that matches\n  the left-hand side of the value, `refs/heads/*`) and update the\n  corresponding remote-tracking branches in the `refs/remotes/origin/*`\n  hierarchy.\n\n* When `git fetch` is run with explicit branches and/or tags\n  to fetch on the command line, e.g. `git fetch origin master`, the\n  <refspec>s given on the command line determine what are to be\n  fetched (e.g. `master` in the example,\n  which is a short-hand for `master:`, which in turn means\n  \"fetch the 'master' branch but I do not explicitly say what\n  remote-tracking branch to update with it from the command line\"),\n  and the example command will\n  fetch _only_ the 'master' branch.  The `remote.<repository>.fetch`\n  values determine which\n  remote-tracking branch, if any, is updated.  When used in this\n  way, the `remote.<repository>.fetch` values do not have any\n  effect in deciding _what_ gets fetched (i.e. the values are not\n  used as refspecs when the command-line lists refspecs); they are\n  only used to decide _where_ the refs that are fetched are stored\n  by acting as a mapping.\n\nThe latter use of the `remote.<repository>.fetch` values can be\noverridden by giving the `--refmap=<refspec>` parameter(s) on the\ncommand line.\n"
        },
        "PRUNING": {
            "name": "PRUNING",
            "start_index": 3999,
            "end_index": 4016,
            "value": "\nGit has a default disposition of keeping data unless it's explicitly\nthrown away; this extends to holding onto local references to branches\non remotes that have themselves deleted those branches.\n\nIf left to accumulate, these stale references might make performance\nworse on big and busy repos that have a lot of branch churn, and\ne.g. make the output of commands like `git branch -a --contains\n<commit>` needlessly verbose, as well as impacting anything else\nthat'll work with the complete set of known references.\n\nThese remote-tracking references can be deleted as a one-off with\neither of:\n\n------------------------------------------------\n# While fetching\n$ git fetch --prune <name>\n\n# Only prune, don't fetch\n$ git remote prune <name>\n------------------------------------------------\n\nTo prune references as part of your normal workflow without needing to\nremember to run that, set `fetch.prune` globally, or\n`remote.<name>.prune` per-remote in the config. See\nlinkgit:git-config[1].\n\nHere's where things get tricky and more specific. The pruning feature\ndoesn't actually care about branches, instead it'll prune local <->\nremote-references as a function of the refspec of the remote (see\n`<refspec>` and <<CRTB,CONFIGURED REMOTE-TRACKING BRANCHES>> above).\n\nTherefore if the refspec for the remote includes\ne.g. `refs/tags/*:refs/tags/*`, or you manually run e.g. `git fetch\n--prune <name> \"refs/tags/*:refs/tags/*\"` it won't be stale remote\ntracking branches that are deleted, but any local tag that doesn't\nexist on the remote.\n\nThis might not be what you expect, i.e. you want to prune remote\n`<name>`, but also explicitly fetch tags from it, so when you fetch\nfrom it you delete all your local tags, most of which may not have\ncome from the `<name>` remote in the first place.\n\nSo be careful when using this with a refspec like\n`refs/tags/*:refs/tags/*`, or any other refspec which might map\nreferences from multiple remotes to the same local namespace.\n\nSince keeping up-to-date with both branches and tags on the remote is\na common use-case the `--prune-tags` option can be supplied along with\n`--prune` to prune local tags that don't exist on the remote, and\nforce-update those tags that differ. Tag pruning can also be enabled\nwith `fetch.pruneTags` or `remote.<name>.pruneTags` in the config. See\nlinkgit:git-config[1].\n\nThe `--prune-tags` option is equivalent to having\n`refs/tags/*:refs/tags/*` declared in the refspecs of the remote. This\ncan lead to some seemingly strange interactions:\n\n------------------------------------------------\n# These both fetch tags\n$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'\n$ git fetch --no-tags --prune-tags origin\n------------------------------------------------\n\nThe reason it doesn't error out when provided without `--prune` or its\nconfig versions is for flexibility of the configured versions, and to\nmaintain a 1=1 mapping between what the command line flags do, and\nwhat the configuration versions do.\n\nIt's reasonable to e.g. configure `fetch.pruneTags=true` in\n`~/.gitconfig` to have tags pruned whenever `git fetch --prune` is\nrun, without making every invocation of `git fetch` without `--prune`\nan error.\n\nPruning tags with `--prune-tags` also works when fetching a URL\ninstead of a named remote. These will all prune tags not found on\norigin:\n\n------------------------------------------------\n$ git fetch origin --prune --prune-tags\n$ git fetch origin --prune 'refs/tags/*:refs/tags/*'\n$ git fetch <url of origin> --prune --prune-tags\n$ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'\n------------------------------------------------\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 7639,
            "end_index": 7654,
            "value": "\nThe output of \"git fetch\" depends on the transport method used; this\nsection describes the output when fetching over the Git protocol\n(either locally or via ssh) and Smart HTTP protocol.\n\nThe status of the fetch is output in tabular form, with each line\nrepresenting the status of a single ref. Each line is of the form:\n\n-------------------------------\n <flag> <summary> <from> -> <to> [<reason>]\n-------------------------------\n\nThe status of up-to-date refs is shown only if the --verbose option is\nused.\n\nIn compact output mode, specified with configuration variable\nfetch.output, if either entire `<from>` or `<to>` is found in the\nother string, it will be substituted with `*` in the other string. For\nexample, `master -> origin/master` becomes `master -> origin/*`.\n\nflag::\n\tA single character indicating the status of the ref:\n(space);; for a successfully fetched fast-forward;\n`+`;; for a successful forced update;\n`-`;; for a successfully pruned ref;\n`t`;; for a successful tag update;\n`*`;; for a successfully fetched new ref;\n`!`;; for a ref that was rejected or failed to update; and\n`=`;; for a ref that was up to date and did not need fetching.\n\nsummary::\n\tFor a successfully fetched ref, the summary shows the old and new\n\tvalues of the ref in a form suitable for using as an argument to\n\t`git log` (this is `<old>..<new>` in most cases, and\n\t`<old>...<new>` for forced non-fast-forward updates).\n\nfrom::\n\tThe name of the remote ref being fetched from, minus its\n\t`refs/<type>/` prefix. In the case of deletion, the name of\n\tthe remote ref is \"(none)\".\n\nto::\n\tThe name of the local ref being updated, minus its\n\t`refs/<type>/` prefix.\n\nreason::\n\tA human-readable explanation. In the case of successfully fetched\n\trefs, no explanation is needed. For a failed ref, the reason for\n\tfailure is described.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 9472,
            "end_index": 9491,
            "value": "\n* Update the remote-tracking branches:\n+\n------------------------------------------------\n$ git fetch origin\n------------------------------------------------\n+\nThe above command copies all branches from the remote refs/heads/\nnamespace and stores them to the local refs/remotes/origin/ namespace,\nunless the branch.<name>.fetch option is used to specify a non-default\nrefspec.\n\n* Using refspecs explicitly:\n+\n------------------------------------------------\n$ git fetch origin +seen:seen maint:tmp\n------------------------------------------------\n+\nThis updates (or creates, as necessary) branches `seen` and `tmp` in\nthe local repository by fetching from the branches (respectively)\n`seen` and `maint` from the remote repository.\n+\nThe `seen` branch will be updated even if it does not fast-forward,\nbecause it is prefixed with a plus sign; `tmp` will not be.\n\n* Peek at a remote's branch, without configuring the remote in your local\n  repository:\n+\n------------------------------------------------\n$ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n$ git log FETCH_HEAD\n------------------------------------------------\n+\nThe first command fetches the `maint` branch from the repository at\n`git://git.kernel.org/pub/scm/git/git.git` and the second command uses\n`FETCH_HEAD` to examine the branch with linkgit:git-log[1].  The fetched\nobjects will eventually be removed by git's built-in housekeeping (see\nlinkgit:git-gc[1]).\n\ninclude::transfer-data-leaks.txt[]\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 10963,
            "end_index": 10974,
            "value": "Using --recurse-submodules can only fetch new commits in already checked\nout submodules right now. When e.g. upstream added a new submodule in the\njust fetched commits of the superproject the submodule itself cannot be\nfetched, making it impossible to check out that submodule later without\nhaving to do a fetch again. This is expected to be fixed in a future Git\nversion.\n\nSEE ALSO\n--------\nlinkgit:git-pull[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 11386,
            "end_index": 11395,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-filter-branch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-filter-branch - Rewrite branches\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 90,
            "end_index": 109,
            "value": "[verse]\n'git filter-branch' [--setup <command>] [--subdirectory-filter <directory>]\n\t[--env-filter <command>] [--tree-filter <command>]\n\t[--index-filter <command>] [--parent-filter <command>]\n\t[--msg-filter <command>] [--commit-filter <command>]\n\t[--tag-name-filter <command>] [--prune-empty]\n\t[--original <namespace>] [-d <directory>] [-f | --force]\n\t[--state-branch <branch>] [--] [<rev-list options>...]\n"
        },
        "WARNING": {
            "name": "WARNING",
            "start_index": 516,
            "end_index": 533,
            "value": "'git filter-branch' has a plethora of pitfalls that can produce non-obvious\nmanglings of the intended history rewrite (and can leave you with little\ntime to investigate such problems since it has such abysmal performance).\nThese safety and performance issues cannot be backward compatibly fixed and\nas such, its use is not recommended.  Please use an alternative history\nfiltering tool such as https://github.com/newren/git-filter-repo/[git\nfilter-repo].  If you still need to use 'git filter-branch', please\ncarefully read <<SAFETY>> (and <<PERFORMANCE>>) to learn about the land\nmines of filter-branch, and then vigilantly avoid as many of the hazards\nlisted there as reasonably possible.\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 1224,
            "end_index": 1249,
            "value": "Lets you rewrite Git revision history by rewriting the branches mentioned\nin the <rev-list options>, applying custom filters on each revision.\nThose filters can modify each tree (e.g. removing a file or running\na perl rewrite on all files) or information about each commit.\nOtherwise, all information (including original commit times or merge\ninformation) will be preserved.\n\nThe command will only rewrite the _positive_ refs mentioned in the\ncommand line (e.g. if you pass 'a..b', only 'b' will be rewritten).\nIf you specify no filters, the commits will be recommitted without any\nchanges, which would normally have no effect.  Nevertheless, this may be\nuseful in the future for compensating for some Git bugs or such,\ntherefore such a usage is permitted.\n\n*NOTE*: This command honors `.git/info/grafts` file and refs in\nthe `refs/replace/` namespace.\nIf you have any grafts or replacement refs defined, running this command\nwill make them permanent.\n\n*WARNING*! The rewritten history will have different object names for all\nthe objects and will not converge with the original branch.  You will not\nbe able to easily push and distribute the rewritten branch on top of the\noriginal branch.  Please do not use this command if you do not know the\nfull implications, and avoid using it anyway, if a simple single commit\nwould suffice to fix your problem.  (See the \"RECOVERING FROM UPSTREAM\nREBASE\" section in linkgit:git-rebase[1] for further information about\nrewriting published history.)\n\nAlways verify that the rewritten version is correct: The original refs,\nif different from the rewritten ones, will be stored in the namespace\n'refs/original/'.\n\nNote that since this operation is very I/O expensive, it might\nbe a good idea to redirect the temporary directory off-disk with the\n`-d` option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.\n\n\nFilters\n~~~~~~~\n\nThe filters are applied in the order as listed below.  The <command>\nargument is always evaluated in the shell context using the 'eval' command\n(with the notable exception of the commit filter, for technical reasons).\nPrior to that, the `$GIT_COMMIT` environment variable will be set to contain\nthe id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,\nGIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,\nand GIT_COMMITTER_DATE are taken from the current commit and exported to\nthe environment, in order to affect the author and committer identities of\nthe replacement commit created by linkgit:git-commit-tree[1] after the\nfilters have run.\n\nIf any evaluation of <command> returns a non-zero exit status, the whole\noperation will be aborted.\n\nA 'map' function is available that takes an \"original sha1 id\" argument\nand outputs a \"rewritten sha1 id\" if the commit has been already\nrewritten, and \"original sha1 id\" otherwise; the 'map' function can\nreturn several ids on separate lines if your commit filter emitted\nmultiple commits.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 4187,
            "end_index": 4204,
            "value": "\n--setup <command>::\n\tThis is not a real filter executed for each commit but a one\n\ttime setup just before the loop. Therefore no commit-specific\n\tvariables are defined yet.  Functions or variables defined here\n\tcan be used or modified in the following filter steps except\n\tthe commit filter, for technical reasons.\n\n--subdirectory-filter <directory>::\n\tOnly look at the history which touches the given subdirectory.\n\tThe result will contain that directory (and only that) as its\n\tproject root. Implies <<Remap_to_ancestor>>.\n\n--env-filter <command>::\n\tThis filter may be used if you only need to modify the environment\n\tin which the commit will be performed.  Specifically, you might\n\twant to rewrite the author/committer name/email/time environment\n\tvariables (see linkgit:git-commit-tree[1] for details).\n\n--tree-filter <command>::\n\tThis is the filter for rewriting the tree and its contents.\n\tThe argument is evaluated in shell with the working\n\tdirectory set to the root of the checked out tree.  The new tree\n\tis then used as-is (new files are auto-added, disappeared files\n\tare auto-removed - neither .gitignore files nor any other ignore\n\trules *HAVE ANY EFFECT*!).\n\n--index-filter <command>::\n\tThis is the filter for rewriting the index.  It is similar to the\n\ttree filter but does not check out the tree, which makes it much\n\tfaster.  Frequently used with `git rm --cached\n\t--ignore-unmatch ...`, see EXAMPLES below.  For hairy\n\tcases, see linkgit:git-update-index[1].\n\n--parent-filter <command>::\n\tThis is the filter for rewriting the commit's parent list.\n\tIt will receive the parent string on stdin and shall output\n\tthe new parent string on stdout.  The parent string is in\n\tthe format described in linkgit:git-commit-tree[1]: empty for\n\tthe initial commit, \"-p parent\" for a normal commit and\n\t\"-p parent1 -p parent2 -p parent3 ...\" for a merge commit.\n\n--msg-filter <command>::\n\tThis is the filter for rewriting the commit messages.\n\tThe argument is evaluated in the shell with the original\n\tcommit message on standard input; its standard output is\n\tused as the new commit message.\n\n--commit-filter <command>::\n\tThis is the filter for performing the commit.\n\tIf this filter is specified, it will be called instead of the\n\t'git commit-tree' command, with arguments of the form\n\t\"<TREE_ID> [(-p <PARENT_COMMIT_ID>)...]\" and the log message on\n\tstdin.  The commit id is expected on stdout.\n+\nAs a special extension, the commit filter may emit multiple\ncommit ids; in that case, the rewritten children of the original commit will\nhave all of them as parents.\n+\nYou can use the 'map' convenience function in this filter, and other\nconvenience functions, too.  For example, calling 'skip_commit \"$@\"'\nwill leave out the current commit (but not its changes! If you want\nthat, use 'git rebase' instead).\n+\nYou can also use the `git_commit_non_empty_tree \"$@\"` instead of\n`git commit-tree \"$@\"` if you don't wish to keep commits with a single parent\nand that makes no change to the tree.\n\n--tag-name-filter <command>::\n\tThis is the filter for rewriting tag names. When passed,\n\tit will be called for every tag ref that points to a rewritten\n\tobject (or to a tag object which points to a rewritten object).\n\tThe original tag name is passed via standard input, and the new\n\ttag name is expected on standard output.\n+\nThe original tags are not deleted, but can be overwritten;\nuse \"--tag-name-filter cat\" to simply update the tags.  In this\ncase, be very careful and make sure you have the old tags\nbacked up in case the conversion has run afoul.\n+\nNearly proper rewriting of tag objects is supported. If the tag has\na message attached, a new tag object will be created with the same message,\nauthor, and timestamp. If the tag has a signature attached, the\nsignature will be stripped. It is by definition impossible to preserve\nsignatures. The reason this is \"nearly\" proper, is because ideally if\nthe tag did not change (points to the same object, has the same name, etc.)\nit should retain any signature. That is not the case, signatures will always\nbe removed, buyer beware. There is also no support for changing the\nauthor or timestamp (or the tag message for that matter). Tags which point\nto other tags will be rewritten to point to the underlying commit.\n\n--prune-empty::\n\tSome filters will generate empty commits that leave the tree untouched.\n\tThis option instructs git-filter-branch to remove such commits if they\n\thave exactly one or zero non-pruned parents; merge commits will\n\ttherefore remain intact.  This option cannot be used together with\n\t`--commit-filter`, though the same effect can be achieved by using the\n\tprovided `git_commit_non_empty_tree` function in a commit filter.\n\n--original <namespace>::\n\tUse this option to set the namespace where the original commits\n\twill be stored. The default value is 'refs/original'.\n\n-d <directory>::\n\tUse this option to set the path to the temporary directory used for\n\trewriting.  When applying a tree filter, the command needs to\n\ttemporarily check out the tree to some directory, which may consume\n\tconsiderable space in case of large projects.  By default it\n\tdoes this in the `.git-rewrite/` directory but you can override\n\tthat choice by this parameter.\n\n-f::\n--force::\n\t'git filter-branch' refuses to start with an existing temporary\n\tdirectory or when there are already refs starting with\n\t'refs/original/', unless forced.\n\n--state-branch <branch>::\n\tThis option will cause the mapping from old to new objects to\n\tbe loaded from named branch upon startup and saved as a new\n\tcommit to that branch upon exit, enabling incremental of large\n\ttrees. If '<branch>' does not exist it will be created.\n\n<rev-list options>...::\n\tArguments for 'git rev-list'.  All positive refs included by\n\tthese options are rewritten.  You may also specify options\n\tsuch as `--all`, but you must use `--` to separate them from\n\tthe 'git filter-branch' options. Implies <<Remap_to_ancestor>>.\n\n\n[[Remap_to_ancestor]]\nRemap to ancestor\n~~~~~~~~~~~~~~~~~\n\nBy using linkgit:git-rev-list[1] arguments, e.g., path limiters, you can limit the\nset of revisions which get rewritten. However, positive refs on the command\nline are distinguished: we don't let them be excluded by such limiters. For\nthis purpose, they are instead rewritten to point at the nearest ancestor that\nwas not excluded.\n\n\nEXIT STATUS\n-----------\n\nOn success, the exit status is `0`.  If the filter can't find any commits to\nrewrite, the exit status is `2`.  On any other error, the exit status may be\nany other non-zero value.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 10745,
            "end_index": 10764,
            "value": "\nSuppose you want to remove a file (containing confidential information\nor copyright violation) from all commits:\n\n-------------------------------------------------------\ngit filter-branch --tree-filter 'rm filename' HEAD\n-------------------------------------------------------\n\nHowever, if the file is absent from the tree of some commit,\na simple `rm filename` will fail for that tree and commit.\nThus you may instead want to use `rm -f filename` as the script.\n\nUsing `--index-filter` with 'git rm' yields a significantly faster\nversion.  Like with using `rm filename`, `git rm --cached filename`\nwill fail if the file is absent from the tree of a commit.  If you\nwant to \"completely forget\" a file, it does not matter when it entered\nhistory, so we also add `--ignore-unmatch`:\n\n--------------------------------------------------------------------------\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD\n--------------------------------------------------------------------------\n\nNow, you will get the rewritten history saved in HEAD.\n\nTo rewrite the repository to look as if `foodir/` had been its project\nroot, and discard all other history:\n\n-------------------------------------------------------\ngit filter-branch --subdirectory-filter foodir -- --all\n-------------------------------------------------------\n\nThus you can, e.g., turn a library subdirectory into a repository of\nits own.  Note the `--` that separates 'filter-branch' options from\nrevision options, and the `--all` to rewrite all branches and tags.\n\nTo set a commit (which typically is at the tip of another\nhistory) to be the parent of the current initial commit, in\norder to paste the other history behind the current history:\n\n-------------------------------------------------------------------\ngit filter-branch --parent-filter 'sed \"s/^\\$/-p <graft-id>/\"' HEAD\n-------------------------------------------------------------------\n\n(if the parent string is empty - which happens when we are dealing with\nthe initial commit - add graftcommit as a parent).  Note that this assumes\nhistory with a single root (that is, no merge without common ancestors\nhappened).  If this is not the case, use:\n\n--------------------------------------------------------------------------\ngit filter-branch --parent-filter \\\n\t'test $GIT_COMMIT = <commit-id> && echo \"-p <graft-id>\" || cat' HEAD\n--------------------------------------------------------------------------\n\nor even simpler:\n\n-----------------------------------------------\ngit replace --graft $commit-id $graft-id\ngit filter-branch $graft-id..HEAD\n-----------------------------------------------\n\nTo remove commits authored by \"Darl McBribe\" from the history:\n\n------------------------------------------------------------------------------\ngit filter-branch --commit-filter '\n\tif [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n\tthen\n\t\tskip_commit \"$@\";\n\telse\n\t\tgit commit-tree \"$@\";\n\tfi' HEAD\n------------------------------------------------------------------------------\n\nThe function 'skip_commit' is defined as follows:\n\n--------------------------\nskip_commit()\n{\n\tshift;\n\twhile [ -n \"$1\" ];\n\tdo\n\t\tshift;\n\t\tmap \"$1\";\n\t\tshift;\n\tdone;\n}\n--------------------------\n\nThe shift magic first throws away the tree id and then the -p\nparameters.  Note that this handles merges properly! In case Darl\ncommitted a merge between P1 and P2, it will be propagated properly\nand all children of the merge will become merge commits with P1,P2\nas their parents instead of the merge commit.\n\n*NOTE* the changes introduced by the commits, and which are not reverted\nby subsequent commits, will still be in the rewritten branch. If you want\nto throw out _changes_ together with the commits, you should use the\ninteractive mode of 'git rebase'.\n\nYou can rewrite the commit log messages using `--msg-filter`.  For\nexample, 'git svn-id' strings in a repository created by 'git svn' can\nbe removed this way:\n\n-------------------------------------------------------\ngit filter-branch --msg-filter '\n\tsed -e \"/^git-svn-id:/d\"\n'\n-------------------------------------------------------\n\nIf you need to add 'Acked-by' lines to, say, the last 10 commits (none\nof which is a merge), use this command:\n\n--------------------------------------------------------\ngit filter-branch --msg-filter '\n\tcat &&\n\techo \"Acked-by: Bugs Bunny <bunny@bugzilla.org>\"\n' HEAD~10..HEAD\n--------------------------------------------------------\n\nThe `--env-filter` option can be used to modify committer and/or author\nidentity.  For example, if you found out that your commits have the wrong\nidentity due to a misconfigured user.email, you can make a correction,\nbefore publishing the project, like this:\n\n--------------------------------------------------------\ngit filter-branch --env-filter '\n\tif test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_AUTHOR_EMAIL=john@example.com\n\tfi\n\tif test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n\tthen\n\t\tGIT_COMMITTER_EMAIL=john@example.com\n\tfi\n' -- --all\n--------------------------------------------------------\n\nTo restrict rewriting to only part of the history, specify a revision\nrange in addition to the new branch name.  The new branch name will\npoint to the top-most revision that a 'git rev-list' of this range\nwill print.\n\nConsider this history:\n\n------------------\n     D--E--F--G--H\n    /     /\nA--B-----C\n------------------\n\nTo rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:\n\n--------------------------------\ngit filter-branch ... C..H\n--------------------------------\n\nTo rewrite commits E,F,G,H, use one of these:\n\n----------------------------------------\ngit filter-branch ... C..H --not D\ngit filter-branch ... D..H --not C\n----------------------------------------\n\nTo move the whole tree into a subdirectory, or remove it from there:\n\n---------------------------------------------------------------\ngit filter-branch --index-filter \\\n\t'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n\t\tGIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n\t\t\tgit update-index --index-info &&\n\t mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD\n---------------------------------------------------------------\n\n\n\nCHECKLIST FOR SHRINKING A REPOSITORY\n------------------------------------\n\ngit-filter-branch can be used to get rid of a subset of files,\nusually with some combination of `--index-filter` and\n`--subdirectory-filter`.  People expect the resulting repository to\nbe smaller than the original, but you need a few more steps to\nactually make it smaller, because Git tries hard not to lose your\nobjects until you tell it to.  First make sure that:\n\n* You really removed all variants of a filename, if a blob was moved\n  over its lifetime.  `git log --name-only --follow --all -- filename`\n  can help you find renames.\n\n* You really filtered all refs: use `--tag-name-filter cat -- --all`\n  when calling git-filter-branch.\n\nThen there are two ways to get a smaller repository.  A safer way is\nto clone, that keeps your original intact.\n\n* Clone it with `git clone file:///path/to/repo`.  The clone\n  will not have the removed objects.  See linkgit:git-clone[1].  (Note\n  that cloning with a plain path just hardlinks everything!)\n\nIf you really don't want to clone it, for whatever reasons, check the\nfollowing points instead (in this order).  This is a very destructive\napproach, so *make a backup* or go back to cloning it.  You have been\nwarned.\n\n* Remove the original refs backed up by git-filter-branch: say `git\n  for-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git\n  update-ref -d`.\n\n* Expire all reflogs with `git reflog expire --expire=now --all`.\n\n* Garbage collect all unreferenced objects with `git gc --prune=now`\n  (or if your git-gc is not new enough to support arguments to\n  `--prune`, use `git repack -ad; git prune` instead).\n\n[[PERFORMANCE]]"
        },
        "PERFORMANCE": {
            "name": "PERFORMANCE",
            "start_index": 18584,
            "end_index": 18609,
            "value": "\nThe performance of git-filter-branch is glacially slow; its design makes it\nimpossible for a backward-compatible implementation to ever be fast:\n\n* In editing files, git-filter-branch by design checks out each and\n  every commit as it existed in the original repo.  If your repo has\n  `10^5` files and `10^5` commits, but each commit only modifies five\n  files, then git-filter-branch will make you do `10^10` modifications,\n  despite only having (at most) `5*10^5` unique blobs.\n\n* If you try and cheat and try to make git-filter-branch only work on\n  files modified in a commit, then two things happen\n\n  ** you run into problems with deletions whenever the user is simply\n     trying to rename files (because attempting to delete files that\n     don't exist looks like a no-op; it takes some chicanery to remap\n     deletes across file renames when the renames happen via arbitrary\n     user-provided shell)\n\n  ** even if you succeed at the map-deletes-for-renames chicanery, you\n     still technically violate backward compatibility because users\n     are allowed to filter files in ways that depend upon topology of\n     commits instead of filtering solely based on file contents or\n     names (though this has not been observed in the wild).\n\n* Even if you don't need to edit files but only want to e.g. rename or\n  remove some and thus can avoid checking out each file (i.e. you can\n  use --index-filter), you still are passing shell snippets for your\n  filters.  This means that for every commit, you have to have a\n  prepared git repo where those filters can be run.  That's a\n  significant setup.\n\n* Further, several additional files are created or updated per commit\n  by git-filter-branch.  Some of these are for supporting the\n  convenience functions provided by git-filter-branch (such as map()),\n  while others are for keeping track of internal state (but could have\n  also been accessed by user filters; one of git-filter-branch's\n  regression tests does so).  This essentially amounts to using the\n  filesystem as an IPC mechanism between git-filter-branch and the\n  user-provided filters.  Disks tend to be a slow IPC mechanism, and\n  writing these files also effectively represents a forced\n  synchronization point between separate processes that we hit with\n  every commit.\n\n* The user-provided shell commands will likely involve a pipeline of\n  commands, resulting in the creation of many processes per commit.\n  Creating and running another process takes a widely varying amount\n  of time between operating systems, but on any platform it is very\n  slow relative to invoking a function.\n\n* git-filter-branch itself is written in shell, which is kind of slow.\n  This is the one performance issue that could be backward-compatibly\n  fixed, but compared to the above problems that are intrinsic to the\n  design of git-filter-branch, the language of the tool itself is a\n  relatively minor issue.\n\n  ** Side note: Unfortunately, people tend to fixate on the\n     written-in-shell aspect and periodically ask if git-filter-branch\n     could be rewritten in another language to fix the performance\n     issues.  Not only does that ignore the bigger intrinsic problems\n     with the design, it'd help less than you'd expect: if\n     git-filter-branch itself were not shell, then the convenience\n     functions (map(), skip_commit(), etc) and the `--setup` argument\n     could no longer be executed once at the beginning of the program\n     but would instead need to be prepended to every user filter (and\n     thus re-executed with every commit).\n\nThe https://github.com/newren/git-filter-repo/[git filter-repo] tool is\nan alternative to git-filter-branch which does not suffer from these\nperformance problems or the safety problems (mentioned below). For those\nwith existing tooling which relies upon git-filter-branch, 'git\nfilter-repo' also provides\nhttps://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely[filter-lamely],\na drop-in git-filter-branch replacement (with a few caveats).  While\nfilter-lamely suffers from all the same safety issues as\ngit-filter-branch, it at least ameliorates the performance issues a\nlittle.\n\n[[SAFETY]]"
        },
        "SAFETY": {
            "name": "SAFETY",
            "start_index": 22801,
            "end_index": 22816,
            "value": "\ngit-filter-branch is riddled with gotchas resulting in various ways to\neasily corrupt repos or end up with a mess worse than what you started\nwith:\n\n* Someone can have a set of \"working and tested filters\" which they\n  document or provide to a coworker, who then runs them on a different\n  OS where the same commands are not working/tested (some examples in\n  the git-filter-branch manpage are also affected by this).\n  BSD vs. GNU userland differences can really bite.  If lucky, error\n  messages are spewed.  But just as likely, the commands either don't\n  do the filtering requested, or silently corrupt by making some\n  unwanted change.  The unwanted change may only affect a few commits,\n  so it's not necessarily obvious either.  (The fact that problems\n  won't necessarily be obvious means they are likely to go unnoticed\n  until the rewritten history is in use for quite a while, at which\n  point it's really hard to justify another flag-day for another\n  rewrite.)\n\n* Filenames with spaces are often mishandled by shell snippets since\n  they cause problems for shell pipelines.  Not everyone is familiar\n  with find -print0, xargs -0, git-ls-files -z, etc.  Even people who\n  are familiar with these may assume such flags are not relevant\n  because someone else renamed any such files in their repo back\n  before the person doing the filtering joined the project.  And\n  often, even those familiar with handling arguments with spaces may\n  not do so just because they aren't in the mindset of thinking about\n  everything that could possibly go wrong.\n\n* Non-ascii filenames can be silently removed despite being in a\n  desired directory.  Keeping only wanted paths is often done using\n  pipelines like `git ls-files | grep -v ^WANTED_DIR/ | xargs git rm`.\n  ls-files will only quote filenames if needed, so folks may not\n  notice that one of the files didn't match the regex (at least not\n  until it's much too late).  Yes, someone who knows about\n  core.quotePath can avoid this (unless they have other special\n  characters like \\t, \\n, or \"), and people who use ls-files -z with\n  something other than grep can avoid this, but that doesn't mean they\n  will.\n\n* Similarly, when moving files around, one can find that filenames\n  with non-ascii or special characters end up in a different\n  directory, one that includes a double quote character.  (This is\n  technically the same issue as above with quoting, but perhaps an\n  interesting different way that it can and has manifested as a\n  problem.)\n\n* It's far too easy to accidentally mix up old and new history.  It's\n  still possible with any tool, but git-filter-branch almost\n  invites it.  If lucky, the only downside is users getting frustrated\n  that they don't know how to shrink their repo and remove the old\n  stuff.  If unlucky, they merge old and new history and end up with\n  multiple \"copies\" of each commit, some of which have unwanted or\n  sensitive files and others which don't.  This comes about in\n  multiple different ways:\n\n  ** the default to only doing a partial history rewrite ('--all' is not\n     the default and few examples show it)\n\n  ** the fact that there's no automatic post-run cleanup\n\n  ** the fact that --tag-name-filter (when used to rename tags) doesn't\n     remove the old tags but just adds new ones with the new name\n\n  ** the fact that little educational information is provided to inform\n     users of the ramifications of a rewrite and how to avoid mixing old\n     and new history.  For example, this man page discusses how users\n     need to understand that they need to rebase their changes for all\n     their branches on top of new history (or delete and reclone), but\n     that's only one of multiple concerns to consider.  See the\n     \"DISCUSSION\" section of the git filter-repo manual page for more\n     details.\n\n* Annotated tags can be accidentally converted to lightweight tags,\n  due to either of two issues:\n\n  ** Someone can do a history rewrite, realize they messed up, restore\n     from the backups in refs/original/, and then redo their\n     git-filter-branch command.  (The backup in refs/original/ is not a\n     real backup; it dereferences tags first.)\n\n  ** Running git-filter-branch with either --tags or --all in your\n     <rev-list options>.  In order to retain annotated tags as\n     annotated, you must use --tag-name-filter (and must not have\n     restored from refs/original/ in a previously botched rewrite).\n\n* Any commit messages that specify an encoding will become corrupted\n  by the rewrite; git-filter-branch ignores the encoding, takes the\n  original bytes, and feeds it to commit-tree without telling it the\n  proper encoding.  (This happens whether or not --msg-filter is\n  used.)\n\n* Commit messages (even if they are all UTF-8) by default become\n  corrupted due to not being updated -- any references to other commit\n  hashes in commit messages will now refer to no-longer-extant\n  commits.\n\n* There are no facilities for helping users find what unwanted crud\n  they should delete, which means they are much more likely to have\n  incomplete or partial cleanups that sometimes result in confusion\n  and people wasting time trying to understand.  (For example, folks\n  tend to just look for big files to delete instead of big directories\n  or extensions, and once they do so, then sometime later folks using\n  the new repository who are going through history will notice a build\n  artifact directory that has some files but not others, or a cache of\n  dependencies (node_modules or similar) which couldn't have ever been\n  functional since it's missing some files.)\n\n* If --prune-empty isn't specified, then the filtering process can\n  create hoards of confusing empty commits\n\n* If --prune-empty is specified, then intentionally placed empty\n  commits from before the filtering operation are also pruned instead\n  of just pruning commits that became empty due to filtering rules.\n\n* If --prune-empty is specified, sometimes empty commits are missed\n  and left around anyway (a somewhat rare bug, but it happens...)\n\n* A minor issue, but users who have a goal to update all names and\n  emails in a repository may be led to --env-filter which will only\n  update authors and committers, missing taggers.\n\n* If the user provides a --tag-name-filter that maps multiple tags to\n  the same name, no warning or error is provided; git-filter-branch\n  simply overwrites each tag in some undocumented pre-defined order\n  resulting in only one tag at the end.  (A git-filter-branch\n  regression test requires this surprising behavior.)\n\nAlso, the poor performance of git-filter-branch often leads to safety\nissues:\n\n* Coming up with the correct shell snippet to do the filtering you\n  want is sometimes difficult unless you're just doing a trivial\n  modification such as deleting a couple files.  Unfortunately, people\n  often learn if the snippet is right or wrong by trying it out, but\n  the rightness or wrongness can vary depending on special\n  circumstances (spaces in filenames, non-ascii filenames, funny\n  author names or emails, invalid timezones, presence of grafts or\n  replace objects, etc.), meaning they may have to wait a long time,\n  hit an error, then restart.  The performance of git-filter-branch is\n  so bad that this cycle is painful, reducing the time available to\n  carefully re-check (to say nothing about what it does to the\n  patience of the person doing the rewrite even if they do technically\n  have more time available).  This problem is extra compounded because\n  errors from broken filters may not be shown for a long time and/or\n  get lost in a sea of output.  Even worse, broken filters often just\n  result in silent incorrect rewrites.\n\n* To top it all off, even when users finally find working commands,\n  they naturally want to share them.  But they may be unaware that\n  their repo didn't have some special cases that someone else's does.\n  So, when someone else with a different repository runs the same\n  commands, they get hit by the problems above.  Or, the user just\n  runs commands that really were vetted for special cases, but they\n  run it on a different OS where it doesn't work, as noted above.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 30989,
            "end_index": 30998,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fmt-merge-msg.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-fmt-merge-msg - Produce a merge commit message\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 105,
            "end_index": 124,
            "value": "[verse]\n'git fmt-merge-msg' [-m <message>] [--log[=<n>] | --no-log]\n'git fmt-merge-msg' [-m <message>] [--log[=<n>] | --no-log] -F <file>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 262,
            "end_index": 287,
            "value": "Takes the list of merged objects on stdin and produces a suitable\ncommit message to be used for the merge commit, usually to be\npassed as the '<merge-message>' argument of 'git merge'.\n\nThis command is intended mostly for internal use by scripts\nautomatically invoking 'git merge'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 569,
            "end_index": 586,
            "value": "\n--log[=<n>]::\n\tIn addition to branch names, populate the log message with\n\tone-line descriptions from the actual commits that are being\n\tmerged.  At most <n> commits from each merge parent will be\n\tused (20 if <n> is omitted).  This overrides the `merge.log`\n\tconfiguration variable.\n\n--no-log::\n\tDo not list one-line descriptions from the actual commits being\n\tmerged.\n\n--[no-]summary::\n\tSynonyms to --log and --no-log; these are deprecated and will be\n\tremoved in the future.\n\n-m <message>::\n--message <message>::\n\tUse <message> instead of the branch names for the first line\n\tof the log message.  For use with `--log`.\n\n-F <file>::\n--file <file>::\n\tTake the list of merged objects from <file> instead of\n\tstdin.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 1302,
            "end_index": 1331,
            "value": "include::config/fmt-merge-msg.txt[]\n\nmerge.summary::\n\tSynonym to `merge.log`; this is deprecated and will be removed in\n\tthe future.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1464,
            "end_index": 1483,
            "value": "\n---------\n$ git fetch origin master\n$ git fmt-merge-msg --log <$GIT_DIR/FETCH_HEAD\n---------\n\nPrint a log message describing a merge of the \"master\" branch from\nthe \"origin\" remote.\n\n\nSEE ALSO\n--------\nlinkgit:git-merge[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1707,
            "end_index": 1716,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-for-each-ref.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-for-each-ref - Output information on each ref\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git for-each-ref' [--count=<count>] [--shell|--perl|--python|--tcl]\n\t\t   [(--sort=<key>)...] [--format=<format>] [<pattern>...]\n\t\t   [--points-at=<object>]\n\t\t   [--merged[=<object>]] [--no-merged[=<object>]]\n\t\t   [--contains[=<object>]] [--no-contains[=<object>]]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 393,
            "end_index": 418,
            "value": "\nIterate over all refs that match `<pattern>` and show them\naccording to the given `<format>`, after sorting them according\nto the given set of `<key>`.  If `<count>` is given, stop after\nshowing that many refs.  The interpolated values in `<format>`\ncan optionally be quoted as string literals in the specified\nhost language allowing their direct evaluation in that language.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 795,
            "end_index": 812,
            "value": "\n<pattern>...::\n\tIf one or more patterns are given, only refs are shown that\n\tmatch against at least one pattern, either using fnmatch(3) or\n\tliterally, in the latter case matching completely or from the\n\tbeginning up to a slash.\n\n--count=<count>::\n\tBy default the command shows all refs that match\n\t`<pattern>`.  This option makes it stop after showing\n\tthat many refs.\n\n--sort=<key>::\n\tA field name to sort on.  Prefix `-` to sort in\n\tdescending order of the value.  When unspecified,\n\t`refname` is used.  You may use the --sort=<key> option\n\tmultiple times, in which case the last key becomes the primary\n\tkey.\n\n--format=<format>::\n\tA string that interpolates `%(fieldname)` from a ref being shown\n\tand the object it points at.  If `fieldname`\n\tis prefixed with an asterisk (`*`) and the ref points\n\tat a tag object, use the value for the field in the object\n\twhich the tag object refers to (instead of the field in the tag object).\n\tWhen unspecified, `<format>` defaults to\n\t`%(objectname) SPC %(objecttype) TAB %(refname)`.\n\tIt also interpolates `%%` to `%`, and `%xx` where `xx`\n\tare hex digits interpolates to character with hex code\n\t`xx`; for example `%00` interpolates to `\\0` (NUL),\n\t`%09` to `\\t` (TAB) and `%0a` to `\\n` (LF).\n\n--color[=<when>]::\n\tRespect any colors specified in the `--format` option. The\n\t`<when>` field must be one of `always`, `never`, or `auto` (if\n\t`<when>` is absent, behave as if `always` was given).\n\n--shell::\n--perl::\n--python::\n--tcl::\n\tIf given, strings that substitute `%(fieldname)`\n\tplaceholders are quoted as string literals suitable for\n\tthe specified host language.  This is meant to produce\n\ta scriptlet that can directly be `eval`ed.\n\n--points-at=<object>::\n\tOnly list refs which points at the given object.\n\n--merged[=<object>]::\n\tOnly list refs whose tips are reachable from the\n\tspecified commit (HEAD if not specified).\n\n--no-merged[=<object>]::\n\tOnly list refs whose tips are not reachable from the\n\tspecified commit (HEAD if not specified).\n\n--contains[=<object>]::\n\tOnly list refs which contain the specified commit (HEAD if not\n\tspecified).\n\n--no-contains[=<object>]::\n\tOnly list refs which don't contain the specified commit (HEAD\n\tif not specified).\n\n--ignore-case::\n\tSorting and filtering refs are case insensitive.\n\nFIELD NAMES\n-----------\n\nVarious values from structured fields in referenced objects can\nbe used to interpolate into the resulting output, or as sort\nkeys.\n\nFor all objects, the following names can be used:\n\nrefname::\n\tThe name of the ref (the part after $GIT_DIR/).\n\tFor a non-ambiguous short name of the ref append `:short`.\n\tThe option core.warnAmbiguousRefs is used to select the strict\n\tabbreviation mode. If `lstrip=<N>` (`rstrip=<N>`) is appended, strips `<N>`\n\tslash-separated path components from the front (back) of the refname\n\t(e.g. `%(refname:lstrip=2)` turns `refs/tags/foo` into `foo` and\n\t`%(refname:rstrip=2)` turns `refs/tags/foo` into `refs`).\n\tIf `<N>` is a negative number, strip as many path components as\n\tnecessary from the specified end to leave `-<N>` path components\n\t(e.g. `%(refname:lstrip=-2)` turns\n\t`refs/tags/foo` into `tags/foo` and `%(refname:rstrip=-1)`\n\tturns `refs/tags/foo` into `refs`). When the ref does not have\n\tenough components, the result becomes an empty string if\n\tstripping with positive <N>, or it becomes the full refname if\n\tstripping with negative <N>.  Neither is an error.\n+\n`strip` can be used as a synonym to `lstrip`.\n\nobjecttype::\n\tThe type of the object (`blob`, `tree`, `commit`, `tag`).\n\nobjectsize::\n\tThe size of the object (the same as 'git cat-file -s' reports).\n\tAppend `:disk` to get the size, in bytes, that the object takes up on\n\tdisk. See the note about on-disk sizes in the `CAVEATS` section below.\nobjectname::\n\tThe object name (aka SHA-1).\n\tFor a non-ambiguous abbreviation of the object name append `:short`.\n\tFor an abbreviation of the object name with desired length append\n\t`:short=<length>`, where the minimum length is MINIMUM_ABBREV. The\n\tlength may be exceeded to ensure unique object names.\ndeltabase::\n\tThis expands to the object name of the delta base for the\n\tgiven object, if it is stored as a delta.  Otherwise it\n\texpands to the null object name (all zeroes).\n\nupstream::\n\tThe name of a local ref which can be considered ``upstream''\n\tfrom the displayed ref. Respects `:short`, `:lstrip` and\n\t`:rstrip` in the same way as `refname` above.  Additionally\n\trespects `:track` to show \"[ahead N, behind M]\" and\n\t`:trackshort` to show the terse version: \">\" (ahead), \"<\"\n\t(behind), \"<>\" (ahead and behind), or \"=\" (in sync). `:track`\n\talso prints \"[gone]\" whenever unknown upstream ref is\n\tencountered. Append `:track,nobracket` to show tracking\n\tinformation without brackets (i.e \"ahead N, behind M\").\n+\nFor any remote-tracking branch `%(upstream)`, `%(upstream:remotename)`\nand `%(upstream:remoteref)` refer to the name of the remote and the\nname of the tracked remote ref, respectively. In other words, the\nremote-tracking branch can be updated explicitly and individually by\nusing the refspec `%(upstream:remoteref):%(upstream)` to fetch from\n`%(upstream:remotename)`.\n+\nHas no effect if the ref does not have tracking information associated\nwith it.  All the options apart from `nobracket` are mutually exclusive,\nbut if used together the last option is selected.\n\npush::\n\tThe name of a local ref which represents the `@{push}`\n\tlocation for the displayed ref. Respects `:short`, `:lstrip`,\n\t`:rstrip`, `:track`, `:trackshort`, `:remotename`, and `:remoteref`\n\toptions as `upstream` does. Produces an empty string if no `@{push}`\n\tref is configured.\n\nHEAD::\n\t'*' if HEAD matches current ref (the checked out branch), ' '\n\totherwise.\n\ncolor::\n\tChange output color. Followed by `:<colorname>`, where color\n\tnames are described under Values in the \"CONFIGURATION FILE\"\n\tsection of linkgit:git-config[1].  For example,\n\t`%(color:bold red)`.\n\nalign::\n\tLeft-, middle-, or right-align the content between\n\t%(align:...) and %(end). The \"align:\" is followed by\n\t`width=<width>` and `position=<position>` in any order\n\tseparated by a comma, where the `<position>` is either left,\n\tright or middle, default being left and `<width>` is the total\n\tlength of the content with alignment. For brevity, the\n\t\"width=\" and/or \"position=\" prefixes may be omitted, and bare\n\t<width> and <position> used instead.  For instance,\n\t`%(align:<width>,<position>)`. If the contents length is more\n\tthan the width then no alignment is performed. If used with\n\t`--quote` everything in between %(align:...) and %(end) is\n\tquoted, but if nested then only the topmost level performs\n\tquoting.\n\nif::\n\tUsed as %(if)...%(then)...%(end) or\n\t%(if)...%(then)...%(else)...%(end).  If there is an atom with\n\tvalue or string literal after the %(if) then everything after\n\tthe %(then) is printed, else if the %(else) atom is used, then\n\teverything after %(else) is printed. We ignore space when\n\tevaluating the string before %(then), this is useful when we\n\tuse the %(HEAD) atom which prints either \"*\" or \" \" and we\n\twant to apply the 'if' condition only on the 'HEAD' ref.\n\tAppend \":equals=<string>\" or \":notequals=<string>\" to compare\n\tthe value between the %(if:...) and %(then) atoms with the\n\tgiven string.\n\nsymref::\n\tThe ref which the given symbolic ref refers to. If not a\n\tsymbolic ref, nothing is printed. Respects the `:short`,\n\t`:lstrip` and `:rstrip` options in the same way as `refname`\n\tabove.\n\nworktreepath::\n\tThe absolute path to the worktree in which the ref is checked\n\tout, if it is checked out in any linked worktree. Empty string\n\totherwise.\n\nIn addition to the above, for commit and tag objects, the header\nfield names (`tree`, `parent`, `object`, `type`, and `tag`) can\nbe used to specify the value in the header field.\nFields `tree` and `parent` can also be used with modifier `:short` and\n`:short=<length>` just like `objectname`.\n\nFor commit and tag objects, the special `creatordate` and `creator`\nfields will correspond to the appropriate date or name-email-date tuple\nfrom the `committer` or `tagger` fields depending on the object type.\nThese are intended for working on a mix of annotated and lightweight tags.\n\nFields that have name-email-date tuple as its value (`author`,\n`committer`, and `tagger`) can be suffixed with `name`, `email`,\nand `date` to extract the named component.  For email fields (`authoremail`,\n`committeremail` and `taggeremail`), `:trim` can be appended to get the email\nwithout angle brackets, and `:localpart` to get the part before the `@` symbol\nout of the trimmed email.\n\nThe message in a commit or a tag object is `contents`, from which\n`contents:<part>` can be used to extract various parts out of:\n\ncontents:size::\n\tThe size in bytes of the commit or tag message.\n\ncontents:subject::\n\tThe first paragraph of the message, which typically is a\n\tsingle line, is taken as the \"subject\" of the commit or the\n\ttag message.\n\tInstead of `contents:subject`, field `subject` can also be used to\n\tobtain same results. `:sanitize` can be appended to `subject` for\n\tsubject line suitable for filename.\n\ncontents:body::\n\tThe remainder of the commit or the tag message that follows\n\tthe \"subject\".\n\ncontents:signature::\n\tThe optional GPG signature of the tag.\n\ncontents:lines=N::\n\tThe first `N` lines of the message.\n\nAdditionally, the trailers as interpreted by linkgit:git-interpret-trailers[1]\nare obtained as `trailers[:options]` (or by using the historical alias\n`contents:trailers[:options]`). For valid [:option] values see `trailers`\nsection of linkgit:git-log[1].\n\nFor sorting purposes, fields with numeric values sort in numeric order\n(`objectsize`, `authordate`, `committerdate`, `creatordate`, `taggerdate`).\nAll other fields are used to sort in their byte-value order.\n\nThere is also an option to sort by versions, this can be done by using\nthe fieldname `version:refname` or its alias `v:refname`.\n\nIn any case, a field name that refers to a field inapplicable to\nthe object referred by the ref does not cause an error.  It\nreturns an empty string instead.\n\nAs a special case for the date-type fields, you may specify a format for\nthe date by adding `:` followed by date format name (see the\nvalues the `--date` option to linkgit:git-rev-list[1] takes).\n\nSome atoms like %(align) and %(if) always require a matching %(end).\nWe call them \"opening atoms\" and sometimes denote them as %($open).\n\nWhen a scripting language specific quoting is in effect, everything\nbetween a top-level opening atom and its matching %(end) is evaluated\naccording to the semantics of the opening atom and only its result\nfrom the top-level is quoted.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 11426,
            "end_index": 11445,
            "value": "\nAn example directly producing formatted text.  Show the most recent\n3 tagged commits:\n\n------------\n#!/bin/sh\n\ngit for-each-ref --count=3 --sort='-*authordate' \\\n--format='From: %(*authorname) %(*authoremail)\nSubject: %(*subject)\nDate: %(*authordate)\nRef: %(*refname)\n\n%(*body)\n' 'refs/tags'\n------------\n\n\nA simple example showing the use of shell eval on the output,\ndemonstrating the use of --shell.  List the prefixes of all heads:\n------------\n#!/bin/sh\n\ngit for-each-ref --shell --format=\"ref=%(refname)\" refs/heads | \\\nwhile read entry\ndo\n\teval \"$entry\"\n\techo `dirname $ref`"
        },
        "done": {
            "name": "done",
            "start_index": 12027,
            "end_index": 12046,
            "value": "\n\nA bit more elaborate report on tags, demonstrating that the format\nmay be an entire script:\n------------\n#!/bin/sh\n\nfmt='\n\tr=%(refname)\n\tt=%(*objecttype)\n\tT=${r#refs/tags/}\n\n\to=%(*objectname)\n\tn=%(*authorname)\n\te=%(*authoremail)\n\ts=%(*subject)\n\td=%(*authordate)\n\tb=%(*body)\n\n\tkind=Tag\n\tif test \"z$t\" = z\n\tthen\n\t\t# could be a lightweight tag\n\t\tt=%(objecttype)\n\t\tkind=\"Lightweight tag\"\n\t\to=%(objectname)\n\t\tn=%(authorname)\n\t\te=%(authoremail)\n\t\ts=%(subject)\n\t\td=%(authordate)\n\t\tb=%(body)\n\tfi\n\techo \"$kind $T points at a $t object $o\"\n\tif test \"z$t\" = zcommit\n\tthen\n\t\techo \"The commit was authored by $n $e\nat $d, and titled\n\n    $s\n\nIts message reads as:\n\"\n\t\techo \"$b\" | sed -e \"s/^/    /\"\n\t\techo\n\tfi\n'\n\neval=`git for-each-ref --shell --format=\"$fmt\" \\\n\t--sort='*objecttype' \\\n\t--sort=-taggerdate \\\n\trefs/tags`\neval \"$eval\"\n------------\n\n\nAn example to show the usage of %(if)...%(then)...%(else)...%(end).\nThis prefixes the current branch with a star.\n\n------------\ngit for-each-ref --format=\"%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)\" refs/heads/\n------------\n\n\nAn example to show the usage of %(if)...%(then)...%(end).\nThis prints the authorname, if present.\n\n------------\ngit for-each-ref --format=\"%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)\"\n------------\n"
        },
        "CAVEATS": {
            "name": "CAVEATS",
            "start_index": 13341,
            "end_index": 13358,
            "value": "\nNote that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack.\n\nNote also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy's size or delta base\nwill be reported.\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 13922,
            "end_index": 13935,
            "value": "\ninclude::ref-reachability-filters.txt[]\n\nSEE ALSO\n--------\nlinkgit:git-show-ref[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 14019,
            "end_index": 14028,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-for-each-repo.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-for-each-repo - Run a Git command on a list of repositories\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 118,
            "end_index": 137,
            "value": "[verse]\n'git for-each-repo' --config=<config> [--] <arguments>\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 201,
            "end_index": 226,
            "value": "Run a Git command on a list of repositories. The arguments after the\nknown options or `--` indicator are used as the arguments for the Git\nsubprocess.\n\nTHIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.\n\nFor example, we could run maintenance on each of a list of repositories\nstored in a `maintenance.repo` config variable using\n\n-------------\ngit for-each-repo --config=maintenance.repo maintenance run\n-------------\n\nThis will run `git -C <repo> maintenance run` for each value `<repo>`\nin the multi-valued config variable `maintenance.repo`.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 776,
            "end_index": 793,
            "value": "\n--config=<config>::\n\tUse the given config variable as a multi-valued list storing\n\tabsolute path names. Iterate on that list of paths to run\n\tthe given arguments.\n+\nThese config values are loaded from system, global, and local Git config,\nas available. If `git for-each-repo` is run in a directory that is not a\nGit repository, then only the system and global config is used.\n\n\nSUBPROCESS BEHAVIOR\n-------------------\n\nIf any `git -C <repo> <arguments>` subprocess returns a non-zero exit code,\nthen the `git for-each-repo` process returns that exit code without running\nmore subprocesses.\n\nEach `git -C <repo> <arguments>` subprocess inherits the standard file\ndescriptors `stdin`, `stdout`, and `stderr`.\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1501,
            "end_index": 1510,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-format-patch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-format-patch - Prepare patches for e-mail submission\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git format-patch' [-k] [(-o|--output-directory) <dir> | --stdout]\n\t\t   [--no-thread | --thread[=<style>]]\n\t\t   [(--attach|--inline)[=<boundary>] | --no-attach]\n\t\t   [-s | --signoff]\n\t\t   [--signature=<signature> | --no-signature]\n\t\t   [--signature-file=<file>]\n\t\t   [-n | --numbered | -N | --no-numbered]\n\t\t   [--start-number <n>] [--numbered-files]\n\t\t   [--in-reply-to=<message id>] [--suffix=.<sfx>]\n\t\t   [--ignore-if-in-upstream]\n\t\t   [--cover-from-description=<mode>]\n\t\t   [--rfc] [--subject-prefix=<subject prefix>]\n\t\t   [(--reroll-count|-v) <n>]\n\t\t   [--to=<email>] [--cc=<email>]\n\t\t   [--[no-]cover-letter] [--quiet]\n\t\t   [--[no-]encode-email-headers]\n\t\t   [--no-notes | --notes[=<ref>]]\n\t\t   [--interdiff=<previous>]\n\t\t   [--range-diff=<previous> [--creation-factor=<percent>]]\n\t\t   [--filename-max-length=<n>]\n\t\t   [--progress]\n\t\t   [<common diff options>]\n\t\t   [ <since> | <revision range> ]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 1039,
            "end_index": 1064,
            "value": "\nPrepare each commit with its patch in\none file per commit, formatted to resemble UNIX mailbox format.\nThe output of this command is convenient for e-mail submission or\nfor use with 'git am'.\n\nThere are two ways to specify which commits to operate on.\n\n1. A single commit, <since>, specifies that the commits leading\n   to the tip of the current branch that are not in the history\n   that leads to the <since> to be output.\n\n2. Generic <revision range> expression (see \"SPECIFYING\n   REVISIONS\" section in linkgit:gitrevisions[7]) means the\n   commits in the specified range.\n\nThe first rule takes precedence in the case of a single <commit>.  To\napply the second rule, i.e., format everything since the beginning of\nhistory up until <commit>, use the `--root` option: `git format-patch\n--root <commit>`.  If you want to format only <commit> itself, you\ncan do this with `git format-patch -1 <commit>`.\n\nBy default, each output file is numbered sequentially from 1, and uses the\nfirst line of the commit message (massaged for pathname safety) as\nthe filename. With the `--numbered-files` option, the output file names\nwill only be numbers, without the first line of the commit appended.\nThe names of the output files are printed to standard\noutput, unless the `--stdout` option is specified.\n\nIf `-o` is specified, output files are created in <dir>.  Otherwise\nthey are created in the current working directory. The default path\ncan be set with the `format.outputDirectory` configuration option.\nThe `-o` option takes precedence over `format.outputDirectory`.\nTo store patches in the current working directory even when\n`format.outputDirectory` points elsewhere, use `-o .`. All directory\ncomponents will be created.\n\nBy default, the subject of a single patch is \"[PATCH] \" followed by\nthe concatenation of lines from the commit message up to the first blank\nline (see the DISCUSSION section of linkgit:git-commit[1]).\n\nWhen multiple patches are output, the subject prefix will instead be\n\"[PATCH n/m] \".  To force 1/1 to be added for a single patch, use `-n`.\nTo omit patch numbers from the subject, use `-N`.\n\nIf given `--thread`, `git-format-patch` will generate `In-Reply-To` and\n`References` headers to make the second and subsequent patch mails appear\nas replies to the first mail; this also generates a `Message-Id` header to\nreference.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 3408,
            "end_index": 3425,
            "value": "\n:git-format-patch: 1\ninclude::diff-options.txt[]\n\n-<n>::\n\tPrepare patches from the topmost <n> commits.\n\n-o <dir>::\n--output-directory <dir>::\n\tUse <dir> to store the resulting files, instead of the\n\tcurrent working directory.\n\n-n::\n--numbered::\n\tName output in '[PATCH n/m]' format, even with a single patch.\n\n-N::\n--no-numbered::\n\tName output in '[PATCH]' format.\n\n--start-number <n>::\n\tStart numbering the patches at <n> instead of 1.\n\n--numbered-files::\n\tOutput file names will be a simple number sequence\n\twithout the default first line of the commit appended.\n\n-k::\n--keep-subject::\n\tDo not strip/add '[PATCH]' from the first line of the\n\tcommit log message.\n\n-s::\n--signoff::\n\tAdd a `Signed-off-by` trailer to the commit message, using\n\tthe committer identity of yourself.\n\tSee the signoff option in linkgit:git-commit[1] for more information.\n\n--stdout::\n\tPrint all commits to the standard output in mbox format,\n\tinstead of creating a file for each one.\n\n--attach[=<boundary>]::\n\tCreate multipart/mixed attachment, the first part of\n\twhich is the commit message and the patch itself in the\n\tsecond part, with `Content-Disposition: attachment`.\n\n--no-attach::\n\tDisable the creation of an attachment, overriding the\n\tconfiguration setting.\n\n--inline[=<boundary>]::\n\tCreate multipart/mixed attachment, the first part of\n\twhich is the commit message and the patch itself in the\n\tsecond part, with `Content-Disposition: inline`.\n\n--thread[=<style>]::\n--no-thread::\n\tControls addition of `In-Reply-To` and `References` headers to\n\tmake the second and subsequent mails appear as replies to the\n\tfirst.  Also controls generation of the `Message-Id` header to\n\treference.\n+\nThe optional <style> argument can be either `shallow` or `deep`.\n'shallow' threading makes every mail a reply to the head of the\nseries, where the head is chosen from the cover letter, the\n`--in-reply-to`, and the first patch mail, in this order.  'deep'\nthreading makes every mail a reply to the previous one.\n+\nThe default is `--no-thread`, unless the `format.thread` configuration\nis set.  If `--thread` is specified without a style, it defaults to the\nstyle specified by `format.thread` if any, or else `shallow`.\n+\nBeware that the default for 'git send-email' is to thread emails\nitself.  If you want `git format-patch` to take care of threading, you\nwill want to ensure that threading is disabled for `git send-email`.\n\n--in-reply-to=<message id>::\n\tMake the first mail (or all the mails with `--no-thread`) appear as a\n\treply to the given <message id>, which avoids breaking threads to\n\tprovide a new patch series.\n\n--ignore-if-in-upstream::\n\tDo not include a patch that matches a commit in\n\t<until>..<since>.  This will examine all patches reachable\n\tfrom <since> but not from <until> and compare them with the\n\tpatches being generated, and any patch that matches is\n\tignored.\n\n--cover-from-description=<mode>::\n\tControls which parts of the cover letter will be automatically\n\tpopulated using the branch's description.\n+\nIf `<mode>` is `message` or `default`, the cover letter subject will be\npopulated with placeholder text. The body of the cover letter will be\npopulated with the branch's description. This is the default mode when\nno configuration nor command line option is specified.\n+\nIf `<mode>` is `subject`, the first paragraph of the branch description will\npopulate the cover letter subject. The remainder of the description will\npopulate the body of the cover letter.\n+\nIf `<mode>` is `auto`, if the first paragraph of the branch description\nis greater than 100 bytes, then the mode will be `message`, otherwise\n`subject` will be used.\n+\nIf `<mode>` is `none`, both the cover letter subject and body will be\npopulated with placeholder text.\n\n--subject-prefix=<subject prefix>::\n\tInstead of the standard '[PATCH]' prefix in the subject\n\tline, instead use '[<subject prefix>]'. This\n\tallows for useful naming of a patch series, and can be\n\tcombined with the `--numbered` option.\n\n--filename-max-length=<n>::\n\tInstead of the standard 64 bytes, chomp the generated output\n\tfilenames at around '<n>' bytes (too short a value will be\n\tsilently raised to a reasonable length).  Defaults to the\n\tvalue of the `format.filenameMaxLength` configuration\n\tvariable, or 64 if unconfigured.\n\n--rfc::\n\tAlias for `--subject-prefix=\"RFC PATCH\"`. RFC means \"Request For\n\tComments\"; use this when sending an experimental patch for\n\tdiscussion rather than application.\n\n-v <n>::\n--reroll-count=<n>::\n\tMark the series as the <n>-th iteration of the topic. The\n\toutput filenames have `v<n>` prepended to them, and the\n\tsubject prefix (\"PATCH\" by default, but configurable via the\n\t`--subject-prefix` option) has ` v<n>` appended to it.  E.g.\n\t`--reroll-count=4` may produce `v4-0001-add-makefile.patch`\n\tfile that has \"Subject: [PATCH v4 1/20] Add makefile\" in it.\n\n--to=<email>::\n\tAdd a `To:` header to the email headers. This is in addition\n\tto any configured headers, and may be used multiple times.\n\tThe negated form `--no-to` discards all `To:` headers added so\n\tfar (from config or command line).\n\n--cc=<email>::\n\tAdd a `Cc:` header to the email headers. This is in addition\n\tto any configured headers, and may be used multiple times.\n\tThe negated form `--no-cc` discards all `Cc:` headers added so\n\tfar (from config or command line).\n\n--from::\n--from=<ident>::\n\tUse `ident` in the `From:` header of each commit email. If the\n\tauthor ident of the commit is not textually identical to the\n\tprovided `ident`, place a `From:` header in the body of the\n\tmessage with the original author. If no `ident` is given, use\n\tthe committer ident.\n+\nNote that this option is only useful if you are actually sending the\nemails and want to identify yourself as the sender, but retain the\noriginal author (and `git am` will correctly pick up the in-body\nheader). Note also that `git send-email` already handles this\ntransformation for you, and this option should not be used if you are\nfeeding the result to `git send-email`.\n\n--add-header=<header>::\n\tAdd an arbitrary header to the email headers.  This is in addition\n\tto any configured headers, and may be used multiple times.\n\tFor example, `--add-header=\"Organization: git-foo\"`.\n\tThe negated form `--no-add-header` discards *all* (`To:`,\n\t`Cc:`, and custom) headers added so far from config or command\n\tline.\n\n--[no-]cover-letter::\n\tIn addition to the patches, generate a cover letter file\n\tcontaining the branch description, shortlog and the overall diffstat.  You can\n\tfill in a description in the file before sending it out.\n\n--encode-email-headers::\n--no-encode-email-headers::\n\tEncode email headers that have non-ASCII characters with\n\t\"Q-encoding\" (described in RFC 2047), instead of outputting the\n\theaders verbatim. Defaults to the value of the\n\t`format.encodeEmailHeaders` configuration variable.\n\n--interdiff=<previous>::\n\tAs a reviewer aid, insert an interdiff into the cover letter,\n\tor as commentary of the lone patch of a 1-patch series, showing\n\tthe differences between the previous version of the patch series and\n\tthe series currently being formatted. `previous` is a single revision\n\tnaming the tip of the previous series which shares a common base with\n\tthe series being formatted (for example `git format-patch\n\t--cover-letter --interdiff=feature/v1 -3 feature/v2`).\n\n--range-diff=<previous>::\n\tAs a reviewer aid, insert a range-diff (see linkgit:git-range-diff[1])\n\tinto the cover letter, or as commentary of the lone patch of a\n\t1-patch series, showing the differences between the previous\n\tversion of the patch series and the series currently being formatted.\n\t`previous` can be a single revision naming the tip of the previous\n\tseries if it shares a common base with the series being formatted (for\n\texample `git format-patch --cover-letter --range-diff=feature/v1 -3\n\tfeature/v2`), or a revision range if the two versions of the series are\n\tdisjoint (for example `git format-patch --cover-letter\n\t--range-diff=feature/v1~3..feature/v1 -3 feature/v2`).\n+\nNote that diff options passed to the command affect how the primary\nproduct of `format-patch` is generated, and they are not passed to\nthe underlying `range-diff` machinery used to generate the cover-letter\nmaterial (this may change in the future).\n\n--creation-factor=<percent>::\n\tUsed with `--range-diff`, tweak the heuristic which matches up commits\n\tbetween the previous and current series of patches by adjusting the\n\tcreation/deletion cost fudge factor. See linkgit:git-range-diff[1])\n\tfor details.\n\n--notes[=<ref>]::\n--no-notes::\n\tAppend the notes (see linkgit:git-notes[1]) for the commit\n\tafter the three-dash line.\n+\nThe expected use case of this is to write supporting explanation for\nthe commit that does not belong to the commit log message proper,\nand include it with the patch submission. While one can simply write\nthese explanations after `format-patch` has run but before sending,\nkeeping them as Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the `notes.rewrite`\nconfiguration options in linkgit:git-notes[1] to use this workflow).\n+\nThe default is `--no-notes`, unless the `format.notes` configuration is\nset.\n\n--[no-]signature=<signature>::\n\tAdd a signature to each message produced. Per RFC 3676 the signature\n\tis separated from the body by a line with '-- ' on it. If the\n\tsignature option is omitted the signature defaults to the Git version\n\tnumber.\n\n--signature-file=<file>::\n\tWorks just like --signature except the signature is read from a file.\n\n--suffix=.<sfx>::\n\tInstead of using `.patch` as the suffix for generated\n\tfilenames, use specified suffix.  A common alternative is\n\t`--suffix=.txt`.  Leaving this empty will remove the `.patch`\n\tsuffix.\n+\nNote that the leading character does not have to be a dot; for example,\nyou can use `--suffix=-patch` to get `0001-description-of-my-change-patch`.\n\n-q::\n--quiet::\n\tDo not print the names of the generated files to standard output.\n\n--no-binary::\n\tDo not output contents of changes in binary files, instead\n\tdisplay a notice that those files changed.  Patches generated\n\tusing this option cannot be applied properly, but they are\n\tstill useful for code review.\n\n--zero-commit::\n  Output an all-zero hash in each patch's From header instead\n  of the hash of the commit.\n\n--[no-]base[=<commit>]::\n\tRecord the base tree information to identify the state the\n\tpatch series applies to.  See the BASE TREE INFORMATION section\n\tbelow for details. If <commit> is \"auto\", a base commit is\n\tautomatically chosen. The `--no-base` option overrides a\n\t`format.useAutoBase` configuration.\n\n--root::\n\tTreat the revision argument as a <revision range>, even if it\n\tis just a single commit (that would normally be treated as a\n\t<since>).  Note that root commits included in the specified\n\trange are always formatted as creation patches, independently\n\tof this flag.\n\n--progress::\n\tShow progress reports on stderr as patches are generated.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 14374,
            "end_index": 14403,
            "value": "You can specify extra mail header lines to be added to each message,\ndefaults for the subject prefix and file suffix, number patches when\noutputting more than one patch, add \"To:\" or \"Cc:\" headers, configure\nattachments, change the patch output directory, and sign off patches\nwith configuration variables.\n\n------------\n[format]\n\theaders = \"Organization: git-foo\\n\"\n\tsubjectPrefix = CHANGE\n\tsuffix = .txt\n\tnumbered = auto\n\tto = <email>\n\tcc = <email>\n\tattach [ = mime-boundary-string ]\n\tsignOff = true\n\toutputDirectory = <directory>\n\tcoverLetter = auto\n\tcoverFromDescription = auto\n------------\n\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 14999,
            "end_index": 15022,
            "value": "\nThe patch produced by 'git format-patch' is in UNIX mailbox format,\nwith a fixed \"magic\" time stamp to indicate that the file is output\nfrom format-patch rather than a real mailbox, like so:\n\n------------\nFrom 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001\nFrom: Tony Luck <tony.luck@intel.com>\nDate: Tue, 13 Jul 2010 11:42:54 -0700\nSubject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\narch/arm config files were slimmed down using a python script\n(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)\n\nDo the same for ia64 so we can have sleek & trim looking\n...\n------------\n\nTypically it will be placed in a MUA's drafts folder, edited to add\ntimely commentary that should not go in the changelog after the three\ndashes, and then sent as a message whose body, in our example, starts\nwith \"arch/arm config files were...\".  On the receiving end, readers\ncan save interesting patches in a UNIX mailbox and apply them with\nlinkgit:git-am[1].\n\nWhen a patch is part of an ongoing discussion, the patch generated by\n'git format-patch' can be tweaked to take advantage of the 'git am\n--scissors' feature.  After your response to the discussion comes a\nline that consists solely of \"`-- >8 --`\" (scissors and perforation),\nfollowed by the patch with unnecessary header fields removed:\n\n------------\n...\n> So we should do such-and-such.\n\nMakes sense to me.  How about this patch?\n\n-- >8 --\nSubject: [IA64] Put ia64 config files on the Uwe Kleine-K\u00c3\u00b6nig diet\n\narch/arm config files were slimmed down using a python script\n...\n------------\n\nWhen sending a patch this way, most often you are sending your own\npatch, so in addition to the \"`From $SHA1 $magic_timestamp`\" marker you\nshould omit `From:` and `Date:` lines from the patch file.  The patch\ntitle is likely to be different from the subject of the discussion the\npatch is in response to, so it is likely that you would want to keep\nthe Subject: line, like the example above.\n\nChecking for patch corruption\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMany mailers if not set up properly will corrupt whitespace.  Here are\ntwo common types of corruption:\n\n* Empty context lines that do not have _any_ whitespace.\n\n* Non-empty context lines that have one extra whitespace at the\n  beginning.\n\nOne way to test if your MUA is set up correctly is:\n\n* Send the patch to yourself, exactly the way you would, except\n  with To: and Cc: lines that do not contain the list and\n  maintainer address.\n\n* Save that patch to a file in UNIX mailbox format.  Call it a.patch,\n  say.\n\n* Apply it:\n\n    $ git fetch <project> master:test-apply\n    $ git switch test-apply\n    $ git restore --source=HEAD --staged --worktree :/\n    $ git am a.patch\n\nIf it does not apply correctly, there can be various reasons.\n\n* The patch itself does not apply cleanly.  That is _bad_ but\n  does not have much to do with your MUA.  You might want to rebase\n  the patch with linkgit:git-rebase[1] before regenerating it in\n  this case.\n\n* The MUA corrupted your patch; \"am\" would complain that\n  the patch does not apply.  Look in the .git/rebase-apply/ subdirectory and\n  see what 'patch' file contains and check for the common\n  corruption patterns mentioned above.\n\n* While at it, check the 'info' and 'final-commit' files as well.\n  If what is in 'final-commit' is not exactly what you would want to\n  see in the commit log message, it is very likely that the\n  receiver would end up hand editing the log message when applying\n  your patch.  Things like \"Hi, this is my first patch.\\n\" in the\n  patch e-mail should come after the three-dash line that signals\n  the end of the commit message.\n\nMUA-SPECIFIC HINTS\n------------------\nHere are some hints on how to successfully submit patches inline using\nvarious mailers.\n\nGMail\n~~~~~\nGMail does not have any way to turn off line wrapping in the web\ninterface, so it will mangle any emails that you send.  You can however\nuse \"git send-email\" and send your patches through the GMail SMTP server, or\nuse any IMAP email client to connect to the google IMAP server and forward\nthe emails through that.\n\nFor hints on using 'git send-email' to send your patches through the\nGMail SMTP server, see the EXAMPLE section of linkgit:git-send-email[1].\n\nFor hints on submission using the IMAP interface, see the EXAMPLE\nsection of linkgit:git-imap-send[1].\n\nThunderbird\n~~~~~~~~~~~\nBy default, Thunderbird will both wrap emails as well as flag\nthem as being 'format=flowed', both of which will make the\nresulting email unusable by Git.\n\nThere are three different approaches: use an add-on to turn off line wraps,\nconfigure Thunderbird to not mangle patches, or use\nan external editor to keep Thunderbird from mangling the patches.\n\nApproach #1 (add-on)\n^^^^^^^^^^^^^^^^^^^^\n\nInstall the Toggle Word Wrap add-on that is available from\nhttps://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/\nIt adds a menu entry \"Enable Word Wrap\" in the composer's \"Options\" menu\nthat you can tick off. Now you can compose the message as you otherwise do\n(cut + paste, 'git format-patch' | 'git imap-send', etc), but you have to\ninsert line breaks manually in any text that you type.\n\nApproach #2 (configuration)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThree steps:\n\n1. Configure your mail server composition as plain text:\n   Edit...Account Settings...Composition & Addressing,\n   uncheck \"Compose Messages in HTML\".\n\n2. Configure your general composition window to not wrap.\n+\nIn Thunderbird 2:\nEdit..Preferences..Composition, wrap plain text messages at 0\n+\nIn Thunderbird 3:\nEdit..Preferences..Advanced..Config Editor.  Search for\n\"mail.wrap_long_lines\".\nToggle it to make sure it is set to `false`. Also, search for\n\"mailnews.wraplength\" and set the value to 0.\n\n3. Disable the use of format=flowed:\n   Edit..Preferences..Advanced..Config Editor.  Search for\n   \"mailnews.send_plaintext_flowed\".\n   Toggle it to make sure it is set to `false`.\n\nAfter that is done, you should be able to compose email as you\notherwise would (cut + paste, 'git format-patch' | 'git imap-send', etc),\nand the patches will not be mangled.\n\nApproach #3 (external editor)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following Thunderbird extensions are needed:\nAboutConfig from http://aboutconfig.mozdev.org/ and\nExternal Editor from http://globs.org/articles.php?lng=en&pg=8\n\n1. Prepare the patch as a text file using your method of choice.\n\n2. Before opening a compose window, use Edit->Account Settings to\n   uncheck the \"Compose messages in HTML format\" setting in the\n   \"Composition & Addressing\" panel of the account to be used to\n   send the patch.\n\n3. In the main Thunderbird window, 'before' you open the compose\n   window for the patch, use Tools->about:config to set the\n   following to the indicated values:\n+\n----------\n\tmailnews.send_plaintext_flowed  => false\n\tmailnews.wraplength             => 0\n----------\n\n4. Open a compose window and click the external editor icon.\n\n5. In the external editor window, read in the patch file and exit\n   the editor normally.\n\nSide note: it may be possible to do step 2 with\nabout:config and the following settings but no one's tried yet.\n\n----------\n\tmail.html_compose                       => false\n\tmail.identity.default.compose_html      => false\n\tmail.identity.id?.compose_html          => false\n----------\n\nThere is a script in contrib/thunderbird-patch-inline which can help\nyou include patches with Thunderbird in an easy way. To use it, do the\nsteps above and then use the script as the external editor.\n\nKMail\n~~~~~\nThis should help you to submit patches inline using KMail.\n\n1. Prepare the patch as a text file.\n\n2. Click on New Mail.\n\n3. Go under \"Options\" in the Composer window and be sure that\n   \"Word wrap\" is not set.\n\n4. Use Message -> Insert file... and insert the patch.\n\n5. Back in the compose window: add whatever other text you wish to the\n   message, complete the addressing and subject fields, and press send.\n\nBASE TREE INFORMATION\n---------------------\n\nThe base tree information block is used for maintainers or third party\ntesters to know the exact state the patch series applies to. It consists\nof the 'base commit', which is a well-known commit that is part of the\nstable part of the project history everybody else works off of, and zero\nor more 'prerequisite patches', which are well-known patches in flight\nthat is not yet part of the 'base commit' that need to be applied on top\nof 'base commit' in topological order before the patches can be applied.\n\nThe 'base commit' is shown as \"base-commit: \" followed by the 40-hex of\nthe commit object name.  A 'prerequisite patch' is shown as\n\"prerequisite-patch-id: \" followed by the 40-hex 'patch id', which can\nbe obtained by passing the patch through the `git patch-id --stable`\ncommand.\n\nImagine that on top of the public commit P, you applied well-known\npatches X, Y and Z from somebody else, and then built your three-patch\nseries A, B, C, the history would be like:\n\n................................................\n---P---X---Y---Z---A---B---C\n................................................\n\nWith `git format-patch --base=P -3 C` (or variants thereof, e.g. with\n`--cover-letter` or using `Z..C` instead of `-3 C` to specify the\nrange), the base tree information block is shown at the end of the\nfirst message the command outputs (either the first patch, or the\ncover letter), like this:\n\n------------\nbase-commit: P\nprerequisite-patch-id: X\nprerequisite-patch-id: Y\nprerequisite-patch-id: Z\n------------\n\nFor non-linear topology, such as\n\n................................................\n---P---X---A---M---C\n    \\         /\n     Y---Z---B\n................................................\n\nYou can also use `git format-patch --base=P -3 C` to generate patches\nfor A, B and C, and the identifiers for P, X, Y, Z are appended at the\nend of the first message.\n\nIf set `--base=auto` in cmdline, it will track base commit automatically,\nthe base commit will be the merge base of tip commit of the remote-tracking\nbranch and revision-range specified in cmdline.\nFor a local branch, you need to track a remote branch by `git branch\n--set-upstream-to` before using this option.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 25312,
            "end_index": 25331,
            "value": "\n* Extract commits between revisions R1 and R2, and apply them on top of\n  the current branch using 'git am' to cherry-pick them:\n+\n------------\n$ git format-patch -k --stdout R1..R2 | git am -3 -k\n------------\n\n* Extract all commits which are in the current branch but not in the\n  origin branch:\n+\n------------\n$ git format-patch origin\n------------\n+\nFor each commit a separate file is created in the current directory.\n\n* Extract all commits that lead to 'origin' since the inception of the\n  project:\n+\n------------\n$ git format-patch --root origin\n------------\n\n* The same as the previous one:\n+\n------------\n$ git format-patch -M -B origin\n------------\n+\nAdditionally, it detects and handles renames and complete rewrites\nintelligently to produce a renaming patch.  A renaming patch reduces\nthe amount of text output, and generally makes it easier to review.\nNote that non-Git \"patch\" programs won't understand renaming patches, so\nuse it only when you know the recipient uses Git to apply your patch.\n\n* Extract three topmost commits from the current branch and format them\n  as e-mailable patches:\n+\n------------\n$ git format-patch -3\n------------\n\nSEE ALSO\n--------\nlinkgit:git-am[1], linkgit:git-send-email[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 26552,
            "end_index": 26561,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fsck-objects.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-fsck-objects - Verifies the connectivity and validity of the objects in the database\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 141,
            "end_index": 160,
            "value": "[verse]\n'git fsck-objects' ...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 191,
            "end_index": 216,
            "value": "\nThis is a synonym for linkgit:git-fsck[1].  Please refer to the\ndocumentation of that command.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 312,
            "end_index": 321,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-fsck.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-fsck - Verifies the connectivity and validity of the objects in the database\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 117,
            "end_index": 136,
            "value": "[verse]\n'git fsck' [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n\t [--[no-]full] [--strict] [--verbose] [--lost-found]\n\t [--[no-]dangling] [--[no-]progress] [--connectivity-only]\n\t [--[no-]name-objects] [<object>*]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 364,
            "end_index": 389,
            "value": "Verifies the connectivity and validity of the objects in the database.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 460,
            "end_index": 477,
            "value": "\n<object>::\n\tAn object to treat as the head of an unreachability trace.\n+\nIf no objects are given, 'git fsck' defaults to using the\nindex file, all SHA-1 references in `refs` namespace, and all reflogs\n(unless --no-reflogs is given) as heads.\n\n--unreachable::\n\tPrint out objects that exist but that aren't reachable from any\n\tof the reference nodes.\n\n--[no-]dangling::\n\tPrint objects that exist but that are never 'directly' used (default).\n\t`--no-dangling` can be used to omit this information from the output.\n\n--root::\n\tReport root nodes.\n\n--tags::\n\tReport tags.\n\n--cache::\n\tConsider any object recorded in the index also as a head node for\n\tan unreachability trace.\n\n--no-reflogs::\n\tDo not consider commits that are referenced only by an\n\tentry in a reflog to be reachable.  This option is meant\n\tonly to search for commits that used to be in a ref, but\n\tnow aren't, but are still in that corresponding reflog.\n\n--full::\n\tCheck not just objects in GIT_OBJECT_DIRECTORY\n\t($GIT_DIR/objects), but also the ones found in alternate\n\tobject pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES\n\tor $GIT_DIR/objects/info/alternates,\n\tand in packed Git archives found in $GIT_DIR/objects/pack\n\tand corresponding pack subdirectories in alternate\n\tobject pools.  This is now default; you can turn it off\n\twith --no-full.\n\n--connectivity-only::\n\tCheck only the connectivity of reachable objects, making sure\n\tthat any objects referenced by a reachable tag, commit, or tree\n\tis present. This speeds up the operation by avoiding reading\n\tblobs entirely (though it does still check that referenced blobs\n\texist). This will detect corruption in commits and trees, but\n\tnot do any semantic checks (e.g., for format errors). Corruption\n\tin blob objects will not be detected at all.\n+\nUnreachable tags, commits, and trees will also be accessed to find the\ntips of dangling segments of history. Use `--no-dangling` if you don't\ncare about this output and want to speed it up further.\n\n--strict::\n\tEnable more strict checking, namely to catch a file mode\n\trecorded with g+w bit set, which was created by older\n\tversions of Git.  Existing repositories, including the\n\tLinux kernel, Git itself, and sparse repository have old\n\tobjects that triggers this check, but it is recommended\n\tto check new projects with this flag.\n\n--verbose::\n\tBe chatty.\n\n--lost-found::\n\tWrite dangling objects into .git/lost-found/commit/ or\n\t.git/lost-found/other/, depending on type.  If the object is\n\ta blob, the contents are written into the file, rather than\n\tits object name.\n\n--name-objects::\n\tWhen displaying names of reachable objects, in addition to the\n\tSHA-1 also display a name that describes *how* they are reachable,\n\tcompatible with linkgit:git-rev-parse[1], e.g.\n\t`HEAD@{1234567890}~25^2:src/`.\n\n--[no-]progress::\n\tProgress status is reported on the standard error stream by\n\tdefault when it is attached to a terminal, unless\n\t--no-progress or --verbose is specified. --progress forces\n\tprogress status even if the standard error stream is not\n\tdirected to a terminal.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 3518,
            "end_index": 3547,
            "value": "\ninclude::config/fsck.txt[]\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 3575,
            "end_index": 3598,
            "value": "\ngit-fsck tests SHA-1 and general object sanity, and it does full tracking\nof the resulting reachability and everything else. It prints out any\ncorruption it finds (missing or bad objects), and if you use the\n`--unreachable` flag it will also print out objects that exist but that\naren't reachable from any of the specified head nodes (or the default\nset, as mentioned above).\n\nAny corrupt objects you will have to find in backups or other archives\n(i.e., you can just remove them and do an 'rsync' with some other site in\nthe hopes that somebody else has the object you have corrupted).\n\nIf core.commitGraph is true, the commit-graph file will also be inspected\nusing 'git commit-graph verify'. See linkgit:git-commit-graph[1].\n\nExtracted Diagnostics\n---------------------\n\nunreachable <type> <object>::\n\tThe <type> object <object>, isn't actually referred to directly\n\tor indirectly in any of the trees or commits seen. This can\n\tmean that there's another root node that you're not specifying\n\tor that the tree is corrupt. If you haven't missed a root node\n\tthen you might as well delete unreachable nodes since they\n\tcan't be used.\n\nmissing <type> <object>::\n\tThe <type> object <object>, is referred to but isn't present in\n\tthe database.\n\ndangling <type> <object>::\n\tThe <type> object <object>, is present in the database but never\n\t'directly' used. A dangling commit could be a root node.\n\nhash mismatch <object>::\n\tThe database has an object whose hash doesn't match the\n\tobject database value.\n\tThis indicates a serious data integrity problem.\n\nEnvironment Variables\n---------------------\n\nGIT_OBJECT_DIRECTORY::\n\tused to specify the object database root (usually $GIT_DIR/objects)\n\nGIT_INDEX_FILE::\n\tused to specify the index file of the index\n\nGIT_ALTERNATE_OBJECT_DIRECTORIES::\n\tused to specify additional object database roots (usually unset)\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5452,
            "end_index": 5461,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-gc.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 20,
            "end_index": 31,
            "value": "git-gc - Cleanup unnecessary files and optimize the local repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git gc' [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force] [--keep-largest-pack]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 233,
            "end_index": 258,
            "value": "Runs a number of housekeeping tasks within the current repository,\nsuch as compressing file revisions (to reduce disk space and increase\nperformance), removing unreachable objects which may have been\ncreated from prior invocations of 'git add', packing refs, pruning\nreflog, rerere metadata or stale working trees. May also update ancillary\nindexes such as the commit-graph.\n\nWhen common porcelain operations that create objects are run, they\nwill check whether the repository has grown substantially since the\nlast maintenance, and if so run `git gc` automatically. See `gc.auto`\nbelow for how to disable this behavior.\n\nRunning `git gc` manually should only be needed when adding objects to\na repository without regularly running such porcelain commands, to do\na one-off repository optimization, or e.g. to clean up a suboptimal\nmass-import. See the \"PACKFILE OPTIMIZATION\" section in\nlinkgit:git-fast-import[1] for more details on the import case.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1209,
            "end_index": 1226,
            "value": "\n--aggressive::\n\tUsually 'git gc' runs very quickly while providing good disk\n\tspace utilization and performance.  This option will cause\n\t'git gc' to more aggressively optimize the repository at the expense\n\tof taking much more time.  The effects of this optimization are\n\tmostly persistent. See the \"AGGRESSIVE\" section below for details.\n\n--auto::\n\tWith this option, 'git gc' checks whether any housekeeping is\n\trequired; if not, it exits without performing any work.\n+\nSee the `gc.auto` option in the \"CONFIGURATION\" section below for how\nthis heuristic works.\n+\nOnce housekeeping is triggered by exceeding the limits of\nconfiguration options such as `gc.auto` and `gc.autoPackLimit`, all\nother housekeeping tasks (e.g. rerere, working trees, reflog...) will\nbe performed as well.\n\n\n--prune=<date>::\n\tPrune loose objects older than date (default is 2 weeks ago,\n\toverridable by the config variable `gc.pruneExpire`).\n\t--prune=now prunes loose objects regardless of their age and\n\tincreases the risk of corruption if another process is writing to\n\tthe repository concurrently; see \"NOTES\" below. --prune is on by\n\tdefault.\n\n--no-prune::\n\tDo not prune any loose objects.\n\n--quiet::\n\tSuppress all progress reports.\n\n--force::\n\tForce `git gc` to run even if there may be another `git gc`\n\tinstance running on this repository.\n\n--keep-largest-pack::\n\tAll packs except the largest pack and those marked with a\n\t`.keep` files are consolidated into a single pack. When this\n\toption is used, `gc.bigPackThreshold` is ignored.\n"
        },
        "AGGRESSIVE": {
            "name": "AGGRESSIVE",
            "start_index": 2747,
            "end_index": 2770,
            "value": "\nWhen the `--aggressive` option is supplied, linkgit:git-repack[1] will\nbe invoked with the `-f` flag, which in turn will pass\n`--no-reuse-delta` to linkgit:git-pack-objects[1]. This will throw\naway any existing deltas and re-compute them, at the expense of\nspending much more time on the repacking.\n\nThe effects of this are mostly persistent, e.g. when packs and loose\nobjects are coalesced into one another pack the existing deltas in\nthat pack might get re-used, but there are also various cases where we\nmight pick a sub-optimal delta from a newer pack instead.\n\nFurthermore, supplying `--aggressive` will tweak the `--depth` and\n`--window` options passed to linkgit:git-repack[1]. See the\n`gc.aggressiveDepth` and `gc.aggressiveWindow` settings below. By\nusing a larger window size we're more likely to find more optimal\ndeltas.\n\nIt's probably not worth it to use this option on a given repository\nwithout running tailored performance benchmarks on it. It takes a lot\nmore time, and the resulting space/delta optimization may or may not\nbe worth it. Not using this at all is the right trade-off for most\nusers and their repositories.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 3909,
            "end_index": 3938,
            "value": "\nThe below documentation is the same as what's found in\nlinkgit:git-config[1]:\n\ninclude::config/gc.txt[]\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 4043,
            "end_index": 4056,
            "value": "\n'git gc' tries very hard not to delete objects that are referenced\nanywhere in your repository. In particular, it will keep not only\nobjects referenced by your current set of branches and tags, but also\nobjects referenced by the index, remote-tracking branches, reflogs\n(which may reference commits in branches that were later amended or\nrewound), and anything else in the refs/* namespace. Note that a note\n(of the kind created by 'git notes') attached to an object does not\ncontribute in keeping the object alive. If you are expecting some\nobjects to be deleted and they aren't, check all of those locations\nand decide whether it makes sense in your case to remove those\nreferences.\n\nOn the other hand, when 'git gc' runs concurrently with another process,\nthere is a risk of it deleting an object that the other process is using\nbut hasn't created a reference to. This may just cause the other process\nto fail or may corrupt the repository if the other process later adds a\nreference to the deleted object. Git has two features that significantly\nmitigate this problem:\n\n. Any object with modification time newer than the `--prune` date is kept,\n  along with everything reachable from it.\n\n. Most operations that add an object to the database update the\n  modification time of the object if it is already present so that #1\n  applies.\n\nHowever, these features fall short of a complete solution, so users who\nrun commands concurrently have to live with some risk of corruption (which\nseems to be low in practice).\n"
        },
        "HOOKS": {
            "name": "HOOKS",
            "start_index": 5573,
            "end_index": 5586,
            "value": "\nThe 'git gc --auto' command will run the 'pre-auto-gc' hook.  See\nlinkgit:githooks[5] for more information.\n\n\nSEE ALSO\n--------\nlinkgit:git-prune[1]\nlinkgit:git-reflog[1]\nlinkgit:git-repack[1]\nlinkgit:git-rerere[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5802,
            "end_index": 5811,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-get-tar-commit-id.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 50,
            "end_index": 61,
            "value": "git-get-tar-commit-id - Extract commit ID from an archive created using git-archive\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 146,
            "end_index": 165,
            "value": "[verse]\n'git get-tar-commit-id'\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 198,
            "end_index": 223,
            "value": "\nRead a tar archive created by 'git archive' from the standard input\nand extract the commit ID stored in it.  It reads only the first\n1024 bytes of input, thus its runtime is not influenced by the size\nof the tar archive very much.\n\nIf no commit ID is found, 'git get-tar-commit-id' quietly exists with a\nreturn code of 1.  This can happen if the archive had not been created\nusing 'git archive' or if the first parameter of 'git archive' had been\na tree ID instead of a commit ID or tag.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 712,
            "end_index": 721,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-grep.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-grep - Print lines matching a pattern\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 78,
            "end_index": 97,
            "value": "[verse]\n'git grep' [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n\t   [-v | --invert-match] [-h|-H] [--full-name]\n\t   [-E | --extended-regexp] [-G | --basic-regexp]\n\t   [-P | --perl-regexp]\n\t   [-F | --fixed-strings] [-n | --line-number] [--column]\n\t   [-l | --files-with-matches] [-L | --files-without-match]\n\t   [(-O | --open-files-in-pager) [<pager>]]\n\t   [-z | --null]\n\t   [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]\n\t   [--max-depth <depth>] [--[no-]recursive]\n\t   [--color[=<when>] | --no-color]\n\t   [--break] [--heading] [-p | --show-function]\n\t   [-A <post-context>] [-B <pre-context>] [-C <context>]\n\t   [-W | --function-context]\n\t   [--threads <num>]\n\t   [-f <file>] [-e] <pattern>\n\t   [--and|--or|--not|(|)|-e <pattern>...]\n\t   [--recurse-submodules] [--parent-basename <basename>]\n\t   [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>...]\n\t   [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 1050,
            "end_index": 1075,
            "value": "Look for specified patterns in the tracked files in the work tree, blobs\nregistered in the index file, or blobs in given tree objects.  Patterns\nare lists of one or more search expressions separated by newline\ncharacters.  An empty string as search expression matches all lines.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 1355,
            "end_index": 1384,
            "value": "\ngrep.lineNumber::\n\tIf set to true, enable `-n` option by default.\n\ngrep.column::\n\tIf set to true, enable the `--column` option by default.\n\ngrep.patternType::\n\tSet the default matching behavior. Using a value of 'basic', 'extended',\n\t'fixed', or 'perl' will enable the `--basic-regexp`, `--extended-regexp`,\n\t`--fixed-strings`, or `--perl-regexp` option accordingly, while the\n\tvalue 'default' will return to the default matching behavior.\n\ngrep.extendedRegexp::\n\tIf set to true, enable `--extended-regexp` option by default. This\n\toption is ignored when the `grep.patternType` option is set to a value\n\tother than 'default'.\n\ngrep.threads::\n\tNumber of grep worker threads to use. If unset (or set to 0), Git will\n\tuse as many threads as the number of logical cores available.\n\ngrep.fullName::\n\tIf set to true, enable `--full-name` option by default.\n\ngrep.fallbackToNoIndex::\n\tIf set to true, fall back to git grep --no-index if git grep\n\tis executed outside of a git repository.  Defaults to false.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2387,
            "end_index": 2404,
            "value": "\n--cached::\n\tInstead of searching tracked files in the working tree, search\n\tblobs registered in the index file.\n\n--no-index::\n\tSearch files in the current directory that is not managed by Git.\n\n--untracked::\n\tIn addition to searching in the tracked files in the working\n\ttree, search also in untracked files.\n\n--no-exclude-standard::\n\tAlso search in ignored files by not honoring the `.gitignore`\n\tmechanism. Only useful with `--untracked`.\n\n--exclude-standard::\n\tDo not pay attention to ignored files specified via the `.gitignore`\n\tmechanism.  Only useful when searching files in the current directory\n\twith `--no-index`.\n\n--recurse-submodules::\n\tRecursively search in each submodule that is active and\n\tchecked out in the repository.  When used in combination with the\n\t<tree> option the prefix of all submodule output will be the name of\n\tthe parent project's <tree> object. This option has no effect\n\tif `--no-index` is given.\n\n-a::\n--text::\n\tProcess binary files as if they were text.\n\n--textconv::\n\tHonor textconv filter settings.\n\n--no-textconv::\n\tDo not honor textconv filter settings.\n\tThis is the default.\n\n-i::\n--ignore-case::\n\tIgnore case differences between the patterns and the\n\tfiles.\n\n-I::\n\tDon't match the pattern in binary files.\n\n--max-depth <depth>::\n\tFor each <pathspec> given on command line, descend at most <depth>\n\tlevels of directories. A value of -1 means no limit.\n\tThis option is ignored if <pathspec> contains active wildcards.\n\tIn other words if \"a*\" matches a directory named \"a*\",\n\t\"*\" is matched literally so --max-depth is still effective.\n\n-r::\n--recursive::\n\tSame as `--max-depth=-1`; this is the default.\n\n--no-recursive::\n\tSame as `--max-depth=0`.\n\n-w::\n--word-regexp::\n\tMatch the pattern only at word boundary (either begin at the\n\tbeginning of a line, or preceded by a non-word character; end at\n\tthe end of a line or followed by a non-word character).\n\n-v::\n--invert-match::\n\tSelect non-matching lines.\n\n-h::\n-H::\n\tBy default, the command shows the filename for each\n\tmatch.  `-h` option is used to suppress this output.\n\t`-H` is there for completeness and does not do anything\n\texcept it overrides `-h` given earlier on the command\n\tline.\n\n--full-name::\n\tWhen run from a subdirectory, the command usually\n\toutputs paths relative to the current directory.  This\n\toption forces paths to be output relative to the project\n\ttop directory.\n\n-E::\n--extended-regexp::\n-G::\n--basic-regexp::\n\tUse POSIX extended/basic regexp for patterns.  Default\n\tis to use basic regexp.\n\n-P::\n--perl-regexp::\n\tUse Perl-compatible regular expressions for patterns.\n+\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn't compiled with support for them\nproviding this option will cause it to die.\n\n-F::\n--fixed-strings::\n\tUse fixed strings for patterns (don't interpret pattern\n\tas a regex).\n\n-n::\n--line-number::\n\tPrefix the line number to matching lines.\n\n--column::\n\tPrefix the 1-indexed byte-offset of the first match from the start of the\n\tmatching line.\n\n-l::\n--files-with-matches::\n--name-only::\n-L::\n--files-without-match::\n\tInstead of showing every matched line, show only the\n\tnames of files that contain (or do not contain) matches.\n\tFor better compatibility with 'git diff', `--name-only` is a\n\tsynonym for `--files-with-matches`.\n\n-O[<pager>]::\n--open-files-in-pager[=<pager>]::\n\tOpen the matching files in the pager (not the output of 'grep').\n\tIf the pager happens to be \"less\" or \"vi\", and the user\n\tspecified only one pattern, the first file is positioned at\n\tthe first match automatically. The `pager` argument is\n\toptional; if specified, it must be stuck to the option\n\twithout a space. If `pager` is unspecified, the default pager\n\twill be used (see `core.pager` in linkgit:git-config[1]).\n\n-z::\n--null::\n\tUse \\0 as the delimiter for pathnames in the output, and print\n\tthem verbatim. Without this option, pathnames with \"unusual\"\n\tcharacters are quoted as explained for the configuration\n\tvariable core.quotePath (see linkgit:git-config[1]).\n\n-o::\n--only-matching::\n\tPrint only the matched (non-empty) parts of a matching line, with each such\n\tpart on a separate output line.\n\n-c::\n--count::\n\tInstead of showing every matched line, show the number of\n\tlines that match.\n\n--color[=<when>]::\n\tShow colored matches.\n\tThe value must be always (the default), never, or auto.\n\n--no-color::\n\tTurn off match highlighting, even when the configuration file\n\tgives the default to color output.\n\tSame as `--color=never`.\n\n--break::\n\tPrint an empty line between matches from different files.\n\n--heading::\n\tShow the filename above the matches in that file instead of\n\tat the start of each shown line.\n\n-p::\n--show-function::\n\tShow the preceding line that contains the function name of\n\tthe match, unless the matching line is a function name itself.\n\tThe name is determined in the same way as `git diff` works out\n\tpatch hunk headers (see 'Defining a custom hunk-header' in\n\tlinkgit:gitattributes[5]).\n\n-<num>::\n-C <num>::\n--context <num>::\n\tShow <num> leading and trailing lines, and place a line\n\tcontaining `--` between contiguous groups of matches.\n\n-A <num>::\n--after-context <num>::\n\tShow <num> trailing lines, and place a line containing\n\t`--` between contiguous groups of matches.\n\n-B <num>::\n--before-context <num>::\n\tShow <num> leading lines, and place a line containing\n\t`--` between contiguous groups of matches.\n\n-W::\n--function-context::\n\tShow the surrounding text from the previous line containing a\n\tfunction name up to the one before the next function name,\n\teffectively showing the whole function in which the match was\n\tfound. The function names are determined in the same way as\n\t`git diff` works out patch hunk headers (see 'Defining a\n\tcustom hunk-header' in linkgit:gitattributes[5]).\n\n--threads <num>::\n\tNumber of grep worker threads to use.\n\tSee `grep.threads` in 'CONFIGURATION' for more information.\n\n-f <file>::\n\tRead patterns from <file>, one per line.\n+\nPassing the pattern via <file> allows for providing a search pattern\ncontaining a \\0.\n+\nNot all pattern types support patterns containing \\0. Git will error\nout if a given pattern type can't support such a pattern. The\n`--perl-regexp` pattern type when compiled against the PCRE v2 backend\nhas the widest support for these types of patterns.\n+\nIn versions of Git before 2.23.0 patterns containing \\0 would be\nsilently considered fixed. This was never documented, there were also\nodd and undocumented interactions between e.g. non-ASCII patterns\ncontaining \\0 and `--ignore-case`.\n+\nIn future versions we may learn to support patterns containing \\0 for\nmore search backends, until then we'll die when the pattern type in\nquestion doesn't support them.\n\n-e::\n\tThe next parameter is the pattern. This option has to be\n\tused for patterns starting with `-` and should be used in\n\tscripts passing user input to grep.  Multiple patterns are\n\tcombined by 'or'.\n\n--and::\n--or::\n--not::\n( ... )::\n\tSpecify how multiple patterns are combined using Boolean\n\texpressions.  `--or` is the default operator.  `--and` has\n\thigher precedence than `--or`.  `-e` has to be used for all\n\tpatterns.\n\n--all-match::\n\tWhen giving multiple pattern expressions combined with `--or`,\n\tthis flag is specified to limit the match to files that\n\thave lines to match all of them.\n\n-q::\n--quiet::\n\tDo not output matched lines; instead, exit with status 0 when\n\tthere is a match and with non-zero status when there isn't.\n\n<tree>...::\n\tInstead of searching tracked files in the working tree, search\n\tblobs in the given trees.\n\n\\--::\n\tSignals the end of options; the rest of the parameters\n\tare <pathspec> limiters.\n\n<pathspec>...::\n\tIf given, limit the search to paths matching at least one pattern.\n\tBoth leading paths match and glob(7) patterns are supported.\n+\nFor more details about the <pathspec> syntax, see the 'pathspec' entry\nin linkgit:gitglossary[7].\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 10287,
            "end_index": 10306,
            "value": "\n`git grep 'time_t' -- '*.[ch]'`::\n\tLooks for `time_t` in all tracked .c and .h files in the working\n\tdirectory and its subdirectories.\n\n`git grep -e '#define' --and \\( -e MAX_PATH -e PATH_MAX \\)`::\n\tLooks for a line that has `#define` and either `MAX_PATH` or\n\t`PATH_MAX`.\n\n`git grep --all-match -e NODE -e Unexpected`::\n\tLooks for a line that has `NODE` or `Unexpected` in\n\tfiles that have lines that match both.\n\n`git grep solution -- :^Documentation`::\n\tLooks for `solution`, excluding files in `Documentation`.\n\nNOTES ON THREADS\n----------------\n\nThe `--threads` option (and the grep.threads configuration) will be ignored when\n`--open-files-in-pager` is used, forcing a single-threaded execution.\n\nWhen grepping the object store (with `--cached` or giving tree objects), running\nwith multiple threads might perform slower than single threaded if `--textconv`\nis given and there're too many text conversions. So if you experience low\nperformance in this case, it might be desirable to use `--threads=1`.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 11315,
            "end_index": 11324,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-gui.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-gui - A portable graphical interface to Git\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 81,
            "end_index": 100,
            "value": "[verse]\n'git gui' [<command>] [arguments]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 142,
            "end_index": 167,
            "value": "A Tcl/Tk based graphical user interface to Git.  'git gui' focuses\non allowing users to make changes to their repository by making\nnew commits, amending existing ones, creating branches, performing\nlocal merges, and fetching/pushing to remote repositories.\n\nUnlike 'gitk', 'git gui' focuses on commit generation\nand single file annotation and does not show project history.\nIt does however supply menu actions to start a 'gitk' session from\nwithin 'git gui'.\n\n'git gui' is known to work on all popular UNIX systems, Mac OS X,\nand Windows (under both Cygwin and MSYS).  To the extent possible\nOS specific user interface guidelines are followed, making 'git gui'\na fairly native interface for users.\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 865,
            "end_index": 884,
            "value": "blame::\n\tStart a blame viewer on the specified file on the given\n\tversion (or working directory if not specified).\n\nbrowser::\n\tStart a tree browser showing all files in the specified\n\tcommit.  Files selected through the\n\tbrowser are opened in the blame viewer.\n\ncitool::\n\tStart 'git gui' and arrange to make exactly one commit before\n\texiting and returning to the shell.  The interface is limited\n\tto only commit actions, slightly reducing the application's\n\tstartup time and simplifying the menubar.\n\nversion::\n\tDisplay the currently running version of 'git gui'.\n\n"
        },
        "Examples": {
            "name": "Examples",
            "start_index": 1450,
            "end_index": 1469,
            "value": "`git gui blame Makefile`::\n\n\tShow the contents of the file 'Makefile' in the current\n\tworking directory, and provide annotations for both the\n\toriginal author of each line, and who moved the line to its\n\tcurrent location.  The uncommitted file is annotated, and\n\tuncommitted changes (if any) are explicitly attributed to\n\t'Not Yet Committed'.\n\n`git gui blame v0.99.8 Makefile`::\n\n\tShow the contents of 'Makefile' in revision 'v0.99.8'\n\tand provide annotations for each line.  Unlike the above\n\texample the file is read from the object database and not\n\tthe working directory.\n\n`git gui blame --line=100 Makefile`::\n\n\tLoads annotations as described above and automatically\n\tscrolls the view to center on line '100'.\n\n`git gui citool`::\n\n\tMake one commit and return to the shell when it is complete.\n\tThis command returns a non-zero exit code if the window was\n\tclosed in any way other than by making a commit.\n\n`git gui citool --amend`::\n\n\tAutomatically enter the 'Amend Last Commit' mode of\n\tthe interface.\n\n`git gui citool --nocommit`::\n\n\tBehave as normal citool, but instead of making a commit\n\tsimply terminate with a zero exit code. It still checks\n\tthat the index does not contain any unmerged entries, so\n\tyou can use it as a GUI version of linkgit:git-mergetool[1]\n\n`git citool`::\n\n\tSame as `git gui citool` (above).\n\n`git gui browser maint`::\n\n\tShow a browser for the tree of the 'maint' branch.  Files\n\tselected in the browser can be viewed with the internal\n\tblame viewer.\n\nSEE ALSO\n--------\nlinkgit:gitk[1]::\n\tThe Git repository browser.  Shows branches, commit history\n\tand file differences.  gitk is the utility started by\n\t'git gui''s Repository Visualize actions.\n"
        },
        "Other": {
            "name": "Other",
            "start_index": 3148,
            "end_index": 3161,
            "value": "'git gui' is actually maintained as an independent project, but stable\nversions are distributed as part of the Git suite for the convenience\nof end users.\n\nThe official repository of the 'git gui' project can be found at:\n\n  https://github.com/prati0100/git-gui.git/\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3428,
            "end_index": 3437,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-hash-object.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-hash-object - Compute object ID and optionally creates a blob from a file\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 128,
            "end_index": 147,
            "value": "[verse]\n'git hash-object' [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>...\n'git hash-object' [-t <type>] [-w] --stdin-paths [--no-filters]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 322,
            "end_index": 347,
            "value": "Computes the object ID value for an object with specified type\nwith the contents of the named file (which can be outside of the\nwork tree), and optionally writes the resulting object into the\nobject database.  Reports its object ID to its standard output.\nWhen <type> is not specified, it defaults to \"blob\".\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 656,
            "end_index": 673,
            "value": "\n-t <type>::\n\tSpecify the type (default: \"blob\").\n\n-w::\n\tActually write the object into the object database.\n\n--stdin::\n\tRead the object from standard input instead of from a file.\n\n--stdin-paths::\n\tRead file names from the standard input, one per line, instead\n\tof from the command-line.\n\n--path::\n\tHash object as it were located at the given path. The location of\n\tfile does not directly influence on the hash value, but path is\n\tused to determine what Git filters should be applied to the object\n\tbefore it can be placed to the object database, and, as result of\n\tapplying filters, the actual blob put into the object database may\n\tdiffer from the given file. This option is mainly useful for hashing\n\ttemporary files located outside of the working directory or files\n\tread from stdin.\n\n--no-filters::\n\tHash the contents as is, ignoring any input filter that would\n\thave been chosen by the attributes mechanism, including the end-of-line\n\tconversion. If the file is read from standard input then this\n\tis always implied, unless the `--path` option is given.\n\n--literally::\n\tAllow `--stdin` to hash any garbage into a loose object which might not\n\totherwise pass standard object parsing or git-fsck checks. Useful for\n\tstress-testing Git itself or reproducing characteristics of corrupt or\n\tbogus objects encountered in the wild.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2005,
            "end_index": 2014,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-help.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-help - Display help information about Git\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 81,
            "end_index": 100,
            "value": "[verse]\n'git help' [-a|--all [--[no-]verbose]] [-g|--guides]\n\t   [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 211,
            "end_index": 236,
            "value": "\nWith no options and no COMMAND or GUIDE given, the synopsis of the 'git'\ncommand and a list of the most commonly used Git commands are printed\non the standard output.\n\nIf the option `--all` or `-a` is given, all available commands are\nprinted on the standard output.\n\nIf the option `--guides` or `-g` is given, a list of the\nGit concept guides is also printed on the standard output.\n\nIf a command, or a guide, is given, a manual page for that command or\nguide is brought up. The 'man' program is used by default for this\npurpose, but this can be overridden by other options or configuration\nvariables.\n\nIf an alias is given, git shows the definition of the alias on\nstandard output. To get the manual page for the aliased command, use\n`git COMMAND --help`.\n\nNote that `git --help ...` is identical to `git help ...` because the\nformer is internally converted into the latter.\n\nTo display the linkgit:git[1] man page, use `git help git`.\n\nThis page can be displayed with 'git help help' or `git help --help`\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1245,
            "end_index": 1262,
            "value": "\n-a::\n--all::\n\tPrints all the available commands on the standard output. This\n\toption overrides any given command or guide name.\n\n--verbose::\n\tWhen used with `--all` print description for all recognized\n\tcommands. This is the default.\n\n-c::\n--config::\n\tList all available configuration variables. This is a short\n\tsummary of the list in linkgit:git-config[1].\n\n-g::\n--guides::\n\tPrints a list of the Git concept guides on the standard output. This\n\toption overrides any given command or guide name.\n\n-i::\n--info::\n\tDisplay manual page for the command in the 'info' format. The\n\t'info' program will be used for that purpose.\n\n-m::\n--man::\n\tDisplay manual page for the command in the 'man' format. This\n\toption may be used to override a value set in the\n\t`help.format` configuration variable.\n+\nBy default the 'man' program will be used to display the manual page,\nbut the `man.viewer` configuration variable may be used to choose\nother display programs (see below).\n\n-w::\n--web::\n\tDisplay manual page for the command in the 'web' (HTML)\n\tformat. A web browser will be used for that purpose.\n+\nThe web browser can be specified using the configuration variable\n`help.browser`, or `web.browser` if the former is not set. If none of\nthese config variables is set, the 'git web{litdd}browse' helper script\n(called by 'git help') will pick a suitable default. See\nlinkgit:git-web{litdd}browse[1] for more information about this.\n\nCONFIGURATION VARIABLES\n-----------------------\n\nhelp.format\n~~~~~~~~~~~\n\nIf no command-line option is passed, the `help.format` configuration\nvariable will be checked. The following values are supported for this\nvariable; they make 'git help' behave as their corresponding command-\nline option:\n\n* \"man\" corresponds to '-m|--man',\n* \"info\" corresponds to '-i|--info',\n* \"web\" or \"html\" correspond to '-w|--web'.\n\nhelp.browser, web.browser and browser.<tool>.path\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `help.browser`, `web.browser` and `browser.<tool>.path` will also\nbe checked if the 'web' format is chosen (either by command-line\noption or configuration variable). See '-w|--web' in the OPTIONS\nsection above and linkgit:git-web{litdd}browse[1].\n\nman.viewer\n~~~~~~~~~~\n\nThe `man.viewer` configuration variable will be checked if the 'man'\nformat is chosen. The following values are currently supported:\n\n* \"man\": use the 'man' program as usual,\n* \"woman\": use 'emacsclient' to launch the \"woman\" mode in emacs\n  (this only works starting with emacsclient versions 22),\n* \"konqueror\": use 'kfmclient' to open the man page in a new konqueror\n  tab (see 'Note about konqueror' below).\n\nValues for other tools can be used if there is a corresponding\n`man.<tool>.cmd` configuration entry (see below).\n\nMultiple values may be given to the `man.viewer` configuration\nvariable. Their corresponding programs will be tried in the order\nlisted in the configuration file.\n\nFor example, this configuration:\n\n------------------------------------------------\n\t[man]\n\t\tviewer = konqueror\n\t\tviewer = woman\n------------------------------------------------\n\nwill try to use konqueror first. But this may fail (for example, if\nDISPLAY is not set) and in that case emacs' woman mode will be tried.\n\nIf everything fails, or if no viewer is configured, the viewer specified\nin the `GIT_MAN_VIEWER` environment variable will be tried.  If that\nfails too, the 'man' program will be tried anyway.\n\nman.<tool>.path\n~~~~~~~~~~~~~~~\n\nYou can explicitly provide a full path to your preferred man viewer by\nsetting the configuration variable `man.<tool>.path`. For example, you\ncan configure the absolute path to konqueror by setting\n'man.konqueror.path'. Otherwise, 'git help' assumes the tool is\navailable in PATH.\n\nman.<tool>.cmd\n~~~~~~~~~~~~~~\n\nWhen the man viewer, specified by the `man.viewer` configuration\nvariables, is not among the supported ones, then the corresponding\n`man.<tool>.cmd` configuration variable will be looked up. If this\nvariable exists then the specified tool will be treated as a custom\ncommand and a shell eval will be used to run the command with the man\npage passed as arguments.\n\nNote about konqueror\n~~~~~~~~~~~~~~~~~~~~\n\nWhen 'konqueror' is specified in the `man.viewer` configuration\nvariable, we launch 'kfmclient' to try to open the man page on an\nalready opened konqueror in a new tab if possible.\n\nFor consistency, we also try such a trick if 'man.konqueror.path' is\nset to something like `A_PATH_TO/konqueror`. That means we will try to\nlaunch `A_PATH_TO/kfmclient` instead.\n\nIf you really want to use 'konqueror', then you can use something like\nthe following:\n\n------------------------------------------------\n\t[man]\n\t\tviewer = konq\n\n\t[man \"konq\"]\n\t\tcmd = A_PATH_TO/konqueror\n------------------------------------------------\n\nNote about git config --global\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNote that all these configuration variables should probably be set\nusing the `--global` flag, for example like this:\n\n------------------------------------------------\n$ git config --global help.format web\n$ git config --global web.browser firefox\n------------------------------------------------\n\nas they are probably more user specific than repository specific.\nSee linkgit:git-config[1] for more information about this.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6526,
            "end_index": 6535,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-http-backend.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-http-backend - Server side implementation of Git over HTTP\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 114,
            "end_index": 133,
            "value": "[verse]\n'git http-backend'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 160,
            "end_index": 185,
            "value": "A simple CGI program to serve the contents of a Git repository to Git\nclients accessing the repository over http:// and https:// protocols.\nThe program supports clients fetching using both the smart HTTP protocol\nand the backwards-compatible dumb HTTP protocol, as well as clients\npushing using the smart HTTP protocol.\n\nIt verifies that the directory has the magic file\n\"git-daemon-export-ok\", and it will refuse to export any Git directory\nthat hasn't explicitly been marked for export this way (unless the\n`GIT_HTTP_EXPORT_ALL` environmental variable is set).\n\nBy default, only the `upload-pack` service is enabled, which serves\n'git fetch-pack' and 'git ls-remote' clients, which are invoked from\n'git fetch', 'git pull', and 'git clone'.  If the client is authenticated,\nthe `receive-pack` service is enabled, which serves 'git send-pack'\nclients, which is invoked from 'git push'.\n"
        },
        "SERVICES": {
            "name": "SERVICES",
            "start_index": 1072,
            "end_index": 1091,
            "value": "These services can be enabled/disabled using the per-repository\nconfiguration file:\n\nhttp.getanyfile::\n\tThis serves Git clients older than version 1.6.6 that are unable to use the\n\tupload pack service.  When enabled, clients are able to read\n\tany file within the repository, including objects that are\n\tno longer reachable from a branch but are still present.\n\tIt is enabled by default, but a repository can disable it\n\tby setting this configuration item to `false`.\n\nhttp.uploadpack::\n\tThis serves 'git fetch-pack' and 'git ls-remote' clients.\n\tIt is enabled by default, but a repository can disable it\n\tby setting this configuration item to `false`.\n\nhttp.receivepack::\n\tThis serves 'git send-pack' clients, allowing push.  It is\n\tdisabled by default for anonymous users, and enabled by\n\tdefault for users authenticated by the web server.  It can be\n\tdisabled by setting this item to `false`, or enabled for all\n\tusers, including anonymous users, by setting it to `true`.\n\nURL TRANSLATION\n---------------\nTo determine the location of the repository on disk, 'git http-backend'\nconcatenates the environment variables PATH_INFO, which is set\nautomatically by the web server, and GIT_PROJECT_ROOT, which must be set\nmanually in the web server configuration.  If GIT_PROJECT_ROOT is not\nset, 'git http-backend' reads PATH_TRANSLATED, which is also set\nautomatically by the web server.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2474,
            "end_index": 2493,
            "value": "All of the following examples map `http://$hostname/git/foo/bar.git`\nto `/var/www/git/foo/bar.git`.\n\nApache 2.x::\n\tEnsure mod_cgi, mod_alias, and mod_env are enabled, set\n\tGIT_PROJECT_ROOT (or DocumentRoot) appropriately, and\n\tcreate a ScriptAlias to the CGI:\n+\n----------------------------------------------------------------\nSetEnv GIT_PROJECT_ROOT /var/www/git\nSetEnv GIT_HTTP_EXPORT_ALL\nScriptAlias /git/ /usr/libexec/git-core/git-http-backend/\n----------------------------------------------------------------\n+\nTo enable anonymous read access but authenticated write access,\nrequire authorization for both the initial ref advertisement (which we\ndetect as a push via the service parameter in the query string), and the\nreceive-pack invocation itself:\n+\n----------------------------------------------------------------\nRewriteCond %{QUERY_STRING} service=git-receive-pack [OR]\nRewriteCond %{REQUEST_URI} /git-receive-pack$\nRewriteRule ^/git/ - [E=AUTHREQUIRED:yes]\n\n<LocationMatch \"^/git/\">\n\tOrder Deny,Allow\n\tDeny from env=AUTHREQUIRED\n\n\tAuthType Basic\n\tAuthName \"Git Access\"\n\tRequire group committers\n\tSatisfy Any\n\t...\n</LocationMatch>\n----------------------------------------------------------------\n+\nIf you do not have `mod_rewrite` available to match against the query\nstring, it is sufficient to just protect `git-receive-pack` itself,\nlike:\n+\n----------------------------------------------------------------\n<LocationMatch \"^/git/.*/git-receive-pack$\">\n\tAuthType Basic\n\tAuthName \"Git Access\"\n\tRequire group committers\n\t...\n</LocationMatch>\n----------------------------------------------------------------\n+\nIn this mode, the server will not request authentication until the\nclient actually starts the object negotiation phase of the push, rather\nthan during the initial contact.  For this reason, you must also enable\nthe `http.receivepack` config option in any repositories that should\naccept a push. The default behavior, if `http.receivepack` is not set,\nis to reject any pushes by unauthenticated users; the initial request\nwill therefore report `403 Forbidden` to the client, without even giving\nan opportunity for authentication.\n+\nTo require authentication for both reads and writes, use a Location\ndirective around the repository, or one of its parent directories:\n+\n----------------------------------------------------------------\n<Location /git/private>\n\tAuthType Basic\n\tAuthName \"Private Git Access\"\n\tRequire group committers\n\t...\n</Location>\n----------------------------------------------------------------\n+\nTo serve gitweb at the same url, use a ScriptAliasMatch to only\nthose URLs that 'git http-backend' can handle, and forward the\nrest to gitweb:\n+\n----------------------------------------------------------------\nScriptAliasMatch \\\n\t\"(?x)^/git/(.*/(HEAD | \\\n\t\t\tinfo/refs | \\\n\t\t\tobjects/(info/[^/]+ | \\\n\t\t\t\t [0-9a-f]{2}/[0-9a-f]{38} | \\\n\t\t\t\t pack/pack-[0-9a-f]{40}\\.(pack|idx)) | \\\n\t\t\tgit-(upload|receive)-pack))$\" \\\n\t/usr/libexec/git-core/git-http-backend/$1\n\nScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/\n----------------------------------------------------------------\n+\nTo serve multiple repositories from different linkgit:gitnamespaces[7] in a\nsingle repository:\n+\n----------------------------------------------------------------\nSetEnvIf Request_URI \"^/git/([^/]*)\" GIT_NAMESPACE=$1\nScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1\n----------------------------------------------------------------\n\nAccelerated static Apache 2.x::\n\tSimilar to the above, but Apache can be used to return static\n\tfiles that are stored on disk.  On many systems this may\n\tbe more efficient as Apache can ask the kernel to copy the\n\tfile contents from the file system directly to the network:\n+\n----------------------------------------------------------------\nSetEnv GIT_PROJECT_ROOT /var/www/git\n\nAliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1\nAliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1\nScriptAlias /git/ /usr/libexec/git-core/git-http-backend/\n----------------------------------------------------------------\n+\nThis can be combined with the gitweb configuration:\n+\n----------------------------------------------------------------\nSetEnv GIT_PROJECT_ROOT /var/www/git\n\nAliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1\nAliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1\nScriptAliasMatch \\\n\t\"(?x)^/git/(.*/(HEAD | \\\n\t\t\tinfo/refs | \\\n\t\t\tobjects/info/[^/]+ | \\\n\t\t\tgit-(upload|receive)-pack))$\" \\\n\t/usr/libexec/git-core/git-http-backend/$1\nScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/\n----------------------------------------------------------------\n\nLighttpd::\n\tEnsure that `mod_cgi`, `mod_alias`, `mod_auth`, `mod_setenv` are\n\tloaded, then set `GIT_PROJECT_ROOT` appropriately and redirect\n\tall requests to the CGI:\n+\n----------------------------------------------------------------\nalias.url += ( \"/git\" => \"/usr/lib/git-core/git-http-backend\" )\n$HTTP[\"url\"] =~ \"^/git\" {\n\tcgi.assign = (\"\" => \"\")\n\tsetenv.add-environment = (\n\t\t\"GIT_PROJECT_ROOT\" => \"/var/www/git\",\n\t\t\"GIT_HTTP_EXPORT_ALL\" => \"\"\n\t)\n}\n----------------------------------------------------------------\n+\nTo enable anonymous read access but authenticated write access:\n+\n----------------------------------------------------------------\n$HTTP[\"querystring\"] =~ \"service=git-receive-pack\" {\n\tinclude \"git-auth.conf\"\n}\n$HTTP[\"url\"] =~ \"^/git/.*/git-receive-pack$\" {\n\tinclude \"git-auth.conf\"\n}\n----------------------------------------------------------------\n+\nwhere `git-auth.conf` looks something like:\n+\n----------------------------------------------------------------\nauth.require = (\n\t\"/\" => (\n\t\t\"method\" => \"basic\",\n\t\t\"realm\" => \"Git Access\",\n\t\t\"require\" => \"valid-user\"\n\t       )\n)\n# ...and set up auth.backend here\n----------------------------------------------------------------\n+\nTo require authentication for both reads and writes:\n+\n----------------------------------------------------------------\n$HTTP[\"url\"] =~ \"^/git/private\" {\n\tinclude \"git-auth.conf\"\n}\n----------------------------------------------------------------\n\n"
        },
        "ENVIRONMENT": {
            "name": "ENVIRONMENT",
            "start_index": 8676,
            "end_index": 8701,
            "value": "'git http-backend' relies upon the `CGI` environment variables set\nby the invoking web server, including:\n\n* PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)\n* REMOTE_USER\n* REMOTE_ADDR\n* CONTENT_TYPE\n* QUERY_STRING\n* REQUEST_METHOD\n\nThe `GIT_HTTP_EXPORT_ALL` environmental variable may be passed to\n'git-http-backend' to bypass the check for the \"git-daemon-export-ok\"\nfile in each repository before allowing export of that repository.\n\nThe `GIT_HTTP_MAX_REQUEST_BUFFER` environment variable (or the\n`http.maxRequestBuffer` config variable) may be set to change the\nlargest ref negotiation request that git will handle during a fetch; any\nfetch requiring a larger buffer will not succeed.  This value should not\nnormally need to be changed, but may be helpful if you are fetching from\na repository with an extremely large number of refs.  The value can be\nspecified with a unit (e.g., `100M` for 100 megabytes). The default is\n10 megabytes.\n\nThe backend process sets GIT_COMMITTER_NAME to '$REMOTE_USER' and\nGIT_COMMITTER_EMAIL to '$\\{REMOTE_USER}@http.$\\{REMOTE_ADDR\\}',\nensuring that any reflogs created by 'git-receive-pack' contain some\nidentifying information of the remote user who performed the push.\n\nAll `CGI` environment variables are available to each of the hooks\ninvoked by the 'git-receive-pack'.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 10030,
            "end_index": 10039,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-http-fetch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-http-fetch - Download from a remote Git repository via HTTP\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 112,
            "end_index": 131,
            "value": "[verse]\n'git http-fetch' [-c] [-t] [-a] [-d] [-v] [-w filename] [--recover] [--stdin | --packfile=<hash> | <commit>] <url>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 254,
            "end_index": 279,
            "value": "Downloads a remote Git repository via HTTP.\n\nThis command always gets all objects. Historically, there were three options\n`-a`, `-c` and `-t` for choosing which objects to download. They are now\nsilently ignored.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 492,
            "end_index": 509,
            "value": "\ncommit-id::\n        Either the hash or the filename under [URL]/refs/ to\n        pull.\n\n-a, -c, -t::\n\tThese options are ignored for historical reasons.\n-v::\n\tReport what is downloaded.\n\n-w <filename>::\n        Writes the commit-id into the filename under $GIT_DIR/refs/<filename> on\n        the local end after the transfer is complete.\n\n--stdin::\n\tInstead of a commit id on the command line (which is not expected in this\n\tcase), 'git http-fetch' expects lines on stdin in the format\n\n\t\t<commit-id>['\\t'<filename-as-in--w>]\n\n--packfile=<hash>::\n\tFor internal use only. Instead of a commit id on the command\n\tline (which is not expected in\n\tthis case), 'git http-fetch' fetches the packfile directly at the given\n\tURL and uses index-pack to generate corresponding .idx and .keep files.\n\tThe hash is used to determine the name of the temporary file and is\n\tarbitrary. The output of index-pack is printed to stdout. Requires\n\t--index-pack-args.\n\n--index-pack-args=<args>::\n\tFor internal use only. The command to run on the contents of the\n\tdownloaded pack. Arguments are URL-encoded separated by spaces.\n\n--recover::\n\tVerify that everything reachable from target is fetched.  Used after\n\tan earlier fetch is interrupted.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1728,
            "end_index": 1737,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-http-push.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-http-push - Push objects over HTTP/DAV to another repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 111,
            "end_index": 130,
            "value": "[verse]\n'git http-push' [--all] [--dry-run] [--force] [--verbose] <url> <ref> [<ref>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 219,
            "end_index": 244,
            "value": "Sends missing objects to remote repository, and updates the\nremote branch.\n\n*NOTE*: This command is temporarily disabled if your libcurl\nis older than 7.16, as the combination has been reported\nnot to work and sometimes corrupts repository.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 485,
            "end_index": 502,
            "value": "\n--all::\n\tDo not assume that the remote repository is complete in its\n\tcurrent state, and verify all objects in the entire local\n\tref's history exist in the remote repository.\n\n--force::\n\tUsually, the command refuses to update a remote ref that\n\tis not an ancestor of the local ref used to overwrite it.\n\tThis flag disables the check.  What this means is that\n\tthe remote repository can lose commits; use it with\n\tcare.\n\n--dry-run::\n\tDo everything except actually send the updates.\n\n--verbose::\n\tReport the list of objects being walked locally and the\n\tlist of objects successfully sent to the remote repository.\n\n-d::\n-D::\n\tRemove <ref> from remote repository.  The specified branch\n\tcannot be the remote HEAD.  If -d is specified the following\n\tother conditions must also be met:\n\n\t- Remote HEAD must resolve to an object that exists locally\n\t- Specified branch resolves to an object that exists locally\n\t- Specified branch is an ancestor of the remote HEAD\n\n<ref>...::\n\tThe remote refs to update.\n\n\nSPECIFYING THE REFS\n-------------------\n\nA '<ref>' specification can be either a single pattern, or a pair\nof such patterns separated by a colon \":\" (this means that a ref name\ncannot have a colon in it).  A single pattern '<name>' is just a\nshorthand for '<name>:<name>'.\n\nEach pattern pair consists of the source side (before the colon)\nand the destination side (after the colon).  The ref to be\npushed is determined by finding a match that matches the source\nside, and where it is pushed is determined by using the\ndestination side.\n\n - It is an error if <src> does not match exactly one of the\n   local refs.\n\n - If <dst> does not match any remote ref, either\n\n   * it has to start with \"refs/\"; <dst> is used as the\n     destination literally in this case.\n\n   * <src> == <dst> and the ref that matched the <src> must not\n     exist in the set of remote refs; the ref matched <src>\n     locally is used as the name of the destination.\n\nWithout `--force`, the <src> ref is stored at the remote only if\n<dst> does not exist, or <dst> is a proper subset (i.e. an\nancestor) of <src>.  This check, known as \"fast-forward check\",\nis performed in order to avoid accidentally overwriting the\nremote ref and lose other peoples' commits from there.\n\nWith `--force`, the fast-forward check is disabled for all refs.\n\nOptionally, a <ref> parameter can be prefixed with a plus '+' sign\nto disable the fast-forward check only on that ref.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2933,
            "end_index": 2942,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-imap-send.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-imap-send - Send a collection of patches from stdin to an IMAP folder\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 120,
            "end_index": 139,
            "value": "[verse]\n'git imap-send' [-v] [-q] [--[no-]curl]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 188,
            "end_index": 213,
            "value": "This command uploads a mailbox generated with 'git format-patch'\ninto an IMAP drafts folder.  This allows patches to be sent as\nother email is when using mail clients that cannot read mailbox\nfiles directly. The command also works with any general mailbox\nin which emails have the fields \"From\", \"Date\", and \"Subject\" in\nthat order.\n\nTypical usage is something like:\n\ngit format-patch --signoff --stdout --attach origin | git imap-send\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 650,
            "end_index": 667,
            "value": "\n-v::\n--verbose::\n\tBe verbose.\n\n-q::\n--quiet::\n\tBe quiet.\n\n--curl::\n\tUse libcurl to communicate with the IMAP server, unless tunneling\n\tinto it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND\n\toption set.\n\n--no-curl::\n\tTalk to the IMAP server using git's own IMAP routines instead of\n\tusing libcurl.  Ignored if Git was built with the NO_OPENSSL option\n\tset.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 1041,
            "end_index": 1070,
            "value": "\nTo use the tool, `imap.folder` and either `imap.tunnel` or `imap.host` must be set\nto appropriate values.\n\ninclude::config/imap.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1205,
            "end_index": 1224,
            "value": "Using tunnel mode:\n\n..........................\n[imap]\n    folder = \"INBOX.Drafts\"\n    tunnel = \"ssh -q -C user@example.com /usr/bin/imapd ./Maildir 2> /dev/null\"\n..........................\n\nUsing direct mode:\n\n.........................\n[imap]\n    folder = \"INBOX.Drafts\"\n    host = imap://imap.example.com\n    user = bob\n    pass = p4ssw0rd\n.........................\n\nUsing direct mode with SSL:\n\n.........................\n[imap]\n    folder = \"INBOX.Drafts\"\n    host = imaps://imap.example.com\n    user = bob\n    pass = p4ssw0rd\n    port = 123\n    ; sslVerify = false\n.........................\n\n\n[NOTE]\nYou may want to use `sslVerify=false`\nwhile troubleshooting, if you suspect that the reason you are\nhaving trouble connecting is because the certificate you use at\nthe private server `example.com` you are trying to set up (or\nhave set up) may not be verified correctly.\n\nUsing Gmail's IMAP interface:\n\n---------\n[imap]\n\tfolder = \"[Gmail]/Drafts\"\n\thost = imaps://imap.gmail.com\n\tuser = user@gmail.com\n\tport = 993\n---------\n\n[NOTE]\nYou might need to instead use: `folder = \"[Google Mail]/Drafts\"` if you get an error\nthat the \"Folder doesn't exist\".\n\n[NOTE]\nIf your Gmail account is set to another language than English, the name of the \"Drafts\"\nfolder will be localized.\n\nOnce the commits are ready to be sent, run the following command:\n\n  $ git format-patch --cover-letter -M --stdout origin/master | git imap-send\n\nJust make sure to disable line wrapping in the email client (Gmail's web\ninterface will wrap lines no matter what, so you need to use a real\nIMAP client).\n"
        },
        "CAUTION": {
            "name": "CAUTION",
            "start_index": 2799,
            "end_index": 2816,
            "value": "It is still your responsibility to make sure that the email message\nsent by your email program meets the standards of your project.\nMany projects do not like patches to be attached.  Some mail\nagents will transform patches (e.g. wrap lines, send them as\nformat=flowed) in ways that make them fail.  You will get angry\nflames ridiculing you if you don't check this.\n\nThunderbird in particular is known to be problematic.  Thunderbird\nusers may wish to visit this web page for more information:\n  http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email\n\nSEE ALSO\n--------\nlinkgit:git-format-patch[1], linkgit:git-send-email[1], mbox(5)\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3475,
            "end_index": 3484,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-index-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-index-pack - Build pack index file for an existing packed archive\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 118,
            "end_index": 137,
            "value": "[verse]\n'git index-pack' [-v] [-o <index-file>] [--[no-]rev-index] <pack-file>\n'git index-pack' --stdin [--fix-thin] [--keep] [-v] [-o <index-file>]\n\t\t  [--[no-]rev-index] [<pack-file>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 324,
            "end_index": 349,
            "value": "Reads a packed archive (.pack) from the specified file, and\nbuilds a pack index file (.idx) for it. Optionally writes a\nreverse-index (.rev) for the specified pack. The packed\narchive together with the pack index can then be placed in\nthe objects/pack/ directory of a Git repository.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 634,
            "end_index": 651,
            "value": "\n-v::\n\tBe verbose about what is going on, including progress status.\n\n-o <index-file>::\n\tWrite the generated pack index into the specified\n\tfile.  Without this option the name of pack index\n\tfile is constructed from the name of packed archive\n\tfile by replacing .pack with .idx (and the program\n\tfails if the name of packed archive does not end\n\twith .pack).\n\n--[no-]rev-index::\n\tWhen this flag is provided, generate a reverse index\n\t(a `.rev` file) corresponding to the given pack. If\n\t`--verify` is given, ensure that the existing\n\treverse index is correct. Takes precedence over\n\t`pack.writeReverseIndex`.\n\n--stdin::\n\tWhen this flag is provided, the pack is read from stdin\n\tinstead and a copy is then written to <pack-file>. If\n\t<pack-file> is not specified, the pack is written to\n\tobjects/pack/ directory of the current Git repository with\n\ta default name determined from the pack content.  If\n\t<pack-file> is not specified consider using --keep to\n\tprevent a race condition between this process and\n\t'git repack'.\n\n--fix-thin::\n\tFix a \"thin\" pack produced by `git pack-objects --thin` (see\n\tlinkgit:git-pack-objects[1] for details) by adding the\n\texcluded objects the deltified objects are based on to the\n\tpack. This option only makes sense in conjunction with --stdin.\n\n--keep::\n\tBefore moving the index into its final destination\n\tcreate an empty .keep file for the associated pack file.\n\tThis option is usually necessary with --stdin to prevent a\n\tsimultaneous 'git repack' process from deleting\n\tthe newly constructed pack and index before refs can be\n\tupdated to use objects contained in the pack.\n\n--keep=<msg>::\n\tLike --keep create a .keep file before moving the index into\n\tits final destination, but rather than creating an empty file\n\tplace '<msg>' followed by an LF into the .keep file.  The '<msg>'\n\tmessage can later be searched for within all .keep files to\n\tlocate any which have outlived their usefulness.\n\n--index-version=<version>[,<offset>]::\n\tThis is intended to be used by the test suite only. It allows\n\tto force the version for the generated pack index, and to force\n\t64-bit index entries on objects located above the given offset.\n\n--strict::\n\tDie, if the pack contains broken objects or links.\n\n--check-self-contained-and-connected::\n\tDie if the pack contains broken links. For internal use only.\n\n--fsck-objects::\n\tFor internal use only.\n+\nDie if the pack contains broken objects. If the pack contains a tree\npointing to a .gitmodules blob that does not exist, prints the hash of\nthat blob (for the caller to check) after the hash that goes into the\nname of the pack/idx file (see \"Notes\").\n\n--threads=<n>::\n\tSpecifies the number of threads to spawn when resolving\n\tdeltas. This requires that index-pack be compiled with\n\tpthreads otherwise this option is ignored with a warning.\n\tThis is meant to reduce packing time on multiprocessor\n\tmachines. The required amount of memory for the delta search\n\twindow is however multiplied by the number of threads.\n\tSpecifying 0 will cause Git to auto-detect the number of CPU's\n\tand use maximum 3 threads.\n\n--max-input-size=<size>::\n\tDie, if the pack is larger than <size>.\n\n--object-format=<hash-algorithm>::\n\tSpecify the given object format (hash algorithm) for the pack.  The valid\n\tvalues are 'sha1' and (if enabled) 'sha256'.  The default is the algorithm for\n\tthe current repository (set by `extensions.objectFormat`), or 'sha1' if no\n\tvalue is set or outside a repository.\n+\nThis option cannot be used with --stdin.\n+\ninclude::object-format-disclaimer.txt[]\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 4189,
            "end_index": 4202,
            "value": "\nOnce the index has been created, the hash that goes into the name of\nthe pack/idx file is printed to stdout. If --stdin was\nalso used then this is prefixed by either \"pack\\t\", or \"keep\\t\" if a\nnew .keep file was successfully created. This is useful to remove a\n.keep file used as a lock to prevent the race with 'git repack'\nmentioned above.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4545,
            "end_index": 4554,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-init-db.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-init-db - Creates an empty Git repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 88,
            "end_index": 107,
            "value": "[verse]\n'git init-db' [-q | --quiet] [--bare] [--template=<template_directory>] [--separate-git-dir <git dir>] [--shared[=<permissions>]]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 246,
            "end_index": 271,
            "value": "\nThis is a synonym for linkgit:git-init[1].  Please refer to the\ndocumentation of that command.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 367,
            "end_index": 376,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-init.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-init - Create an empty Git repository or reinitialize an existing one\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 110,
            "end_index": 129,
            "value": "[verse]\n'git init' [-q | --quiet] [--bare] [--template=<template_directory>]\n\t  [--separate-git-dir <git dir>] [--object-format=<format>]\n\t  [-b <branch-name> | --initial-branch=<branch-name>]\n\t  [--shared[=<permissions>]] [directory]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 365,
            "end_index": 390,
            "value": "\nThis command creates an empty Git repository - basically a `.git`\ndirectory with subdirectories for `objects`, `refs/heads`,\n`refs/tags`, and template files.  An initial branch without any\ncommits will be created (see the `--initial-branch` option below\nfor its name).\n\nIf the `$GIT_DIR` environment variable is set then it specifies a path\nto use instead of `./.git` for the base of the repository.\n\nIf the object storage directory is specified via the\n`$GIT_OBJECT_DIRECTORY` environment variable then the sha1 directories\nare created underneath - otherwise the default `$GIT_DIR/objects`\ndirectory is used.\n\nRunning 'git init' in an existing repository is safe. It will not\noverwrite things that are already there. The primary reason for\nrerunning 'git init' is to pick up newly added templates (or to move\nthe repository to another place if --separate-git-dir is given).\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1266,
            "end_index": 1283,
            "value": "\n-q::\n--quiet::\n\nOnly print error and warning messages; all other output will be suppressed.\n\n--bare::\n\nCreate a bare repository. If `GIT_DIR` environment is not set, it is set to the\ncurrent working directory.\n\n--object-format=<format>::\n\nSpecify the given object format (hash algorithm) for the repository.  The valid\nvalues are 'sha1' and (if enabled) 'sha256'.  'sha1' is the default.\n+\ninclude::object-format-disclaimer.txt[]\n\n--template=<template_directory>::\n\nSpecify the directory from which templates will be used.  (See the \"TEMPLATE\nDIRECTORY\" section below.)\n\n--separate-git-dir=<git dir>::\n\nInstead of initializing the repository as a directory to either `$GIT_DIR` or\n`./.git/`, create a text file there containing the path to the actual\nrepository.  This file acts as filesystem-agnostic Git symbolic link to the\nrepository.\n+\nIf this is reinitialization, the repository will be moved to the specified path.\n\n-b <branch-name>::\n--initial-branch=<branch-name>::\n\nUse the specified name for the initial branch in the newly created\nrepository.  If not specified, fall back to the default name (currently\n`master`, but this is subject to change in the future; the name can be\ncustomized via the `init.defaultBranch` configuration variable).\n\n--shared[=(false|true|umask|group|all|world|everybody|0xxx)]::\n\nSpecify that the Git repository is to be shared amongst several users.  This\nallows users belonging to the same group to push into that\nrepository.  When specified, the config variable \"core.sharedRepository\" is\nset so that files and directories under `$GIT_DIR` are created with the\nrequested permissions.  When not specified, Git will use permissions reported\nby umask(2).\n+\nThe option can have the following values, defaulting to 'group' if no value\nis given:\n+\n--\n'umask' (or 'false')::\n\nUse permissions reported by umask(2). The default, when `--shared` is not\nspecified.\n\n'group' (or 'true')::\n\nMake the repository group-writable, (and g+sx, since the git group may be not\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask(2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is '0022', using 'group' will not remove read\nprivileges from other (non-group) users). See '0xxx' for how to exactly specify\nthe repository permissions.\n\n'all' (or 'world' or 'everybody')::\n\nSame as 'group', but make the repository readable by all users.\n\n'0xxx'::\n\n'0xxx' is an octal number and each file will have mode '0xxx'. '0xxx' will\noverride users' umask(2) value (and not only loosen permissions as 'group' and\n'all' does). '0640' will create a repository which is group-readable, but not\ngroup-writable or accessible to others. '0660' will create a repo that is\nreadable and writable to the current user and group, but inaccessible to others.\n--\n\nBy default, the configuration flag `receive.denyNonFastForwards` is enabled\nin shared repositories, so that you cannot force a non fast-forwarding push\ninto it.\n\nIf you provide a 'directory', the command is run inside it. If this directory\ndoes not exist, it will be created.\n\nTEMPLATE DIRECTORY\n------------------\n\nFiles and directories in the template directory whose name do not start with a\ndot will be copied to the `$GIT_DIR` after it is created.\n\nThe template directory will be one of the following (in order):\n\n - the argument given with the `--template` option;\n\n - the contents of the `$GIT_TEMPLATE_DIR` environment variable;\n\n - the `init.templateDir` configuration variable; or\n\n - the default template directory: `/usr/share/git-core/templates`.\n\nThe default template directory includes some directory structure, suggested\n\"exclude patterns\" (see linkgit:gitignore[5]), and sample hook files.\n\nThe sample hooks are all disabled by default. To enable one of the\nsample hooks rename it by removing its `.sample` suffix.\n\nSee linkgit:githooks[5] for more general info on hook execution.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5222,
            "end_index": 5241,
            "value": "\nStart a new Git repository for an existing code base::\n+\n----------------\n$ cd /path/to/my/codebase\n$ git init      <1>\n$ git add .     <2>\n$ git commit    <3>\n----------------\n+\n<1> Create a /path/to/my/codebase/.git directory.\n<2> Add all existing files to the index.\n<3> Record the pristine state as the first commit in the history.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5578,
            "end_index": 5587,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-instaweb.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-instaweb - Instantly browse your working repository in gitweb\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git instaweb' [--local] [--httpd=<httpd>] [--port=<port>]\n               [--browser=<browser>]\n'git instaweb' [--start] [--stop] [--restart]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 278,
            "end_index": 303,
            "value": "A simple script to set up `gitweb` and a web server for browsing the local\nrepository.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 390,
            "end_index": 407,
            "value": "\n-l::\n--local::\n\tOnly bind the web server to the local IP (127.0.0.1).\n\n-d::\n--httpd::\n\tThe HTTP daemon command-line that will be executed.\n\tCommand-line options may be specified here, and the\n\tconfiguration file will be added at the end of the command-line.\n\tCurrently apache2, lighttpd, mongoose, plackup, python and\n\twebrick are supported.\n\t(Default: lighttpd)\n\n-m::\n--module-path::\n\tThe module path (only needed if httpd is Apache).\n\t(Default: /usr/lib/apache2/modules)\n\n-p::\n--port::\n\tThe port number to bind the httpd to.  (Default: 1234)\n\n-b::\n--browser::\n\tThe web browser that should be used to view the gitweb\n\tpage. This will be passed to the 'git web{litdd}browse' helper\n\tscript along with the URL of the gitweb instance. See\n\tlinkgit:git-web{litdd}browse[1] for more information about this. If\n\tthe script fails, the URL will be printed to stdout.\n\nstart::\n--start::\n\tStart the httpd instance and exit.  Regenerate configuration files\n\tas necessary for spawning a new instance.\n\nstop::\n--stop::\n\tStop the httpd instance and exit.  This does not generate\n\tany of the configuration files for spawning a new instance,\n\tnor does it close the browser.\n\nrestart::\n--restart::\n\tRestart the httpd instance and exit.  Regenerate configuration files\n\tas necessary for spawning a new instance.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 1703,
            "end_index": 1732,
            "value": "\nYou may specify configuration in your .git/config\n\n-----------------------------------------------------------------------\n[instaweb]\n\tlocal = true\n\thttpd = apache2 -f\n\tport = 4321\n\tbrowser = konqueror\n\tmodulePath = /usr/lib/apache2/modules\n\n-----------------------------------------------------------------------\n\nIf the configuration variable `instaweb.browser` is not set,\n`web.browser` will be used instead if it is defined. See\nlinkgit:git-web{litdd}browse[1] for more information about this.\n\nSEE ALSO\n--------\nlinkgit:gitweb[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2268,
            "end_index": 2277,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-interpret-trailers.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 52,
            "end_index": 63,
            "value": "git-interpret-trailers - Add or parse structured information in commit messages\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 143,
            "end_index": 162,
            "value": "[verse]\n'git interpret-trailers' [<options>] [(--trailer <token>[(=|:)<value>])...] [<file>...]\n'git interpret-trailers' [<options>] [--parse] [<file>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 317,
            "end_index": 342,
            "value": "Help parsing or adding 'trailers' lines, that look similar to RFC 822 e-mail\nheaders, at the end of the otherwise free-form part of a commit\nmessage.\n\nThis command reads some patches or commit messages from either the\n<file> arguments or the standard input if no <file> is specified. If\n`--parse` is specified, the output consists of the parsed trailers.\n\nOtherwise, this command applies the arguments passed using the\n`--trailer` option, if any, to the commit message part of each input\nfile. The result is emitted on the standard output.\n\nSome configuration variables control the way the `--trailer` arguments\nare applied to each commit message and the way any existing trailer in\nthe commit message is changed. They also make it possible to\nautomatically add some trailers.\n\nBy default, a '<token>=<value>' or '<token>:<value>' argument given\nusing `--trailer` will be appended after the existing trailers only if\nthe last trailer has a different (<token>, <value>) pair (or if there\nis no existing trailer). The <token> and <value> parts will be trimmed\nto remove starting and trailing whitespace, and the resulting trimmed\n<token> and <value> will appear in the message like this:\n\n------------------------------------------------\ntoken: value\n------------------------------------------------\n\nThis means that the trimmed <token> and <value> will be separated by\n`': '` (one colon followed by one space).\n\nBy default the new trailer will appear at the end of all the existing\ntrailers. If there is no existing trailer, the new trailer will appear\nafter the commit message part of the output, and, if there is no line\nwith only spaces at the end of the commit message part, one blank line\nwill be added before the new trailer.\n\nExisting trailers are extracted from the input message by looking for\na group of one or more lines that (i) is all trailers, or (ii) contains at\nleast one Git-generated or user-configured trailer and consists of at\nleast 25% trailers.\nThe group must be preceded by one or more empty (or whitespace-only) lines.\nThe group must either be at the end of the message or be the last\nnon-whitespace lines before a line that starts with '---' (followed by a\nspace or the end of the line). Such three minus signs start the patch\npart of the message. See also `--no-divider` below.\n\nWhen reading trailers, there can be whitespaces after the\ntoken, the separator and the value. There can also be whitespaces\ninside the token and the value. The value may be split over multiple lines with\neach subsequent line starting with whitespace, like the \"folding\" in RFC 822.\n\nNote that 'trailers' do not follow and are not intended to follow many\nrules for RFC 822 headers. For example they do not follow\nthe encoding rules and probably many other rules.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 3109,
            "end_index": 3126,
            "value": "\n--in-place::\n\tEdit the files in place.\n\n--trim-empty::\n\tIf the <value> part of any trailer contains only whitespace,\n\tthe whole trailer will be removed from the resulting message.\n\tThis applies to existing trailers as well as new trailers.\n\n--trailer <token>[(=|:)<value>]::\n\tSpecify a (<token>, <value>) pair that should be applied as a\n\ttrailer to the input messages. See the description of this\n\tcommand.\n\n--where <placement>::\n--no-where::\n\tSpecify where all new trailers will be added.  A setting\n\tprovided with '--where' overrides all configuration variables\n\tand applies to all '--trailer' options until the next occurrence of\n\t'--where' or '--no-where'. Possible values are `after`, `before`,\n\t`end` or `start`.\n\n--if-exists <action>::\n--no-if-exists::\n\tSpecify what action will be performed when there is already at\n\tleast one trailer with the same <token> in the message.  A setting\n\tprovided with '--if-exists' overrides all configuration variables\n\tand applies to all '--trailer' options until the next occurrence of\n\t'--if-exists' or '--no-if-exists'. Possible actions are `addIfDifferent`,\n\t`addIfDifferentNeighbor`, `add`, `replace` and `doNothing`.\n\n--if-missing <action>::\n--no-if-missing::\n\tSpecify what action will be performed when there is no other\n\ttrailer with the same <token> in the message.  A setting\n\tprovided with '--if-missing' overrides all configuration variables\n\tand applies to all '--trailer' options until the next occurrence of\n\t'--if-missing' or '--no-if-missing'. Possible actions are `doNothing`\n\tor `add`.\n\n--only-trailers::\n\tOutput only the trailers, not any other parts of the input.\n\n--only-input::\n\tOutput only trailers that exist in the input; do not add any\n\tfrom the command-line or by following configured `trailer.*`\n\trules.\n\n--unfold::\n\tRemove any whitespace-continuation in trailers, so that each\n\ttrailer appears on a line by itself with its full content.\n\n--parse::\n\tA convenience alias for `--only-trailers --only-input\n\t--unfold`.\n\n--no-divider::\n\tDo not treat `---` as the end of the commit message. Use this\n\twhen you know your input contains just the commit message itself\n\t(and not an email or the output of `git format-patch`).\n\nCONFIGURATION VARIABLES\n-----------------------\n\ntrailer.separators::\n\tThis option tells which characters are recognized as trailer\n\tseparators. By default only ':' is recognized as a trailer\n\tseparator, except that '=' is always accepted on the command\n\tline for compatibility with other git commands.\n+\nThe first character given by this option will be the default character\nused when another separator is not specified in the config for this\ntrailer.\n+\nFor example, if the value for this option is \"%=$\", then only lines\nusing the format '<token><sep><value>' with <sep> containing '%', '='\nor '$' and then spaces will be considered trailers. And '%' will be\nthe default separator used, so by default trailers will appear like:\n'<token>% <value>' (one percent sign and one space will appear between\nthe token and the value).\n\ntrailer.where::\n\tThis option tells where a new trailer will be added.\n+\nThis can be `end`, which is the default, `start`, `after` or `before`.\n+\nIf it is `end`, then each new trailer will appear at the end of the\nexisting trailers.\n+\nIf it is `start`, then each new trailer will appear at the start,\ninstead of the end, of the existing trailers.\n+\nIf it is `after`, then each new trailer will appear just after the\nlast trailer with the same <token>.\n+\nIf it is `before`, then each new trailer will appear just before the\nfirst trailer with the same <token>.\n\ntrailer.ifexists::\n\tThis option makes it possible to choose what action will be\n\tperformed when there is already at least one trailer with the\n\tsame <token> in the message.\n+\nThe valid values for this option are: `addIfDifferentNeighbor` (this\nis the default), `addIfDifferent`, `add`, `replace` or `doNothing`.\n+\nWith `addIfDifferentNeighbor`, a new trailer will be added only if no\ntrailer with the same (<token>, <value>) pair is above or below the line\nwhere the new trailer will be added.\n+\nWith `addIfDifferent`, a new trailer will be added only if no trailer\nwith the same (<token>, <value>) pair is already in the message.\n+\nWith `add`, a new trailer will be added, even if some trailers with\nthe same (<token>, <value>) pair are already in the message.\n+\nWith `replace`, an existing trailer with the same <token> will be\ndeleted and the new trailer will be added. The deleted trailer will be\nthe closest one (with the same <token>) to the place where the new one\nwill be added.\n+\nWith `doNothing`, nothing will be done; that is no new trailer will be\nadded if there is already one with the same <token> in the message.\n\ntrailer.ifmissing::\n\tThis option makes it possible to choose what action will be\n\tperformed when there is not yet any trailer with the same\n\t<token> in the message.\n+\nThe valid values for this option are: `add` (this is the default) and\n`doNothing`.\n+\nWith `add`, a new trailer will be added.\n+\nWith `doNothing`, nothing will be done.\n\ntrailer.<token>.key::\n\tThis `key` will be used instead of <token> in the trailer. At\n\tthe end of this key, a separator can appear and then some\n\tspace characters. By default the only valid separator is ':',\n\tbut this can be changed using the `trailer.separators` config\n\tvariable.\n+\nIf there is a separator, then the key will be used instead of both the\n<token> and the default separator when adding the trailer.\n\ntrailer.<token>.where::\n\tThis option takes the same values as the 'trailer.where'\n\tconfiguration variable and it overrides what is specified by\n\tthat option for trailers with the specified <token>.\n\ntrailer.<token>.ifexists::\n\tThis option takes the same values as the 'trailer.ifexists'\n\tconfiguration variable and it overrides what is specified by\n\tthat option for trailers with the specified <token>.\n\ntrailer.<token>.ifmissing::\n\tThis option takes the same values as the 'trailer.ifmissing'\n\tconfiguration variable and it overrides what is specified by\n\tthat option for trailers with the specified <token>.\n\ntrailer.<token>.command::\n\tThis option can be used to specify a shell command that will\n\tbe called to automatically add or modify a trailer with the\n\tspecified <token>.\n+\nWhen this option is specified, the behavior is as if a special\n'<token>=<value>' argument were added at the beginning of the command\nline, where <value> is taken to be the standard output of the\nspecified command with any leading and trailing whitespace trimmed\noff.\n+\nIf the command contains the `$ARG` string, this string will be\nreplaced with the <value> part of an existing trailer with the same\n<token>, if any, before the command is launched.\n+\nIf some '<token>=<value>' arguments are also passed on the command\nline, when a 'trailer.<token>.command' is configured, the command will\nalso be executed for each of these arguments. And the <value> part of\nthese arguments, if any, will be used to replace the `$ARG` string in\nthe command.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 10107,
            "end_index": 10126,
            "value": "\n* Configure a 'sign' trailer with a 'Signed-off-by' key, and then\n  add two of these trailers to a message:\n+\n------------\n$ git config trailer.sign.key \"Signed-off-by\"\n$ cat msg.txt\nsubject\n\nmessage\n$ cat msg.txt | git interpret-trailers --trailer 'sign: Alice <alice@example.com>' --trailer 'sign: Bob <bob@example.com>'\nsubject\n\nmessage\n\nSigned-off-by: Alice <alice@example.com>\nSigned-off-by: Bob <bob@example.com>\n------------\n\n* Use the `--in-place` option to edit a message file in place:\n+\n------------\n$ cat msg.txt\nsubject\n\nmessage\n\nSigned-off-by: Bob <bob@example.com>\n$ git interpret-trailers --trailer 'Acked-by: Alice <alice@example.com>' --in-place msg.txt\n$ cat msg.txt\nsubject\n\nmessage\n\nSigned-off-by: Bob <bob@example.com>\nAcked-by: Alice <alice@example.com>\n------------\n\n* Extract the last commit as a patch, and add a 'Cc' and a\n  'Reviewed-by' trailer to it:\n+\n------------\n$ git format-patch -1\n0001-foo.patch\n$ git interpret-trailers --trailer 'Cc: Alice <alice@example.com>' --trailer 'Reviewed-by: Bob <bob@example.com>' 0001-foo.patch >0001-bar.patch\n------------\n\n* Configure a 'sign' trailer with a command to automatically add a\n  'Signed-off-by: ' with the author information only if there is no\n  'Signed-off-by: ' already, and show how it works:\n+\n------------\n$ git config trailer.sign.key \"Signed-off-by: \"\n$ git config trailer.sign.ifmissing add\n$ git config trailer.sign.ifexists doNothing\n$ git config trailer.sign.command 'echo \"$(git config user.name) <$(git config user.email)>\"'\n$ git interpret-trailers <<EOF\n> EOF\n\nSigned-off-by: Bob <bob@example.com>\n$ git interpret-trailers <<EOF\n> Signed-off-by: Alice <alice@example.com>\n> EOF\n\nSigned-off-by: Alice <alice@example.com>\n------------\n\n* Configure a 'fix' trailer with a key that contains a '#' and no\n  space after this character, and show how it works:\n+\n------------\n$ git config trailer.separators \":#\"\n$ git config trailer.fix.key \"Fix #\"\n$ echo \"subject\" | git interpret-trailers --trailer fix=42\nsubject\n\nFix #42\n------------\n\n* Configure a 'see' trailer with a command to show the subject of a\n  commit that is related, and show how it works:\n+\n------------\n$ git config trailer.see.key \"See-also: \"\n$ git config trailer.see.ifExists \"replace\"\n$ git config trailer.see.ifMissing \"doNothing\"\n$ git config trailer.see.command \"git log -1 --oneline --format=\\\"%h (%s)\\\" --abbrev-commit --abbrev=14 \\$ARG\"\n$ git interpret-trailers <<EOF\n> subject\n> \n> message\n> \n> see: HEAD~2\n> EOF\nsubject\n\nmessage\n\nSee-also: fe3187489d69c4 (subject of related commit)\n------------\n\n* Configure a commit template with some trailers with empty values\n  (using sed to show and keep the trailing spaces at the end of the\n  trailers), then configure a commit-msg hook that uses\n  'git interpret-trailers' to remove trailers with empty values and\n  to add a 'git-version' trailer:\n+\n------------\n$ sed -e 's/ Z$/ /' >commit_template.txt <<EOF\n> ***subject***\n> \n> ***message***\n> \n> Fixes: Z\n> Cc: Z\n> Reviewed-by: Z\n> Signed-off-by: Z\n> EOF\n$ git config commit.template commit_template.txt\n$ cat >.git/hooks/commit-msg <<EOF\n> #!/bin/sh\n> git interpret-trailers --trim-empty --trailer \"git-version: \\$(git describe)\" \"\\$1\" > \"\\$1.new\"\n> mv \"\\$1.new\" \"\\$1\"\n> EOF\n$ chmod +x .git/hooks/commit-msg\n------------\n\nSEE ALSO\n--------\nlinkgit:git-commit[1], linkgit:git-format-patch[1], linkgit:git-config[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 13509,
            "end_index": 13518,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-log.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-log - Show commit logs\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 61,
            "end_index": 80,
            "value": "[verse]\n'git log' [<options>] [<revision range>] [[--] <path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 146,
            "end_index": 171,
            "value": "Shows the commit logs.\n\n:git-log: 1\ninclude::rev-list-description.txt[]\n\nThe command takes options applicable to the linkgit:git-rev-list[1]\ncommand to control what is shown and how, and options applicable to\nthe linkgit:git-diff[1] command to control how the changes\neach commit introduces are shown.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 474,
            "end_index": 491,
            "value": "\n--follow::\n\tContinue listing the history of a file beyond renames\n\t(works only for a single file).\n\n--no-decorate::\n--decorate[=short|full|auto|no]::\n\tPrint out the ref names of any commits that are shown. If 'short' is\n\tspecified, the ref name prefixes 'refs/heads/', 'refs/tags/' and\n\t'refs/remotes/' will not be printed. If 'full' is specified, the\n\tfull ref name (including prefix) will be printed. If 'auto' is\n\tspecified, then if the output is going to a terminal, the ref names\n\tare shown as if 'short' were given, otherwise no ref names are\n\tshown. The default option is 'short'.\n\n--decorate-refs=<pattern>::\n--decorate-refs-exclude=<pattern>::\n\tIf no `--decorate-refs` is given, pretend as if all refs were\n\tincluded.  For each candidate, do not use it for decoration if it\n\tmatches any patterns given to `--decorate-refs-exclude` or if it\n\tdoesn't match any of the patterns given to `--decorate-refs`. The\n\t`log.excludeDecoration` config option allows excluding refs from\n\tthe decorations, but an explicit `--decorate-refs` pattern will\n\toverride a match in `log.excludeDecoration`.\n\n--source::\n\tPrint out the ref name given on the command line by which each\n\tcommit was reached.\n\n--[no-]mailmap::\n--[no-]use-mailmap::\n\tUse mailmap file to map author and committer names and email\n\taddresses to canonical real names and email addresses. See\n\tlinkgit:git-shortlog[1].\n\n--full-diff::\n\tWithout this flag, `git log -p <path>...` shows commits that\n\ttouch the specified paths, and diffs about the same specified\n\tpaths.  With this, the full diff is shown for commits that touch\n\tthe specified paths; this means that \"<path>...\" limits only\n\tcommits, and doesn't limit diff for those commits.\n+\nNote that this affects all diff-based output types, e.g. those\nproduced by `--stat`, etc.\n\n--log-size::\n\tInclude a line ``log size <number>'' in the output for each commit,\n\twhere <number> is the length of that commit's message in bytes.\n\tIntended to speed up tools that read log messages from `git log`\n\toutput by allowing them to allocate space in advance.\n\ninclude::line-range-options.txt[]\n\n<revision range>::\n\tShow only commits in the specified revision range.  When no\n\t<revision range> is specified, it defaults to `HEAD` (i.e. the\n\twhole history leading to the current commit).  `origin..HEAD`\n\tspecifies all the commits reachable from the current commit\n\t(i.e. `HEAD`), but not from `origin`. For a complete list of\n\tways to spell <revision range>, see the 'Specifying Ranges'\n\tsection of linkgit:gitrevisions[7].\n\n[--] <path>...::\n\tShow only commits that are enough to explain how the files\n\tthat match the specified paths came to be.  See 'History\n\tSimplification' below for details and other simplification\n\tmodes.\n+\nPaths may need to be prefixed with `--` to separate them from\noptions or the revision range, when confusion arises.\n\ninclude::rev-list-options.txt[]\n\ninclude::pretty-formats.txt[]\n\nDIFF FORMATTING\n---------------\n\nBy default, `git log` does not generate any diff output. The options\nbelow can be used to show the changes made by each commit.\n\nNote that unless one of `--diff-merges` variants (including short\n`-m`, `-c`, and `--cc` options) is explicitly given, merge commits\nwill not show a diff, even if a diff format like `--patch` is\nselected, nor will they match search options like `-S`. The exception\nis when `--first-parent` is in use, in which case `first-parent` is\nthe default format.\n\n:git-log: 1\n:diff-merges-default: `off`\ninclude::diff-options.txt[]\n\ninclude::diff-generate-patch.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4021,
            "end_index": 4040,
            "value": "`git log --no-merges`::\n\n\tShow the whole commit history, but skip any merges\n\n`git log v2.6.12.. include/scsi drivers/scsi`::\n\n\tShow all commits since version 'v2.6.12' that changed any file\n\tin the `include/scsi` or `drivers/scsi` subdirectories\n\n`git log --since=\"2 weeks ago\" -- gitk`::\n\n\tShow the changes during the last two weeks to the file 'gitk'.\n\tThe `--` is necessary to avoid confusion with the *branch* named\n\t'gitk'\n\n`git log --name-status release..test`::\n\n\tShow the commits that are in the \"test\" branch but not yet\n\tin the \"release\" branch, along with the list of paths\n\teach commit modifies.\n\n`git log --follow builtin/rev-list.c`::\n\n\tShows the commits that changed `builtin/rev-list.c`, including\n\tthose commits that occurred before the file was given its\n\tpresent name.\n\n`git log --branches --not --remotes=origin`::\n\n\tShows all commits that are in any of local branches but not in\n\tany of remote-tracking branches for 'origin' (what you have that\n\torigin doesn't).\n\n`git log master --not --remotes=*/master`::\n\n\tShows all commits that are in local master but not in any remote\n\trepository master branches.\n\n`git log -p -m --first-parent`::\n\n\tShows the history including change diffs, but only from the\n\t``main branch'' perspective, skipping commits that come from merged\n\tbranches, and showing full diffs of changes introduced by the merges.\n\tThis makes sense only when following a strict policy of merging all\n\ttopic branches when staying on a single integration branch.\n\n`git log -L '/int main/',/^}/:main.c`::\n\n\tShows how the function `main()` in the file `main.c` evolved\n\tover time.\n\n`git log -3`::\n\n\tLimits the number of commits to show to 3.\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 5709,
            "end_index": 5732,
            "value": "\ninclude::i18n.txt[]\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 5753,
            "end_index": 5782,
            "value": "\nSee linkgit:git-config[1] for core variables and linkgit:git-diff[1]\nfor settings related to diff generation.\n\nformat.pretty::\n\tDefault for the `--format` option.  (See 'Pretty Formats' above.)\n\tDefaults to `medium`.\n\ni18n.logOutputEncoding::\n\tEncoding to use when displaying logs.  (See 'Discussion' above.)\n\tDefaults to the value of `i18n.commitEncoding` if set, and UTF-8\n\totherwise.\n\nlog.date::\n\tDefault format for human-readable dates.  (Compare the\n\t`--date` option.)  Defaults to \"default\", which means to write\n\tdates like `Sat May 8 19:35:34 2010 -0500`.\n+\nIf the format is set to \"auto:foo\" and the pager is in use, format\n\"foo\" will be the used for the date format. Otherwise \"default\" will\nbe used.\n\nlog.follow::\n\tIf `true`, `git log` will act as if the `--follow` option was used when\n\ta single <path> is given.  This has the same limitations as `--follow`,\n\ti.e. it cannot be used to follow multiple files and does not work well\n\ton non-linear history.\n\nlog.showRoot::\n\tIf `false`, `git log` and related commands will not treat the\n\tinitial commit as a big creation event.  Any root commits in\n\t`git log -p` output would be shown without a diff attached.\n\tThe default is `true`.\n\nlog.showSignature::\n\tIf `true`, `git log` and related commands will act as if the\n\t`--show-signature` option was passed to them.\n\nmailmap.*::\n\tSee linkgit:git-shortlog[1].\n\nnotes.displayRef::\n\tWhich refs, in addition to the default set by `core.notesRef`\n\tor `GIT_NOTES_REF`, to read notes from when showing commit\n\tmessages with the `log` family of commands.  See\n\tlinkgit:git-notes[1].\n+\nMay be an unabbreviated ref name or a glob and may be specified\nmultiple times.  A warning will be issued for refs that do not exist,\nbut a glob that does not match any refs is silently ignored.\n+\nThis setting can be disabled by the `--no-notes` option,\noverridden by the `GIT_NOTES_DISPLAY_REF` environment variable,\nand overridden by the `--notes=<ref>` option.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7731,
            "end_index": 7740,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-ls-files.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-ls-files - Show information about files in the index and the working tree\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 122,
            "end_index": 141,
            "value": "[verse]\n'git ls-files' [-z] [-t] [-v] [-f]\n\t\t(--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*\n\t\t(-[c|d|o|i|s|u|k|m])*\n\t\t[--eol]\n\t\t[--deduplicate]\n\t\t[-x <pattern>|--exclude=<pattern>]\n\t\t[-X <file>|--exclude-from=<file>]\n\t\t[--exclude-per-directory=<file>]\n\t\t[--exclude-standard]\n\t\t[--error-unmatch] [--with-tree=<tree-ish>]\n\t\t[--full-name] [--recurse-submodules]\n\t\t[--abbrev[=<n>]] [--] [<file>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 557,
            "end_index": 582,
            "value": "This merges the file listing in the index with the actual working\ndirectory list, and shows different combinations of the two.\n\nOne or more of the options below may be used to determine the files\nshown:\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 785,
            "end_index": 802,
            "value": "\n-c::\n--cached::\n\tShow cached files in the output (default)\n\n-d::\n--deleted::\n\tShow deleted files in the output\n\n-m::\n--modified::\n\tShow modified files in the output\n\n-o::\n--others::\n\tShow other (i.e. untracked) files in the output\n\n-i::\n--ignored::\n\tShow only ignored files in the output. When showing files in the\n\tindex, print only those matched by an exclude pattern. When\n\tshowing \"other\" files, show only those matched by an exclude\n\tpattern. Standard ignore rules are not automatically activated,\n\ttherefore at least one of the `--exclude*` options is required.\n\n-s::\n--stage::\n\tShow staged contents' mode bits, object name and stage number in the output.\n\n--directory::\n\tIf a whole directory is classified as \"other\", show just its\n\tname (with a trailing slash) and not its whole contents.\n\n--no-empty-directory::\n\tDo not list empty directories. Has no effect without --directory.\n\n-u::\n--unmerged::\n\tShow unmerged files in the output (forces --stage)\n\n-k::\n--killed::\n\tShow files on the filesystem that need to be removed due\n\tto file/directory conflicts for checkout-index to\n\tsucceed.\n\n-z::\n\t\\0 line termination on output and do not quote filenames.\n\tSee OUTPUT below for more information.\n\n--deduplicate::\n\tWhen only filenames are shown, suppress duplicates that may\n\tcome from having multiple stages during a merge, or giving\n\t`--deleted` and `--modified` option at the same time.\n\tWhen any of the `-t`, `--unmerged`, or `--stage` option is\n\tin use, this option has no effect.\n\n-x <pattern>::\n--exclude=<pattern>::\n\tSkip untracked files matching pattern.\n\tNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\n\tbelow for more information.\n\n-X <file>::\n--exclude-from=<file>::\n\tRead exclude patterns from <file>; 1 per line.\n\n--exclude-per-directory=<file>::\n\tRead additional exclude patterns that apply only to the\n\tdirectory and its subdirectories in <file>.\n\n--exclude-standard::\n\tAdd the standard Git exclusions: .git/info/exclude, .gitignore\n\tin each directory, and the user's global exclusion file.\n\n--error-unmatch::\n\tIf any <file> does not appear in the index, treat this as an\n\terror (return 1).\n\n--with-tree=<tree-ish>::\n\tWhen using --error-unmatch to expand the user supplied\n\t<file> (i.e. path pattern) arguments to paths, pretend\n\tthat paths which were removed in the index since the\n\tnamed <tree-ish> are still present.  Using this option\n\twith `-s` or `-u` options does not make any sense.\n\n-t::\n\tThis feature is semi-deprecated. For scripting purpose,\n\tlinkgit:git-status[1] `--porcelain` and\n\tlinkgit:git-diff-files[1] `--name-status` are almost always\n\tsuperior alternatives, and users should look at\n\tlinkgit:git-status[1] `--short` or linkgit:git-diff[1]\n\t`--name-status` for more user-friendly alternatives.\n+\n--\nThis option identifies the file status with the following tags (followed by\na space) at the start of each line:\n\n\tH::\tcached\n\tS::\tskip-worktree\n\tM::\tunmerged\n\tR::\tremoved/deleted\n\tC::\tmodified/changed\n\tK::\tto be killed\n\t?::\tother\n--\n\n-v::\n\tSimilar to `-t`, but use lowercase letters for files\n\tthat are marked as 'assume unchanged' (see\n\tlinkgit:git-update-index[1]).\n\n-f::\n\tSimilar to `-t`, but use lowercase letters for files\n\tthat are marked as 'fsmonitor valid' (see\n\tlinkgit:git-update-index[1]).\n\n--full-name::\n\tWhen run from a subdirectory, the command usually\n\toutputs paths relative to the current directory.  This\n\toption forces paths to be output relative to the project\n\ttop directory.\n\n--recurse-submodules::\n\tRecursively calls ls-files on each active submodule in the repository.\n\tCurrently there is only support for the --cached mode.\n\n--abbrev[=<n>]::\n\tInstead of showing the full 40-byte hexadecimal object\n\tlines, show the shortest prefix that is at least '<n>'\n\thexdigits long that uniquely refers the object.\n\tNon default number of digits can be specified with --abbrev=<n>.\n\n--debug::\n\tAfter each line that describes a file, add more data about its\n\tcache entry.  This is intended to show as much information as\n\tpossible for manual inspection; the exact format may change at\n\tany time.\n\n--eol::\n\tShow <eolinfo> and <eolattr> of files.\n\t<eolinfo> is the file content identification used by Git when\n\tthe \"text\" attribute is \"auto\" (or not set and core.autocrlf is not false).\n\t<eolinfo> is either \"-text\", \"none\", \"lf\", \"crlf\", \"mixed\" or \"\".\n+\n\"\" means the file is not a regular file, it is not in the index or\nnot accessible in the working tree.\n+\n<eolattr> is the attribute that is used when checking out or committing,\nit is either \"\", \"-text\", \"text\", \"text=auto\", \"text eol=lf\", \"text eol=crlf\".\nSince Git 2.10 \"text=auto eol=lf\" and \"text=auto eol=crlf\" are supported.\n+\nBoth the <eolinfo> in the index (\"i/<eolinfo>\")\nand in the working tree (\"w/<eolinfo>\") are shown for regular files,\nfollowed by the  (\"attr/<eolattr>\").\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<file>::\n\tFiles to show. If no files are given all files which match the other\n\tspecified criteria are shown.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 5781,
            "end_index": 5796,
            "value": "'git ls-files' just outputs the filenames unless `--stage` is specified in\nwhich case it outputs:\n\n        [<tag> ]<mode> <object> <stage> <file>\n\n'git ls-files --eol' will show\n\ti/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file>\n\n'git ls-files --unmerged' and 'git ls-files --stage' can be used to examine\ndetailed information on unmerged paths.\n\nFor an unmerged path, instead of recording a single mode/SHA-1 pair,\nthe index records up to three such pairs; one from tree O in stage\n1, A in stage 2, and B in stage 3.  This information can be used by\nthe user (or the porcelain) to see what should eventually be recorded at the\npath. (see linkgit:git-read-tree[1] for more information on state)\n\nWithout the `-z` option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable `core.quotePath`\n(see linkgit:git-config[1]).  Using `-z` the filename is output\nverbatim and the line is terminated by a NUL byte.\n\n\nEXCLUDE PATTERNS\n----------------\n\n'git ls-files' can use a list of \"exclude patterns\" when\ntraversing the directory tree and finding files to show when the\nflags --others or --ignored are specified.  linkgit:gitignore[5]\nspecifies the format of exclude patterns.\n\nThese exclude patterns come from these places, in order:\n\n  1. The command-line flag --exclude=<pattern> specifies a\n     single pattern.  Patterns are ordered in the same order\n     they appear in the command line.\n\n  2. The command-line flag --exclude-from=<file> specifies a\n     file containing a list of patterns.  Patterns are ordered\n     in the same order they appear in the file.\n\n  3. The command-line flag --exclude-per-directory=<name> specifies\n     a name of the file in each directory 'git ls-files'\n     examines, normally `.gitignore`.  Files in deeper\n     directories take precedence.  Patterns are ordered in the\n     same order they appear in the files.\n\nA pattern specified on the command line with --exclude or read\nfrom the file specified with --exclude-from is relative to the\ntop of the directory tree.  A pattern read from a file specified\nby --exclude-per-directory is relative to the directory that the\npattern file appears in.\n\nSEE ALSO\n--------\nlinkgit:git-read-tree[1], linkgit:gitignore[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8052,
            "end_index": 8061,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-ls-remote.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-ls-remote - List references in a remote repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git ls-remote' [--heads] [--tags] [--refs] [--upload-pack=<exec>]\n\t      [-q | --quiet] [--exit-code] [--get-url] [--sort=<key>]\n\t      [--symref] [<repository> [<refs>...]]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 303,
            "end_index": 328,
            "value": "Displays references available in a remote repository along with the associated\ncommit IDs.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 420,
            "end_index": 437,
            "value": "\n-h::\n--heads::\n-t::\n--tags::\n\tLimit to only refs/heads and refs/tags, respectively.\n\tThese options are _not_ mutually exclusive; when given\n\tboth, references stored in refs/heads and refs/tags are\n\tdisplayed.  Note that `git ls-remote -h` used without\n\tanything else on the command line gives help, consistent\n\twith other git subcommands.\n\n--refs::\n\tDo not show peeled tags or pseudorefs like `HEAD` in the output.\n\n-q::\n--quiet::\n\tDo not print remote URL to stderr.\n\n--upload-pack=<exec>::\n\tSpecify the full path of 'git-upload-pack' on the remote\n\thost. This allows listing references from repositories accessed via\n\tSSH and where the SSH daemon does not use the PATH configured by the\n\tuser.\n\n--exit-code::\n\tExit with status \"2\" when no matching refs are found in the remote\n\trepository. Usually the command exits with status \"0\" to indicate\n\tit successfully talked with the remote repository, whether it\n\tfound any matching refs.\n\n--get-url::\n\tExpand the URL of the given remote repository taking into account any\n\t\"url.<base>.insteadOf\" config setting (See linkgit:git-config[1]) and\n\texit without talking to the remote.\n\n--symref::\n\tIn addition to the object pointed by it, show the underlying\n\tref pointed by it when showing a symbolic ref.  Currently,\n\tupload-pack only shows the symref HEAD, so it will be the only\n\tone shown by ls-remote.\n\n--sort=<key>::\n\tSort based on the key given. Prefix `-` to sort in descending order\n\tof the value. Supports \"version:refname\" or \"v:refname\" (tag names\n\tare treated as versions). The \"version:refname\" sort order can also\n\tbe affected by the \"versionsort.suffix\" configuration variable.\n\tSee linkgit:git-for-each-ref[1] for more sort options, but be aware\n\tkeys like `committerdate` that require access to the objects\n\tthemselves will not work for refs whose objects have not yet been\n\tfetched from the remote, and will give a `missing object` error.\n\n-o <option>::\n--server-option=<option>::\n\tTransmit the given string to the server when communicating using\n\tprotocol version 2.  The given string must not contain a NUL or LF\n\tcharacter.\n\tWhen multiple `--server-option=<option>` are given, they are all\n\tsent to the other side in the order listed on the command line.\n\n<repository>::\n\tThe \"remote\" repository to query.  This parameter can be\n\teither a URL or the name of a remote (see the GIT URLS and\n\tREMOTES sections of linkgit:git-fetch[1]).\n\n<refs>...::\n\tWhen unspecified, all references, after filtering done\n\twith --heads and --tags, are shown.  When <refs>... are\n\tspecified, only references matching the given patterns\n\tare displayed.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 3032,
            "end_index": 3051,
            "value": "\n----\n$ git ls-remote --tags ./.\nd6602ec5194c87b0fc87103ca4d67251c76f233a\trefs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41\trefs/tags/v0.99.1\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e\trefs/tags/v0.99.3\nc5db5456ae3b0873fc659c19fafdde22313cc441\trefs/tags/v0.99.2\n0918385dbd9656cab0d1d81ba7453d49bbc16250\trefs/tags/junio-gpg-pub\n$ git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc\n5fe978a5381f1fbad26a80e682ddd2a401966740\trefs/heads/master\nc781a84b5204fb294c9ccc79f8b3baceeb32c061\trefs/heads/seen\n$ git remote add korg http://www.kernel.org/pub/scm/git/git.git\n$ git ls-remote --tags korg v\\*\nd6602ec5194c87b0fc87103ca4d67251c76f233a\trefs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41\trefs/tags/v0.99.1\nc5db5456ae3b0873fc659c19fafdde22313cc441\trefs/tags/v0.99.2\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e\trefs/tags/v0.99.3\n----\n\nSEE ALSO\n--------\nlinkgit:git-check-ref-format[1].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3959,
            "end_index": 3968,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-ls-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-ls-tree - List the contents of a tree object\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 91,
            "end_index": 110,
            "value": "[verse]\n'git ls-tree' [-d] [-r] [-t] [-l] [-z]\n\t    [--name-only] [--name-status] [--full-name] [--full-tree] [--abbrev[=<n>]]\n\t    <tree-ish> [<path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 265,
            "end_index": 290,
            "value": "Lists the contents of a given tree object, like what \"/bin/ls -a\" does\nin the current working directory.  Note that:\n\n - the behaviour is slightly different from that of \"/bin/ls\" in that the\n   '<path>' denotes just a list of patterns to match, e.g. so specifying\n   directory name (without `-r`) will behave differently, and order of the\n   arguments does not matter.\n\n - the behaviour is similar to that of \"/bin/ls\" in that the '<path>' is\n   taken as relative to the current working directory.  E.g. when you are\n   in a directory 'sub' that has a directory 'dir', you can run 'git\n   ls-tree -r HEAD dir' to list the contents of the tree (that is\n   `sub/dir` in `HEAD`).  You don't want to give a tree that is not at the\n   root level (e.g. `git ls-tree -r HEAD:sub dir`) in this case, as that\n   would result in asking for `sub/sub/dir` in the `HEAD` commit.\n   However, the current working directory can be ignored by passing\n   --full-tree option.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1248,
            "end_index": 1265,
            "value": "\n<tree-ish>::\n\tId of a tree-ish.\n\n-d::\n\tShow only the named tree entry itself, not its children.\n\n-r::\n\tRecurse into sub-trees.\n\n-t::\n\tShow tree entries even when going to recurse them. Has no effect\n\tif `-r` was not passed. `-d` implies `-t`.\n\n-l::\n--long::\n\tShow object size of blob (file) entries.\n\n-z::\n\t\\0 line termination on output and do not quote filenames.\n\tSee OUTPUT FORMAT below for more information.\n\n--name-only::\n--name-status::\n\tList only filenames (instead of the \"long\" output), one per line.\n\n--abbrev[=<n>]::\n\tInstead of showing the full 40-byte hexadecimal object\n\tlines, show the shortest prefix that is at least '<n>'\n\thexdigits long that uniquely refers the object.\n\tNon default number of digits can be specified with --abbrev=<n>.\n\n--full-name::\n\tInstead of showing the path names relative to the current working\n\tdirectory, show the full path names.\n\n--full-tree::\n\tDo not limit the listing to the current working directory.\n\tImplies --full-name.\n\n[<path>...]::\n\tWhen paths are given, show them (note that this isn't really raw\n\tpathnames, but rather a list of patterns to match).  Otherwise\n\timplicitly uses the root level of the tree as the sole path argument.\n\n\nOutput Format\n-------------\n        <mode> SP <type> SP <object> TAB <file>\n\nThis output format is compatible with what `--index-info --stdin` of\n'git update-index' expects.\n\nWhen the `-l` option is used, format changes to\n\n        <mode> SP <type> SP <object> SP <object size> TAB <file>\n\nObject size identified by <object> is given in bytes, and right-justified\nwith minimum width of 7 characters.  Object size is given only for blobs\n(file) entries; for other entries `-` character is used in place of size.\n\nWithout the `-z` option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable `core.quotePath`\n(see linkgit:git-config[1]).  Using `-z` the filename is output\nverbatim and the line is terminated by a NUL byte.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3215,
            "end_index": 3224,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mailinfo.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-mailinfo - Extracts patch and authorship from a single e-mail message\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 118,
            "end_index": 137,
            "value": "[verse]\n'git mailinfo' [-k|-b] [-u | --encoding=<encoding> | -n] [--[no-]scissors] <msg> <patch>\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 235,
            "end_index": 260,
            "value": "Reads a single e-mail message from the standard input, and\nwrites the commit log message in <msg> file, and the patches in\n<patch> file.  The author name, e-mail and e-mail subject are\nwritten out to the standard output to be used by 'git am'\nto create a commit.  It is usually not necessary to use this\ncommand directly.  See linkgit:git-am[1] instead.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 615,
            "end_index": 632,
            "value": "\n-k::\n\tUsually the program removes email cruft from the Subject:\n\theader line to extract the title line for the commit log\n\tmessage.  This option prevents this munging, and is most\n\tuseful when used to read back 'git format-patch -k' output.\n+\nSpecifically, the following are removed until none of them remain:\n+\n--\n*\tLeading and trailing whitespace.\n\n*\tLeading `Re:`, `re:`, and `:`.\n\n*\tLeading bracketed strings (between `[` and `]`, usually\n\t`[PATCH]`).\n--\n+\nFinally, runs of whitespace are normalized to a single ASCII space\ncharacter.\n\n-b::\n\tWhen -k is not in effect, all leading strings bracketed with '['\n\tand ']' pairs are stripped.  This option limits the stripping to\n\tonly the pairs whose bracketed string contains the word \"PATCH\".\n\n-u::\n\tThe commit log message, author name and author email are\n\ttaken from the e-mail, and after minimally decoding MIME\n\ttransfer encoding, re-coded in the charset specified by\n\t`i18n.commitEncoding` (defaulting to UTF-8) by transliterating\n\tthem.  This used to be optional but now it is the default.\n+\nNote that the patch is always used as-is without charset\nconversion, even with this flag.\n\n--encoding=<encoding>::\n\tSimilar to -u.  But when re-coding, the charset specified here is\n\tused instead of the one specified by `i18n.commitEncoding` or UTF-8.\n\n-n::\n\tDisable all charset re-coding of the metadata.\n\n-m::\n--message-id::\n\tCopy the Message-ID header at the end of the commit message.  This\n\tis useful in order to associate commits with mailing list discussions.\n\n--scissors::\n\tRemove everything in body before a scissors line (e.g. \"-- >8 --\").\n\tThe line represents scissors and perforation marks, and is used to\n\trequest the reader to cut the message at that line.  If that line\n\tappears in the body of the message before the patch, everything\n\tbefore it (including the scissors line itself) is ignored when\n\tthis option is used.\n+\nThis is useful if you want to begin your message in a discussion thread\nwith comments and suggestions on the message you are responding to, and to\nconclude it with a patch submission, separating the discussion and the\nbeginning of the proposed commit log message with a scissors line.\n+\nThis can be enabled by default with the configuration option mailinfo.scissors.\n\n--no-scissors::\n\tIgnore scissors lines. Useful for overriding mailinfo.scissors settings.\n\n<msg>::\n\tThe commit log message extracted from e-mail, usually\n\texcept the title line which comes from e-mail Subject.\n\n<patch>::\n\tThe patch extracted from e-mail.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3141,
            "end_index": 3150,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mailsplit.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-mailsplit - Simple UNIX mbox splitter program\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git mailsplit' [-b] [-f<nn>] [-d<prec>] [--keep-cr] [--mboxrd]\n\t\t-o<directory> [--] [(<mbox>|<Maildir>)...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 231,
            "end_index": 256,
            "value": "Splits a mbox file or a Maildir into a list of files: \"0001\" \"0002\" ..  in the\nspecified directory so you can process them further from there.\n\nIMPORTANT: Maildir splitting relies upon filenames being sorted to output\npatches in the correct order.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 504,
            "end_index": 521,
            "value": "\n<mbox>::\n\tMbox file to split.  If not given, the mbox is read from\n\tthe standard input.\n\n<Maildir>::\n\tRoot of the Maildir to split. This directory should contain the cur, tmp\n\tand new subdirectories.\n\n-o<directory>::\n\tDirectory in which to place the individual messages.\n\n-b::\n\tIf any file doesn't begin with a From line, assume it is a\n\tsingle mail message instead of signaling error.\n\n-d<prec>::\n\tInstead of the default 4 digits with leading zeros,\n\tdifferent precision can be specified for the generated\n\tfilenames.\n\n-f<nn>::\n\tSkip the first <nn> numbers, for example if -f3 is specified,\n\tstart the numbering with 0004.\n\n--keep-cr::\n\tDo not remove `\\r` from lines ending with `\\r\\n`.\n\n--mboxrd::\n\tInput is of the \"mboxrd\" format and \"^>+From \" line escaping is\n\treversed.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1297,
            "end_index": 1306,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-maintenance.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-maintenance - Run tasks to optimize Git repository data\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 110,
            "end_index": 129,
            "value": "[verse]\n'git maintenance' run [<options>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 172,
            "end_index": 197,
            "value": "Run tasks to optimize Git repository data, speeding up other Git commands\nand reducing storage requirements for the repository.\n\nGit commands that add repository data, such as `git add` or `git fetch`,\nare optimized for a responsive user experience. These commands do not take\ntime to optimize the Git data, since such optimizations scale with the full\nsize of the repository while these user commands each perform a relatively\nsmall action.\n\nThe `git maintenance` command provides flexibility for how to optimize the\nGit repository.\n"
        },
        "SUBCOMMANDS": {
            "name": "SUBCOMMANDS",
            "start_index": 731,
            "end_index": 756,
            "value": "\nregister::\n\tInitialize Git config values so any scheduled maintenance will\n\tstart running on this repository. This adds the repository to the\n\t`maintenance.repo` config variable in the current user's global\n\tconfig and enables some recommended configuration values for\n\t`maintenance.<task>.schedule`. The tasks that are enabled are safe\n\tfor running in the background without disrupting foreground\n\tprocesses.\n+\nThe `register` subcommand will also set the `maintenance.strategy` config\nvalue to `incremental`, if this value is not previously set. The\n`incremental` strategy uses the following schedule for each maintenance\ntask:\n+\n--\n* `gc`: disabled.\n* `commit-graph`: hourly.\n* `prefetch`: hourly.\n* `loose-objects`: daily.\n* `incremental-repack`: daily.\n--\n+\n`git maintenance register` will also disable foreground maintenance by\nsetting `maintenance.auto = false` in the current repository. This config\nsetting will remain after a `git maintenance unregister` command.\n\nrun::\n\tRun one or more maintenance tasks. If one or more `--task` options\n\tare specified, then those tasks are run in that order. Otherwise,\n\tthe tasks are determined by which `maintenance.<task>.enabled`\n\tconfig options are true. By default, only `maintenance.gc.enabled`\n\tis true.\n\nstart::\n\tStart running maintenance on the current repository. This performs\n\tthe same config updates as the `register` subcommand, then updates\n\tthe background scheduler to run `git maintenance run --scheduled`\n\ton an hourly basis.\n\nstop::\n\tHalt the background maintenance schedule. The current repository\n\tis not removed from the list of maintained repositories, in case\n\tthe background maintenance is restarted later.\n\nunregister::\n\tRemove the current repository from background maintenance. This\n\tonly removes the repository from the configured list. It does not\n\tstop the background maintenance processes from running.\n"
        },
        "TASKS": {
            "name": "TASKS",
            "start_index": 2638,
            "end_index": 2651,
            "value": "\ncommit-graph::\n\tThe `commit-graph` job updates the `commit-graph` files incrementally,\n\tthen verifies that the written data is correct. The incremental\n\twrite is safe to run alongside concurrent Git processes since it\n\twill not expire `.graph` files that were in the previous\n\t`commit-graph-chain` file. They will be deleted by a later run based\n\ton the expiration delay.\n\nprefetch::\n\tThe `prefetch` task updates the object directory with the latest\n\tobjects from all registered remotes. For each remote, a `git fetch`\n\tcommand is run. The refmap is custom to avoid updating local or remote\n\tbranches (those in `refs/heads` or `refs/remotes`). Instead, the\n\tremote refs are stored in `refs/prefetch/<remote>/`. Also, tags are\n\tnot updated.\n+\nThis is done to avoid disrupting the remote-tracking branches. The end users\nexpect these refs to stay unmoved unless they initiate a fetch.  With prefetch\ntask, however, the objects necessary to complete a later real fetch would\nalready be obtained, so the real fetch would go faster.  In the ideal case,\nit will just become an update to a bunch of remote-tracking branches without\nany object transfer.\n\ngc::\n\tClean up unnecessary files and optimize the local repository. \"GC\"\n\tstands for \"garbage collection,\" but this task performs many\n\tsmaller tasks. This task can be expensive for large repositories,\n\tas it repacks all Git objects into a single pack-file. It can also\n\tbe disruptive in some situations, as it deletes stale data. See\n\tlinkgit:git-gc[1] for more details on garbage collection in Git.\n\nloose-objects::\n\tThe `loose-objects` job cleans up loose objects and places them into\n\tpack-files. In order to prevent race conditions with concurrent Git\n\tcommands, it follows a two-step process. First, it deletes any loose\n\tobjects that already exist in a pack-file; concurrent Git processes\n\twill examine the pack-file for the object data instead of the loose\n\tobject. Second, it creates a new pack-file (starting with \"loose-\")\n\tcontaining a batch of loose objects. The batch size is limited to 50\n\tthousand objects to prevent the job from taking too long on a\n\trepository with many loose objects. The `gc` task writes unreachable\n\tobjects as loose objects to be cleaned up by a later step only if\n\tthey are not re-added to a pack-file; for this reason it is not\n\tadvisable to enable both the `loose-objects` and `gc` tasks at the\n\tsame time.\n\nincremental-repack::\n\tThe `incremental-repack` job repacks the object directory\n\tusing the `multi-pack-index` feature. In order to prevent race\n\tconditions with concurrent Git commands, it follows a two-step\n\tprocess. First, it calls `git multi-pack-index expire` to delete\n\tpack-files unreferenced by the `multi-pack-index` file. Second, it\n\tcalls `git multi-pack-index repack` to select several small\n\tpack-files and repack them into a bigger one, and then update the\n\t`multi-pack-index` entries that refer to the small pack-files to\n\trefer to the new pack-file. This prepares those small pack-files\n\tfor deletion upon the next run of `git multi-pack-index expire`.\n\tThe selection of the small pack-files is such that the expected\n\tsize of the big pack-file is at least the batch size; see the\n\t`--batch-size` option for the `repack` subcommand in\n\tlinkgit:git-multi-pack-index[1]. The default batch-size is zero,\n\twhich is a special case that attempts to repack all pack-files\n\tinto a single pack-file.\n\npack-refs::\n\tThe `pack-refs` task collects the loose reference files and\n\tcollects them into a single file. This speeds up operations that\n\tneed to iterate across many references. See linkgit:git-pack-refs[1]\n\tfor more information.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 6288,
            "end_index": 6305,
            "value": "\n--auto::\n\tWhen combined with the `run` subcommand, run maintenance tasks\n\tonly if certain thresholds are met. For example, the `gc` task\n\truns when the number of loose objects exceeds the number stored\n\tin the `gc.auto` config setting, or when the number of pack-files\n\texceeds the `gc.autoPackLimit` config setting. Not compatible with\n\tthe `--schedule` option.\n\n--schedule::\n\tWhen combined with the `run` subcommand, run maintenance tasks\n\tonly if certain time conditions are met, as specified by the\n\t`maintenance.<task>.schedule` config value for each `<task>`.\n\tThis config value specifies a number of seconds since the last\n\ttime that task ran, according to the `maintenance.<task>.lastRun`\n\tconfig value. The tasks that are tested are those provided by\n\tthe `--task=<task>` option(s) or those with\n\t`maintenance.<task>.enabled` set to true.\n\n--quiet::\n\tDo not report progress or other information over `stderr`.\n\n--task=<task>::\n\tIf this option is specified one or more times, then only run the\n\tspecified tasks in the specified order. If no `--task=<task>`\n\targuments are specified, then only the tasks with\n\t`maintenance.<task>.enabled` configured as `true` are considered.\n\tSee the 'TASKS' section for the list of accepted `<task>` values.\n\n"
        },
        "TROUBLESHOOTING": {
            "name": "TROUBLESHOOTING",
            "start_index": 7556,
            "end_index": 7589,
            "value": "The `git maintenance` command is designed to simplify the repository\nmaintenance patterns while minimizing user wait time during Git commands.\nA variety of configuration options are available to allow customizing this\nprocess. The default maintenance options focus on operations that complete\nquickly, even on large repositories.\n\nUsers may find some cases where scheduled maintenance tasks do not run as\nfrequently as intended. Each `git maintenance run` command takes a lock on\nthe repository's object database, and this prevents other concurrent\n`git maintenance run` commands from running on the same repository. Without\nthis safeguard, competing processes could leave the repository in an\nunpredictable state.\n\nThe background maintenance schedule runs `git maintenance run` processes\non an hourly basis. Each run executes the \"hourly\" tasks. At midnight,\nthat process also executes the \"daily\" tasks. At midnight on the first day\nof the week, that process also executes the \"weekly\" tasks. A single\nprocess iterates over each registered repository, performing the scheduled\ntasks for that frequency. Depending on the number of registered\nrepositories and their sizes, this process may take longer than an hour.\nIn this case, multiple `git maintenance run` commands may run on the same\nrepository at the same time, colliding on the object database lock. This\nresults in one of the two tasks not running.\n\nIf you find that some maintenance windows are taking longer than one hour\nto complete, then consider reducing the complexity of your maintenance\ntasks. For example, the `gc` task is much slower than the\n`incremental-repack` task. However, this comes at a cost of a slightly\nlarger object database. Consider moving more expensive tasks to be run\nless frequently.\n\nExpert users may consider scheduling their own maintenance tasks using a\ndifferent schedule than is available through `git maintenance start` and\nGit configuration options. These users should be aware of the object\ndatabase lock and how concurrent `git maintenance run` commands behave.\nFurther, the `git gc` command should not be combined with\n`git maintenance run` commands. `git gc` modifies the object database\nbut does not take the lock in the same way as `git maintenance run`. If\npossible, use `git maintenance run --task=gc` instead of `git gc`.\n\nThe following sections describe the mechanisms put in place to run\nbackground maintenance by `git maintenance start` and how to customize\nthem.\n\nBACKGROUND MAINTENANCE ON POSIX SYSTEMS\n---------------------------------------\n\nThe standard mechanism for scheduling background tasks on POSIX systems\nis cron(8). This tool executes commands based on a given schedule. The\ncurrent list of user-scheduled tasks can be found by running `crontab -l`.\nThe schedule written by `git maintenance start` is similar to this:\n\n-----------------------------------------------------------------------\n# BEGIN GIT MAINTENANCE SCHEDULE\n# The following schedule was created by Git\n# Any edits made in this region might be\n# replaced in the future by a Git command.\n\n0 1-23 * * * \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly\n0 0 * * 1-6 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=daily\n0 0 * * 0 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly\n\n# END GIT MAINTENANCE SCHEDULE\n-----------------------------------------------------------------------\n\nThe comments are used as a region to mark the schedule as written by Git.\nAny modifications within this region will be completely deleted by\n`git maintenance stop` or overwritten by `git maintenance start`.\n\nThe `crontab` entry specifies the full path of the `git` executable to\nensure that the executed `git` command is the same one with which\n`git maintenance start` was issued independent of `PATH`. If the same user\nruns `git maintenance start` with multiple Git executables, then only the\nlatest executable is used.\n\nThese commands use `git for-each-repo --config=maintenance.repo` to run\n`git maintenance run --schedule=<frequency>` on each repository listed in\nthe multi-valued `maintenance.repo` config option. These are typically\nloaded from the user-specific global config. The `git maintenance` process\nthen determines which maintenance tasks are configured to run on each\nrepository with each `<frequency>` using the `maintenance.<task>.schedule`\nconfig options. These values are loaded from the global or repository\nconfig values.\n\nIf the config values are insufficient to achieve your desired background\nmaintenance schedule, then you can create your own schedule. If you run\n`crontab -e`, then an editor will load with your user-specific `cron`\nschedule. In that editor, you can add your own schedule lines. You could\nstart by adapting the default schedule listed earlier, or you could read\nthe crontab(5) documentation for advanced scheduling techniques. Please\ndo use the full path and `--exec-path` techniques from the default\nschedule to ensure you are executing the correct binaries in your\nschedule.\n\n\nBACKGROUND MAINTENANCE ON MACOS SYSTEMS\n---------------------------------------\n\nWhile macOS technically supports `cron`, using `crontab -e` requires\nelevated privileges and the executed process does not have a full user\ncontext. Without a full user context, Git and its credential helpers\ncannot access stored credentials, so some maintenance tasks are not\nfunctional.\n\nInstead, `git maintenance start` interacts with the `launchctl` tool,\nwhich is the recommended way to schedule timed jobs in macOS. Scheduling\nmaintenance through `git maintenance (start|stop)` requires some\n`launchctl` features available only in macOS 10.11 or later.\n\nYour user-specific scheduled tasks are stored as XML-formatted `.plist`\nfiles in `~/Library/LaunchAgents/`. You can see the currently-registered\ntasks using the following command:\n\n-----------------------------------------------------------------------\n$ ls ~/Library/LaunchAgents/org.git-scm.git*\norg.git-scm.git.daily.plist\norg.git-scm.git.hourly.plist\norg.git-scm.git.weekly.plist\n-----------------------------------------------------------------------\n\nOne task is registered for each `--schedule=<frequency>` option. To\ninspect how the XML format describes each schedule, open one of these\n`.plist` files in an editor and inspect the `<array>` element following\nthe `<key>StartCalendarInterval</key>` element.\n\n`git maintenance start` will overwrite these files and register the\ntasks again with `launchctl`, so any customizations should be done by\ncreating your own `.plist` files with distinct names. Similarly, the\n`git maintenance stop` command will unregister the tasks with `launchctl`\nand delete the `.plist` files.\n\nTo create more advanced customizations to your background tasks, see\nlaunchctl.plist(5) for more information.\n\n\nBACKGROUND MAINTENANCE ON WINDOWS SYSTEMS\n-----------------------------------------\n\nWindows does not support `cron` and instead has its own system for\nscheduling background tasks. The `git maintenance start` command uses\nthe `schtasks` command to submit tasks to this system. You can inspect\nall background tasks using the Task Scheduler application. The tasks\nadded by Git have names of the form `Git Maintenance (<frequency>)`.\nThe Task Scheduler GUI has ways to inspect these tasks, but you can also\nexport the tasks to XML files and view the details there.\n\nNote that since Git is a console application, these background tasks\ncreate a console window visible to the current user. This can be changed\nmanually by selecting the \"Run whether user is logged in or not\" option\nin Task Scheduler. This change requires a password input, which is why\n`git maintenance start` does not select it by default.\n\nIf you want to customize the background tasks, please rename the tasks\nso future calls to `git maintenance (start|stop)` do not overwrite your\ncustom tasks.\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 15599,
            "end_index": 15608,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge-base.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-merge-base - Find as good common ancestors as possible for a merge\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 119,
            "end_index": 138,
            "value": "[verse]\n'git merge-base' [-a|--all] <commit> <commit>...\n'git merge-base' [-a|--all] --octopus <commit>...\n'git merge-base' --is-ancestor <commit> <commit>\n'git merge-base' --independent <commit>...\n'git merge-base' --fork-point <ref> [<commit>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 384,
            "end_index": 409,
            "value": "\n'git merge-base' finds best common ancestor(s) between two commits to use\nin a three-way merge.  One common ancestor is 'better' than another common\nancestor if the latter is an ancestor of the former.  A common ancestor\nthat does not have any better common ancestor is a 'best common\nancestor', i.e. a 'merge base'.  Note that there can be more than one\nmerge base for a pair of commits.\n\nOPERATION MODES\n---------------\n\nAs the most common special case, specifying only two commits on the\ncommand line means computing the merge base between the given two commits.\n\nMore generally, among the two commits to compute the merge base from,\none is specified by the first commit argument on the command line;\nthe other commit is a (possibly hypothetical) commit that is a merge\nacross all the remaining commits on the command line.\n\nAs a consequence, the 'merge base' is not necessarily contained in each of the\ncommit arguments if more than two commits are specified. This is different\nfrom linkgit:git-show-branch[1] when used with the `--merge-base` option.\n\n--octopus::\n\tCompute the best common ancestors of all supplied commits,\n\tin preparation for an n-way merge.  This mimics the behavior\n\tof 'git show-branch --merge-base'.\n\n--independent::\n\tInstead of printing merge bases, print a minimal subset of\n\tthe supplied commits with the same ancestors.  In other words,\n\tamong the commits given, list those which cannot be reached\n\tfrom any other.  This mimics the behavior of 'git show-branch\n\t--independent'.\n\n--is-ancestor::\n\tCheck if the first <commit> is an ancestor of the second <commit>,\n\tand exit with status 0 if true, or with status 1 if not.\n\tErrors are signaled by a non-zero status that is not 1.\n\n--fork-point::\n\tFind the point at which a branch (or any history that leads\n\tto <commit>) forked from another branch (or any reference)\n\t<ref>. This does not just look for the common ancestor of\n\tthe two commits, but also takes into account the reflog of\n\t<ref> to see if the history leading to <commit> forked from\n\tan earlier incarnation of the branch <ref> (see discussion\n\ton this mode below).\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2518,
            "end_index": 2535,
            "value": "\n-a::\n--all::\n\tOutput all merge bases for the commits, instead of just one.\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 2610,
            "end_index": 2633,
            "value": "\nGiven two commits 'A' and 'B', `git merge-base A B` will output a commit\nwhich is reachable from both 'A' and 'B' through the parent relationship.\n\nFor example, with this topology:\n\n....\n\t o---o---o---B\n\t/\n---o---1---o---o---o---A\n....\n\nthe merge base between 'A' and 'B' is '1'.\n\nGiven three commits 'A', 'B' and 'C', `git merge-base A B C` will compute the\nmerge base between 'A' and a hypothetical commit 'M', which is a merge\nbetween 'B' and 'C'.  For example, with this topology:\n\n....\n       o---o---o---o---C\n      /\n     /   o---o---o---B\n    /   /\n---2---1---o---o---o---A\n....\n\nthe result of `git merge-base A B C` is '1'.  This is because the\nequivalent topology with a merge commit 'M' between 'B' and 'C' is:\n\n\n....\n       o---o---o---o---o\n      /                 \\\n     /   o---o---o---o---M\n    /   /\n---2---1---o---o---o---A\n....\n\nand the result of `git merge-base A M` is '1'.  Commit '2' is also a\ncommon ancestor between 'A' and 'M', but '1' is a better common ancestor,\nbecause '2' is an ancestor of '1'.  Hence, '2' is not a merge base.\n\nThe result of `git merge-base --octopus A B C` is '2', because '2' is\nthe best common ancestor of all commits.\n\nWhen the history involves criss-cross merges, there can be more than one\n'best' common ancestor for two commits.  For example, with this topology:\n\n....\n---1---o---A\n    \\ /\n     X\n    / \\\n---2---o---o---B\n....\n\nboth '1' and '2' are merge-bases of A and B.  Neither one is better than\nthe other (both are 'best' merge bases).  When the `--all` option is not given,\nit is unspecified which best one is output.\n\nA common idiom to check \"fast-forward-ness\" between two commits A\nand B is (or at least used to be) to compute the merge base between\nA and B, and check if it is the same as A, in which case, A is an\nancestor of B.  You will see this idiom used often in older scripts.\n\n....\nA=$(git rev-parse --verify A)\nif test \"$A\" = \"$(git merge-base A B)\"\nthen\n\t... A is an ancestor of B ...\nfi\n....\n\nIn modern git, you can say this in a more direct way:\n\n....\nif git merge-base --is-ancestor A B\nthen\n\t... A is an ancestor of B ...\nfi\n....\n\ninstead.\n\nDiscussion on fork-point mode\n-----------------------------\n\nAfter working on the `topic` branch created with `git switch -c\ntopic origin/master`, the history of remote-tracking branch\n`origin/master` may have been rewound and rebuilt, leading to a\nhistory of this shape:\n\n....\n\t\t o---B2\n\t\t/\n---o---o---B1--o---o---o---B (origin/master)\n\t\\\n\t B0\n\t  \\\n\t   D0---D1---D (topic)\n....\n\nwhere `origin/master` used to point at commits B0, B1, B2 and now it\npoints at B, and your `topic` branch was started on top of it back\nwhen `origin/master` was at B0, and you built three commits, D0, D1,\nand D, on top of it.  Imagine that you now want to rebase the work\nyou did on the topic on top of the updated origin/master.\n\nIn such a case, `git merge-base origin/master topic` would return the\nparent of B0 in the above picture, but B0^..D is *not* the range of\ncommits you would want to replay on top of B (it includes B0, which\nis not what you wrote; it is a commit the other side discarded when\nit moved its tip from B0 to B1).\n\n`git merge-base --fork-point origin/master topic` is designed to\nhelp in such a case.  It takes not only B but also B0, B1, and B2\n(i.e. old tips of the remote-tracking branches your repository's\nreflog knows about) into account to see on which commit your topic\nbranch was built and finds B0, allowing you to replay only the\ncommits on your topic, excluding the commits the other side later\ndiscarded.\n\nHence\n\n    $ fork_point=$(git merge-base --fork-point origin/master topic)\n\nwill find B0, and\n\n    $ git rebase --onto origin/master $fork_point topic\n\nwill replay D0, D1 and D on top of B to create a new history of this\nshape:\n\n....\n\t\t o---B2\n\t\t/\n---o---o---B1--o---o---o---B (origin/master)\n\t\\                   \\\n\t B0                  D0'--D1'--D' (topic - updated)\n\t  \\\n\t   D0---D1---D (topic - old)\n....\n\nA caveat is that older reflog entries in your repository may be\nexpired by `git gc`.  If B0 no longer appears in the reflog of the\nremote-tracking branch `origin/master`, the `--fork-point` mode\nobviously cannot find it and fails, avoiding to give a random and\nuseless result (such as the parent of B0, like the same command\nwithout the `--fork-point` option gives).\n\nAlso, the remote-tracking branch you use the `--fork-point` mode\nwith must be the one your topic forked from its tip.  If you forked\nfrom an older commit than the tip, this mode would not find the fork\npoint (imagine in the above sample history B0 did not exist,\norigin/master started at B1, moved to B2 and then B, and you forked\nyour topic at origin/master^ when origin/master was B1; the shape of\nthe history would be the same as above, without B0, and the parent\nof B1 is what `git merge-base origin/master topic` correctly finds,\nbut the `--fork-point` mode will not, because it is not one of the\ncommits that used to be at the tip of origin/master).\n\n\nSee also\n--------\nlinkgit:git-rev-list[1],\nlinkgit:git-show-branch[1],\nlinkgit:git-merge[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7707,
            "end_index": 7716,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge-file.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-merge-file - Run a three-way file merge\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 92,
            "end_index": 111,
            "value": "[verse]\n'git merge-file' [-L <current-name> [-L <base-name> [-L <other-name>]]]\n\t[--ours|--theirs|--union] [-p|--stdout] [-q|--quiet] [--marker-size=<n>]\n\t[--[no-]diff3] <current-file> <base-file> <other-file>\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 322,
            "end_index": 347,
            "value": "'git merge-file' incorporates all changes that lead from the `<base-file>`\nto `<other-file>` into `<current-file>`. The result ordinarily goes into\n`<current-file>`. 'git merge-file' is useful for combining separate changes\nto an original. Suppose `<base-file>` is the original, and both\n`<current-file>` and `<other-file>` are modifications of `<base-file>`,\nthen 'git merge-file' combines both changes.\n\nA conflict occurs if both `<current-file>` and `<other-file>` have changes\nin a common segment of lines. If a conflict is found, 'git merge-file'\nnormally outputs a warning and brackets the conflict with lines containing\n<<<<<<< and >>>>>>> markers. A typical conflict will look like this:\n\n\t<<<<<<< A\n\tlines in file A\n\t=======\n\tlines in file B\n\t>>>>>>> B\n\nIf there are conflicts, the user should edit the result and delete one of\nthe alternatives.  When `--ours`, `--theirs`, or `--union` option is in effect,\nhowever, these conflicts are resolved favouring lines from `<current-file>`,\nlines from `<other-file>`, or lines from both respectively.  The length of the\nconflict markers can be given with the `--marker-size` option.\n\nThe exit value of this program is negative on error, and the number of\nconflicts otherwise (truncated to 127 if there are more than that many\nconflicts). If the merge was clean, the exit value is 0.\n\n'git merge-file' is designed to be a minimal clone of RCS 'merge'; that is, it\nimplements all of RCS 'merge''s functionality which is needed by\nlinkgit:git[1].\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1845,
            "end_index": 1862,
            "value": "\n-L <label>::\n\tThis option may be given up to three times, and\n\tspecifies labels to be used in place of the\n\tcorresponding file names in conflict reports. That is,\n\t`git merge-file -L x -L y -L z a b c` generates output that\n\tlooks like it came from files x, y and z instead of\n\tfrom files a, b and c.\n\n-p::\n\tSend results to standard output instead of overwriting\n\t`<current-file>`.\n\n-q::\n\tQuiet; do not warn about conflicts.\n\n--diff3::\n\tShow conflicts in \"diff3\" style.\n\n--ours::\n--theirs::\n--union::\n\tInstead of leaving conflicts in the file, resolve conflicts\n\tfavouring our (or their or both) side of the lines.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2479,
            "end_index": 2498,
            "value": "\n`git merge-file README.my README README.upstream`::\n\n\tcombines the changes of README.my and README.upstream since README,\n\ttries to merge them and writes the result into README.my.\n\n`git merge-file -L a -L b -L c tmp/a123 tmp/b234 tmp/c345`::\n\n\tmerges tmp/a123 and tmp/c345 with the base tmp/b234, but uses labels\n\t`a` and `c` instead of `tmp/a123` and `tmp/c345`.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2864,
            "end_index": 2873,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-merge-index - Run a merge for files needing merging\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 106,
            "end_index": 125,
            "value": "[verse]\n'git merge-index' [-o] [-q] <merge-program> (-a | [--] <file>*)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 197,
            "end_index": 222,
            "value": "This looks up the <file>(s) in the index and, if there are any merge\nentries, passes the SHA-1 hash for those files as arguments 1, 2, 3 (empty\nargument if no file), and <file> as argument 4.  File modes for the three\nfiles are passed as arguments 5, 6 and 7.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 482,
            "end_index": 499,
            "value": "\n\\--::\n\tDo not interpret any more arguments as options.\n\n-a::\n\tRun merge against all files in the index that need merging.\n\n-o::\n\tInstead of stopping at the first failed merge, do all of them\n\tin one shot - continue with merging even when previous merges\n\treturned errors, and only return the error code after all the\n\tmerges.\n\n-q::\n\tDo not complain about a failed merge program (a merge program\n\tfailure usually indicates conflicts during the merge). This is for\n\tporcelains which might want to emit custom messages.\n\nIf 'git merge-index' is called with multiple <file>s (or -a) then it\nprocesses them in turn only stopping if merge returns a non-zero exit\ncode.\n\nTypically this is run with a script calling Git's imitation of\nthe 'merge' command from the RCS package.\n\nA sample script called 'git merge-one-file' is included in the\ndistribution.\n\nALERT ALERT ALERT! The Git \"merge object order\" is different from the\nRCS 'merge' program merge object order. In the above ordering, the\noriginal is first. But the argument order to the 3-way merge program\n'merge' is to have the original in the middle. Don't ask me why.\n\nExamples:\n\n----\ntorvalds@ppc970:~/merge-test> git merge-index cat MM\nThis is MM from the original tree.\t\t# original\nThis is modified MM in the branch A.\t\t# merge1\nThis is modified MM in the branch B.\t\t# merge2\nThis is modified MM in the branch B.\t\t# current contents\n----\n\nor\n\n----\ntorvalds@ppc970:~/merge-test> git merge-index cat AA MM\ncat: : No such file or directory\nThis is added AA in the branch A.\nThis is added AA in the branch B.\nThis is added AA in the branch B.\nfatal: merge program failed\n----\n\nwhere the latter example shows how 'git merge-index' will stop trying to\nmerge once anything has returned an error (i.e., `cat` returned an error\nfor the AA file, because it didn't exist in the original, and thus\n'git merge-index' didn't even try to merge the MM thing).\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2397,
            "end_index": 2406,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge-one-file.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 44,
            "end_index": 55,
            "value": "git-merge-one-file - The standard helper program to use with git-merge-index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 133,
            "end_index": 152,
            "value": "[verse]\n'git merge-one-file'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 181,
            "end_index": 206,
            "value": "This is the standard helper program to use with 'git merge-index'\nto resolve a merge after the trivial merge done with 'git read-tree -m'.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 345,
            "end_index": 354,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-merge-tree - Show three-way merge without touching index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git merge-tree' <base-tree> <branch1> <branch2>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 185,
            "end_index": 210,
            "value": "Reads three tree-ish, and output trivial merge results and\nconflicting stages to the standard output.  This is similar to\nwhat three-way 'git read-tree -m' does, but instead of storing the\nresults in the index, the command outputs the entries to the\nstandard output.\n\nThis is meant to be used by higher level scripts to compute\nmerge results outside of the index, and stuff the results back into the\nindex.  For this reason, the output from the command omits\nentries that match the <branch1> tree.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 708,
            "end_index": 717,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-merge.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-merge - Join two or more development histories together\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 98,
            "end_index": 117,
            "value": "[verse]\n'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n\t[--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n\t[--[no-]allow-unrelated-histories]\n\t[--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>...]\n'git merge' (--continue | --abort | --quit)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 403,
            "end_index": 428,
            "value": "Incorporates changes from the named commits (since the time their\nhistories diverged from the current branch) into the current\nbranch.  This command is used by 'git pull' to incorporate changes\nfrom another repository and can be used by hand to merge changes\nfrom one branch into another.\n\nAssume the following history exists and the current branch is\n\"`master`\":\n\n------------\n\t  A---B---C topic\n\t /\n    D---E---F---G master\n------------\n\nThen \"`git merge topic`\" will replay the changes made on the\n`topic` branch since it diverged from `master` (i.e., `E`) until\nits current commit (`C`) on top of `master`, and record the result\nin a new commit along with the names of the two parent commits and\na log message from the user describing the changes.\n\n------------\n\t  A---B---C topic\n\t /         \\\n    D---E---F---G---H master\n------------\n\nThe second syntax (\"`git merge --abort`\") can only be run after the\nmerge has resulted in conflicts. 'git merge --abort' will abort the\nmerge process and try to reconstruct the pre-merge state. However,\nif there were uncommitted changes when the merge started (and\nespecially if those changes were further modified after the merge\nwas started), 'git merge --abort' will in some cases be unable to\nreconstruct the original (pre-merge) changes. Therefore:\n\n*Warning*: Running 'git merge' with non-trivial uncommitted changes is\ndiscouraged: while possible, it may leave you in a state that is hard to\nback out of in the case of a conflict.\n\nThe third syntax (\"`git merge --continue`\") can only be run after the\nmerge has resulted in conflicts.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2012,
            "end_index": 2029,
            "value": "\ninclude::merge-options.txt[]\n\n-m <msg>::\n\tSet the commit message to be used for the merge commit (in\n\tcase one is created).\n+\nIf `--log` is specified, a shortlog of the commits being merged\nwill be appended to the specified message.\n+\nThe 'git fmt-merge-msg' command can be\nused to give a good default for automated 'git merge'\ninvocations. The automated message can include the branch description.\n\n-F <file>::\n--file=<file>::\n\tRead the commit message to be used for the merge commit (in\n\tcase one is created).\n+\nIf `--log` is specified, a shortlog of the commits being merged\nwill be appended to the specified message.\n\n--rerere-autoupdate::\n--no-rerere-autoupdate::\n\tAllow the rerere mechanism to update the index with the\n\tresult of auto-conflict resolution if possible.\n\n--overwrite-ignore::\n--no-overwrite-ignore::\n\tSilently overwrite ignored files from the merge result. This\n\tis the default behavior. Use `--no-overwrite-ignore` to abort.\n\n--abort::\n\tAbort the current conflict resolution process, and\n\ttry to reconstruct the pre-merge state. If an autostash entry is\n\tpresent, apply it to the worktree.\n+\nIf there were uncommitted worktree changes present when the merge\nstarted, 'git merge --abort' will in some cases be unable to\nreconstruct these changes. It is therefore recommended to always\ncommit or stash your changes before running 'git merge'.\n+\n'git merge --abort' is equivalent to 'git reset --merge' when\n`MERGE_HEAD` is present unless `MERGE_AUTOSTASH` is also present in\nwhich case 'git merge --abort' applies the stash entry to the worktree\nwhereas 'git reset --merge' will save the stashed changes in the stash\nlist.\n\n--quit::\n\tForget about the current merge in progress. Leave the index\n\tand the working tree as-is. If `MERGE_AUTOSTASH` is present, the\n\tstash entry will be saved to the stash list.\n\n--continue::\n\tAfter a 'git merge' stops due to conflicts you can conclude the\n\tmerge by running 'git merge --continue' (see \"HOW TO RESOLVE\n\tCONFLICTS\" section below).\n\n<commit>...::\n\tCommits, usually other branch heads, to merge into our branch.\n\tSpecifying more than one commit will create a merge with\n\tmore than two parents (affectionately called an Octopus merge).\n+\nIf no commit is given from the command line, merge the remote-tracking\nbranches that the current branch is configured to use as its upstream.\nSee also the configuration section of this manual page.\n+\nWhen `FETCH_HEAD` (and no other commit) is specified, the branches\nrecorded in the `.git/FETCH_HEAD` file by the previous invocation\nof `git fetch` for merging are merged to the current branch.\n\n\nPRE-MERGE CHECKS\n----------------\n\nBefore applying outside changes, you should get your own work in\ngood shape and committed locally, so it will not be clobbered if\nthere are conflicts.  See also linkgit:git-stash[1].\n'git pull' and 'git merge' will stop without doing anything when\nlocal uncommitted changes overlap with files that 'git pull'/'git\nmerge' may need to update.\n\nTo avoid recording unrelated changes in the merge commit,\n'git pull' and 'git merge' will also abort if there are any changes\nregistered in the index relative to the `HEAD` commit.  (Special\nnarrow exceptions to this rule may exist depending on which merge\nstrategy is in use, but generally, the index must match HEAD.)\n\nIf all named commits are already ancestors of `HEAD`, 'git merge'\nwill exit early with the message \"Already up to date.\"\n\nFAST-FORWARD MERGE\n------------------\n\nOften the current branch head is an ancestor of the named commit.\nThis is the most common case especially when invoked from 'git\npull': you are tracking an upstream repository, you have committed\nno local changes, and now you want to update to a newer upstream\nrevision.  In this case, a new commit is not needed to store the\ncombined history; instead, the `HEAD` (along with the index) is\nupdated to point at the named commit, without creating an extra\nmerge commit.\n\nThis behavior can be suppressed with the `--no-ff` option.\n\nTRUE MERGE\n----------\n\nExcept in a fast-forward merge (see above), the branches to be\nmerged must be tied together by a merge commit that has both of them\nas its parents.\n\nA merged version reconciling the changes from all branches to be\nmerged is committed, and your `HEAD`, index, and working tree are\nupdated to it.  It is possible to have modifications in the working\ntree as long as they do not overlap; the update will preserve them.\n\nWhen it is not obvious how to reconcile the changes, the following\nhappens:\n\n1. The `HEAD` pointer stays the same.\n2. The `MERGE_HEAD` ref is set to point to the other branch head.\n3. Paths that merged cleanly are updated both in the index file and\n   in your working tree.\n4. For conflicting paths, the index file records up to three\n   versions: stage 1 stores the version from the common ancestor,\n   stage 2 from `HEAD`, and stage 3 from `MERGE_HEAD` (you\n   can inspect the stages with `git ls-files -u`).  The working\n   tree files contain the result of the \"merge\" program; i.e. 3-way\n   merge results with familiar conflict markers `<<<` `===` `>>>`.\n5. No other changes are made.  In particular, the local\n   modifications you had before you started merge will stay the\n   same and the index entries for them stay as they were,\n   i.e. matching `HEAD`.\n\nIf you tried a merge which resulted in complex conflicts and\nwant to start over, you can recover with `git merge --abort`.\n\nMERGING TAG\n-----------\n\nWhen merging an annotated (and possibly signed) tag, Git always\ncreates a merge commit even if a fast-forward merge is possible, and\nthe commit message template is prepared with the tag message.\nAdditionally, if the tag is signed, the signature check is reported\nas a comment in the message template. See also linkgit:git-tag[1].\n\nWhen you want to just integrate with the work leading to the commit\nthat happens to be tagged, e.g. synchronizing with an upstream\nrelease point, you may not want to make an unnecessary merge commit.\n\nIn such a case, you can \"unwrap\" the tag yourself before feeding it\nto `git merge`, or pass `--ff-only` when you do not have any work on\nyour own. e.g.\n\n----\ngit fetch origin\ngit merge v1.2.3^0\ngit merge --ff-only v1.2.3\n----\n\n\nHOW CONFLICTS ARE PRESENTED\n---------------------------\n\nDuring a merge, the working tree files are updated to reflect the result\nof the merge.  Among the changes made to the common ancestor's version,\nnon-overlapping ones (that is, you changed an area of the file while the\nother side left that area intact, or vice versa) are incorporated in the\nfinal result verbatim.  When both sides made changes to the same area,\nhowever, Git cannot randomly pick one side over the other, and asks you to\nresolve it by leaving what both sides did to that area.\n\nBy default, Git uses the same style as the one used by the \"merge\" program\nfrom the RCS suite to present such a conflicted hunk, like this:\n\n------------\nHere are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed.\n<<<<<<< yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n=======\nGit makes conflict resolution easy.\n>>>>>>> theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified.\n------------\n\nThe area where a pair of conflicting changes happened is marked with markers\n`<<<<<<<`, `=======`, and `>>>>>>>`.  The part before the `=======`\nis typically your side, and the part afterwards is typically their side.\n\nThe default format does not show what the original said in the conflicting\narea.  You cannot tell how many lines are deleted and replaced with\nBarbie's remark on your side.  The only thing you can tell is that your\nside wants to say it is hard and you'd prefer to go shopping, while the\nother side wants to claim it is easy.\n\nAn alternative style can be used by setting the \"merge.conflictStyle\"\nconfiguration variable to \"diff3\".  In \"diff3\" style, the above conflict\nmay look like this:\n\n------------\nHere are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed.\n<<<<<<< yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n|||||||\nConflict resolution is hard.\n=======\nGit makes conflict resolution easy.\n>>>>>>> theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified.\n------------\n\nIn addition to the `<<<<<<<`, `=======`, and `>>>>>>>` markers, it uses\nanother `|||||||` marker that is followed by the original text.  You can\ntell that the original just stated a fact, and your side simply gave in to\nthat statement and gave up, while the other side tried to have a more\npositive attitude.  You can sometimes come up with a better resolution by\nviewing the original.\n\n\nHOW TO RESOLVE CONFLICTS\n------------------------\n\nAfter seeing a conflict, you can do two things:\n\n * Decide not to merge.  The only clean-ups you need are to reset\n   the index file to the `HEAD` commit to reverse 2. and to clean\n   up working tree changes made by 2. and 3.; `git merge --abort`\n   can be used for this.\n\n * Resolve the conflicts.  Git will mark the conflicts in\n   the working tree.  Edit the files into shape and\n   'git add' them to the index.  Use 'git commit' or\n   'git merge --continue' to seal the deal. The latter command\n   checks whether there is a (interrupted) merge in progress\n   before calling 'git commit'.\n\nYou can work through the conflict with a number of tools:\n\n * Use a mergetool.  `git mergetool` to launch a graphical\n   mergetool which will work you through the merge.\n\n * Look at the diffs.  `git diff` will show a three-way diff,\n   highlighting changes from both the `HEAD` and `MERGE_HEAD`\n   versions.\n\n * Look at the diffs from each branch. `git log --merge -p <path>`\n   will show diffs first for the `HEAD` version and then the\n   `MERGE_HEAD` version.\n\n * Look at the originals.  `git show :1:filename` shows the\n   common ancestor, `git show :2:filename` shows the `HEAD`\n   version, and `git show :3:filename` shows the `MERGE_HEAD`\n   version.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 12058,
            "end_index": 12077,
            "value": "\n* Merge branches `fixes` and `enhancements` on top of\n  the current branch, making an octopus merge:\n+\n------------------------------------------------\n$ git merge fixes enhancements\n------------------------------------------------\n\n* Merge branch `obsolete` into the current branch, using `ours`\n  merge strategy:\n+\n------------------------------------------------\n$ git merge -s ours obsolete\n------------------------------------------------\n\n* Merge branch `maint` into the current branch, but do not make\n  a new commit automatically:\n+\n------------------------------------------------\n$ git merge --no-commit maint\n------------------------------------------------\n+\nThis can be used when you want to include further changes to the\nmerge, or want to write your own merge commit message.\n+\nYou should refrain from abusing this option to sneak substantial\nchanges into a merge commit.  Small fixups like bumping\nrelease/version name would be acceptable.\n\n\ninclude::merge-strategies.txt[]\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 13068,
            "end_index": 13097,
            "value": "include::config/merge.txt[]\n\nbranch.<name>.mergeOptions::\n\tSets default options for merging into branch <name>. The syntax and\n\tsupported options are the same as those of 'git merge', but option\n\tvalues containing whitespace characters are currently not supported.\n\nSEE ALSO\n--------\nlinkgit:git-fmt-merge-msg[1], linkgit:git-pull[1],\nlinkgit:gitattributes[5],\nlinkgit:git-reset[1],\nlinkgit:git-diff[1], linkgit:git-ls-files[1],\nlinkgit:git-add[1], linkgit:git-rm[1],\nlinkgit:git-mergetool[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 13590,
            "end_index": 13599,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mergetool--lib.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 54,
            "end_index": 65,
            "value": "git-mergetool--lib - Common Git merge tool shell scriptlets\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 125,
            "end_index": 144,
            "value": "[verse]\n'TOOL_MODE=(diff|merge) . \"$(git --exec-path)/git-mergetool{litdd}lib\"'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 224,
            "end_index": 249,
            "value": "\nThis is not a command the end user would want to run.  Ever.\nThis documentation is meant for people who are studying the\nPorcelain-ish scripts and/or are writing new ones.\n\nThe 'git-mergetool{litdd}lib' scriptlet is designed to be sourced (using\n`.`) by other shell scripts to set up functions for working\nwith Git merge tools.\n\nBefore sourcing 'git-mergetool{litdd}lib', your script must set `TOOL_MODE`\nto define the operation mode for the functions listed below.\n'diff' and 'merge' are valid values.\n"
        },
        "FUNCTIONS": {
            "name": "FUNCTIONS",
            "start_index": 753,
            "end_index": 774,
            "value": "get_merge_tool::\n\treturns a merge tool. the return code is 1 if we returned a guessed\n\tmerge tool, else 0. '$GIT_MERGETOOL_GUI' may be set to 'true' to\n\tsearch for the appropriate guitool.\n\nget_merge_tool_cmd::\n\treturns the custom command for a merge tool.\n\nget_merge_tool_path::\n\treturns the custom path for a merge tool.\n\ninitialize_merge_tool::\n\tbring merge tool specific functions into scope so they can be used or\n\toverridden.\n\nrun_merge_tool::\n\tlaunches a merge tool given the tool name and a true/false\n\tflag to indicate whether a merge base is present.\n\t'$MERGED', '$LOCAL', '$REMOTE', and '$BASE' must be defined\n\tfor use by the merge tool.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1424,
            "end_index": 1433,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mergetool.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 124,
            "end_index": 143,
            "value": "[verse]\n'git mergetool' [--tool=<tool>] [-y | --[no-]prompt] [<file>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 216,
            "end_index": 241,
            "value": "\nUse `git mergetool` to run one of several merge utilities to resolve\nmerge conflicts.  It is typically run after 'git merge'.\n\nIf one or more <file> parameters are given, the merge tool program will\nbe run to resolve differences on each file (skipping those without\nconflicts).  Specifying a directory will include all unresolved files in\nthat path.  If no <file> names are specified, 'git mergetool' will run\nthe merge tool program on every file with merge conflicts.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 711,
            "end_index": 728,
            "value": "\n-t <tool>::\n--tool=<tool>::\n\tUse the merge resolution program specified by <tool>.\n\tValid values include emerge, gvimdiff, kdiff3,\n\tmeld, vimdiff, and tortoisemerge. Run `git mergetool --tool-help`\n\tfor the list of valid <tool> settings.\n+\nIf a merge resolution program is not specified, 'git mergetool'\nwill use the configuration variable `merge.tool`.  If the\nconfiguration variable `merge.tool` is not set, 'git mergetool'\nwill pick a suitable default.\n+\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable `mergetool.<tool>.path`. For example, you\ncan configure the absolute path to kdiff3 by setting\n`mergetool.kdiff3.path`. Otherwise, 'git mergetool' assumes the\ntool is available in PATH.\n+\nInstead of running one of the known merge tool programs,\n'git mergetool' can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable `mergetool.<tool>.cmd`.\n+\nWhen 'git mergetool' is invoked with this tool (either through the\n`-t` or `--tool` option or the `merge.tool` configuration\nvariable) the configured command line will be invoked with `$BASE`\nset to the name of a temporary file containing the common base for\nthe merge, if available; `$LOCAL` set to the name of a temporary\nfile containing the contents of the file on the current branch;\n`$REMOTE` set to the name of a temporary file containing the\ncontents of the file to be merged, and `$MERGED` set to the name\nof the file to which the merge tool should write the result of the\nmerge resolution.\n+\nIf the custom merge tool correctly indicates the success of a\nmerge resolution with its exit code, then the configuration\nvariable `mergetool.<tool>.trustExitCode` can be set to `true`.\nOtherwise, 'git mergetool' will prompt the user to indicate the\nsuccess of the resolution after the custom tool has exited.\n\n--tool-help::\n\tPrint a list of merge tools that may be used with `--tool`.\n\n-y::\n--no-prompt::\n\tDon't prompt before each invocation of the merge resolution\n\tprogram.\n\tThis is the default if the merge resolution program is\n\texplicitly specified with the `--tool` option or with the\n\t`merge.tool` configuration variable.\n\n--prompt::\n\tPrompt before each invocation of the merge resolution program\n\tto give the user a chance to skip the path.\n\n-g::\n--gui::\n\tWhen 'git-mergetool' is invoked with the `-g` or `--gui` option\n\tthe default merge tool will be read from the configured\n\t`merge.guitool` variable instead of `merge.tool`. If\n\t`merge.guitool` is not set, we will fallback to the tool\n\tconfigured under `merge.tool`.\n\n--no-gui::\n\tThis overrides a previous `-g` or `--gui` setting and reads the\n\tdefault merge tool will be read from the configured `merge.tool`\n\tvariable.\n\n-O<orderfile>::\n\tProcess files in the order specified in the\n\t<orderfile>, which has one shell glob pattern per line.\n\tThis overrides the `diff.orderFile` configuration variable\n\t(see linkgit:git-config[1]).  To cancel `diff.orderFile`,\n\tuse `-O/dev/null`.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 3722,
            "end_index": 3751,
            "value": "include::config/mergetool.txt[]\n\nTEMPORARY FILES\n---------------\n`git mergetool` creates `*.orig` backup files while resolving merges.\nThese are safe to remove once a file has been merged and its\n`git mergetool` session has completed.\n\nSetting the `mergetool.keepBackup` configuration variable to `false`\ncauses `git mergetool` to automatically remove the backup as files\nare successfully merged.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4148,
            "end_index": 4157,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mktag.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-mktag - Creates a tag object with extra validation\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 93,
            "end_index": 112,
            "value": "[verse]\n'git mktag'\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 132,
            "end_index": 149,
            "value": "\n--strict::\n\tBy default mktag turns on the equivalent of\n\tlinkgit:git-fsck[1] `--strict` mode. Use `--no-strict` to\n\tdisable it.\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 278,
            "end_index": 303,
            "value": "\nReads a tag contents on standard input and creates a tag object. The\noutput is the new tag's <object> identifier.\n\nThis command is mostly equivalent to linkgit:git-hash-object[1]\ninvoked with `-t tag -w --stdin`. I.e. both of these will create and\nwrite a tag found in `my-tag`:\n\n    git mktag <my-tag\n    git hash-object -t tag -w --stdin <my-tag\n\nThe difference is that mktag will die before writing the tag if the\ntag doesn't pass a linkgit:git-fsck[1] check.\n\nThe \"fsck\" check done mktag is stricter than what linkgit:git-fsck[1]\nwould run by default in that all `fsck.<msg-id>` messages are promoted\nfrom warnings to errors (so e.g. a missing \"tagger\" line is an error).\n\nExtra headers in the object are also an error under mktag, but ignored\nby linkgit:git-fsck[1]. This extra check can be turned off by setting\nthe appropriate `fsck.<msg-id>` varible:\n\n    git -c fsck.extraHeaderEntry=ignore mktag <my-tag-with-headers\n\nTag Format\n----------\nA tag signature file, to be fed to this command's standard input,\nhas a very simple fixed format: four lines of\n\n  object <hash>\n  type <typename>\n  tag <tagname>\n  tagger <tagger>\n\nfollowed by some 'optional' free-form message (some tags created\nby older Git may not have `tagger` line).  The message, when it\nexists, is separated by a blank line from the header.  The\nmessage part may contain a signature that Git itself doesn't\ncare about, but that can be verified with gpg.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1732,
            "end_index": 1741,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mktree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-mktree - Build a tree-object from ls-tree formatted text\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git mktree' [-z] [--missing] [--batch]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 168,
            "end_index": 193,
            "value": "Reads standard input in non-recursive `ls-tree` output format, and creates\na tree object.  The order of the tree entries is normalized by mktree so\npre-sorting the input is not required.  The object name of the tree object\nbuilt is written to the standard output.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 457,
            "end_index": 474,
            "value": "\n-z::\n\tRead the NUL-terminated `ls-tree -z` output instead.\n\n--missing::\n\tAllow missing objects.  The default behaviour (without this option)\n\tis to verify that each tree entry's sha1 identifies an existing\n\tobject.  This option has no effect on the treatment of gitlink entries\n\t(aka \"submodules\") which are always allowed to be missing.\n\n--batch::\n\tAllow building of more than one tree object before exiting.  Each\n\ttree is separated by as single blank line. The final new-line is\n\toptional.  Note - if the `-z` option is used, lines are terminated\n\twith NUL.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1035,
            "end_index": 1044,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-multi-pack-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 48,
            "end_index": 59,
            "value": "git-multi-pack-index - Write and verify multi-pack-indexes\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 119,
            "end_index": 138,
            "value": "[verse]\n'git multi-pack-index' [--object-dir=<dir>] [--[no-]progress] <subcommand>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 221,
            "end_index": 246,
            "value": "Write or verify a multi-pack-index (MIDX) file.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 294,
            "end_index": 311,
            "value": "\n--object-dir=<dir>::\n\tUse given directory for the location of Git objects. We check\n\t`<dir>/packs/multi-pack-index` for the current MIDX file, and\n\t`<dir>/packs` for the pack-files to index.\n\n--[no-]progress::\n\tTurn progress on/off explicitly. If neither is specified, progress is\n\tshown if standard error is connected to a terminal.\n\nThe following subcommands are available:\n\nwrite::\n\tWrite a new MIDX file.\n\nverify::\n\tVerify the contents of the MIDX file.\n\nexpire::\n\tDelete the pack-files that are tracked \tby the MIDX file, but\n\thave no objects referenced by the MIDX. Rewrite the MIDX file\n\tafterward to remove all references to these pack-files.\n\nrepack::\n\tCreate a new pack-file containing objects in small pack-files\n\treferenced by the multi-pack-index. If the size given by the\n\t`--batch-size=<size>` argument is zero, then create a pack\n\tcontaining all objects referenced by the multi-pack-index. For\n\ta non-zero batch size, Select the pack-files by examining packs\n\tfrom oldest-to-newest, computing the \"expected size\" by counting\n\tthe number of objects in the pack referenced by the\n\tmulti-pack-index, then divide by the total number of objects in\n\tthe pack and multiply by the pack size. We select packs with\n\texpected size below the batch size until the set of packs have\n\ttotal expected size at least the batch size, or all pack-files\n\tare considered. If only one pack-file is selected, then do\n\tnothing. If a new pack-file is created, rewrite the\n\tmulti-pack-index to reference the new pack-file. A later run of\n\t'git multi-pack-index expire' will delete the pack-files that\n\twere part of this batch.\n+\nIf `repack.packKeptObjects` is `false`, then any pack-files with an\nassociated `.keep` file will not be selected for the batch to repack.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2069,
            "end_index": 2088,
            "value": "\n* Write a MIDX file for the packfiles in the current .git folder.\n+\n-----------------------------------------------\n$ git multi-pack-index write\n-----------------------------------------------\n\n* Write a MIDX file for the packfiles in an alternate object store.\n+\n-----------------------------------------------\n$ git multi-pack-index --object-dir <alt> write\n-----------------------------------------------\n\n* Verify the MIDX file for the packfiles in the current .git folder.\n+\n-----------------------------------------------\n$ git multi-pack-index verify\n-----------------------------------------------\n\n\nSEE ALSO\n--------\nSee link:technical/multi-pack-index.html[The Multi-Pack-Index Design\nDocument] and link:technical/pack-format.html[The Multi-Pack-Index\nFormat] for more information on the multi-pack-index feature.\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2914,
            "end_index": 2923,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-mv.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 20,
            "end_index": 31,
            "value": "git-mv - Move or rename a file, a directory, or a symlink\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 90,
            "end_index": 109,
            "value": "[verse]\n'git mv' <options>... <args>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 149,
            "end_index": 174,
            "value": "Move or rename a file, directory or symlink.\n\n git mv [-v] [-f] [-n] [-k] <source> <destination>\n git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n\nIn the first form, it renames <source>, which must exist and be either\na file, symlink or directory, to <destination>.\nIn the second form, the last argument has to be an existing\ndirectory; the given sources will be moved into this directory.\n\nThe index is updated after successful completion, but the change must still be\ncommitted.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 671,
            "end_index": 688,
            "value": "\n-f::\n--force::\n\tForce renaming or moving of a file even if the target exists\n-k::\n\tSkip move or rename actions which would lead to an error\n\tcondition. An error happens when a source is neither existing nor\n\tcontrolled by Git, or when it would overwrite an existing\n\tfile unless `-f` is given.\n-n::\n--dry-run::\n\tDo nothing; only show what would happen\n\n-v::\n--verbose::\n\tReport the names of files as they are moved.\n"
        },
        "SUBMODULES": {
            "name": "SUBMODULES",
            "start_index": 1104,
            "end_index": 1127,
            "value": "Moving a submodule using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will update the gitfile and\ncore.worktree setting to make the submodule work in the new location.\nIt also will attempt to update the submodule.<name>.path setting in\nthe linkgit:gitmodules[5] file and stage that file (unless -n is used).\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 1465,
            "end_index": 1476,
            "value": "Each time a superproject update moves a populated submodule (e.g. when\nswitching between commits before and after the move) a stale submodule\ncheckout will remain in the old location and an empty directory will\nappear in the new location. To populate the submodule again in the new\nlocation the user will have to run \"git submodule update\"\nafterwards. Removing the old directory is only safe when it uses a\ngitfile, as otherwise the history of the submodule will be deleted\ntoo. Both steps will be obsolete when recursive submodule update has\nbeen implemented.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2037,
            "end_index": 2046,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-name-rev.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-name-rev - Find symbolic names for given revs\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 94,
            "end_index": 113,
            "value": "[verse]\n'git name-rev' [--tags] [--refs=<pattern>]\n\t       ( --all | --stdin | <commit-ish>... )\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 210,
            "end_index": 235,
            "value": "Finds symbolic names suitable for human digestion for revisions given in any\nformat parsable by 'git rev-parse'.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 349,
            "end_index": 366,
            "value": "\n--tags::\n\tDo not use branch names, but only tags to name the commits\n\n--refs=<pattern>::\n\tOnly use refs whose names match a given shell pattern.  The pattern\n\tcan be one of branch name, tag name or fully qualified ref name. If\n\tgiven multiple times, use refs whose names match any of the given shell\n\tpatterns. Use `--no-refs` to clear any previous ref patterns given.\n\n--exclude=<pattern>::\n\tDo not use any ref whose name matches a given shell pattern. The\n\tpattern can be one of branch name, tag name or fully qualified ref\n\tname. If given multiple times, a ref will be excluded when it matches\n\tany of the given patterns. When used together with --refs, a ref will\n\tbe used as a match only when it matches at least one --refs pattern and\n\tdoes not match any --exclude patterns. Use `--no-exclude` to clear the\n\tlist of exclude patterns.\n\n--all::\n\tList all commits reachable from all refs\n\n--stdin::\n\tTransform stdin by substituting all the 40-character SHA-1\n\thexes (say $hex) with \"$hex ($rev_name)\".  When used with\n\t--name-only, substitute with \"$rev_name\", omitting $hex\n\taltogether.  Intended for the scripter's use.\n\n--name-only::\n\tInstead of printing both the SHA-1 and the name, print only\n\tthe name.  If given with --tags the usual tag prefix of\n\t\"tags/\" is also omitted from the name, matching the output\n\tof `git-describe` more closely.\n\n--no-undefined::\n\tDie with error code != 0 when a reference is undefined,\n\tinstead of printing `undefined`.\n\n--always::\n\tShow uniquely abbreviated commit object as fallback.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1893,
            "end_index": 1912,
            "value": "\nGiven a commit, find out where it is relative to the local refs. Say somebody\nwrote you about that fantastic commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a.\nOf course, you look into the commit, but that only tells you what happened, but\nnot the context.\n\nEnter 'git name-rev':\n\n------------\n% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a\n33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940\n------------\n\nNow you are wiser, because you know that it happened 940 revisions before v0.99.\n\nAnother nice thing you can do is:\n\n------------\n% git log | git name-rev --stdin\n------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2507,
            "end_index": 2516,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-notes.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-notes - Add or inspect object notes\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 77,
            "end_index": 96,
            "value": "[verse]\n'git notes' [list [<object>]]\n'git notes' add [-f] [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]\n'git notes' copy [-f] ( --stdin | <from-object> [<to-object>] )\n'git notes' append [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]\n'git notes' edit [--allow-empty] [<object>]\n'git notes' show [<object>]\n'git notes' merge [-v | -q] [-s <strategy> ] <notes-ref>\n'git notes' merge --commit [-v | -q]\n'git notes' merge --abort [-v | -q]\n'git notes' remove [--ignore-missing] [--stdin] [<object>...]\n'git notes' prune [-n] [-v]\n'git notes' get-ref\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 693,
            "end_index": 718,
            "value": "Adds, removes, or reads notes attached to objects, without touching\nthe objects themselves.\n\nBy default, notes are saved to and read from `refs/notes/commits`, but\nthis default can be overridden.  See the OPTIONS, CONFIGURATION, and\nENVIRONMENT sections below.  If this ref does not exist, it will be\nquietly created when it is first needed to store a note.\n\nA typical use of notes is to supplement a commit message without\nchanging the commit itself. Notes can be shown by 'git log' along with\nthe original commit message. To distinguish these notes from the\nmessage stored in the commit object, the notes are indented like the\nmessage, after an unindented line saying \"Notes (<refname>):\" (or\n\"Notes:\" for `refs/notes/commits`).\n\nNotes can also be added to patches prepared with `git format-patch` by\nusing the `--notes` option. Such notes are added as a patch commentary\nafter a three dash separator line.\n\nTo change which notes are shown by 'git log', see the\n\"notes.displayRef\" configuration in linkgit:git-log[1].\n\nSee the \"notes.rewrite.<command>\" configuration for a way to carry\nnotes across commands that rewrite commits.\n\n"
        },
        "SUBCOMMANDS": {
            "name": "SUBCOMMANDS",
            "start_index": 1851,
            "end_index": 1876,
            "value": "\nlist::\n\tList the notes object for a given object. If no object is\n\tgiven, show a list of all note objects and the objects they\n\tannotate (in the format \"<note object> <annotated object>\").\n\tThis is the default subcommand if no subcommand is given.\n\nadd::\n\tAdd notes for a given object (defaults to HEAD). Abort if the\n\tobject already has notes (use `-f` to overwrite existing notes).\n\tHowever, if you're using `add` interactively (using an editor\n\tto supply the notes contents), then - instead of aborting -\n\tthe existing notes will be opened in the editor (like the `edit`\n\tsubcommand).\n\ncopy::\n\tCopy the notes for the first object onto the second object (defaults to\n\tHEAD). Abort if the second object already has notes, or if the first\n\tobject has none (use -f to overwrite existing notes to the\n\tsecond object). This subcommand is equivalent to:\n\t`git notes add [-f] -C $(git notes list <from-object>) <to-object>`\n+\nIn `--stdin` mode, take lines in the format\n+\n----------\n<from-object> SP <to-object> [ SP <rest> ] LF\n----------\n+\non standard input, and copy the notes from each <from-object> to its\ncorresponding <to-object>.  (The optional `<rest>` is ignored so that\nthe command can read the input given to the `post-rewrite` hook.)\n\nappend::\n\tAppend to the notes of an existing object (defaults to HEAD).\n\tCreates a new notes object if needed.\n\nedit::\n\tEdit the notes for a given object (defaults to HEAD).\n\nshow::\n\tShow the notes for a given object (defaults to HEAD).\n\nmerge::\n\tMerge the given notes ref into the current notes ref.\n\tThis will try to merge the changes made by the given\n\tnotes ref (called \"remote\") since the merge-base (if\n\tany) into the current notes ref (called \"local\").\n+\nIf conflicts arise and a strategy for automatically resolving\nconflicting notes (see the \"NOTES MERGE STRATEGIES\" section) is not given,\nthe \"manual\" resolver is used. This resolver checks out the\nconflicting notes in a special worktree (`.git/NOTES_MERGE_WORKTREE`),\nand instructs the user to manually resolve the conflicts there.\nWhen done, the user can either finalize the merge with\n'git notes merge --commit', or abort the merge with\n'git notes merge --abort'.\n\nremove::\n\tRemove the notes for given objects (defaults to HEAD). When\n\tgiving zero or one object from the command line, this is\n\tequivalent to specifying an empty note message to\n\tthe `edit` subcommand.\n\nprune::\n\tRemove all notes for non-existing/unreachable objects.\n\nget-ref::\n\tPrint the current notes ref. This provides an easy way to\n\tretrieve the current notes ref (e.g. from scripts).\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 4440,
            "end_index": 4457,
            "value": "\n-f::\n--force::\n\tWhen adding notes to an object that already has notes,\n\toverwrite the existing notes (instead of aborting).\n\n-m <msg>::\n--message=<msg>::\n\tUse the given note message (instead of prompting).\n\tIf multiple `-m` options are given, their values\n\tare concatenated as separate paragraphs.\n\tLines starting with `#` and empty lines other than a\n\tsingle line between paragraphs will be stripped out.\n\n-F <file>::\n--file=<file>::\n\tTake the note message from the given file.  Use '-' to\n\tread the note message from the standard input.\n\tLines starting with `#` and empty lines other than a\n\tsingle line between paragraphs will be stripped out.\n\n-C <object>::\n--reuse-message=<object>::\n\tTake the given blob object (for example, another note) as the\n\tnote message. (Use `git notes copy <object>` instead to\n\tcopy notes between objects.)\n\n-c <object>::\n--reedit-message=<object>::\n\tLike '-C', but with `-c` the editor is invoked, so that\n\tthe user can further edit the note message.\n\n--allow-empty::\n\tAllow an empty note object to be stored. The default behavior is\n\tto automatically remove empty notes.\n\n--ref <ref>::\n\tManipulate the notes tree in <ref>.  This overrides\n\t`GIT_NOTES_REF` and the \"core.notesRef\" configuration.  The ref\n\tspecifies the full refname when it begins with `refs/notes/`; when it\n\tbegins with `notes/`, `refs/` and otherwise `refs/notes/` is prefixed\n\tto form a full name of the ref.\n\n--ignore-missing::\n\tDo not consider it an error to request removing notes from an\n\tobject that does not have notes attached to it.\n\n--stdin::\n\tAlso read the object names to remove notes from the standard\n\tinput (there is no reason you cannot combine this with object\n\tnames from the command line).\n\n-n::\n--dry-run::\n\tDo not remove anything; just report the object names whose notes\n\twould be removed.\n\n-s <strategy>::\n--strategy=<strategy>::\n\tWhen merging notes, resolve notes conflicts using the given\n\tstrategy. The following strategies are recognized: \"manual\"\n\t(default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\".\n\tThis option overrides the \"notes.mergeStrategy\" configuration setting.\n\tSee the \"NOTES MERGE STRATEGIES\" section below for more\n\tinformation on each notes merge strategy.\n\n--commit::\n\tFinalize an in-progress 'git notes merge'. Use this option\n\twhen you have resolved the conflicts that 'git notes merge'\n\tstored in .git/NOTES_MERGE_WORKTREE. This amends the partial\n\tmerge commit created by 'git notes merge' (stored in\n\t.git/NOTES_MERGE_PARTIAL) by adding the notes in\n\t.git/NOTES_MERGE_WORKTREE. The notes ref stored in the\n\t.git/NOTES_MERGE_REF symref is updated to the resulting commit.\n\n--abort::\n\tAbort/reset an in-progress 'git notes merge', i.e. a notes merge\n\twith conflicts. This simply removes all files related to the\n\tnotes merge.\n\n-q::\n--quiet::\n\tWhen merging notes, operate quietly.\n\n-v::\n--verbose::\n\tWhen merging notes, be more verbose.\n\tWhen pruning notes, report all object names whose notes are\n\tremoved.\n\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 7421,
            "end_index": 7444,
            "value": "\nCommit notes are blobs containing extra information about an object\n(usually information to supplement a commit's message).  These blobs\nare taken from notes refs.  A notes ref is usually a branch which\ncontains \"files\" whose paths are the object names for the objects\nthey describe, with some directory separators included for performance\nreasons footnote:[Permitted pathnames have the form\n'bf'`/`'fe'`/`'30'`/`'...'`/`'680d5a...': a sequence of directory\nnames of two hexadecimal digits each followed by a filename with the\nrest of the object ID.].\n\nEvery notes change creates a new commit at the specified notes ref.\nYou can therefore inspect the history of the notes by invoking, e.g.,\n`git log -p notes/commits`.  Currently the commit message only records\nwhich operation triggered the update, and the commit authorship is\ndetermined according to the usual rules (see linkgit:git-commit[1]).\nThese details may change in the future.\n\nIt is also permitted for a notes ref to point directly to a tree\nobject, in which case the history of the notes can be read with\n`git log -p -g <refname>`.\n\n\nNOTES MERGE STRATEGIES\n----------------------\n\nThe default notes merge strategy is \"manual\", which checks out\nconflicting notes in a special work tree for resolving notes conflicts\n(`.git/NOTES_MERGE_WORKTREE`), and instructs the user to resolve the\nconflicts in that work tree.\nWhen done, the user can either finalize the merge with\n'git notes merge --commit', or abort the merge with\n'git notes merge --abort'.\n\nUsers may select an automated merge strategy from among the following using\neither -s/--strategy option or configuring notes.mergeStrategy accordingly:\n\n\"ours\" automatically resolves conflicting notes in favor of the local\nversion (i.e. the current notes ref).\n\n\"theirs\" automatically resolves notes conflicts in favor of the remote\nversion (i.e. the given notes ref being merged into the current notes\nref).\n\n\"union\" automatically resolves notes conflicts by concatenating the\nlocal and remote versions.\n\n\"cat_sort_uniq\" is similar to \"union\", but in addition to concatenating\nthe local and remote versions, this strategy also sorts the resulting\nlines, and removes duplicate lines from the result. This is equivalent\nto applying the \"cat | sort | uniq\" shell pipeline to the local and\nremote versions. This strategy is useful if the notes follow a line-based\nformat where one wants to avoid duplicated lines in the merge result.\nNote that if either the local or remote version contain duplicate lines\nprior to the merge, these will also be removed by this notes merge\nstrategy.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 10037,
            "end_index": 10056,
            "value": "\nYou can use notes to add annotations with information that was not\navailable at the time a commit was written.\n\n------------\n$ git notes add -m 'Tested-by: Johannes Sixt <j6t@kdbg.org>' 72a144e2\n$ git show -s 72a144e\n[...]\n    Signed-off-by: Junio C Hamano <gitster@pobox.com>\n\nNotes:\n    Tested-by: Johannes Sixt <j6t@kdbg.org>\n------------\n\nIn principle, a note is a regular Git blob, and any kind of\n(non-)format is accepted.  You can binary-safely create notes from\narbitrary files using 'git hash-object':\n\n------------\n$ cc *.c\n$ blob=$(git hash-object -w a.out)\n$ git notes --ref=built add --allow-empty -C \"$blob\" HEAD\n------------\n\n(You cannot simply use `git notes --ref=built add -F a.out HEAD`\nbecause that is not binary-safe.)\nOf course, it doesn't make much sense to display non-text-format notes\nwith 'git log', so if you use such notes, you'll probably need to write\nsome special-purpose tools to do something useful with them.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 11002,
            "end_index": 11031,
            "value": "\ncore.notesRef::\n\tNotes ref to read and manipulate instead of\n\t`refs/notes/commits`.  Must be an unabbreviated ref name.\n\tThis setting can be overridden through the environment and\n\tcommand line.\n\nnotes.mergeStrategy::\n\tWhich merge strategy to choose by default when resolving notes\n\tconflicts.  Must be one of `manual`, `ours`, `theirs`, `union`, or\n\t`cat_sort_uniq`.  Defaults to `manual`.  See \"NOTES MERGE STRATEGIES\"\n\tsection above for more information on each strategy.\n+\nThis setting can be overridden by passing the `--strategy` option.\n\nnotes.<name>.mergeStrategy::\n\tWhich merge strategy to choose when doing a notes merge into\n\trefs/notes/<name>.  This overrides the more general\n\t\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section above\n\tfor more information on each available strategy.\n\nnotes.displayRef::\n\tWhich ref (or refs, if a glob or specified more than once), in\n\taddition to the default set by `core.notesRef` or\n\t`GIT_NOTES_REF`, to read notes from when showing commit\n\tmessages with the 'git log' family of commands.\n\tThis setting can be overridden on the command line or by the\n\t`GIT_NOTES_DISPLAY_REF` environment variable.\n\tSee linkgit:git-log[1].\n\nnotes.rewrite.<command>::\n\tWhen rewriting commits with <command> (currently `amend` or\n\t`rebase`), if this variable is `false`, git will not copy\n\tnotes from the original to the rewritten commit.  Defaults to\n\t`true`.  See also \"`notes.rewriteRef`\" below.\n+\nThis setting can be overridden by the `GIT_NOTES_REWRITE_REF`\nenvironment variable.\n\nnotes.rewriteMode::\n\tWhen copying notes during a rewrite, what to do if the target\n\tcommit already has a note.  Must be one of `overwrite`,\n\t`concatenate`, `cat_sort_uniq`, or `ignore`.  Defaults to\n\t`concatenate`.\n+\nThis setting can be overridden with the `GIT_NOTES_REWRITE_MODE`\nenvironment variable.\n\nnotes.rewriteRef::\n\tWhen copying notes during a rewrite, specifies the (fully\n\tqualified) ref whose notes should be copied.  May be a glob,\n\tin which case notes in all matching refs will be copied.  You\n\tmay also specify this configuration several times.\n+\nDoes not have a default value; you must configure this variable to\nenable note rewriting.\n+\nCan be overridden with the `GIT_NOTES_REWRITE_REF` environment variable.\n\n"
        },
        "ENVIRONMENT": {
            "name": "ENVIRONMENT",
            "start_index": 13290,
            "end_index": 13315,
            "value": "\n`GIT_NOTES_REF`::\n\tWhich ref to manipulate notes from, instead of `refs/notes/commits`.\n\tThis overrides the `core.notesRef` setting.\n\n`GIT_NOTES_DISPLAY_REF`::\n\tColon-delimited list of refs or globs indicating which refs,\n\tin addition to the default from `core.notesRef` or\n\t`GIT_NOTES_REF`, to read notes from when showing commit\n\tmessages.\n\tThis overrides the `notes.displayRef` setting.\n+\nA warning will be issued for refs that do not exist, but a glob that\ndoes not match any refs is silently ignored.\n\n`GIT_NOTES_REWRITE_MODE`::\n\tWhen copying notes during a rewrite, what to do if the target\n\tcommit already has a note.\n\tMust be one of `overwrite`, `concatenate`, `cat_sort_uniq`, or `ignore`.\n\tThis overrides the `core.rewriteMode` setting.\n\n`GIT_NOTES_REWRITE_REF`::\n\tWhen rewriting commits, which notes to copy from the original\n\tto the rewritten commit.  Must be a colon-delimited list of\n\trefs or globs.\n+\nIf not set in the environment, the list of notes to copy depends\non the `notes.rewrite.<command>` and `notes.rewriteRef` settings.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 14363,
            "end_index": 14372,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-p4.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 20,
            "end_index": 31,
            "value": "git-p4 - Import from and submit to Perforce repositories\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 89,
            "end_index": 108,
            "value": "[verse]\n'git p4 clone' [<sync options>] [<clone options>] <p4 depot path>...\n'git p4 sync' [<sync options>] [<p4 depot path>...]\n'git p4 rebase'\n'git p4 submit' [<submit options>] [<master branch name>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 312,
            "end_index": 337,
            "value": "This command provides a way to interact with p4 repositories\nusing Git.\n\nCreate a new Git repository from an existing p4 repository using\n'git p4 clone', giving it one or more p4 depot paths.  Incorporate\nnew commits from p4 changes with 'git p4 sync'.  The 'sync' command\nis also used to include new branches from other p4 depot paths.\nSubmit Git changes back to p4 using 'git p4 submit'.  The command\n'git p4 rebase' does a sync plus rebases the current branch onto\nthe updated p4 remote branch.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 836,
            "end_index": 855,
            "value": "* Clone a repository:\n+\n------------\n$ git p4 clone //depot/path/project\n------------\n\n* Do some work in the newly created Git repository:\n+\n------------\n$ cd project\n$ vi foo.h\n$ git commit -a -m \"edited foo.h\"\n------------\n\n* Update the Git repository with recent changes from p4, rebasing your\n  work on top:\n+\n------------\n$ git p4 rebase\n------------\n\n* Submit your commits back to p4:\n+\n------------\n$ git p4 submit\n------------\n\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 1291,
            "end_index": 1310,
            "value": "\nClone\n~~~~~\nGenerally, 'git p4 clone' is used to create a new Git directory\nfrom an existing p4 repository:\n------------\n$ git p4 clone //depot/path/project\n------------\nThis:\n\n1. Creates an empty Git repository in a subdirectory called 'project'.\n+\n2. Imports the full contents of the head revision from the given p4\n   depot path into a single commit in the Git branch 'refs/remotes/p4/master'.\n+\n3. Creates a local branch, 'master' from this remote and checks it out.\n\nTo reproduce the entire p4 history in Git, use the '@all' modifier on\nthe depot path:\n------------\n$ git p4 clone //depot/path/project@all\n------------\n\n\nSync\n~~~~\nAs development continues in the p4 repository, those changes can\nbe included in the Git repository using:\n------------\n$ git p4 sync\n------------\nThis command finds new changes in p4 and imports them as Git commits.\n\nP4 repositories can be added to an existing Git repository using\n'git p4 sync' too:\n------------\n$ mkdir repo-git\n$ cd repo-git\n$ git init\n$ git p4 sync //path/in/your/perforce/depot\n------------\nThis imports the specified depot into\n'refs/remotes/p4/master' in an existing Git repository.  The\n`--branch` option can be used to specify a different branch to\nbe used for the p4 content.\n\nIf a Git repository includes branches 'refs/remotes/origin/p4', these\nwill be fetched and consulted first during a 'git p4 sync'.  Since\nimporting directly from p4 is considerably slower than pulling changes\nfrom a Git remote, this can be useful in a multi-developer environment.\n\nIf there are multiple branches, doing 'git p4 sync' will automatically\nuse the \"BRANCH DETECTION\" algorithm to try to partition new changes\ninto the right branch.  This can be overridden with the `--branch`\noption to specify just a single branch to update.\n\n\nRebase\n~~~~~~\nA common working pattern is to fetch the latest changes from the p4 depot\nand merge them with local uncommitted changes.  Often, the p4 repository\nis the ultimate location for all code, thus a rebase workflow makes\nsense.  This command does 'git p4 sync' followed by 'git rebase' to move\nlocal commits on top of updated p4 changes.\n------------\n$ git p4 rebase\n------------\n\n\nSubmit\n~~~~~~\nSubmitting changes from a Git repository back to the p4 repository\nrequires a separate p4 client workspace.  This should be specified\nusing the `P4CLIENT` environment variable or the Git configuration\nvariable 'git-p4.client'.  The p4 client must exist, but the client root\nwill be created and populated if it does not already exist.\n\nTo submit all changes that are in the current Git branch but not in\nthe 'p4/master' branch, use:\n------------\n$ git p4 submit\n------------\n\nTo specify a branch other than the current one, use:\n------------\n$ git p4 submit topicbranch\n------------\n\nTo specify a single commit or a range of commits, use:\n------------\n$ git p4 submit --commit <sha1>\n$ git p4 submit --commit <sha1..sha1>\n------------\n\nThe upstream reference is generally 'refs/remotes/p4/master', but can\nbe overridden using the `--origin=` command-line option.\n\nThe p4 changes will be created as the user invoking 'git p4 submit'. The\n`--preserve-user` option will cause ownership to be modified\naccording to the author of the Git commit.  This option requires admin\nprivileges in p4, which can be granted using 'p4 protect'.\n\nTo shelve changes instead of submitting, use `--shelve` and `--update-shelve`:\n\n----\n$ git p4 submit --shelve\n$ git p4 submit --update-shelve 1234 --update-shelve 2345\n----\n\n\nUnshelve\n~~~~~~~~\nUnshelving will take a shelved P4 changelist, and produce the equivalent git commit\nin the branch refs/remotes/p4-unshelved/<changelist>.\n\nThe git commit is created relative to the current origin revision (HEAD by default).\nA parent commit is created based on the origin, and then the unshelve commit is\ncreated based on that.\n\nThe origin revision can be changed with the \"--origin\" option.\n\nIf the target branch in refs/remotes/p4-unshelved already exists, the old one will\nbe renamed.\n\n----\n$ git p4 sync\n$ git p4 unshelve 12345\n$ git show p4-unshelved/12345\n<submit more changes via p4 to the same files>\n$ git p4 unshelve 12345\n<refuses to unshelve until git is in sync with p4 again>\n\n----\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 5511,
            "end_index": 5528,
            "value": "\nGeneral options\n~~~~~~~~~~~~~~~\nAll commands except clone accept these options.\n\n--git-dir <dir>::\n\tSet the `GIT_DIR` environment variable.  See linkgit:git[1].\n\n-v::\n--verbose::\n\tProvide more progress information.\n\nSync options\n~~~~~~~~~~~~\nThese options can be used in the initial 'clone' as well as in\nsubsequent 'sync' operations.\n\n--branch <ref>::\n\tImport changes into <ref> instead of refs/remotes/p4/master.\n\tIf <ref> starts with refs/, it is used as is.  Otherwise, if\n\tit does not start with p4/, that prefix is added.\n+\nBy default a <ref> not starting with refs/ is treated as the\nname of a remote-tracking branch (under refs/remotes/).  This\nbehavior can be modified using the --import-local option.\n+\nThe default <ref> is \"master\".\n+\nThis example imports a new remote \"p4/proj2\" into an existing\nGit repository:\n+\n----\n    $ git init\n    $ git p4 sync --branch=refs/remotes/p4/proj2 //depot/proj2\n----\n\n--detect-branches::\n\tUse the branch detection algorithm to find new paths in p4.  It is\n\tdocumented below in \"BRANCH DETECTION\".\n\n--changesfile <file>::\n\tImport exactly the p4 change numbers listed in 'file', one per\n\tline.  Normally, 'git p4' inspects the current p4 repository\n\tstate and detects the changes it should import.\n\n--silent::\n\tDo not print any progress information.\n\n--detect-labels::\n\tQuery p4 for labels associated with the depot paths, and add\n\tthem as tags in Git. Limited usefulness as only imports labels\n\tassociated with new changelists. Deprecated.\n\n--import-labels::\n\tImport labels from p4 into Git.\n\n--import-local::\n\tBy default, p4 branches are stored in 'refs/remotes/p4/',\n\twhere they will be treated as remote-tracking branches by\n\tlinkgit:git-branch[1] and other commands.  This option instead\n\tputs p4 branches in 'refs/heads/p4/'.  Note that future\n\tsync operations must specify `--import-local` as well so that\n\tthey can find the p4 branches in refs/heads.\n\n--max-changes <n>::\n\tImport at most 'n' changes, rather than the entire range of\n\tchanges included in the given revision specifier. A typical\n\tusage would be use '@all' as the revision specifier, but then\n\tto use '--max-changes 1000' to import only the last 1000\n\trevisions rather than the entire revision history.\n\n--changes-block-size <n>::\n\tThe internal block size to use when converting a revision\n\tspecifier such as '@all' into a list of specific change\n\tnumbers. Instead of using a single call to 'p4 changes' to\n\tfind the full list of changes for the conversion, there are a\n\tsequence of calls to 'p4 changes -m', each of which requests\n\tone block of changes of the given size. The default block size\n\tis 500, which should usually be suitable.\n\n--keep-path::\n\tThe mapping of file names from the p4 depot path to Git, by\n\tdefault, involves removing the entire depot path.  With this\n\toption, the full p4 depot path is retained in Git.  For example,\n\tpath '//depot/main/foo/bar.c', when imported from\n\t'//depot/main/', becomes 'foo/bar.c'.  With `--keep-path`, the\n\tGit path is instead 'depot/main/foo/bar.c'.\n\n--use-client-spec::\n\tUse a client spec to find the list of interesting files in p4.\n\tSee the \"CLIENT SPEC\" section below.\n\n-/ <path>::\n\tExclude selected depot paths when cloning or syncing.\n\nClone options\n~~~~~~~~~~~~~\nThese options can be used in an initial 'clone', along with the 'sync'\noptions described above.\n\n--destination <directory>::\n\tWhere to create the Git repository.  If not provided, the last\n\tcomponent in the p4 depot path is used to create a new\n\tdirectory.\n\n--bare::\n\tPerform a bare clone.  See linkgit:git-clone[1].\n\nSubmit options\n~~~~~~~~~~~~~~\nThese options can be used to modify 'git p4 submit' behavior.\n\n--origin <commit>::\n\tUpstream location from which commits are identified to submit to\n\tp4.  By default, this is the most recent p4 commit reachable\n\tfrom `HEAD`.\n\n-M::\n\tDetect renames.  See linkgit:git-diff[1].  Renames will be\n\trepresented in p4 using explicit 'move' operations.  There\n\tis no corresponding option to detect copies, but there are\n\tvariables for both moves and copies.\n\n--preserve-user::\n\tRe-author p4 changes before submitting to p4.  This option\n\trequires p4 admin privileges.\n\n--export-labels::\n\tExport tags from Git as p4 labels. Tags found in Git are applied\n\tto the perforce working directory.\n\n-n::\n--dry-run::\n\tShow just what commits would be submitted to p4; do not change\n\tstate in Git or p4.\n\n--prepare-p4-only::\n\tApply a commit to the p4 workspace, opening, adding and deleting\n\tfiles in p4 as for a normal submit operation.  Do not issue the\n\tfinal \"p4 submit\", but instead print a message about how to\n\tsubmit manually or revert.  This option always stops after the\n\tfirst (oldest) commit.  Git tags are not exported to p4.\n\n--shelve::\n\tInstead of submitting create a series of shelved changelists.\n\tAfter creating each shelve, the relevant files are reverted/deleted.\n\tIf you have multiple commits pending multiple shelves will be created.\n\n--update-shelve CHANGELIST::\n\tUpdate an existing shelved changelist with this commit. Implies\n\t--shelve. Repeat for multiple shelved changelists.\n\n--conflict=(ask|skip|quit)::\n\tConflicts can occur when applying a commit to p4.  When this\n\thappens, the default behavior (\"ask\") is to prompt whether to\n\tskip this commit and continue, or quit.  This option can be used\n\tto bypass the prompt, causing conflicting commits to be automatically\n\tskipped, or to quit trying to apply commits, without prompting.\n\n--branch <branch>::\n\tAfter submitting, sync this named branch instead of the default\n\tp4/master.  See the \"Sync options\" section above for more\n\tinformation.\n\n--commit <sha1>|<sha1..sha1>::\n    Submit only the specified commit or range of commits, instead of the full\n    list of changes that are in the current Git branch.\n\n--disable-rebase::\n    Disable the automatic rebase after all commits have been successfully\n    submitted. Can also be set with git-p4.disableRebase.\n\n--disable-p4sync::\n    Disable the automatic sync of p4/master from Perforce after commits have\n    been submitted. Implies --disable-rebase. Can also be set with\n    git-p4.disableP4Sync. Sync with origin/master still goes ahead if possible.\n\nHooks for submit\n----------------\n\np4-pre-submit\n~~~~~~~~~~~~~\n\nThe `p4-pre-submit` hook is executed if it exists and is executable.\nThe hook takes no parameters and nothing from standard input. Exiting with\nnon-zero status from this script prevents `git-p4 submit` from launching.\nIt can be bypassed with the `--no-verify` command line option.\n\nOne usage scenario is to run unit tests in the hook.\n\np4-prepare-changelist\n~~~~~~~~~~~~~~~~~~~~~\n\nThe `p4-prepare-changelist` hook is executed right after preparing\nthe default changelist message and before the editor is started.\nIt takes one parameter, the name of the file that contains the\nchangelist text. Exiting with a non-zero status from the script\nwill abort the process.\n\nThe purpose of the hook is to edit the message file in place,\nand it is not suppressed by the `--no-verify` option. This hook\nis called even if `--prepare-p4-only` is set.\n\np4-changelist\n~~~~~~~~~~~~~\n\nThe `p4-changelist` hook is executed after the changelist\nmessage has been edited by the user. It can be bypassed with the\n`--no-verify` option. It takes a single parameter, the name\nof the file that holds the proposed changelist text. Exiting\nwith a non-zero status causes the command to abort.\n\nThe hook is allowed to edit the changelist file and can be used\nto normalize the text into some project standard format. It can\nalso be used to refuse the Submit after inspect the message file.\n\np4-post-changelist\n~~~~~~~~~~~~~~~~~~\n\nThe `p4-post-changelist` hook is invoked after the submit has\nsuccessfully occurred in P4. It takes no parameters and is meant\nprimarily for notification and cannot affect the outcome of the\ngit p4 submit action.\n\n\n\nRebase options\n~~~~~~~~~~~~~~\nThese options can be used to modify 'git p4 rebase' behavior.\n\n--import-labels::\n\tImport p4 labels.\n\nUnshelve options\n~~~~~~~~~~~~~~~~\n\n--origin::\n    Sets the git refspec against which the shelved P4 changelist is compared.\n    Defaults to p4/master.\n\nDEPOT PATH SYNTAX\n-----------------\nThe p4 depot path argument to 'git p4 sync' and 'git p4 clone' can\nbe one or more space-separated p4 depot paths, with an optional\np4 revision specifier on the end:\n\n\"//depot/my/project\"::\n    Import one commit with all files in the '#head' change under that tree.\n\n\"//depot/my/project@all\"::\n    Import one commit for each change in the history of that depot path.\n\n\"//depot/my/project@1,6\"::\n    Import only changes 1 through 6.\n\n\"//depot/proj1@all //depot/proj2@all\"::\n    Import all changes from both named depot paths into a single\n    repository.  Only files below these directories are included.\n    There is not a subdirectory in Git for each \"proj1\" and \"proj2\".\n    You must use the `--destination` option when specifying more\n    than one depot path.  The revision specifier must be specified\n    identically on each depot path.  If there are files in the\n    depot paths with the same name, the path with the most recently\n    updated version of the file is the one that appears in Git.\n\nSee 'p4 help revisions' for the full syntax of p4 revision specifiers.\n\n\nCLIENT SPEC\n-----------\nThe p4 client specification is maintained with the 'p4 client' command\nand contains among other fields, a View that specifies how the depot\nis mapped into the client repository.  The 'clone' and 'sync' commands\ncan consult the client spec when given the `--use-client-spec` option or\nwhen the useClientSpec variable is true.  After 'git p4 clone', the\nuseClientSpec variable is automatically set in the repository\nconfiguration file.  This allows future 'git p4 submit' commands to\nwork properly; the submit command looks only at the variable and does\nnot have a command-line option.\n\nThe full syntax for a p4 view is documented in 'p4 help views'.  'git p4'\nknows only a subset of the view syntax.  It understands multi-line\nmappings, overlays with '+', exclusions with '-' and double-quotes\naround whitespace.  Of the possible wildcards, 'git p4' only handles\n'...', and only when it is at the end of the path.  'git p4' will complain\nif it encounters an unhandled wildcard.\n\nBugs in the implementation of overlap mappings exist.  If multiple depot\npaths map through overlays to the same location in the repository,\n'git p4' can choose the wrong one.  This is hard to solve without\ndedicating a client spec just for 'git p4'.\n\nThe name of the client can be given to 'git p4' in multiple ways.  The\nvariable 'git-p4.client' takes precedence if it exists.  Otherwise,\nnormal p4 mechanisms of determining the client are used:  environment\nvariable `P4CLIENT`, a file referenced by `P4CONFIG`, or the local host name.\n\n\nBRANCH DETECTION\n----------------\nP4 does not have the same concept of a branch as Git.  Instead,\np4 organizes its content as a directory tree, where by convention\ndifferent logical branches are in different locations in the tree.\nThe 'p4 branch' command is used to maintain mappings between\ndifferent areas in the tree, and indicate related content.  'git p4'\ncan use these mappings to determine branch relationships.\n\nIf you have a repository where all the branches of interest exist as\nsubdirectories of a single depot path, you can use `--detect-branches`\nwhen cloning or syncing to have 'git p4' automatically find\nsubdirectories in p4, and to generate these as branches in Git.\n\nFor example, if the P4 repository structure is:\n----\n//depot/main/...\n//depot/branch1/...\n----\n\nAnd \"p4 branch -o branch1\" shows a View line that looks like:\n----\n//depot/main/... //depot/branch1/...\n----\n\nThen this 'git p4 clone' command:\n----\ngit p4 clone --detect-branches //depot@all\n----\nproduces a separate branch in 'refs/remotes/p4/' for //depot/main,\ncalled 'master', and one for //depot/branch1 called 'depot/branch1'.\n\nHowever, it is not necessary to create branches in p4 to be able to use\nthem like branches.  Because it is difficult to infer branch\nrelationships automatically, a Git configuration setting\n'git-p4.branchList' can be used to explicitly identify branch\nrelationships.  It is a list of \"source:destination\" pairs, like a\nsimple p4 branch specification, where the \"source\" and \"destination\" are\nthe path elements in the p4 repository.  The example above relied on the\npresence of the p4 branch.  Without p4 branches, the same result will\noccur with:\n----\ngit init depot\ncd depot\ngit config git-p4.branchList main:branch1\ngit p4 clone --detect-branches //depot@all .\n----\n\n"
        },
        "PERFORMANCE": {
            "name": "PERFORMANCE",
            "start_index": 18074,
            "end_index": 18099,
            "value": "The fast-import mechanism used by 'git p4' creates one pack file for\neach invocation of 'git p4 sync'.  Normally, Git garbage compression\n(linkgit:git-gc[1]) automatically compresses these to fewer pack files,\nbut explicit invocation of 'git repack -adf' may improve performance.\n\n\nCONFIGURATION VARIABLES\n-----------------------\nThe following config settings can be used to modify 'git p4' behavior.\nThey all are in the 'git-p4' section.\n\nGeneral variables\n~~~~~~~~~~~~~~~~~\ngit-p4.user::\n\tUser specified as an option to all p4 commands, with '-u <user>'.\n\tThe environment variable `P4USER` can be used instead.\n\ngit-p4.password::\n\tPassword specified as an option to all p4 commands, with\n\t'-P <password>'.\n\tThe environment variable `P4PASS` can be used instead.\n\ngit-p4.port::\n\tPort specified as an option to all p4 commands, with\n\t'-p <port>'.\n\tThe environment variable `P4PORT` can be used instead.\n\ngit-p4.host::\n\tHost specified as an option to all p4 commands, with\n\t'-h <host>'.\n\tThe environment variable `P4HOST` can be used instead.\n\ngit-p4.client::\n\tClient specified as an option to all p4 commands, with\n\t'-c <client>', including the client spec.\n\ngit-p4.retries::\n\tSpecifies the number of times to retry a p4 command (notably,\n\t'p4 sync') if the network times out. The default value is 3.\n\tSet the value to 0 to disable retries or if your p4 version\n\tdoes not support retries (pre 2012.2).\n\nClone and sync variables\n~~~~~~~~~~~~~~~~~~~~~~~~\ngit-p4.syncFromOrigin::\n\tBecause importing commits from other Git repositories is much faster\n\tthan importing them from p4, a mechanism exists to find p4 changes\n\tfirst in Git remotes.  If branches exist under 'refs/remote/origin/p4',\n\tthose will be fetched and used when syncing from p4.  This\n\tvariable can be set to 'false' to disable this behavior.\n\ngit-p4.branchUser::\n\tOne phase in branch detection involves looking at p4 branches\n\tto find new ones to import.  By default, all branches are\n\tinspected.  This option limits the search to just those owned\n\tby the single user named in the variable.\n\ngit-p4.branchList::\n\tList of branches to be imported when branch detection is\n\tenabled.  Each entry should be a pair of branch names separated\n\tby a colon (:).  This example declares that both branchA and\n\tbranchB were created from main:\n+\n-------------\ngit config       git-p4.branchList main:branchA\ngit config --add git-p4.branchList main:branchB\n-------------\n\ngit-p4.ignoredP4Labels::\n\tList of p4 labels to ignore. This is built automatically as\n\tunimportable labels are discovered.\n\ngit-p4.importLabels::\n\tImport p4 labels into git, as per --import-labels.\n\ngit-p4.labelImportRegexp::\n\tOnly p4 labels matching this regular expression will be imported. The\n\tdefault value is '[a-zA-Z0-9_\\-.]+$'.\n\ngit-p4.useClientSpec::\n\tSpecify that the p4 client spec should be used to identify p4\n\tdepot paths of interest.  This is equivalent to specifying the\n\toption `--use-client-spec`.  See the \"CLIENT SPEC\" section above.\n\tThis variable is a boolean, not the name of a p4 client.\n\ngit-p4.pathEncoding::\n\tPerforce keeps the encoding of a path as given by the originating OS.\n\tGit expects paths encoded as UTF-8. Use this config to tell git-p4\n\twhat encoding Perforce had used for the paths. This encoding is used\n\tto transcode the paths to UTF-8. As an example, Perforce on Windows\n\toften uses \"cp1252\" to encode path names.\n\ngit-p4.largeFileSystem::\n\tSpecify the system that is used for large (binary) files. Please note\n\tthat large file systems do not support the 'git p4 submit' command.\n\tOnly Git LFS is implemented right now (see https://git-lfs.github.com/\n\tfor more information). Download and install the Git LFS command line\n\textension to use this option and configure it like this:\n+\n-------------\ngit config       git-p4.largeFileSystem GitLFS\n-------------\n\ngit-p4.largeFileExtensions::\n\tAll files matching a file extension in the list will be processed\n\tby the large file system. Do not prefix the extensions with '.'.\n\ngit-p4.largeFileThreshold::\n\tAll files with an uncompressed size exceeding the threshold will be\n\tprocessed by the large file system. By default the threshold is\n\tdefined in bytes. Add the suffix k, m, or g to change the unit.\n\ngit-p4.largeFileCompressedThreshold::\n\tAll files with a compressed size exceeding the threshold will be\n\tprocessed by the large file system. This option might slow down\n\tyour clone/sync process. By default the threshold is defined in\n\tbytes. Add the suffix k, m, or g to change the unit.\n\ngit-p4.largeFilePush::\n\tBoolean variable which defines if large files are automatically\n\tpushed to a server.\n\ngit-p4.keepEmptyCommits::\n\tA changelist that contains only excluded files will be imported\n\tas an empty commit if this boolean option is set to true.\n\ngit-p4.mapUser::\n\tMap a P4 user to a name and email address in Git. Use a string\n\twith the following format to create a mapping:\n+\n-------------\ngit config --add git-p4.mapUser \"p4user = First Last <mail@address.com>\"\n-------------\n+\nA mapping will override any user information from P4. Mappings for\nmultiple P4 user can be defined.\n\nSubmit variables\n~~~~~~~~~~~~~~~~\ngit-p4.detectRenames::\n\tDetect renames.  See linkgit:git-diff[1].  This can be true,\n\tfalse, or a score as expected by 'git diff -M'.\n\ngit-p4.detectCopies::\n\tDetect copies.  See linkgit:git-diff[1].  This can be true,\n\tfalse, or a score as expected by 'git diff -C'.\n\ngit-p4.detectCopiesHarder::\n\tDetect copies harder.  See linkgit:git-diff[1].  A boolean.\n\ngit-p4.preserveUser::\n\tOn submit, re-author changes to reflect the Git author,\n\tregardless of who invokes 'git p4 submit'.\n\ngit-p4.allowMissingP4Users::\n\tWhen 'preserveUser' is true, 'git p4' normally dies if it\n\tcannot find an author in the p4 user map.  This setting\n\tsubmits the change regardless.\n\ngit-p4.skipSubmitEdit::\n\tThe submit process invokes the editor before each p4 change\n\tis submitted.  If this setting is true, though, the editing\n\tstep is skipped.\n\ngit-p4.skipSubmitEditCheck::\n\tAfter editing the p4 change message, 'git p4' makes sure that\n\tthe description really was changed by looking at the file\n\tmodification time.  This option disables that test.\n\ngit-p4.allowSubmit::\n\tBy default, any branch can be used as the source for a 'git p4\n\tsubmit' operation.  This configuration variable, if set, permits only\n\tthe named branches to be used as submit sources.  Branch names\n\tmust be the short names (no \"refs/heads/\"), and should be\n\tseparated by commas (\",\"), with no spaces.\n\ngit-p4.skipUserNameCheck::\n\tIf the user running 'git p4 submit' does not exist in the p4\n\tuser map, 'git p4' exits.  This option can be used to force\n\tsubmission regardless.\n\ngit-p4.attemptRCSCleanup::\n\tIf enabled, 'git p4 submit' will attempt to cleanup RCS keywords\n\t($Header$, etc). These would otherwise cause merge conflicts and prevent\n\tthe submit going ahead. This option should be considered experimental at\n\tpresent.\n\ngit-p4.exportLabels::\n\tExport Git tags to p4 labels, as per --export-labels.\n\ngit-p4.labelExportRegexp::\n\tOnly p4 labels matching this regular expression will be exported. The\n\tdefault value is '[a-zA-Z0-9_\\-.]+$'.\n\ngit-p4.conflict::\n\tSpecify submit behavior when a conflict with p4 is found, as per\n\t--conflict.  The default behavior is 'ask'.\n\ngit-p4.disableRebase::\n    Do not rebase the tree against p4/master following a submit.\n\ngit-p4.disableP4Sync::\n    Do not sync p4/master with Perforce following a submit. Implies git-p4.disableRebase.\n\nIMPLEMENTATION DETAILS\n----------------------\n* Changesets from p4 are imported using Git fast-import.\n* Cloning or syncing does not require a p4 client; file contents are\n  collected using 'p4 print'.\n* Submitting requires a p4 client, which is not in the same location\n  as the Git repository.  Patches are applied, one at a time, to\n  this p4 client and submitted from there.\n* Each commit imported by 'git p4' has a line at the end of the log\n  message indicating the p4 depot location and change number.  This\n  line is used by later 'git p4 sync' operations to know which p4\n  changes are new.\n"
        }
    },
    "git-pack-objects.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-pack-objects - Create a packed archive of objects\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 106,
            "end_index": 125,
            "value": "[verse]\n'git pack-objects' [-q | --progress | --all-progress] [--all-progress-implied]\n\t[--no-reuse-delta] [--delta-base-offset] [--non-empty]\n\t[--local] [--incremental] [--window=<n>] [--depth=<n>]\n\t[--revs [--unpacked | --all]] [--keep-pack=<pack-name>]\n\t[--stdout [--filter=<filter-spec>] | base-name]\n\t[--shallow] [--keep-true-parents] [--[no-]sparse] < object-list\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 496,
            "end_index": 521,
            "value": "Reads list of objects from the standard input, and writes either one or\nmore packed archives with the specified base-name to disk, or a packed\narchive to the standard output.\n\nA packed archive is an efficient way to transfer a set of objects\nbetween two repositories as well as an access efficient archival\nformat.  In a packed archive, an object is either stored as a\ncompressed whole or as a difference from some other object.\nThe latter is often called a delta.\n\nThe packed archive format (.pack) is designed to be self-contained\nso that it can be unpacked without any further information. Therefore,\neach object that a delta depends upon must be present within the pack.\n\nA pack index file (.idx) is generated for fast, random access to the\nobjects in the pack. Placing both the index file (.idx) and the packed\narchive (.pack) in the pack/ subdirectory of $GIT_OBJECT_DIRECTORY (or\nany of the directories on $GIT_ALTERNATE_OBJECT_DIRECTORIES)\nenables Git to read from the pack archive.\n\nThe 'git unpack-objects' command can read the packed archive and\nexpand the objects contained in the pack into \"one-file\none-object\" format; this is typically done by the smart-pull\ncommands when a pack is created on-the-fly for efficient network\ntransport by their peers.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1787,
            "end_index": 1804,
            "value": "\nbase-name::\n\tWrite into pairs of files (.pack and .idx), using\n\t<base-name> to determine the name of the created file.\n\tWhen this option is used, the two files in a pair are written in\n\t<base-name>-<SHA-1>.{pack,idx} files.  <SHA-1> is a hash\n\tbased on the pack content and is written to the standard\n\toutput of the command.\n\n--stdout::\n\tWrite the pack contents (what would have been written to\n\t.pack file) out to the standard output.\n\n--revs::\n\tRead the revision arguments from the standard input, instead of\n\tindividual object names.  The revision arguments are processed\n\tthe same way as 'git rev-list' with the `--objects` flag\n\tuses its `commit` arguments to build the list of objects it\n\toutputs.  The objects on the resulting list are packed.\n\tBesides revisions, `--not` or `--shallow <SHA-1>` lines are\n\talso accepted.\n\n--unpacked::\n\tThis implies `--revs`.  When processing the list of\n\trevision arguments read from the standard input, limit\n\tthe objects packed to those that are not already packed.\n\n--all::\n\tThis implies `--revs`.  In addition to the list of\n\trevision arguments read from the standard input, pretend\n\tas if all refs under `refs/` are specified to be\n\tincluded.\n\n--include-tag::\n\tInclude unasked-for annotated tags if the object they\n\treference was included in the resulting packfile.  This\n\tcan be useful to send new tags to native Git clients.\n\n--window=<n>::\n--depth=<n>::\n\tThese two options affect how the objects contained in\n\tthe pack are stored using delta compression.  The\n\tobjects are first internally sorted by type, size and\n\toptionally names and compared against the other objects\n\twithin --window to see if using delta compression saves\n\tspace.  --depth limits the maximum delta depth; making\n\tit too deep affects the performance on the unpacker\n\tside, because delta data needs to be applied that many\n\ttimes to get to the necessary object.\n+\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095.\n\n--window-memory=<n>::\n\tThis option provides an additional limit on top of `--window`;\n\tthe window size will dynamically scale down so as to not take\n\tup more than '<n>' bytes in memory.  This is useful in\n\trepositories with a mix of large and small objects to not run\n\tout of memory with a large window, but still be able to take\n\tadvantage of the large window for the smaller objects.  The\n\tsize can be suffixed with \"k\", \"m\", or \"g\".\n\t`--window-memory=0` makes memory usage unlimited.  The default\n\tis taken from the `pack.windowMemory` configuration variable.\n\n--max-pack-size=<n>::\n\tIn unusual scenarios, you may not be able to create files\n\tlarger than a certain size on your filesystem, and this option\n\tcan be used to tell the command to split the output packfile\n\tinto multiple independent packfiles, each not larger than the\n\tgiven size. The size can be suffixed with\n\t\"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB.\n\tThis option\n\tprevents the creation of a bitmap index.\n\tThe default is unlimited, unless the config variable\n\t`pack.packSizeLimit` is set.\n\n--honor-pack-keep::\n\tThis flag causes an object already in a local pack that\n\thas a .keep file to be ignored, even if it would have\n\totherwise been packed.\n\n--keep-pack=<pack-name>::\n\tThis flag causes an object already in the given pack to be\n\tignored, even if it would have otherwise been\n\tpacked. `<pack-name>` is the pack file name without\n\tleading directory (e.g. `pack-123.pack`). The option could be\n\tspecified multiple times to keep multiple packs.\n\n--incremental::\n\tThis flag causes an object already in a pack to be ignored\n\teven if it would have otherwise been packed.\n\n--local::\n\tThis flag causes an object that is borrowed from an alternate\n\tobject store to be ignored even if it would have otherwise been\n\tpacked.\n\n--non-empty::\n        Only create a packed archive if it would contain at\n        least one object.\n\n--progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless -q\n\tis specified. This flag forces progress status even if\n\tthe standard error stream is not directed to a terminal.\n\n--all-progress::\n\tWhen --stdout is specified then progress report is\n\tdisplayed during the object count and compression phases\n\tbut inhibited during the write-out phase. The reason is\n\tthat in some cases the output stream is directly linked\n\tto another command which may wish to display progress\n\tstatus of its own as it processes incoming pack data.\n\tThis flag is like --progress except that it forces progress\n\treport for the write-out phase as well even if --stdout is\n\tused.\n\n--all-progress-implied::\n\tThis is used to imply --all-progress whenever progress display\n\tis activated.  Unlike --all-progress this flag doesn't actually\n\tforce any progress display by itself.\n\n-q::\n\tThis flag makes the command not to report its progress\n\ton the standard error stream.\n\n--no-reuse-delta::\n\tWhen creating a packed archive in a repository that\n\thas existing packs, the command reuses existing deltas.\n\tThis sometimes results in a slightly suboptimal pack.\n\tThis flag tells the command not to reuse existing deltas\n\tbut compute them from scratch.\n\n--no-reuse-object::\n\tThis flag tells the command not to reuse existing object data at all,\n\tincluding non deltified object, forcing recompression of everything.\n\tThis implies --no-reuse-delta. Useful only in the obscure case where\n\twholesale enforcement of a different compression level on the\n\tpacked data is desired.\n\n--compression=<n>::\n\tSpecifies compression level for newly-compressed data in the\n\tgenerated pack.  If not specified,  pack compression level is\n\tdetermined first by pack.compression,  then by core.compression,\n\tand defaults to -1,  the zlib default,  if neither is set.\n\tAdd --no-reuse-object if you want to force a uniform compression\n\tlevel on all data no matter the source.\n\n--[no-]sparse::\n\tToggle the \"sparse\" algorithm to determine which objects to include in\n\tthe pack, when combined with the \"--revs\" option. This algorithm\n\tonly walks trees that appear in paths that introduce new objects.\n\tThis can have significant performance benefits when computing\n\ta pack to send a small change. However, it is possible that extra\n\tobjects are added to the pack-file if the included commits contain\n\tcertain types of direct renames. If this option is not included,\n\tit defaults to the value of `pack.useSparse`, which is true unless\n\totherwise specified.\n\n--thin::\n\tCreate a \"thin\" pack by omitting the common objects between a\n\tsender and a receiver in order to reduce network transfer. This\n\toption only makes sense in conjunction with --stdout.\n+\nNote: A thin pack violates the packed archive format by omitting\nrequired objects and is thus unusable by Git without making it\nself-contained. Use `git index-pack --fix-thin`\n(see linkgit:git-index-pack[1]) to restore the self-contained property.\n\n--shallow::\n\tOptimize a pack that will be provided to a client with a shallow\n\trepository.  This option, combined with --thin, can result in a\n\tsmaller pack at the cost of speed.\n\n--delta-base-offset::\n\tA packed archive can express the base object of a delta as\n\teither a 20-byte object name or as an offset in the\n\tstream, but ancient versions of Git don't understand the\n\tlatter.  By default, 'git pack-objects' only uses the\n\tformer format for better compatibility.  This option\n\tallows the command to use the latter format for\n\tcompactness.  Depending on the average delta chain\n\tlength, this option typically shrinks the resulting\n\tpackfile by 3-5 per-cent.\n+\nNote: Porcelain commands such as `git gc` (see linkgit:git-gc[1]),\n`git repack` (see linkgit:git-repack[1]) pass this option by default\nin modern Git when they put objects in your repository into pack files.\nSo does `git bundle` (see linkgit:git-bundle[1]) when it creates a bundle.\n\n--threads=<n>::\n\tSpecifies the number of threads to spawn when searching for best\n\tdelta matches.  This requires that pack-objects be compiled with\n\tpthreads otherwise this option is ignored with a warning.\n\tThis is meant to reduce packing time on multiprocessor machines.\n\tThe required amount of memory for the delta search window is\n\thowever multiplied by the number of threads.\n\tSpecifying 0 will cause Git to auto-detect the number of CPU's\n\tand set the number of threads accordingly.\n\n--index-version=<version>[,<offset>]::\n\tThis is intended to be used by the test suite only. It allows\n\tto force the version for the generated pack index, and to force\n\t64-bit index entries on objects located above the given offset.\n\n--keep-true-parents::\n\tWith this option, parents that are hidden by grafts are packed\n\tnevertheless.\n\n--filter=<filter-spec>::\n\tRequires `--stdout`.  Omits certain objects (usually blobs) from\n\tthe resulting packfile.  See linkgit:git-rev-list[1] for valid\n\t`<filter-spec>` forms.\n\n--no-filter::\n\tTurns off any previous `--filter=` argument.\n\n--missing=<missing-action>::\n\tA debug option to help with future \"partial clone\" development.\n\tThis option specifies how missing objects are handled.\n+\nThe form '--missing=error' requests that pack-objects stop with an error if\na missing object is encountered.  If the repository is a partial clone, an\nattempt to fetch missing objects will be made before declaring them missing.\nThis is the default action.\n+\nThe form '--missing=allow-any' will allow object traversal to continue\nif a missing object is encountered.  No fetch of a missing object will occur.\nMissing objects will silently be omitted from the results.\n+\nThe form '--missing=allow-promisor' is like 'allow-any', but will only\nallow object traversal to continue for EXPECTED promisor missing objects.\nNo fetch of a missing object will occur.  An unexpected missing object will\nraise an error.\n\n--exclude-promisor-objects::\n\tOmit objects that are known to be in the promisor remote.  (This\n\toption has the purpose of operating only on locally created objects,\n\tso that when we repack, we still maintain a distinction between\n\tlocally created objects [without .promisor] and objects from the\n\tpromisor remote [with .promisor].)  This is used with partial clone.\n\n--keep-unreachable::\n\tObjects unreachable from the refs in packs named with\n\t--unpacked= option are added to the resulting pack, in\n\taddition to the reachable objects that are not in packs marked\n\twith *.keep files. This implies `--revs`.\n\n--pack-loose-unreachable::\n\tPack unreachable loose objects (and their loose counterparts\n\tremoved). This implies `--revs`.\n\n--unpack-unreachable::\n\tKeep unreachable objects in loose form. This implies `--revs`.\n\n--delta-islands::\n\tRestrict delta matches based on \"islands\". See DELTA ISLANDS\n\tbelow.\n\n\nDELTA ISLANDS\n-------------\n\nWhen possible, `pack-objects` tries to reuse existing on-disk deltas to\navoid having to search for new ones on the fly. This is an important\noptimization for serving fetches, because it means the server can avoid\ninflating most objects at all and just send the bytes directly from\ndisk. This optimization can't work when an object is stored as a delta\nagainst a base which the receiver does not have (and which we are not\nalready sending). In that case the server \"breaks\" the delta and has to\nfind a new one, which has a high CPU cost. Therefore it's important for\nperformance that the set of objects in on-disk delta relationships match\nwhat a client would fetch.\n\nIn a normal repository, this tends to work automatically. The objects\nare mostly reachable from the branches and tags, and that's what clients\nfetch. Any deltas we find on the server are likely to be between objects\nthe client has or will have.\n\nBut in some repository setups, you may have several related but separate\ngroups of ref tips, with clients tending to fetch those groups\nindependently. For example, imagine that you are hosting several \"forks\"\nof a repository in a single shared object store, and letting clients\nview them as separate repositories through `GIT_NAMESPACE` or separate\nrepos using the alternates mechanism. A naive repack may find that the\noptimal delta for an object is against a base that is only found in\nanother fork. But when a client fetches, they will not have the base\nobject, and we'll have to find a new delta on the fly.\n\nA similar situation may exist if you have many refs outside of\n`refs/heads/` and `refs/tags/` that point to related objects (e.g.,\n`refs/pull` or `refs/changes` used by some hosting providers). By\ndefault, clients fetch only heads and tags, and deltas against objects\nfound only in those other groups cannot be sent as-is.\n\nDelta islands solve this problem by allowing you to group your refs into\ndistinct \"islands\". Pack-objects computes which objects are reachable\nfrom which islands, and refuses to make a delta from an object `A`\nagainst a base which is not present in all of `A`'s islands. This\nresults in slightly larger packs (because we miss some delta\nopportunities), but guarantees that a fetch of one island will not have\nto recompute deltas on the fly due to crossing island boundaries.\n\nWhen repacking with delta islands the delta window tends to get\nclogged with candidates that are forbidden by the config. Repacking\nwith a big --window helps (and doesn't take as long as it otherwise\nmight because we can reject some object pairs based on islands before\ndoing any computation on the content).\n\nIslands are configured via the `pack.island` option, which can be\nspecified multiple times. Each value is a left-anchored regular\nexpressions matching refnames. For example:\n\n-------------------------------------------\n[pack]\nisland = refs/heads/\nisland = refs/tags/\n-------------------------------------------\n\nputs heads and tags into an island (whose name is the empty string; see\nbelow for more on naming). Any refs which do not match those regular\nexpressions (e.g., `refs/pull/123`) is not in any island. Any object\nwhich is reachable only from `refs/pull/` (but not heads or tags) is\ntherefore not a candidate to be used as a base for `refs/heads/`.\n\nRefs are grouped into islands based on their \"names\", and two regexes\nthat produce the same name are considered to be in the same\nisland. The names are computed from the regexes by concatenating any\ncapture groups from the regex, with a '-' dash in between. (And if\nthere are no capture groups, then the name is the empty string, as in\nthe above example.) This allows you to create arbitrary numbers of\nislands. Only up to 14 such capture groups are supported though.\n\nFor example, imagine you store the refs for each fork in\n`refs/virtual/ID`, where `ID` is a numeric identifier. You might then\nconfigure:\n\n-------------------------------------------\n[pack]\nisland = refs/virtual/([0-9]+)/heads/\nisland = refs/virtual/([0-9]+)/tags/\nisland = refs/virtual/([0-9]+)/(pull)/\n-------------------------------------------\n\nThat puts the heads and tags for each fork in their own island (named\n\"1234\" or similar), and the pull refs for each go into their own\n\"1234-pull\".\n\nNote that we pick a single island for each regex to go into, using \"last\none wins\" ordering (which allows repo-specific config to take precedence\nover user-wide config, and so forth).\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 16943,
            "end_index": 16972,
            "value": "\nVarious configuration variables affect packing, see\nlinkgit:git-config[1] (search for \"pack\" and \"delta\").\n\nNotably, delta compression is not used on objects larger than the\n`core.bigFileThreshold` configuration variable and on files with the\nattribute `delta` set to false.\n\nSEE ALSO\n--------\nlinkgit:git-rev-list[1]\nlinkgit:git-repack[1]\nlinkgit:git-prune-packed[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 17341,
            "end_index": 17350,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-pack-redundant.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 44,
            "end_index": 55,
            "value": "git-pack-redundant - Find redundant pack files\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 103,
            "end_index": 122,
            "value": "[verse]\n'git pack-redundant' [ --verbose ] [ --alt-odb ] < --all | .pack filename ... >\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 210,
            "end_index": 235,
            "value": "This program computes which packs in your repository\nare redundant. The output is suitable for piping to\n`xargs rm` if you are in the root of the repository.\n\n'git pack-redundant' accepts a list of objects on standard input. Any objects\ngiven will be ignored when checking which packs are required. This makes the\nfollowing command useful when wanting to remove packs which contain unreachable\nobjects.\n\ngit fsck --full --unreachable | cut -d ' ' -f3 | \\\ngit pack-redundant --all | xargs rm\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 726,
            "end_index": 743,
            "value": "\n\n--all::\n\tProcesses all packs. Any filenames on the command line are ignored.\n\n--alt-odb::\n\tDon't require objects present in packs from alternate object\n\tdirectories to be present in local packs.\n\n--verbose::\n\tOutputs some statistics to stderr. Has a small performance penalty.\n\nSEE ALSO\n--------\nlinkgit:git-pack-objects[1]\nlinkgit:git-repack[1]\nlinkgit:git-prune-packed[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1119,
            "end_index": 1128,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-pack-refs.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-pack-refs - Pack heads and tags for efficient repository access\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 113,
            "end_index": 132,
            "value": "[verse]\n'git pack-refs' [--all] [--no-prune]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 177,
            "end_index": 202,
            "value": "\nTraditionally, tips of branches and tags (collectively known as\n'refs') were stored one file per ref in a (sub)directory\nunder `$GIT_DIR/refs`\ndirectory.  While many branch tips tend to be updated often,\nmost tags and some branch tips are never updated.  When a\nrepository has hundreds or thousands of tags, this\none-file-per-ref format both wastes storage and hurts\nperformance.\n\nThis command is used to solve the storage and performance\nproblem by storing the refs in a single file,\n`$GIT_DIR/packed-refs`.  When a ref is missing from the\ntraditional `$GIT_DIR/refs` directory hierarchy, it is looked\nup in this\nfile and used if found.\n\nSubsequent updates to branches always create new files under\n`$GIT_DIR/refs` directory hierarchy.\n\nA recommended practice to deal with a repository with too many\nrefs is to pack its refs with `--all` once, and\noccasionally run `git pack-refs`.  Tags are by\ndefinition stationary and are not expected to change.  Branch\nheads will be packed with the initial `pack-refs --all`, but\nonly the currently active branch heads will become unpacked,\nand the next `pack-refs` (without `--all`) will leave them\nunpacked.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1353,
            "end_index": 1370,
            "value": "\n--all::\n\nThe command by default packs all tags and refs that are already\npacked, and leaves other refs\nalone.  This is because branches are expected to be actively\ndeveloped and packing their tips does not help performance.\nThis option causes branch tips to be packed as well.  Useful for\na repository with many branches of historical interests.\n\n--no-prune::\n\nThe command usually removes loose refs under `$GIT_DIR/refs`\nhierarchy after packing them.  This option tells it not to.\n\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 1854,
            "end_index": 1865,
            "value": "\nOlder documentation written before the packed-refs mechanism was\nintroduced may still say things like \".git/refs/heads/<branch> file\nexists\" when it means \"branch <branch> exists\".\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2048,
            "end_index": 2057,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-patch-id.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-patch-id - Compute unique ID for a patch\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 88,
            "end_index": 107,
            "value": "[verse]\n'git patch-id' [--stable | --unstable]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 154,
            "end_index": 179,
            "value": "Read a patch from the standard input and compute the patch ID for it.\n\nA \"patch ID\" is nothing but a sum of SHA-1 of the file diffs associated with a\npatch, with whitespace and line numbers ignored.  As such, it's \"reasonably\nstable\", but at the same time also reasonably unique, i.e., two patches that\nhave the same \"patch ID\" are almost guaranteed to be the same thing.\n\nIOW, you can use this thing to look for likely duplicate commits.\n\nWhen dealing with 'git diff-tree' output, it takes advantage of\nthe fact that the patch is prefixed with the object name of the\ncommit, and outputs two 40-byte hexadecimal strings.  The first\nstring is the patch ID, and the second string is the commit ID.\nThis can be used to make a mapping from patch ID to commit ID.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 938,
            "end_index": 955,
            "value": "\n--stable::\n\tUse a \"stable\" sum of hashes as the patch ID. With this option:\n\t - Reordering file diffs that make up a patch does not affect the ID.\n\t   In particular, two patches produced by comparing the same two trees\n\t   with two different settings for \"-O<orderfile>\" result in the same\n\t   patch ID signature, thereby allowing the computed result to be used\n\t   as a key to index some meta-information about the change between\n\t   the two trees;\n\n\t - Result is different from the value produced by git 1.9 and older\n\t   or produced when an \"unstable\" hash (see --unstable below) is\n\t   configured - even when used on a diff output taken without any use\n\t   of \"-O<orderfile>\", thereby making existing databases storing such\n\t   \"unstable\" or historical patch-ids unusable.\n\n\tThis is the default if patchid.stable is set to true.\n\n--unstable::\n\tUse an \"unstable\" hash as the patch ID. With this option,\n\tthe result produced is compatible with the patch-id value produced\n\tby git 1.9 and older.  Users with pre-existing databases storing\n\tpatch-ids produced by git 1.9 and older (who do not deal with reordered\n\tpatches) may want to use this option.\n\n\tThis is the default.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2131,
            "end_index": 2140,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-prune-packed.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-prune-packed - Remove extra objects that are already in pack files\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 123,
            "end_index": 142,
            "value": "[verse]\n'git prune-packed' [-n|--dry-run] [-q|--quiet]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 198,
            "end_index": 223,
            "value": "This program searches the `$GIT_OBJECT_DIRECTORY` for all objects that currently\nexist in a pack file as well as the independent object directories.\n\nAll such extra objects are removed.\n\nA pack is a collection of objects, individually compressed, with delta\ncompression applied, stored in a single file, with an associated index file.\n\nPacks are used to reduce the load on mirror systems, backup engines,\ndisk storage, etc.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 648,
            "end_index": 665,
            "value": "\n-n::\n--dry-run::\n        Don't actually remove any objects, only show those that would have been\n        removed.\n\n-q::\n--quiet::\n\tSquelch the progress indicator.\n\nSEE ALSO\n--------\nlinkgit:git-pack-objects[1]\nlinkgit:git-repack[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 897,
            "end_index": 906,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-prune.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-prune - Prune all unreachable objects from the object database\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 105,
            "end_index": 124,
            "value": "[verse]\n'git prune' [-n] [-v] [--progress] [--expire <time>] [--] [<head>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 202,
            "end_index": 227,
            "value": "\nNOTE: In most cases, users should run 'git gc', which calls\n'git prune'. See the section \"NOTES\", below.\n\nThis runs 'git fsck --unreachable' using all the refs\navailable in `refs/`, optionally with additional set of\nobjects specified on the command line, and prunes all unpacked\nobjects unreachable from any of these head objects from the object database.\nIn addition, it\nprunes the unpacked objects that are also found in packs by\nrunning 'git prune-packed'.\nIt also removes entries from .git/shallow that are not reachable by\nany ref.\n\nNote that unreachable, packed objects will remain.  If this is\nnot desired, see linkgit:git-repack[1].\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 869,
            "end_index": 886,
            "value": "\n-n::\n--dry-run::\n\tDo not remove anything; just report what it would\n\tremove.\n\n-v::\n--verbose::\n\tReport all removed objects.\n\n--progress::\n\tShow progress.\n\n--expire <time>::\n\tOnly expire loose objects older than <time>.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<head>...::\n\tIn addition to objects\n\treachable from any of our references, keep objects\n\treachable from listed <head>s.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1283,
            "end_index": 1302,
            "value": "\nTo prune objects not used by your repository or another that\nborrows from your repository via its\n`.git/objects/info/alternates`:\n\n------------\n$ git prune $(cd ../another && git rev-parse --all)\n------------\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 1512,
            "end_index": 1525,
            "value": "\nIn most cases, users will not need to call 'git prune' directly, but\nshould instead call 'git gc', which handles pruning along with\nmany other housekeeping tasks.\n\nFor a description of which objects are considered for pruning, see\n'git fsck''s --unreachable option.\n\nSEE ALSO\n--------\n\nlinkgit:git-fsck[1],\nlinkgit:git-gc[1],\nlinkgit:git-reflog[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1874,
            "end_index": 1883,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-pull.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-pull - Fetch from and integrate with another repository or a local branch\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 114,
            "end_index": 133,
            "value": "[verse]\n'git pull' [<options>] [<repository> [<refspec>...]]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 195,
            "end_index": 220,
            "value": "\nIncorporates changes from a remote repository into the current\nbranch.  In its default mode, `git pull` is shorthand for\n`git fetch` followed by `git merge FETCH_HEAD`.\n\nMore precisely, 'git pull' runs 'git fetch' with the given\nparameters and calls 'git merge' to merge the retrieved branch\nheads into the current branch.\nWith `--rebase`, it runs 'git rebase' instead of 'git merge'.\n\n<repository> should be the name of a remote repository as\npassed to linkgit:git-fetch[1].  <refspec> can name an\narbitrary remote ref (for example, the name of a tag) or even\na collection of refs with corresponding remote-tracking branches\n(e.g., refs/heads/{asterisk}:refs/remotes/origin/{asterisk}),\nbut usually it is the name of a branch in the remote repository.\n\nDefault values for <repository> and <branch> are read from the\n\"remote\" and \"merge\" configuration for the current branch\nas set by linkgit:git-branch[1] `--track`.\n\nAssume the following history exists and the current branch is\n\"`master`\":\n\n------------\n\t  A---B---C master on origin\n\t /\n    D---E---F---G master\n\t^\n\torigin/master in your repository\n------------\n\nThen \"`git pull`\" will fetch and replay the changes from the remote\n`master` branch since it diverged from the local `master` (i.e., `E`)\nuntil its current commit (`C`) on top of `master` and record the\nresult in a new commit along with the names of the two parent commits\nand a log message from the user describing the changes.\n\n------------\n\t  A---B---C origin/master\n\t /         \\\n    D---E---F---G---H master\n------------\n\nSee linkgit:git-merge[1] for details, including how conflicts\nare presented and handled.\n\nIn Git 1.7.0 or later, to cancel a conflicting merge, use\n`git reset --merge`.  *Warning*: In older versions of Git, running 'git pull'\nwith uncommitted changes is discouraged: while possible, it leaves you\nin a state that may be hard to back out of in the case of a conflict.\n\nIf any of the remote changes overlap with local uncommitted changes,\nthe merge will be automatically canceled and the work tree untouched.\nIt is generally best to get any local changes in working order before\npulling or stash them away with linkgit:git-stash[1].\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2396,
            "end_index": 2413,
            "value": "\n-q::\n--quiet::\n\tThis is passed to both underlying git-fetch to squelch reporting of\n\tduring transfer, and underlying git-merge to squelch output during\n\tmerging.\n\n-v::\n--verbose::\n\tPass --verbose to git-fetch and git-merge.\n\n--[no-]recurse-submodules[=yes|on-demand|no]::\n\tThis option controls if new commits of populated submodules should\n\tbe fetched, and if the working trees of active submodules should be\n\tupdated, too (see linkgit:git-fetch[1], linkgit:git-config[1] and\n\tlinkgit:gitmodules[5]).\n+\nIf the checkout is done via rebase, local submodule commits are rebased as well.\n+\nIf the update is done via merge, the submodule conflicts are resolved and checked out.\n\nOptions related to merging\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:git-pull: 1\n\ninclude::merge-options.txt[]\n\n-r::\n--rebase[=false|true|merges|preserve|interactive]::\n\tWhen true, rebase the current branch on top of the upstream\n\tbranch after fetching. If there is a remote-tracking branch\n\tcorresponding to the upstream branch and the upstream branch\n\twas rebased since last fetched, the rebase uses that information\n\tto avoid rebasing non-local changes.\n+\nWhen set to `merges`, rebase using `git rebase --rebase-merges` so that\nthe local merge commits are included in the rebase (see\nlinkgit:git-rebase[1] for details).\n+\nWhen set to `preserve` (deprecated in favor of `merges`), rebase with the\n`--preserve-merges` option passed to `git rebase` so that locally created\nmerge commits will not be flattened.\n+\nWhen false, merge the current branch into the upstream branch.\n+\nWhen `interactive`, enable the interactive mode of rebase.\n+\nSee `pull.rebase`, `branch.<name>.rebase` and `branch.autoSetupRebase` in\nlinkgit:git-config[1] if you want to make `git pull` always use\n`--rebase` instead of merging.\n+\n[NOTE]\nThis is a potentially _dangerous_ mode of operation.\nIt rewrites history, which does not bode well when you\npublished that history already.  Do *not* use this option\nunless you have read linkgit:git-rebase[1] carefully.\n\n--no-rebase::\n\tOverride earlier --rebase.\n\nOptions related to fetching\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ninclude::fetch-options.txt[]\n\ninclude::pull-fetch-param.txt[]\n\ninclude::urls-remotes.txt[]\n\ninclude::merge-strategies.txt[]\n\nDEFAULT BEHAVIOUR\n-----------------\n\nOften people use `git pull` without giving any parameter.\nTraditionally, this has been equivalent to saying `git pull\norigin`.  However, when configuration `branch.<name>.remote` is\npresent while on branch `<name>`, that value is used instead of\n`origin`.\n\nIn order to determine what URL to use to fetch from, the value\nof the configuration `remote.<origin>.url` is consulted\nand if there is not any such variable, the value on the `URL:` line\nin `$GIT_DIR/remotes/<origin>` is used.\n\nIn order to determine what remote branches to fetch (and\noptionally store in the remote-tracking branches) when the command is\nrun without any refspec parameters on the command line, values\nof the configuration variable `remote.<origin>.fetch` are\nconsulted, and if there aren't any, `$GIT_DIR/remotes/<origin>`\nis consulted and its `Pull:` lines are used.\nIn addition to the refspec formats described in the OPTIONS\nsection, you can have a globbing refspec that looks like this:\n\n------------\nrefs/heads/*:refs/remotes/origin/*\n------------\n\nA globbing refspec must have a non-empty RHS (i.e. must store\nwhat were fetched in remote-tracking branches), and its LHS and RHS\nmust end with `/*`.  The above specifies that all remote\nbranches are tracked using remote-tracking branches in\n`refs/remotes/origin/` hierarchy under the same name.\n\nThe rule to determine which remote branch to merge after\nfetching is a bit involved, in order not to break backward\ncompatibility.\n\nIf explicit refspecs were given on the command\nline of `git pull`, they are all merged.\n\nWhen no refspec was given on the command line, then `git pull`\nuses the refspec from the configuration or\n`$GIT_DIR/remotes/<origin>`.  In such cases, the following\nrules apply:\n\n. If `branch.<name>.merge` configuration for the current\n  branch `<name>` exists, that is the name of the branch at the\n  remote site that is merged.\n\n. If the refspec is a globbing one, nothing is merged.\n\n. Otherwise the remote branch of the first refspec is merged.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 6670,
            "end_index": 6689,
            "value": "\n* Update the remote-tracking branches for the repository\n  you cloned from, then merge one of them into your\n  current branch:\n+\n------------------------------------------------\n$ git pull\n$ git pull origin\n------------------------------------------------\n+\nNormally the branch merged in is the HEAD of the remote repository,\nbut the choice is determined by the branch.<name>.remote and\nbranch.<name>.merge options; see linkgit:git-config[1] for details.\n\n* Merge into the current branch the remote branch `next`:\n+\n------------------------------------------------\n$ git pull origin next\n------------------------------------------------\n+\nThis leaves a copy of `next` temporarily in FETCH_HEAD, and\nupdates the remote-tracking branch `origin/next`.\nThe same can be done by invoking fetch and merge:\n+\n------------------------------------------------\n$ git fetch origin\n$ git merge origin/next\n------------------------------------------------\n\n\nIf you tried a pull which resulted in complex conflicts and\nwould want to start over, you can recover with 'git reset'.\n\n\ninclude::transfer-data-leaks.txt[]\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 7791,
            "end_index": 7802,
            "value": "Using --recurse-submodules can only fetch new commits in already checked\nout submodules right now. When e.g. upstream added a new submodule in the\njust fetched commits of the superproject the submodule itself cannot be\nfetched, making it impossible to check out that submodule later without\nhaving to do a fetch again. This is expected to be fixed in a future Git\nversion.\n\nSEE ALSO\n--------\nlinkgit:git-fetch[1], linkgit:git-merge[1], linkgit:git-config[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8260,
            "end_index": 8269,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-push.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-push - Update remote refs along with associated objects\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 96,
            "end_index": 115,
            "value": "[verse]\n'git push' [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]\n\t   [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n\t   [-u | --set-upstream] [-o <string> | --push-option=<string>]\n\t   [--[no-]signed|--signed=(true|false|if-asked)]\n\t   [--force-with-lease[=<refname>[:<expect>]] [--force-if-includes]]\n\t   [--no-verify] [<repository> [<refspec>...]]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 560,
            "end_index": 585,
            "value": "\nUpdates remote refs using local refs, while sending objects\nnecessary to complete the given refs.\n\nYou can make interesting things happen to a repository\nevery time you push into it, by setting up 'hooks' there.  See\ndocumentation for linkgit:git-receive-pack[1].\n\nWhen the command line does not specify where to push with the\n`<repository>` argument, `branch.*.remote` configuration for the\ncurrent branch is consulted to determine where to push.  If the\nconfiguration is missing, it defaults to 'origin'.\n\nWhen the command line does not specify what to push with `<refspec>...`\narguments or `--all`, `--mirror`, `--tags` options, the command finds\nthe default `<refspec>` by consulting `remote.*.push` configuration,\nand if it is not found, honors `push.default` configuration to decide\nwhat to push (See linkgit:git-config[1] for the meaning of `push.default`).\n\nWhen neither the command-line nor the configuration specify what to\npush, the default behavior is used, which corresponds to the `simple`\nvalue for `push.default`: the current branch is pushed to the\ncorresponding upstream branch, but as a safety measure, the push is\naborted if the upstream branch does not have the same name as the\nlocal one.\n\n\nOPTIONS[[OPTIONS]]\n------------------\n<repository>::\n\tThe \"remote\" repository that is destination of a push\n\toperation.  This parameter can be either a URL\n\t(see the section <<URLS,GIT URLS>> below) or the name\n\tof a remote (see the section <<REMOTES,REMOTES>> below).\n\n<refspec>...::\n\tSpecify what destination ref to update with what source object.\n\tThe format of a <refspec> parameter is an optional plus\n\t`+`, followed by the source object <src>, followed\n\tby a colon `:`, followed by the destination ref <dst>.\n+\nThe <src> is often the name of the branch you would want to push, but\nit can be any arbitrary \"SHA-1 expression\", such as `master~4` or\n`HEAD` (see linkgit:gitrevisions[7]).\n+\nThe <dst> tells which ref on the remote side is updated with this\npush. Arbitrary expressions cannot be used here, an actual ref must\nbe named.\nIf `git push [<repository>]` without any `<refspec>` argument is set to\nupdate some ref at the destination with `<src>` with\n`remote.<repository>.push` configuration variable, `:<dst>` part can\nbe omitted--such a push will update a ref that `<src>` normally updates\nwithout any `<refspec>` on the command line.  Otherwise, missing\n`:<dst>` means to update the same ref as the `<src>`.\n+\nIf <dst> doesn't start with `refs/` (e.g. `refs/heads/master`) we will\ntry to infer where in `refs/*` on the destination <repository> it\nbelongs based on the type of <src> being pushed and whether <dst>\nis ambiguous.\n+\n--\n* If <dst> unambiguously refers to a ref on the <repository> remote,\n  then push to that ref.\n\n* If <src> resolves to a ref starting with refs/heads/ or refs/tags/,\n  then prepend that to <dst>.\n\n* Other ambiguity resolutions might be added in the future, but for\n  now any other cases will error out with an error indicating what we\n  tried, and depending on the `advice.pushUnqualifiedRefname`\n  configuration (see linkgit:git-config[1]) suggest what refs/\n  namespace you may have wanted to push to.\n\n--\n+\nThe object referenced by <src> is used to update the <dst> reference\non the remote side. Whether this is allowed depends on where in\n`refs/*` the <dst> reference lives as described in detail below, in\nthose sections \"update\" means any modifications except deletes, which\nas noted after the next few sections are treated differently.\n+\nThe `refs/heads/*` namespace will only accept commit objects, and\nupdates only if they can be fast-forwarded.\n+\nThe `refs/tags/*` namespace will accept any kind of object (as\ncommits, trees and blobs can be tagged), and any updates to them will\nbe rejected.\n+\nIt's possible to push any type of object to any namespace outside of\n`refs/{tags,heads}/*`. In the case of tags and commits, these will be\ntreated as if they were the commits inside `refs/heads/*` for the\npurposes of whether the update is allowed.\n+\nI.e. a fast-forward of commits and tags outside `refs/{tags,heads}/*`\nis allowed, even in cases where what's being fast-forwarded is not a\ncommit, but a tag object which happens to point to a new commit which\nis a fast-forward of the commit the last tag (or commit) it's\nreplacing. Replacing a tag with an entirely different tag is also\nallowed, if it points to the same commit, as well as pushing a peeled\ntag, i.e. pushing the commit that existing tag object points to, or a\nnew tag object which an existing commit points to.\n+\nTree and blob objects outside of `refs/{tags,heads}/*` will be treated\nthe same way as if they were inside `refs/tags/*`, any update of them\nwill be rejected.\n+\nAll of the rules described above about what's not allowed as an update\ncan be overridden by adding an the optional leading `+` to a refspec\n(or using `--force` command line option). The only exception to this\nis that no amount of forcing will make the `refs/heads/*` namespace\naccept a non-commit object. Hooks and configuration can also override\nor amend these rules, see e.g. `receive.denyNonFastForwards` in\nlinkgit:git-config[1] and `pre-receive` and `update` in\nlinkgit:githooks[5].\n+\nPushing an empty <src> allows you to delete the <dst> ref from the\nremote repository. Deletions are always accepted without a leading `+`\nin the refspec (or `--force`), except when forbidden by configuration\nor hooks. See `receive.denyDeletes` in linkgit:git-config[1] and\n`pre-receive` and `update` in linkgit:githooks[5].\n+\nThe special refspec `:` (or `+:` to allow non-fast-forward updates)\ndirects Git to push \"matching\" branches: for every branch that exists on\nthe local side, the remote side is updated if a branch of the same name\nalready exists on the remote side.\n+\n`tag <tag>` means the same as `refs/tags/<tag>:refs/tags/<tag>`.\n\n--all::\n\tPush all branches (i.e. refs under `refs/heads/`); cannot be\n\tused with other <refspec>.\n\n--prune::\n\tRemove remote branches that don't have a local counterpart. For example\n\ta remote branch `tmp` will be removed if a local branch with the same\n\tname doesn't exist any more. This also respects refspecs, e.g.\n\t`git push --prune remote refs/heads/*:refs/tmp/*` would\n\tmake sure that remote `refs/tmp/foo` will be removed if `refs/heads/foo`\n\tdoesn't exist.\n\n--mirror::\n\tInstead of naming each ref to push, specifies that all\n\trefs under `refs/` (which includes but is not\n\tlimited to `refs/heads/`, `refs/remotes/`, and `refs/tags/`)\n\tbe mirrored to the remote repository.  Newly created local\n\trefs will be pushed to the remote end, locally updated refs\n\twill be force updated on the remote end, and deleted refs\n\twill be removed from the remote end.  This is the default\n\tif the configuration option `remote.<remote>.mirror` is\n\tset.\n\n-n::\n--dry-run::\n\tDo everything except actually send the updates.\n\n--porcelain::\n\tProduce machine-readable output.  The output status line for each ref\n\twill be tab-separated and sent to stdout instead of stderr.  The full\n\tsymbolic names of the refs will be given.\n\n-d::\n--delete::\n\tAll listed refs are deleted from the remote repository. This is\n\tthe same as prefixing all refs with a colon.\n\n--tags::\n\tAll refs under `refs/tags` are pushed, in\n\taddition to refspecs explicitly listed on the command\n\tline.\n\n--follow-tags::\n\tPush all the refs that would be pushed without this option,\n\tand also push annotated tags in `refs/tags` that are missing\n\tfrom the remote but are pointing at commit-ish that are\n\treachable from the refs being pushed.  This can also be specified\n\twith configuration variable `push.followTags`.  For more\n\tinformation, see `push.followTags` in linkgit:git-config[1].\n\n--[no-]signed::\n--signed=(true|false|if-asked)::\n\tGPG-sign the push request to update refs on the receiving\n\tside, to allow it to be checked by the hooks and/or be\n\tlogged.  If `false` or `--no-signed`, no signing will be\n\tattempted.  If `true` or `--signed`, the push will fail if the\n\tserver does not support signed pushes.  If set to `if-asked`,\n\tsign if and only if the server supports signed pushes.  The push\n\twill also fail if the actual call to `gpg --sign` fails.  See\n\tlinkgit:git-receive-pack[1] for the details on the receiving end.\n\n--[no-]atomic::\n\tUse an atomic transaction on the remote side if available.\n\tEither all refs are updated, or on error, no refs are updated.\n\tIf the server does not support atomic pushes the push will fail.\n\n-o <option>::\n--push-option=<option>::\n\tTransmit the given string to the server, which passes them to\n\tthe pre-receive as well as the post-receive hook. The given string\n\tmust not contain a NUL or LF character.\n\tWhen multiple `--push-option=<option>` are given, they are\n\tall sent to the other side in the order listed on the\n\tcommand line.\n\tWhen no `--push-option=<option>` is given from the command\n\tline, the values of configuration variable `push.pushOption`\n\tare used instead.\n\n--receive-pack=<git-receive-pack>::\n--exec=<git-receive-pack>::\n\tPath to the 'git-receive-pack' program on the remote\n\tend.  Sometimes useful when pushing to a remote\n\trepository over ssh, and you do not have the program in\n\ta directory on the default $PATH.\n\n--[no-]force-with-lease::\n--force-with-lease=<refname>::\n--force-with-lease=<refname>:<expect>::\n\tUsually, \"git push\" refuses to update a remote ref that is\n\tnot an ancestor of the local ref used to overwrite it.\n+\nThis option overrides this restriction if the current value of the\nremote ref is the expected value.  \"git push\" fails otherwise.\n+\nImagine that you have to rebase what you have already published.\nYou will have to bypass the \"must fast-forward\" rule in order to\nreplace the history you originally published with the rebased history.\nIf somebody else built on top of your original history while you are\nrebasing, the tip of the branch at the remote may advance with her\ncommit, and blindly pushing with `--force` will lose her work.\n+\nThis option allows you to say that you expect the history you are\nupdating is what you rebased and want to replace. If the remote ref\nstill points at the commit you specified, you can be sure that no\nother people did anything to the ref. It is like taking a \"lease\" on\nthe ref without explicitly locking it, and the remote ref is updated\nonly if the \"lease\" is still valid.\n+\n`--force-with-lease` alone, without specifying the details, will protect\nall remote refs that are going to be updated by requiring their\ncurrent value to be the same as the remote-tracking branch we have\nfor them.\n+\n`--force-with-lease=<refname>`, without specifying the expected value, will\nprotect the named ref (alone), if it is going to be updated, by\nrequiring its current value to be the same as the remote-tracking\nbranch we have for it.\n+\n`--force-with-lease=<refname>:<expect>` will protect the named ref (alone),\nif it is going to be updated, by requiring its current value to be\nthe same as the specified value `<expect>` (which is allowed to be\ndifferent from the remote-tracking branch we have for the refname,\nor we do not even have to have such a remote-tracking branch when\nthis form is used).  If `<expect>` is the empty string, then the named ref\nmust not already exist.\n+\nNote that all forms other than `--force-with-lease=<refname>:<expect>`\nthat specifies the expected current value of the ref explicitly are\nstill experimental and their semantics may change as we gain experience\nwith this feature.\n+\n\"--no-force-with-lease\" will cancel all the previous --force-with-lease on the\ncommand line.\n+\nA general note on safety: supplying this option without an expected\nvalue, i.e. as `--force-with-lease` or `--force-with-lease=<refname>`\ninteracts very badly with anything that implicitly runs `git fetch` on\nthe remote to be pushed to in the background, e.g. `git fetch origin`\non your repository in a cronjob.\n+\nThe protection it offers over `--force` is ensuring that subsequent\nchanges your work wasn't based on aren't clobbered, but this is\ntrivially defeated if some background process is updating refs in the\nbackground. We don't have anything except the remote tracking info to\ngo by as a heuristic for refs you're expected to have seen & are\nwilling to clobber.\n+\nIf your editor or some other system is running `git fetch` in the\nbackground for you a way to mitigate this is to simply set up another\nremote:\n+\n\tgit remote add origin-push $(git config remote.origin.url)\n\tgit fetch origin-push\n+\nNow when the background process runs `git fetch origin` the references\non `origin-push` won't be updated, and thus commands like:\n+\n\tgit push --force-with-lease origin-push\n+\nWill fail unless you manually run `git fetch origin-push`. This method\nis of course entirely defeated by something that runs `git fetch\n--all`, in that case you'd need to either disable it or do something\nmore tedious like:\n+\n\tgit fetch              # update 'master' from remote\n\tgit tag base master    # mark our base point\n\tgit rebase -i master   # rewrite some commits\n\tgit push --force-with-lease=master:base master:master\n+\nI.e. create a `base` tag for versions of the upstream code that you've\nseen and are willing to overwrite, then rewrite history, and finally\nforce push changes to `master` if the remote version is still at\n`base`, regardless of what your local `remotes/origin/master` has been\nupdated to in the background.\n+\nAlternatively, specifying `--force-if-includes` as an ancillary option\nalong with `--force-with-lease[=<refname>]` (i.e., without saying what\nexact commit the ref on the remote side must be pointing at, or which\nrefs on the remote side are being protected) at the time of \"push\" will\nverify if updates from the remote-tracking refs that may have been\nimplicitly updated in the background are integrated locally before\nallowing a forced update.\n\n-f::\n--force::\n\tUsually, the command refuses to update a remote ref that is\n\tnot an ancestor of the local ref used to overwrite it.\n\tAlso, when `--force-with-lease` option is used, the command refuses\n\tto update a remote ref whose current value does not match\n\twhat is expected.\n+\nThis flag disables these checks, and can cause the remote repository\nto lose commits; use it with care.\n+\nNote that `--force` applies to all the refs that are pushed, hence\nusing it with `push.default` set to `matching` or with multiple push\ndestinations configured with `remote.*.push` may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart).  To force a push to only\none branch, use a `+` in front of the refspec to push (e.g `git push\norigin +master` to force a push to the `master` branch). See the\n`<refspec>...` section above for details.\n\n--[no-]force-if-includes::\n\tForce an update only if the tip of the remote-tracking ref\n\thas been integrated locally.\n+\nThis option enables a check that verifies if the tip of the\nremote-tracking ref is reachable from one of the \"reflog\" entries of\nthe local branch based in it for a rewrite. The check ensures that any\nupdates from the remote have been incorporated locally by rejecting the\nforced update if that is not the case.\n+\nIf the option is passed without specifying `--force-with-lease`, or\nspecified along with `--force-with-lease=<refname>:<expect>`, it is\na \"no-op\".\n+\nSpecifying `--no-force-if-includes` disables this behavior.\n\n--repo=<repository>::\n\tThis option is equivalent to the <repository> argument. If both\n\tare specified, the command-line argument takes precedence.\n\n-u::\n--set-upstream::\n\tFor every branch that is up to date or successfully pushed, add\n\tupstream (tracking) reference, used by argument-less\n\tlinkgit:git-pull[1] and other commands. For more information,\n\tsee `branch.<name>.merge` in linkgit:git-config[1].\n\n--[no-]thin::\n\tThese options are passed to linkgit:git-send-pack[1]. A thin transfer\n\tsignificantly reduces the amount of sent data when the sender and\n\treceiver share many of the same objects in common. The default is\n\t`--thin`.\n\n-q::\n--quiet::\n\tSuppress all output, including the listing of updated refs,\n\tunless an error occurs. Progress is not reported to the standard\n\terror stream.\n\n-v::\n--verbose::\n\tRun verbosely.\n\n--progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless -q\n\tis specified. This flag forces progress status even if the\n\tstandard error stream is not directed to a terminal.\n\n--no-recurse-submodules::\n--recurse-submodules=check|on-demand|only|no::\n\tMay be used to make sure all submodule commits used by the\n\trevisions to be pushed are available on a remote-tracking branch.\n\tIf 'check' is used Git will verify that all submodule commits that\n\tchanged in the revisions to be pushed are available on at least one\n\tremote of the submodule. If any commits are missing the push will\n\tbe aborted and exit with non-zero status. If 'on-demand' is used\n\tall submodules that changed in the revisions to be pushed will be\n\tpushed. If on-demand was not able to push all necessary revisions it will\n\talso be aborted and exit with non-zero status. If 'only' is used all\n\tsubmodules will be recursively pushed while the superproject is left\n\tunpushed. A value of 'no' or using `--no-recurse-submodules` can be used\n\tto override the push.recurseSubmodules configuration variable when no\n\tsubmodule recursion is required.\n\n--[no-]verify::\n\tToggle the pre-push hook (see linkgit:githooks[5]).  The\n\tdefault is --verify, giving the hook a chance to prevent the\n\tpush.  With --no-verify, the hook is bypassed completely.\n\n-4::\n--ipv4::\n\tUse IPv4 addresses only, ignoring IPv6 addresses.\n\n-6::\n--ipv6::\n\tUse IPv6 addresses only, ignoring IPv4 addresses.\n\ninclude::urls-remotes.txt[]\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 18256,
            "end_index": 18271,
            "value": "\nThe output of \"git push\" depends on the transport method used; this\nsection describes the output when pushing over the Git protocol (either\nlocally or via ssh).\n\nThe status of the push is output in tabular form, with each line\nrepresenting the status of a single ref. Each line is of the form:\n\n-------------------------------\n <flag> <summary> <from> -> <to> (<reason>)\n-------------------------------\n\nIf --porcelain is used, then each line of the output is of the form:\n\n-------------------------------\n <flag> \\t <from>:<to> \\t <summary> (<reason>)\n-------------------------------\n\nThe status of up-to-date refs is shown only if --porcelain or --verbose\noption is used.\n\nflag::\n\tA single character indicating the status of the ref:\n(space);; for a successfully pushed fast-forward;\n`+`;; for a successful forced update;\n`-`;; for a successfully deleted ref;\n`*`;; for a successfully pushed new ref;\n`!`;; for a ref that was rejected or failed to push; and\n`=`;; for a ref that was up to date and did not need pushing.\n\nsummary::\n\tFor a successfully pushed ref, the summary shows the old and new\n\tvalues of the ref in a form suitable for using as an argument to\n\t`git log` (this is `<old>..<new>` in most cases, and\n\t`<old>...<new>` for forced non-fast-forward updates).\n+\nFor a failed update, more details are given:\n+\n--\nrejected::\n\tGit did not try to send the ref at all, typically because it\n\tis not a fast-forward and you did not force the update.\n\nremote rejected::\n\tThe remote end refused the update.  Usually caused by a hook\n\ton the remote side, or because the remote repository has one\n\tof the following safety options in effect:\n\t`receive.denyCurrentBranch` (for pushes to the checked out\n\tbranch), `receive.denyNonFastForwards` (for forced\n\tnon-fast-forward updates), `receive.denyDeletes` or\n\t`receive.denyDeleteCurrent`.  See linkgit:git-config[1].\n\nremote failure::\n\tThe remote end did not report the successful update of the ref,\n\tperhaps because of a temporary error on the remote side, a\n\tbreak in the network connection, or other transient error.\n--\n\nfrom::\n\tThe name of the local ref being pushed, minus its\n\t`refs/<type>/` prefix. In the case of deletion, the\n\tname of the local ref is omitted.\n\nto::\n\tThe name of the remote ref being updated, minus its\n\t`refs/<type>/` prefix.\n\nreason::\n\tA human-readable explanation. In the case of successfully pushed\n\trefs, no explanation is needed. For a failed ref, the reason for\n\tfailure is described.\n\nNOTE ABOUT FAST-FORWARDS\n------------------------\n\nWhen an update changes a branch (or more in general, a ref) that used to\npoint at commit A to point at another commit B, it is called a\nfast-forward update if and only if B is a descendant of A.\n\nIn a fast-forward update from A to B, the set of commits that the original\ncommit A built on top of is a subset of the commits the new commit B\nbuilds on top of.  Hence, it does not lose any history.\n\nIn contrast, a non-fast-forward update will lose history.  For example,\nsuppose you and somebody else started at the same commit X, and you built\na history leading to commit B while the other person built a history\nleading to commit A.  The history looks like this:\n\n----------------\n\n      B\n     /\n ---X---A\n\n----------------\n\nFurther suppose that the other person already pushed changes leading to A\nback to the original repository from which you two obtained the original\ncommit X.\n\nThe push done by the other person updated the branch that used to point at\ncommit X to point at commit A.  It is a fast-forward.\n\nBut if you try to push, you will attempt to update the branch (that\nnow points at A) with commit B.  This does _not_ fast-forward.  If you did\nso, the changes introduced by commit A will be lost, because everybody\nwill now start building on top of B.\n\nThe command by default does not allow an update that is not a fast-forward\nto prevent such loss of history.\n\nIf you do not want to lose your work (history from X to B) or the work by\nthe other person (history from X to A), you would need to first fetch the\nhistory from the repository, create a history that contains changes done\nby both parties, and push the result back.\n\nYou can perform \"git pull\", resolve potential conflicts, and \"git push\"\nthe result.  A \"git pull\" will create a merge commit C between commits A\nand B.\n\n----------------\n\n      B---C\n     /   /\n ---X---A\n\n----------------\n\nUpdating A with the resulting merge commit will fast-forward and your\npush will be accepted.\n\nAlternatively, you can rebase your change between X and B on top of A,\nwith \"git pull --rebase\", and push the result back.  The rebase will\ncreate a new commit D that builds the change between X and B on top of\nA.\n\n----------------\n\n      B   D\n     /   /\n ---X---A\n\n----------------\n\nAgain, updating A with this commit will fast-forward and your push will be\naccepted.\n\nThere is another common situation where you may encounter non-fast-forward\nrejection when you try to push, and it is possible even when you are\npushing into a repository nobody else pushes into. After you push commit\nA yourself (in the first picture in this section), replace it with \"git\ncommit --amend\" to produce commit B, and you try to push it out, because\nforgot that you have pushed A out already. In such a case, and only if\nyou are certain that nobody in the meantime fetched your earlier commit A\n(and started building on top of it), you can run \"git push --force\" to\noverwrite it. In other words, \"git push --force\" is a method reserved for\na case where you do mean to lose history.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 23814,
            "end_index": 23833,
            "value": "\n`git push`::\n\tWorks like `git push <remote>`, where <remote> is the\n\tcurrent branch's remote (or `origin`, if no remote is\n\tconfigured for the current branch).\n\n`git push origin`::\n\tWithout additional configuration, pushes the current branch to\n\tthe configured upstream (`remote.origin.merge` configuration\n\tvariable) if it has the same name as the current branch, and\n\terrors out without pushing otherwise.\n+\nThe default behavior of this command when no <refspec> is given can be\nconfigured by setting the `push` option of the remote, or the `push.default`\nconfiguration variable.\n+\nFor example, to default to pushing only the current branch to `origin`\nuse `git config remote.origin.push HEAD`.  Any valid <refspec> (like\nthe ones in the examples below) can be configured as the default for\n`git push origin`.\n\n`git push origin :`::\n\tPush \"matching\" branches to `origin`. See\n\t<refspec> in the <<OPTIONS,OPTIONS>> section above for a\n\tdescription of \"matching\" branches.\n\n`git push origin master`::\n\tFind a ref that matches `master` in the source repository\n\t(most likely, it would find `refs/heads/master`), and update\n\tthe same ref (e.g. `refs/heads/master`) in `origin` repository\n\twith it.  If `master` did not exist remotely, it would be\n\tcreated.\n\n`git push origin HEAD`::\n\tA handy way to push the current branch to the same name on the\n\tremote.\n\n`git push mothership master:satellite/master dev:satellite/dev`::\n\tUse the source ref that matches `master` (e.g. `refs/heads/master`)\n\tto update the ref that matches `satellite/master` (most probably\n\t`refs/remotes/satellite/master`) in the `mothership` repository;\n\tdo the same for `dev` and `satellite/dev`.\n+\nSee the section describing `<refspec>...` above for a discussion of\nthe matching semantics.\n+\nThis is to emulate `git fetch` run on the `mothership` using `git\npush` that is run in the opposite direction in order to integrate\nthe work done on `satellite`, and is often necessary when you can\nonly make connection in one way (i.e. satellite can ssh into\nmothership but mothership cannot initiate connection to satellite\nbecause the latter is behind a firewall or does not run sshd).\n+\nAfter running this `git push` on the `satellite` machine, you would\nssh into the `mothership` and run `git merge` there to complete the\nemulation of `git pull` that were run on `mothership` to pull changes\nmade on `satellite`.\n\n`git push origin HEAD:master`::\n\tPush the current branch to the remote ref matching `master` in the\n\t`origin` repository. This form is convenient to push the current\n\tbranch without thinking about its local name.\n\n`git push origin master:refs/heads/experimental`::\n\tCreate the branch `experimental` in the `origin` repository\n\tby copying the current `master` branch.  This form is only\n\tneeded to create a new branch or tag in the remote repository when\n\tthe local name and the remote name are different; otherwise,\n\tthe ref name on its own will work.\n\n`git push origin :experimental`::\n\tFind a ref that matches `experimental` in the `origin` repository\n\t(e.g. `refs/heads/experimental`), and delete it.\n\n`git push origin +dev:master`::\n\tUpdate the origin repository's master branch with the dev branch,\n\tallowing non-fast-forward updates.  *This can leave unreferenced\n\tcommits dangling in the origin repository.*  Consider the\n\tfollowing situation, where a fast-forward is not possible:\n+\n----\n\t    o---o---o---A---B  origin/master\n\t\t     \\\n\t\t      X---Y---Z  dev\n----\n+\nThe above command would change the origin repository to\n+\n----\n\t\t      A---B  (unnamed branch)\n\t\t     /\n\t    o---o---o---X---Y---Z  master\n----\n+\nCommits A and B would no longer belong to a branch with a symbolic name,\nand so would be unreachable.  As such, these commits would be removed by\na `git gc` command on the origin repository.\n\ninclude::transfer-data-leaks.txt[]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 27660,
            "end_index": 27669,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-quiltimport.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-quiltimport - Applies a quilt patchset onto the current branch\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 117,
            "end_index": 136,
            "value": "[verse]\n'git quiltimport' [--dry-run | -n] [--author <author>] [--patches <dir>]\n\t\t[--series <file>] [--keep-non-patch]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 257,
            "end_index": 282,
            "value": "Applies a quilt patchset onto the current Git branch, preserving\nthe patch boundaries, patch order, and patch descriptions present\nin the quilt patchset.\n\nFor each patch the code attempts to extract the author from the\npatch description.  If that fails it falls back to the author\nspecified with --author.  If the --author flag was not given\nthe patch description is displayed and the user is asked to\ninteractively enter the author of the patch.\n\nIf a subject is not found in the patch description the patch name is\npreserved as the 1 line subject in the Git description.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 855,
            "end_index": 872,
            "value": "\n-n::\n--dry-run::\n\tWalk through the patches in the series and warn\n\tif we cannot find all of the necessary information to commit\n\ta patch.  At the time of this writing only missing author\n\tinformation is warned about.\n\n--author Author Name <Author Email>::\n\tThe author name and email address to use when no author\n\tinformation can be found in the patch description.\n\n--patches <dir>::\n\tThe directory to find the quilt patches.\n+\nThe default for the patch directory is patches\nor the value of the `$QUILT_PATCHES` environment\nvariable.\n\n--series <file>::\n\tThe quilt series file.\n+\nThe default for the series file is <patches>/series\nor the value of the `$QUILT_SERIES` environment\nvariable.\n\n--keep-non-patch::\n\tPass `-b` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]).\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1647,
            "end_index": 1656,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-range-diff.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-range-diff - Compare two commit ranges (e.g. two versions of a branch)\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 122,
            "end_index": 141,
            "value": "[verse]\n'git range-diff' [--color=[<when>]] [--no-color] [<diff-options>]\n\t[--no-dual-color] [--creation-factor=<factor>]\n\t[--left-only | --right-only]\n\t( <range1> <range2> | <rev1>...<rev2> | <base> <rev1> <rev2> )\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 357,
            "end_index": 382,
            "value": "\nThis command shows the differences between two versions of a patch\nseries, or more generally, two commit ranges (ignoring merge commits).\n\nTo that end, it first finds pairs of commits from both commit ranges\nthat correspond with each other. Two commits are said to correspond when\nthe diff between their patches (i.e. the author information, the commit\nmessage and the commit diff) is reasonably small compared to the\npatches' size. See ``Algorithm`` below for details.\n\nFinally, the list of matching commits is shown in the order of the\nsecond commit range, with unmatched commits being inserted just after\nall of their ancestors have been shown.\n\nThere are three ways to specify the commit ranges:\n\n- `<range1> <range2>`: Either commit range can be of the form\n  `<base>..<rev>`, `<rev>^!` or `<rev>^-<n>`. See `SPECIFYING RANGES`\n  in linkgit:gitrevisions[7] for more details.\n\n- `<rev1>...<rev2>`. This is equivalent to\n  `<rev2>..<rev1> <rev1>..<rev2>`.\n\n- `<base> <rev1> <rev2>`: This is equivalent to `<base>..<rev1>\n  <base>..<rev2>`.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1426,
            "end_index": 1443,
            "value": "\n--no-dual-color::\n\tWhen the commit diffs differ, `git range-diff` recreates the\n\toriginal diffs' coloring, and adds outer -/+ diff markers with\n\tthe *background* being red/green to make it easier to see e.g.\n\twhen there was a change in what exact lines were added.\n+\nAdditionally, the commit diff lines that are only present in the first commit\nrange are shown \"dimmed\" (this can be overridden using the `color.diff.<slot>`\nconfig setting where `<slot>` is one of `contextDimmed`, `oldDimmed` and\n`newDimmed`), and the commit diff lines that are only present in the second\ncommit range are shown in bold (which can be overridden using the config\nsettings `color.diff.<slot>` with `<slot>` being one of `contextBold`,\n`oldBold` or `newBold`).\n+\nThis is known to `range-diff` as \"dual coloring\". Use `--no-dual-color`\nto revert to color all lines according to the outer diff markers\n(and completely ignore the inner diff when it comes to color).\n\n--creation-factor=<percent>::\n\tSet the creation/deletion cost fudge factor to `<percent>`.\n\tDefaults to 60. Try a larger value if `git range-diff` erroneously\n\tconsiders a large change a total rewrite (deletion of one commit\n\tand addition of another), and a smaller one in the reverse case.\n\tSee the ``Algorithm`` section below for an explanation why this is\n\tneeded.\n\n--left-only::\n\tSuppress commits that are missing from the first specified range\n\t(or the \"left range\" when using the `<rev1>...<rev2>` format).\n\n--right-only::\n\tSuppress commits that are missing from the second specified range\n\t(or the \"right range\" when using the `<rev1>...<rev2>` format).\n\n--[no-]notes[=<ref>]::\n\tThis flag is passed to the `git log` program\n\t(see linkgit:git-log[1]) that generates the patches.\n\n<range1> <range2>::\n\tCompare the commits specified by the two ranges, where\n\t`<range1>` is considered an older version of `<range2>`.\n\n<rev1>...<rev2>::\n\tEquivalent to passing `<rev2>..<rev1>` and `<rev1>..<rev2>`.\n\n<base> <rev1> <rev2>::\n\tEquivalent to passing `<base>..<rev1>` and `<base>..<rev2>`.\n\tNote that `<base>` does not need to be the exact branch point\n\tof the branches. Example: after rebasing a branch `my-topic`,\n\t`git range-diff my-topic@{u} my-topic@{1} my-topic` would\n\tshow the differences introduced by the rebase.\n\n`git range-diff` also accepts the regular diff options (see\nlinkgit:git-diff[1]), most notably the `--color=[<when>]` and\n`--no-color` options. These options are used when generating the \"diff\nbetween patches\", i.e. to compare the author, commit message and diff of\ncorresponding old/new commits. There is currently no means to tweak most of the\ndiff options passed to `git log` when generating those patches.\n\nOUTPUT STABILITY\n----------------\n\nThe output of the `range-diff` command is subject to change. It is\nintended to be human-readable porcelain output, not something that can\nbe used across versions of Git to get a textually stable `range-diff`\n(as opposed to something like the `--stable` option to\nlinkgit:git-patch-id[1]). There's also no equivalent of\nlinkgit:git-apply[1] for `range-diff`, the output is not intended to\nbe machine-readable.\n\nThis is particularly true when passing in diff options. Currently some\noptions like `--stat` can, as an emergent effect, produce output\nthat's quite useless in the context of `range-diff`. Future versions\nof `range-diff` may learn to interpret such options in a manner\nspecific to `range-diff` (e.g. for `--stat` producing human-readable\noutput which summarizes how the diffstat changed).\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 4954,
            "end_index": 4983,
            "value": "This command uses the `diff.color.*` and `pager.range-diff` settings\n(the latter is on by default).\nSee linkgit:git-config[1].\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5111,
            "end_index": 5130,
            "value": "\nWhen a rebase required merge conflicts to be resolved, compare the changes\nintroduced by the rebase directly afterwards using:\n\n------------\n$ git range-diff @{u} @{1} @\n------------\n\n\nA typical output of `git range-diff` would look like this:\n\n------------\n-:  ------- > 1:  0ddba11 Prepare for the inevitable!\n1:  c0debee = 2:  cab005e Add a helpful message at the start\n2:  f00dbal ! 3:  decafe1 Describe a bug\n    @@ -1,3 +1,3 @@\n     Author: A U Thor <author@example.com>\n\n    -TODO: Describe a bug\n    +Describe a bug\n    @@ -324,5 +324,6\n      This is expected.\n\n    -+What is unexpected is that it will also crash.\n    ++Unexpectedly, it also crashes. This is a bug, and the jury is\n    ++still out there how to fix it best. See ticket #314 for details.\n\n      Contact\n3:  bedead < -:  ------- TO-UNDO\n------------\n\nIn this example, there are 3 old and 3 new commits, where the developer\nremoved the 3rd, added a new one before the first two, and modified the\ncommit message of the 2nd commit as well its diff.\n\nWhen the output goes to a terminal, it is color-coded by default, just\nlike regular `git diff`'s output. In addition, the first line (adding a\ncommit) is green, the last line (deleting a commit) is red, the second\nline (with a perfect match) is yellow like the commit header of `git\nshow`'s output, and the third line colors the old commit red, the new\none green and the rest like `git show`'s commit header.\n\nA naive color-coded diff of diffs is actually a bit hard to read,\nthough, as it colors the entire lines red or green. The line that added\n\"What is unexpected\" in the old commit, for example, is completely red,\neven if the intent of the old commit was to add something.\n\nTo help with that, `range` uses the `--dual-color` mode by default. In\nthis mode, the diff of diffs will retain the original diff colors, and\nprefix the lines with -/+ markers that have their *background* red or\ngreen, to make it more obvious that they describe how the diff itself\nchanged.\n\n"
        },
        "Algorithm": {
            "name": "Algorithm",
            "start_index": 7123,
            "end_index": 7144,
            "value": "\nThe general idea is this: we generate a cost matrix between the commits\nin both commit ranges, then solve the least-cost assignment.\n\nThe cost matrix is populated thusly: for each pair of commits, both\ndiffs are generated and the \"diff of diffs\" is generated, with 3 context\nlines, then the number of lines in that diff is used as cost.\n\nTo avoid false positives (e.g. when a patch has been removed, and an\nunrelated patch has been added between two iterations of the same patch\nseries), the cost matrix is extended to allow for that, by adding\nfixed-cost entries for wholesale deletes/adds.\n\nExample: Let commits `1--2` be the first iteration of a patch series and\n`A--C` the second iteration. Let's assume that `A` is a cherry-pick of\n`2,` and `C` is a cherry-pick of `1` but with a small modification (say,\na fixed typo). Visualize the commits as a bipartite graph:\n\n------------\n    1            A\n\n    2            B\n\n\t\t C\n------------\n\nWe are looking for a \"best\" explanation of the new series in terms of\nthe old one. We can represent an \"explanation\" as an edge in the graph:\n\n\n------------\n    1            A\n\t       /\n    2 --------'  B\n\n\t\t C\n------------\n\nThis explanation comes for \"free\" because there was no change. Similarly\n`C` could be explained using `1`, but that comes at some cost c>0\nbecause of the modification:\n\n------------\n    1 ----.      A\n\t  |    /\n    2 ----+---'  B\n\t  |\n\t  `----- C\n\t  c>0\n------------\n\nIn mathematical terms, what we are looking for is some sort of a minimum\ncost bipartite matching; `1` is matched to `C` at some cost, etc. The\nunderlying graph is in fact a complete bipartite graph; the cost we\nassociate with every edge is the size of the diff between the two\ncommits' patches. To explain also new commits, we introduce dummy nodes\non both sides:\n\n------------\n    1 ----.      A\n\t  |    /\n    2 ----+---'  B\n\t  |\n    o     `----- C\n\t  c>0\n    o            o\n\n    o            o\n------------\n\nThe cost of an edge `o--C` is the size of `C`'s diff, modified by a\nfudge factor that should be smaller than 100%. The cost of an edge\n`o--o` is free. The fudge factor is necessary because even if `1` and\n`C` have nothing in common, they may still share a few empty lines and\nsuch, possibly making the assignment `1--C`, `o--o` slightly cheaper\nthan `1--o`, `o--C` even if `1` and `C` have nothing in common. With the\nfudge factor we require a much larger common part to consider patches as\ncorresponding.\n\nThe overall time needed to compute this algorithm is the time needed to\ncompute n+m commit diffs and then n*m diffs of patches, plus the time\nneeded to compute the least-cost assignment between n and m diffs. Git\nuses an implementation of the Jonker-Volgenant algorithm to solve the\nassignment problem, which has cubic runtime complexity. The matching\nfound in this case will look like this:\n\n------------\n    1 ----.      A\n\t  |    /\n    2 ----+---'  B\n       .--+-----'\n    o -'  `----- C\n\t  c>0\n    o ---------- o\n\n    o ---------- o\n------------\n\n\nSEE ALSO\n--------\nlinkgit:git-log[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 10186,
            "end_index": 10195,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-read-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-read-tree - Reads tree information into the index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 100,
            "end_index": 119,
            "value": "[verse]\n'git read-tree' [[-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>]\n\t\t[-u [--exclude-per-directory=<gitignore>] | -i]]\n\t\t[--index-output=<file>] [--no-sparse-checkout]\n\t\t(--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 361,
            "end_index": 386,
            "value": "Reads the tree information given by <tree-ish> into the index,\nbut does not actually *update* any of the files it \"caches\". (see:\nlinkgit:git-checkout-index[1])\n\nOptionally, it can merge a tree into the index, perform a\nfast-forward (i.e. 2-way) merge, or a 3-way merge, with the `-m`\nflag.  When used with `-m`, the `-u` flag causes it to also update\nthe files in the work tree with the result of the merge.\n\nTrivial merges are done by 'git read-tree' itself.  Only conflicting paths\nwill be in unmerged state when 'git read-tree' returns.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 927,
            "end_index": 944,
            "value": "\n-m::\n\tPerform a merge, not just a read.  The command will\n\trefuse to run if your index file has unmerged entries,\n\tindicating that you have not finished previous merge you\n\tstarted.\n\n--reset::\n\tSame as -m, except that unmerged entries are discarded instead\n\tof failing. When used with `-u`, updates leading to loss of\n\tworking tree changes will not abort the operation.\n\n-u::\n\tAfter a successful merge, update the files in the work\n\ttree with the result of the merge.\n\n-i::\n\tUsually a merge requires the index file as well as the\n\tfiles in the working tree to be up to date with the\n\tcurrent head commit, in order not to lose local\n\tchanges.  This flag disables the check with the working\n\ttree and is meant to be used when creating a merge of\n\ttrees that are not directly related to the current\n\tworking tree status into a temporary index file.\n\n-n::\n--dry-run::\n\tCheck if the command would error out, without updating the index\n\tor the files in the working tree for real.\n\n-v::\n\tShow the progress of checking files out.\n\n--trivial::\n\tRestrict three-way merge by 'git read-tree' to happen\n\tonly if there is no file-level merging required, instead\n\tof resolving merge for trivial cases and leaving\n\tconflicting files unresolved in the index.\n\n--aggressive::\n\tUsually a three-way merge by 'git read-tree' resolves\n\tthe merge for really trivial cases and leaves other\n\tcases unresolved in the index, so that porcelains can\n\timplement different merge policies.  This flag makes the\n\tcommand resolve a few more cases internally:\n+\n* when one side removes a path and the other side leaves the path\n  unmodified.  The resolution is to remove that path.\n* when both sides remove a path.  The resolution is to remove that path.\n* when both sides add a path identically.  The resolution\n  is to add that path.\n\n--prefix=<prefix>::\n\tKeep the current index contents, and read the contents\n\tof the named tree-ish under the directory at `<prefix>`.\n\tThe command will refuse to overwrite entries that already\n\texisted in the original index file.\n\n--exclude-per-directory=<gitignore>::\n\tWhen running the command with `-u` and `-m` options, the\n\tmerge result may need to overwrite paths that are not\n\ttracked in the current branch.  The command usually\n\trefuses to proceed with the merge to avoid losing such a\n\tpath.  However this safety valve sometimes gets in the\n\tway.  For example, it often happens that the other\n\tbranch added a file that used to be a generated file in\n\tyour branch, and the safety valve triggers when you try\n\tto switch to that branch after you ran `make` but before\n\trunning `make clean` to remove the generated file.  This\n\toption tells the command to read per-directory exclude\n\tfile (usually '.gitignore') and allows such an untracked\n\tbut explicitly ignored file to be overwritten.\n\n--index-output=<file>::\n\tInstead of writing the results out to `$GIT_INDEX_FILE`,\n\twrite the resulting index in the named file.  While the\n\tcommand is operating, the original index file is locked\n\twith the same mechanism as usual.  The file must allow\n\tto be rename(2)ed into from a temporary file that is\n\tcreated next to the usual index file; typically this\n\tmeans it needs to be on the same filesystem as the index\n\tfile itself, and you need write permission to the\n\tdirectories the index file and index output file are\n\tlocated in.\n\n--[no-]recurse-submodules::\n\tUsing --recurse-submodules will update the content of all active\n\tsubmodules according to the commit recorded in the superproject by\n\tcalling read-tree recursively, also setting the submodules' HEAD to be\n\tdetached at that commit.\n\n--no-sparse-checkout::\n\tDisable sparse checkout support even if `core.sparseCheckout`\n\tis true.\n\n--empty::\n\tInstead of reading tree object(s) into the index, just empty\n\tit.\n\n-q::\n--quiet::\n\tQuiet, suppress feedback messages.\n\n<tree-ish#>::\n\tThe id of the tree object(s) to be read/merged.\n\n"
        },
        "MERGING": {
            "name": "MERGING",
            "start_index": 4829,
            "end_index": 4846,
            "value": "If `-m` is specified, 'git read-tree' can perform 3 kinds of\nmerge, a single tree merge if only 1 tree is given, a\nfast-forward merge with 2 trees, or a 3-way merge if 3 or more trees are\nprovided.\n\n\nSingle Tree Merge\n~~~~~~~~~~~~~~~~~\nIf only 1 tree is specified, 'git read-tree' operates as if the user did not\nspecify `-m`, except that if the original index has an entry for a\ngiven pathname, and the contents of the path match with the tree\nbeing read, the stat info from the index is used. (In other words, the\nindex's stat()s take precedence over the merged tree's).\n\nThat means that if you do a `git read-tree -m <newtree>` followed by a\n`git checkout-index -f -u -a`, the 'git checkout-index' only checks out\nthe stuff that really changed.\n\nThis is used to avoid unnecessary false hits when 'git diff-files' is\nrun after 'git read-tree'.\n\n\nTwo Tree Merge\n~~~~~~~~~~~~~~\n\nTypically, this is invoked as `git read-tree -m $H $M`, where $H\nis the head commit of the current repository, and $M is the head\nof a foreign tree, which is simply ahead of $H (i.e. we are in a\nfast-forward situation).\n\nWhen two trees are specified, the user is telling 'git read-tree'\nthe following:\n\n     1. The current index and work tree is derived from $H, but\n\tthe user may have local changes in them since $H.\n\n     2. The user wants to fast-forward to $M.\n\nIn this case, the `git read-tree -m $H $M` command makes sure\nthat no local change is lost as the result of this \"merge\".\nHere are the \"carry forward\" rules, where \"I\" denotes the index,\n\"clean\" means that index and work tree coincide, and \"exists\"/\"nothing\"\nrefer to the presence of a path in the specified commit:\n\n....\n\tI                   H        M        Result\n       -------------------------------------------------------\n     0  nothing             nothing  nothing  (does not happen)\n     1  nothing             nothing  exists   use M\n     2  nothing             exists   nothing  remove path from index\n     3  nothing             exists   exists,  use M if \"initial checkout\",\n\t\t\t\t     H == M   keep index otherwise\n\t\t\t\t     exists,  fail\n\t\t\t\t     H != M\n\n        clean I==H  I==M\n       ------------------\n     4  yes   N/A   N/A     nothing  nothing  keep index\n     5  no    N/A   N/A     nothing  nothing  keep index\n\n     6  yes   N/A   yes     nothing  exists   keep index\n     7  no    N/A   yes     nothing  exists   keep index\n     8  yes   N/A   no      nothing  exists   fail\n     9  no    N/A   no      nothing  exists   fail\n\n     10 yes   yes   N/A     exists   nothing  remove path from index\n     11 no    yes   N/A     exists   nothing  fail\n     12 yes   no    N/A     exists   nothing  fail\n     13 no    no    N/A     exists   nothing  fail\n\n\tclean (H==M)\n       ------\n     14 yes                 exists   exists   keep index\n     15 no                  exists   exists   keep index\n\n        clean I==H  I==M (H!=M)\n       ------------------\n     16 yes   no    no      exists   exists   fail\n     17 no    no    no      exists   exists   fail\n     18 yes   no    yes     exists   exists   keep index\n     19 no    no    yes     exists   exists   keep index\n     20 yes   yes   no      exists   exists   use M\n     21 no    yes   no      exists   exists   fail\n....\n\nIn all \"keep index\" cases, the index entry stays as in the\noriginal index file.  If the entry is not up to date,\n'git read-tree' keeps the copy in the work tree intact when\noperating under the -u flag.\n\nWhen this form of 'git read-tree' returns successfully, you can\nsee which of the \"local changes\" that you made were carried forward by running\n`git diff-index --cached $M`.  Note that this does not\nnecessarily match what `git diff-index --cached $H` would have\nproduced before such a two tree merge.  This is because of cases\n18 and 19 --- if you already had the changes in $M (e.g. maybe\nyou picked it up via e-mail in a patch form), `git diff-index\n--cached $H` would have told you about the change before this\nmerge, but it would not show in `git diff-index --cached $M`\noutput after the two-tree merge.\n\nCase 3 is slightly tricky and needs explanation.  The result from this\nrule logically should be to remove the path if the user staged the removal\nof the path and then switching to a new branch.  That however will prevent\nthe initial checkout from happening, so the rule is modified to use M (new\ntree) only when the content of the index is empty.  Otherwise the removal\nof the path is kept as long as $H and $M are the same.\n\n3-Way Merge\n~~~~~~~~~~~\nEach \"index\" entry has two bits worth of \"stage\" state. stage 0 is the\nnormal one, and is the only one you'd see in any kind of normal use.\n\nHowever, when you do 'git read-tree' with three trees, the \"stage\"\nstarts out at 1.\n\nThis means that you can do\n\n----------------\n$ git read-tree -m <tree1> <tree2> <tree3>\n----------------\n\nand you will end up with an index with all of the <tree1> entries in\n\"stage1\", all of the <tree2> entries in \"stage2\" and all of the\n<tree3> entries in \"stage3\".  When performing a merge of another\nbranch into the current branch, we use the common ancestor tree\nas <tree1>, the current branch head as <tree2>, and the other\nbranch head as <tree3>.\n\nFurthermore, 'git read-tree' has special-case logic that says: if you see\na file that matches in all respects in the following states, it\n\"collapses\" back to \"stage0\":\n\n   - stage 2 and 3 are the same; take one or the other (it makes no\n     difference - the same work has been done on our branch in\n     stage 2 and their branch in stage 3)\n\n   - stage 1 and stage 2 are the same and stage 3 is different; take\n     stage 3 (our branch in stage 2 did not do anything since the\n     ancestor in stage 1 while their branch in stage 3 worked on\n     it)\n\n   - stage 1 and stage 3 are the same and stage 2 is different take\n     stage 2 (we did something while they did nothing)\n\nThe 'git write-tree' command refuses to write a nonsensical tree, and it\nwill complain about unmerged entries if it sees a single entry that is not\nstage 0.\n\nOK, this all sounds like a collection of totally nonsensical rules,\nbut it's actually exactly what you want in order to do a fast\nmerge. The different stages represent the \"result tree\" (stage 0, aka\n\"merged\"), the original tree (stage 1, aka \"orig\"), and the two trees\nyou are trying to merge (stage 2 and 3 respectively).\n\nThe order of stages 1, 2 and 3 (hence the order of three\n<tree-ish> command-line arguments) are significant when you\nstart a 3-way merge with an index file that is already\npopulated.  Here is an outline of how the algorithm works:\n\n- if a file exists in identical format in all three trees, it will\n  automatically collapse to \"merged\" state by 'git read-tree'.\n\n- a file that has _any_ difference what-so-ever in the three trees\n  will stay as separate entries in the index. It's up to \"porcelain\n  policy\" to determine how to remove the non-0 stages, and insert a\n  merged version.\n\n- the index file saves and restores with all this information, so you\n  can merge things incrementally, but as long as it has entries in\n  stages 1/2/3 (i.e., \"unmerged entries\") you can't write the result. So\n  now the merge algorithm ends up being really simple:\n\n  * you walk the index in order, and ignore all entries of stage 0,\n    since they've already been done.\n\n  * if you find a \"stage1\", but no matching \"stage2\" or \"stage3\", you\n    know it's been removed from both trees (it only existed in the\n    original tree), and you remove that entry.\n\n  * if you find a matching \"stage2\" and \"stage3\" tree, you remove one\n    of them, and turn the other into a \"stage0\" entry. Remove any\n    matching \"stage1\" entry if it exists too.  .. all the normal\n    trivial rules ..\n\nYou would normally use 'git merge-index' with supplied\n'git merge-one-file' to do this last step.  The script updates\nthe files in the working tree as it merges each path and at the\nend of a successful merge.\n\nWhen you start a 3-way merge with an index file that is already\npopulated, it is assumed that it represents the state of the\nfiles in your work tree, and you can even have files with\nchanges unrecorded in the index file.  It is further assumed\nthat this state is \"derived\" from the stage 2 tree.  The 3-way\nmerge refuses to run if it finds an entry in the original index\nfile that does not match stage 2.\n\nThis is done to prevent you from losing your work-in-progress\nchanges, and mixing your random changes in an unrelated merge\ncommit.  To illustrate, suppose you start from what has been\ncommitted last to your repository:\n\n----------------\n$ JC=`git rev-parse --verify \"HEAD^0\"`\n$ git checkout-index -f -u -a $JC\n----------------\n\nYou do random edits, without running 'git update-index'.  And then\nyou notice that the tip of your \"upstream\" tree has advanced\nsince you pulled from him:\n\n----------------\n$ git fetch git://.... linus\n$ LT=`git rev-parse FETCH_HEAD`\n----------------\n\nYour work tree is still based on your HEAD ($JC), but you have\nsome edits since.  Three-way merge makes sure that you have not\nadded or modified index entries since $JC, and if you haven't,\nthen does the right thing.  So with the following sequence:\n\n----------------\n$ git read-tree -m -u `git merge-base $JC $LT` $JC $LT\n$ git merge-index git-merge-one-file -a\n$ echo \"Merge with Linus\" | \\\n  git commit-tree `git write-tree` -p $JC -p $LT\n----------------\n\nwhat you would commit is a pure merge between $JC and $LT without\nyour work-in-progress changes, and your work tree would be\nupdated to the result of the merge.\n\nHowever, if you have local changes in the working tree that\nwould be overwritten by this merge, 'git read-tree' will refuse\nto run to prevent your changes from being lost.\n\nIn other words, there is no need to worry about what exists only\nin the working tree.  When you have local changes in a part of\nthe project that is not involved in the merge, your changes do\nnot interfere with the merge, and are kept intact.  When they\n*do* interfere, the merge does not even start ('git read-tree'\ncomplains loudly and fails without modifying anything).  In such\na case, you can simply continue doing what you were in the\nmiddle of doing, and when your working tree is ready (i.e. you\nhave finished your work-in-progress), attempt the merge again.\n\n\nSPARSE CHECKOUT\n---------------\n\n\"Sparse checkout\" allows populating the working directory sparsely.\nIt uses the skip-worktree bit (see linkgit:git-update-index[1]) to tell\nGit whether a file in the working directory is worth looking at.\n\n'git read-tree' and other merge-based commands ('git merge', 'git\ncheckout'...) can help maintaining the skip-worktree bitmap and working\ndirectory update. `$GIT_DIR/info/sparse-checkout` is used to\ndefine the skip-worktree reference bitmap. When 'git read-tree' needs\nto update the working directory, it resets the skip-worktree bit in the index\nbased on this file, which uses the same syntax as .gitignore files.\nIf an entry matches a pattern in this file, skip-worktree will not be\nset on that entry. Otherwise, skip-worktree will be set.\n\nThen it compares the new skip-worktree value with the previous one. If\nskip-worktree turns from set to unset, it will add the corresponding\nfile back. If it turns from unset to set, that file will be removed.\n\nWhile `$GIT_DIR/info/sparse-checkout` is usually used to specify what\nfiles are in, you can also specify what files are _not_ in, using\nnegate patterns. For example, to remove the file `unwanted`:\n\n----------------\n/*\n!unwanted\n----------------\n\nAnother tricky thing is fully repopulating the working directory when you\nno longer want sparse checkout. You cannot just disable \"sparse\ncheckout\" because skip-worktree bits are still in the index and your working\ndirectory is still sparsely populated. You should re-populate the working\ndirectory with the `$GIT_DIR/info/sparse-checkout` file content as\nfollows:\n\n----------------\n/*\n----------------\n\nThen you can disable sparse checkout. Sparse checkout support in 'git\nread-tree' and similar commands is disabled by default. You need to\nturn `core.sparseCheckout` on in order to have sparse checkout\nsupport.\n\n\nSEE ALSO\n--------\nlinkgit:git-write-tree[1]; linkgit:git-ls-files[1];\nlinkgit:gitignore[5]; linkgit:git-sparse-checkout[1];\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 17098,
            "end_index": 17107,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-rebase.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-rebase - Reapply commits on top of another base tip\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git rebase' [-i | --interactive] [<options>] [--exec <cmd>]\n\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n'git rebase' [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n\t--root [<branch>]\n'git rebase' (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 431,
            "end_index": 456,
            "value": "If <branch> is specified, 'git rebase' will perform an automatic\n`git switch <branch>` before doing anything else.  Otherwise\nit remains on the current branch.\n\nIf <upstream> is not specified, the upstream configured in\nbranch.<name>.remote and branch.<name>.merge options will be used (see\nlinkgit:git-config[1] for details) and the `--fork-point` option is\nassumed.  If you are currently not on any branch or if the current\nbranch does not have a configured upstream, the rebase will abort.\n\nAll changes made by commits in the current branch but that are not\nin <upstream> are saved to a temporary area.  This is the same set\nof commits that would be shown by `git log <upstream>..HEAD`; or by\n`git log 'fork_point'..HEAD`, if `--fork-point` is active (see the\ndescription on `--fork-point` below); or by `git log HEAD`, if the\n`--root` option is specified.\n\nThe current branch is reset to <upstream>, or <newbase> if the\n--onto option was supplied.  This has the exact same effect as\n`git reset --hard <upstream>` (or <newbase>).  ORIG_HEAD is set\nto point at the tip of the branch before the reset.\n\nThe commits that were previously saved into the temporary area are\nthen reapplied to the current branch, one by one, in order. Note that\nany commits in HEAD which introduce the same textual changes as a commit\nin HEAD..<upstream> are omitted (i.e., a patch already accepted upstream\nwith a different commit message or timestamp will be skipped).\n\nIt is possible that a merge failure will prevent this process from being\ncompletely automatic.  You will have to resolve any such merge failure\nand run `git rebase --continue`.  Another option is to bypass the commit\nthat caused the merge failure with `git rebase --skip`.  To check out the\noriginal <branch> and remove the .git/rebase-apply working files, use the\ncommand `git rebase --abort` instead.\n\nAssume the following history exists and the current branch is \"topic\":\n\n------------\n          A---B---C topic\n         /\n    D---E---F---G master\n------------\n\nFrom this point, the result of either of the following commands:\n\n\n    git rebase master\n    git rebase master topic\n\nwould be:\n\n------------\n                  A'--B'--C' topic\n                 /\n    D---E---F---G master\n------------\n\n*NOTE:* The latter form is just a short-hand of `git checkout topic`\nfollowed by `git rebase master`. When rebase exits `topic` will\nremain the checked-out branch.\n\nIf the upstream branch already contains a change you have made (e.g.,\nbecause you mailed a patch which was applied upstream), then that commit\nwill be skipped. For example, running `git rebase master` on the\nfollowing history (in which `A'` and `A` introduce the same set of changes,\nbut have different committer information):\n\n------------\n          A---B---C topic\n         /\n    D---E---A'---F master\n------------\n\nwill result in:\n\n------------\n                   B'---C' topic\n                  /\n    D---E---A'---F master\n------------\n\nHere is how you would transplant a topic branch based on one\nbranch to another, to pretend that you forked the topic branch\nfrom the latter branch, using `rebase --onto`.\n\nFirst let's assume your 'topic' is based on branch 'next'.\nFor example, a feature developed in 'topic' depends on some\nfunctionality which is found in 'next'.\n\n------------\n    o---o---o---o---o  master\n         \\\n          o---o---o---o---o  next\n                           \\\n                            o---o---o  topic\n------------\n\nWe want to make 'topic' forked from branch 'master'; for example,\nbecause the functionality on which 'topic' depends was merged into the\nmore stable 'master' branch. We want our tree to look like this:\n\n------------\n    o---o---o---o---o  master\n        |            \\\n        |             o'--o'--o'  topic\n         \\\n          o---o---o---o---o  next\n------------\n\nWe can get this using the following command:\n\n    git rebase --onto master next topic\n\n\nAnother example of --onto option is to rebase part of a\nbranch.  If we have the following situation:\n\n------------\n                            H---I---J topicB\n                           /\n                  E---F---G  topicA\n                 /\n    A---B---C---D  master\n------------\n\nthen the command\n\n    git rebase --onto master topicA topicB\n\nwould result in:\n\n------------\n                 H'--I'--J'  topicB\n                /\n                | E---F---G  topicA\n                |/\n    A---B---C---D  master\n------------\n\nThis is useful when topicB does not depend on topicA.\n\nA range of commits could also be removed with rebase.  If we have\nthe following situation:\n\n------------\n    E---F---G---H---I---J  topicA\n------------\n\nthen the command\n\n    git rebase --onto topicA~5 topicA~3 topicA\n\nwould result in the removal of commits F and G:\n\n------------\n    E---H'---I'---J'  topicA\n------------\n\nThis is useful if F and G were flawed in some way, or should not be\npart of topicA.  Note that the argument to --onto and the <upstream>\nparameter can be any valid commit-ish.\n\nIn case of conflict, 'git rebase' will stop at the first problematic commit\nand leave conflict markers in the tree.  You can use 'git diff' to locate\nthe markers (<<<<<<) and make edits to resolve the conflict.  For each\nfile you edit, you need to tell Git that the conflict has been resolved,\ntypically this would be done with\n\n\n    git add <filename>\n\n\nAfter resolving the conflict manually and updating the index with the\ndesired resolution, you can continue the rebasing process with\n\n\n    git rebase --continue\n\n\nAlternatively, you can undo the 'git rebase' with\n\n\n    git rebase --abort\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 6052,
            "end_index": 6081,
            "value": "\ninclude::config/rebase.txt[]\ninclude::config/sequencer.txt[]\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 6143,
            "end_index": 6160,
            "value": "\n--onto <newbase>::\n\tStarting point at which to create the new commits. If the\n\t--onto option is not specified, the starting point is\n\t<upstream>.  May be any valid commit, and not just an\n\texisting branch name.\n+\nAs a special case, you may use \"A\\...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B, in which case it defaults to HEAD.\n\n--keep-base::\n\tSet the starting point at which to create the new commits to the\n\tmerge base of <upstream> <branch>. Running\n\t'git rebase --keep-base <upstream> <branch>' is equivalent to\n\trunning 'git rebase --onto <upstream>... <upstream>'.\n+\nThis option is useful in the case where one is developing a feature on\ntop of an upstream branch. While the feature is being worked on, the\nupstream branch may advance and it may not be the best idea to keep\nrebasing on top of the upstream but to keep the base commit as-is.\n+\nAlthough both this option and --fork-point find the merge base between\n<upstream> and <branch>, this option uses the merge base as the _starting\npoint_ on which new commits will be created, whereas --fork-point uses\nthe merge base to determine the _set of commits_ which will be rebased.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n<upstream>::\n\tUpstream branch to compare against.  May be any valid commit,\n\tnot just an existing branch name. Defaults to the configured\n\tupstream for the current branch.\n\n<branch>::\n\tWorking branch; defaults to HEAD.\n\n--continue::\n\tRestart the rebasing process after having resolved a merge conflict.\n\n--abort::\n\tAbort the rebase operation and reset HEAD to the original\n\tbranch. If <branch> was provided when the rebase operation was\n\tstarted, then HEAD will be reset to <branch>. Otherwise HEAD\n\twill be reset to where it was when the rebase operation was\n\tstarted.\n\n--quit::\n\tAbort the rebase operation but HEAD is not reset back to the\n\toriginal branch. The index and working tree are also left\n\tunchanged as a result. If a temporary stash entry was created\n\tusing --autostash, it will be saved to the stash list.\n\n--apply::\n\tUse applying strategies to rebase (calling `git-am`\n\tinternally).  This option may become a no-op in the future\n\tonce the merge backend handles everything the apply one does.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--empty={drop,keep,ask}::\n\tHow to handle commits that are not empty to start and are not\n\tclean cherry-picks of any upstream commit, but which become\n\tempty after rebasing (because they contain a subset of already\n\tupstream changes).  With drop (the default), commits that\n\tbecome empty are dropped.  With keep, such commits are kept.\n\tWith ask (implied by --interactive), the rebase will halt when\n\tan empty commit is applied allowing you to choose whether to\n\tdrop it, edit files more, or just commit the empty changes.\n\tOther options, like --exec, will use the default of drop unless\n\t-i/--interactive is explicitly specified.\n+\nNote that commits which start empty are kept (unless --no-keep-empty\nis specified), and commits which are clean cherry-picks (as determined\nby `git log --cherry-mark ...`) are detected and dropped as a\npreliminary step (unless --reapply-cherry-picks is passed).\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--no-keep-empty::\n--keep-empty::\n\tDo not keep commits that start empty before the rebase\n\t(i.e. that do not change anything from its parent) in the\n\tresult.  The default is to keep commits which start empty,\n\tsince creating such commits requires passing the --allow-empty\n\toverride flag to `git commit`, signifying that a user is very\n\tintentionally creating such a commit and thus wants to keep\n\tit.\n+\nUsage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don't want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed.\n+\nFor commits which do not start empty but become empty after rebasing,\nsee the --empty flag.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--reapply-cherry-picks::\n--no-reapply-cherry-picks::\n\tReapply all clean cherry-picks of any upstream commit instead\n\tof preemptively dropping them. (If these commits then become\n\tempty after rebasing, because they contain a subset of already\n\tupstream changes, the behavior towards them is controlled by\n\tthe `--empty` flag.)\n+\nBy default (or if `--no-reapply-cherry-picks` is given), these commits\nwill be automatically dropped.  Because this necessitates reading all\nupstream commits, this can be expensive in repos with a large number\nof upstream commits that need to be read.\n+\n`--reapply-cherry-picks` allows rebase to forgo reading all upstream\ncommits, potentially improving performance.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--allow-empty-message::\n\tNo-op.  Rebasing commits with an empty message used to fail\n\tand this option would override that behavior, allowing commits\n\twith empty messages to be rebased.  Now commits with an empty\n\tmessage do not cause rebasing to halt.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--skip::\n\tRestart the rebasing process by skipping the current patch.\n\n--edit-todo::\n\tEdit the todo list during an interactive rebase.\n\n--show-current-patch::\n\tShow the current patch in an interactive rebase or when rebase\n\tis stopped because of conflicts. This is the equivalent of\n\t`git show REBASE_HEAD`.\n\n-m::\n--merge::\n\tUse merging strategies to rebase.  When the recursive (default) merge\n\tstrategy is used, this allows rebase to be aware of renames on the\n\tupstream side.  This is the default.\n+\nNote that a rebase merge works by replaying each commit from the working\nbranch on top of the <upstream> branch.  Because of this, when a merge\nconflict happens, the side reported as 'ours' is the so-far rebased\nseries, starting with <upstream>, and 'theirs' is the working branch.  In\nother words, the sides are swapped.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n-s <strategy>::\n--strategy=<strategy>::\n\tUse the given merge strategy.\n\tIf there is no `-s` option 'git merge-recursive' is used\n\tinstead.  This implies --merge.\n+\nBecause 'git rebase' replays each commit from the working branch\non top of the <upstream> branch using the given strategy, using\nthe 'ours' strategy simply empties all patches from the <branch>,\nwhich makes little sense.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n-X <strategy-option>::\n--strategy-option=<strategy-option>::\n\tPass the <strategy-option> through to the merge strategy.\n\tThis implies `--merge` and, if no strategy has been\n\tspecified, `-s recursive`.  Note the reversal of 'ours' and\n\t'theirs' as noted above for the `-m` option.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--rerere-autoupdate::\n--no-rerere-autoupdate::\n\tAllow the rerere mechanism to update the index with the\n\tresult of auto-conflict resolution if possible.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand both `commit.gpgSign` configuration variable, and\n\tearlier `--gpg-sign`.\n\n-q::\n--quiet::\n\tBe quiet. Implies --no-stat.\n\n-v::\n--verbose::\n\tBe verbose. Implies --stat.\n\n--stat::\n\tShow a diffstat of what changed upstream since the last rebase. The\n\tdiffstat is also controlled by the configuration option rebase.stat.\n\n-n::\n--no-stat::\n\tDo not show a diffstat as part of the rebase process.\n\n--no-verify::\n\tThis option bypasses the pre-rebase hook.  See also linkgit:githooks[5].\n\n--verify::\n\tAllows the pre-rebase hook to run, which is the default.  This option can\n\tbe used to override --no-verify.  See also linkgit:githooks[5].\n\n-C<n>::\n\tEnsure at least <n> lines of surrounding context match before\n\tand after each change.  When fewer lines of surrounding\n\tcontext exist they all must match.  By default no context is\n\tever ignored.  Implies --apply.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--no-ff::\n--force-rebase::\n-f::\n\tIndividually replay all rebased commits instead of fast-forwarding\n\tover the unchanged ones.  This ensures that the entire history of\n\tthe rebased branch is composed of new commits.\n+\nYou may find this helpful after reverting a topic branch merge, as this option\nrecreates the topic branch with fresh commits so it can be remerged\nsuccessfully without needing to \"revert the reversion\" (see the\nlink:howto/revert-a-faulty-merge.html[revert-a-faulty-merge How-To] for\ndetails).\n\n--fork-point::\n--no-fork-point::\n\tUse reflog to find a better common ancestor between <upstream>\n\tand <branch> when calculating which commits have been\n\tintroduced by <branch>.\n+\nWhen --fork-point is active, 'fork_point' will be used instead of\n<upstream> to calculate the set of commits to rebase, where\n'fork_point' is the result of `git merge-base --fork-point <upstream>\n<branch>` command (see linkgit:git-merge-base[1]).  If 'fork_point'\nends up being empty, the <upstream> will be used as a fallback.\n+\nIf <upstream> is given on the command line, then the default is\n`--no-fork-point`, otherwise the default is `--fork-point`.\n+\nIf your branch was based on <upstream> but <upstream> was rewound and\nyour branch contains commits which were dropped, this option can be used\nwith `--keep-base` in order to drop those commits from your branch.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--ignore-whitespace::\n\tIgnore whitespace differences when trying to reconcile\ndifferences. Currently, each backend implements an approximation of\nthis behavior:\n+\napply backend: When applying a patch, ignore changes in whitespace in\ncontext lines. Unfortunately, this means that if the \"old\" lines being\nreplaced by the patch differ only in whitespace from the existing\nfile, you will get a merge conflict instead of a successful patch\napplication.\n+\nmerge backend: Treat lines with only whitespace changes as unchanged\nwhen merging. Unfortunately, this means that any patch hunks that were\nintended to modify whitespace and nothing else will be dropped, even\nif the other side had no changes that conflicted.\n\n--whitespace=<option>::\n\tThis flag is passed to the 'git apply' program\n\t(see linkgit:git-apply[1]) that applies the patch.\n\tImplies --apply.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--committer-date-is-author-date::\n\tInstead of using the current time as the committer date, use\n\tthe author date of the commit being rebased as the committer\n\tdate. This option implies `--force-rebase`.\n\n--ignore-date::\n--reset-author-date::\n\tInstead of using the author date of the original commit, use\n\tthe current time as the\tauthor date of the rebased commit.  This\n\toption implies `--force-rebase`.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--signoff::\n\tAdd a `Signed-off-by` trailer to all the rebased commits. Note\n\tthat if `--interactive` is given then only commits marked to be\n\tpicked, edited or reworded will have the trailer added.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n-i::\n--interactive::\n\tMake a list of the commits which are about to be rebased.  Let the\n\tuser edit that list before rebasing.  This mode can also be used to\n\tsplit commits (see SPLITTING COMMITS below).\n+\nThe commit list format can be changed by setting the configuration option\nrebase.instructionFormat.  A customized instruction format will automatically\nhave the long commit hash prepended to the format.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n-r::\n--rebase-merges[=(rebase-cousins|no-rebase-cousins)]::\n\tBy default, a rebase will simply drop merge commits from the todo\n\tlist, and put the rebased commits into a single, linear branch.\n\tWith `--rebase-merges`, the rebase will instead try to preserve\n\tthe branching structure within the commits that are to be rebased,\n\tby recreating the merge commits. Any resolved merge conflicts or\n\tmanual amendments in these merge commits will have to be\n\tresolved/re-applied manually.\n+\nBy default, or when `no-rebase-cousins` was specified, commits which do not\nhave `<upstream>` as direct ancestor will keep their original branch point,\ni.e. commits that would be excluded by linkgit:git-log[1]'s\n`--ancestry-path` option will keep their original ancestry by default. If\nthe `rebase-cousins` mode is turned on, such commits are instead rebased\nonto `<upstream>` (or `<onto>`, if specified).\n+\nThe `--rebase-merges` mode is similar in spirit to the deprecated\n`--preserve-merges` but works with interactive rebases,\nwhere commits can be reordered, inserted and dropped at will.\n+\nIt is currently only possible to recreate the merge commits using the\n`recursive` merge strategy; Different merge strategies can be used only via\nexplicit `exec git merge -s <strategy> [...]` commands.\n+\nSee also REBASING MERGES and INCOMPATIBLE OPTIONS below.\n\n-p::\n--preserve-merges::\n\t[DEPRECATED: use `--rebase-merges` instead] Recreate merge commits\n\tinstead of flattening the history by replaying commits a merge commit\n\tintroduces. Merge conflict resolutions or manual amendments to merge\n\tcommits are not preserved.\n+\nThis uses the `--interactive` machinery internally, but combining it\nwith the `--interactive` option explicitly is generally not a good\nidea unless you know what you are doing (see BUGS below).\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n-x <cmd>::\n--exec <cmd>::\n\tAppend \"exec <cmd>\" after each line creating a commit in the\n\tfinal history. <cmd> will be interpreted as one or more shell\n\tcommands. Any command that fails will interrupt the rebase,\n\twith exit code 1.\n+\nYou may execute several commands by either using one instance of `--exec`\nwith several commands:\n+\n\tgit rebase -i --exec \"cmd1 && cmd2 && ...\"\n+\nor by giving more than one `--exec`:\n+\n\tgit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n+\nIf `--autosquash` is used, \"exec\" lines will not be appended for\nthe intermediate commits, and will only appear at the end of each\nsquash/fixup series.\n+\nThis uses the `--interactive` machinery internally, but it can be run\nwithout an explicit `--interactive`.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--root::\n\tRebase all commits reachable from <branch>, instead of\n\tlimiting them with an <upstream>.  This allows you to rebase\n\tthe root commit(s) on a branch.  When used with --onto, it\n\twill skip changes already contained in <newbase> (instead of\n\t<upstream>) whereas without --onto it will operate on every change.\n\tWhen used together with both --onto and --preserve-merges,\n\t'all' root commits will be rewritten to have <newbase> as parent\n\tinstead.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--autosquash::\n--no-autosquash::\n\tWhen the commit log message begins with \"squash! ...\" (or\n\t\"fixup! ...\"), and there is already a commit in the todo list that\n\tmatches the same `...`, automatically modify the todo list of rebase\n\t-i so that the commit marked for squashing comes right after the\n\tcommit to be modified, and change the action of the moved commit\n\tfrom `pick` to `squash` (or `fixup`).  A commit matches the `...` if\n\tthe commit subject matches, or if the `...` refers to the commit's\n\thash. As a fall-back, partial matches of the commit subject work,\n\ttoo.  The recommended way to create fixup/squash commits is by using\n\tthe `--fixup`/`--squash` options of linkgit:git-commit[1].\n+\nIf the `--autosquash` option is enabled by default using the\nconfiguration variable `rebase.autoSquash`, this option can be\nused to override and disable this setting.\n+\nSee also INCOMPATIBLE OPTIONS below.\n\n--autostash::\n--no-autostash::\n\tAutomatically create a temporary stash entry before the operation\n\tbegins, and apply it after the operation ends.  This means\n\tthat you can run rebase on a dirty worktree.  However, use\n\twith care: the final stash application after a successful\n\trebase might result in non-trivial conflicts.\n\n--reschedule-failed-exec::\n--no-reschedule-failed-exec::\n\tAutomatically reschedule `exec` commands that failed. This only makes\n\tsense in interactive mode (or when an `--exec` option was provided).\n\nINCOMPATIBLE OPTIONS\n--------------------\n\nThe following options:\n\n * --apply\n * --whitespace\n * -C\n\nare incompatible with the following options:\n\n * --merge\n * --strategy\n * --strategy-option\n * --allow-empty-message\n * --[no-]autosquash\n * --rebase-merges\n * --preserve-merges\n * --interactive\n * --exec\n * --no-keep-empty\n * --empty=\n * --reapply-cherry-picks\n * --edit-todo\n * --root when used in combination with --onto\n\nIn addition, the following pairs of options are incompatible:\n\n * --preserve-merges and --interactive\n * --preserve-merges and --signoff\n * --preserve-merges and --rebase-merges\n * --preserve-merges and --empty=\n * --preserve-merges and --ignore-whitespace\n * --preserve-merges and --committer-date-is-author-date\n * --preserve-merges and --ignore-date\n * --keep-base and --onto\n * --keep-base and --root\n * --fork-point and --root\n\nBEHAVIORAL DIFFERENCES\n-----------------------\n\ngit rebase has two primary backends: apply and merge.  (The apply\nbackend used to be known as the 'am' backend, but the name led to\nconfusion as it looks like a verb instead of a noun.  Also, the merge\nbackend used to be known as the interactive backend, but it is now\nused for non-interactive cases as well.  Both were renamed based on\nlower-level functionality that underpinned each.) There are some\nsubtle differences in how these two backends behave:\n\nEmpty commits\n~~~~~~~~~~~~~\n\nThe apply backend unfortunately drops intentionally empty commits, i.e.\ncommits that started empty, though these are rare in practice.  It\nalso drops commits that become empty and has no option for controlling\nthis behavior.\n\nThe merge backend keeps intentionally empty commits by default (though\nwith -i they are marked as empty in the todo list editor, or they can\nbe dropped automatically with --no-keep-empty).\n\nSimilar to the apply backend, by default the merge backend drops\ncommits that become empty unless -i/--interactive is specified (in\nwhich case it stops and asks the user what to do).  The merge backend\nalso has an --empty={drop,keep,ask} option for changing the behavior\nof handling commits that become empty.\n\nDirectory rename detection\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDue to the lack of accurate tree information (arising from\nconstructing fake ancestors with the limited information available in\npatches), directory rename detection is disabled in the apply backend.\nDisabled directory rename detection means that if one side of history\nrenames a directory and the other adds new files to the old directory,\nthen the new files will be left behind in the old directory without\nany warning at the time of rebasing that you may want to move these\nfiles into the new directory.\n\nDirectory rename detection works with the merge backend to provide you\nwarnings in such cases.\n\nContext\n~~~~~~~\n\nThe apply backend works by creating a sequence of patches (by calling\n`format-patch` internally), and then applying the patches in sequence\n(calling `am` internally).  Patches are composed of multiple hunks,\neach with line numbers, a context region, and the actual changes.  The\nline numbers have to be taken with some fuzz, since the other side\nwill likely have inserted or deleted lines earlier in the file.  The\ncontext region is meant to help find how to adjust the line numbers in\norder to apply the changes to the right lines.  However, if multiple\nareas of the code have the same surrounding lines of context, the\nwrong one can be picked.  There are real-world cases where this has\ncaused commits to be reapplied incorrectly with no conflicts reported.\nSetting diff.context to a larger value may prevent such types of\nproblems, but increases the chance of spurious conflicts (since it\nwill require more lines of matching context to apply).\n\nThe merge backend works with a full copy of each relevant file,\ninsulating it from these types of problems.\n\nLabelling of conflicts markers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen there are content conflicts, the merge machinery tries to\nannotate each side's conflict markers with the commits where the\ncontent came from.  Since the apply backend drops the original\ninformation about the rebased commits and their parents (and instead\ngenerates new fake commits based off limited information in the\ngenerated patches), those commits cannot be identified; instead it has\nto fall back to a commit summary.  Also, when merge.conflictStyle is\nset to diff3, the apply backend will use \"constructed merge base\" to\nlabel the content from the merge base, and thus provide no information\nabout the merge base commit whatsoever.\n\nThe merge backend works with the full commits on both sides of history\nand thus has no such limitations.\n\nHooks\n~~~~~\n\nThe apply backend has not traditionally called the post-commit hook,\nwhile the merge backend has.  Both have called the post-checkout hook,\nthough the merge backend has squelched its output.  Further, both\nbackends only call the post-checkout hook with the starting point\ncommit of the rebase, not the intermediate commits nor the final\ncommit.  In each case, the calling of these hooks was by accident of\nimplementation rather than by design (both backends were originally\nimplemented as shell scripts and happened to invoke other commands\nlike 'git checkout' or 'git commit' that would call the hooks).  Both\nbackends should have the same behavior, though it is not entirely\nclear which, if any, is correct.  We will likely make rebase stop\ncalling either of these hooks in the future.\n\nInterruptability\n~~~~~~~~~~~~~~~~\n\nThe apply backend has safety problems with an ill-timed interrupt; if\nthe user presses Ctrl-C at the wrong time to try to abort the rebase,\nthe rebase can enter a state where it cannot be aborted with a\nsubsequent `git rebase --abort`.  The merge backend does not appear to\nsuffer from the same shortcoming.  (See\nhttps://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/ for\ndetails.)\n\nCommit Rewording\n~~~~~~~~~~~~~~~~\n\nWhen a conflict occurs while rebasing, rebase stops and asks the user\nto resolve.  Since the user may need to make notable changes while\nresolving conflicts, after conflicts are resolved and the user has run\n`git rebase --continue`, the rebase should open an editor and ask the\nuser to update the commit message.  The merge backend does this, while\nthe apply backend blindly applies the original commit message.\n\nMiscellaneous differences\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are a few more behavioral differences that most folks would\nprobably consider inconsequential but which are mentioned for\ncompleteness:\n\n* Reflog: The two backends will use different wording when describing\n  the changes made in the reflog, though both will make use of the\n  word \"rebase\".\n\n* Progress, informational, and error messages: The two backends\n  provide slightly different progress and informational messages.\n  Also, the apply backend writes error messages (such as \"Your files\n  would be overwritten...\") to stdout, while the merge backend writes\n  them to stderr.\n\n* State directories: The two backends keep their state in different\n  directories under .git/\n\ninclude::merge-strategies.txt[]\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 29278,
            "end_index": 29291,
            "value": "\nYou should understand the implications of using 'git rebase' on a\nrepository that you share.  See also RECOVERING FROM UPSTREAM REBASE\nbelow.\n\nWhen the git-rebase command is run, it will first execute a \"pre-rebase\"\nhook if one exists.  You can use this hook to do sanity checks and\nreject the rebase if it isn't appropriate.  Please see the template\npre-rebase hook script for an example.\n\nUpon completion, <branch> will be the current branch.\n\nINTERACTIVE MODE\n----------------\n\nRebasing interactively means that you have a chance to edit the commits\nwhich are rebased.  You can reorder the commits, and you can\nremove them (weeding out bad or otherwise unwanted patches).\n\nThe interactive mode is meant for this type of workflow:\n\n1. have a wonderful idea\n2. hack on the code\n3. prepare a series for submission\n4. submit\n\nwhere point 2. consists of several instances of\n\na) regular use\n\n 1. finish something worthy of a commit\n 2. commit\n\nb) independent fixup\n\n 1. realize that something does not work\n 2. fix that\n 3. commit it\n\nSometimes the thing fixed in b.2. cannot be amended to the not-quite\nperfect commit it fixes, because that commit is buried deeply in a\npatch series.  That is exactly what interactive rebase is for: use it\nafter plenty of \"a\"s and \"b\"s, by rearranging and editing\ncommits, and squashing multiple commits into one.\n\nStart it with the last commit you want to retain as-is:\n\n\tgit rebase -i <after-this-commit>\n\nAn editor will be fired up with all the commits in your current branch\n(ignoring merge commits), which come after the given commit.  You can\nreorder the commits in this list to your heart's content, and you can\nremove them.  The list looks more or less like this:\n\n-------------------------------------------\npick deadbee The oneline of this commit\npick fa1afe1 The oneline of the next commit\n...\n-------------------------------------------\n\nThe oneline descriptions are purely for your pleasure; 'git rebase' will\nnot look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in this\nexample), so do not delete or edit the names.\n\nBy replacing the command \"pick\" with the command \"edit\", you can tell\n'git rebase' to stop after applying that commit, so that you can edit\nthe files and/or the commit message, amend the commit, and continue\nrebasing.\n\nTo interrupt the rebase (just like an \"edit\" command would do, but without\ncherry-picking any commit first), use the \"break\" command.\n\nIf you just want to edit the commit message for a commit, replace the\ncommand \"pick\" with the command \"reword\".\n\nTo drop a commit, replace the command \"pick\" with \"drop\", or just\ndelete the matching line.\n\nIf you want to fold two or more commits into one, replace the command\n\"pick\" for the second and subsequent commits with \"squash\" or \"fixup\".\nIf the commits had different authors, the folded commit will be\nattributed to the author of the first commit.  The suggested commit\nmessage for the folded commit is the concatenation of the commit\nmessages of the first commit and of those with the \"squash\" command,\nbut omits the commit messages of commits with the \"fixup\" command.\n\n'git rebase' will stop when \"pick\" has been replaced with \"edit\" or\nwhen a command fails due to merge errors. When you are done editing\nand/or resolving conflicts you can continue with `git rebase --continue`.\n\nFor example, if you want to reorder the last 5 commits, such that what\nwas HEAD~4 becomes the new HEAD. To achieve that, you would call\n'git rebase' like this:\n\n----------------------\n$ git rebase -i HEAD~5\n----------------------\n\nAnd move the first patch to the end of the list.\n\nYou might want to recreate merge commits, e.g. if you have a history\nlike this:\n\n------------------\n           X\n            \\\n         A---M---B\n        /\n---o---O---P---Q\n------------------\n\nSuppose you want to rebase the side branch starting at \"A\" to \"Q\". Make\nsure that the current HEAD is \"B\", and call\n\n-----------------------------\n$ git rebase -i -r --onto Q O\n-----------------------------\n\nReordering and editing commits usually creates untested intermediate\nsteps.  You may want to check that your history editing did not break\nanything by running a test, or at least recompiling at intermediate\npoints in history by using the \"exec\" command (shortcut \"x\").  You may\ndo so by creating a todo list like this one:\n\n-------------------------------------------\npick deadbee Implement feature XXX\nfixup f1a5c00 Fix to feature XXX\nexec make\npick c0ffeee The oneline of the next commit\nedit deadbab The oneline of the commit after\nexec cd subdir; make test\n...\n-------------------------------------------\n\nThe interactive rebase will stop when a command fails (i.e. exits with\nnon-0 status) to give you an opportunity to fix the problem. You can\ncontinue with `git rebase --continue`.\n\nThe \"exec\" command launches the command in a shell (the one specified\nin `$SHELL`, or the default shell if `$SHELL` is not set), so you can\nuse shell features (like \"cd\", \">\", \";\" ...). The command is run from\nthe root of the working tree.\n\n----------------------------------\n$ git rebase -i --exec \"make test\"\n----------------------------------\n\nThis command lets you check that intermediate commits are compilable.\nThe todo list becomes like that:\n\n--------------------\npick 5928aea one\nexec make test\npick 04d0fda two\nexec make test\npick ba46169 three\nexec make test\npick f4593f9 four\nexec make test\n--------------------\n\nSPLITTING COMMITS\n-----------------\n\nIn interactive mode, you can mark commits with the action \"edit\".  However,\nthis does not necessarily mean that 'git rebase' expects the result of this\nedit to be exactly one commit.  Indeed, you can undo the commit, or you can\nadd other commits.  This can be used to split a commit into two:\n\n- Start an interactive rebase with `git rebase -i <commit>^`, where\n  <commit> is the commit you want to split.  In fact, any commit range\n  will do, as long as it contains that commit.\n\n- Mark the commit you want to split with the action \"edit\".\n\n- When it comes to editing that commit, execute `git reset HEAD^`.  The\n  effect is that the HEAD is rewound by one, and the index follows suit.\n  However, the working tree stays the same.\n\n- Now add the changes to the index that you want to have in the first\n  commit.  You can use `git add` (possibly interactively) or\n  'git gui' (or both) to do that.\n\n- Commit the now-current index with whatever commit message is appropriate\n  now.\n\n- Repeat the last two steps until your working tree is clean.\n\n- Continue the rebase with `git rebase --continue`.\n\nIf you are not absolutely sure that the intermediate revisions are\nconsistent (they compile, pass the testsuite, etc.) you should use\n'git stash' to stash away the not-yet-committed changes\nafter each commit, test, and amend the commit if fixes are necessary.\n\n\nRECOVERING FROM UPSTREAM REBASE\n-------------------------------\n\nRebasing (or any other form of rewriting) a branch that others have\nbased work on is a bad idea: anyone downstream of it is forced to\nmanually fix their history.  This section explains how to do the fix\nfrom the downstream's point of view.  The real fix, however, would be\nto avoid rebasing the upstream in the first place.\n\nTo illustrate, suppose you are in a situation where someone develops a\n'subsystem' branch, and you are working on a 'topic' that is dependent\non this 'subsystem'.  You might end up with a history like the\nfollowing:\n\n------------\n    o---o---o---o---o---o---o---o  master\n\t \\\n\t  o---o---o---o---o  subsystem\n\t\t\t   \\\n\t\t\t    *---*---*  topic\n------------\n\nIf 'subsystem' is rebased against 'master', the following happens:\n\n------------\n    o---o---o---o---o---o---o---o  master\n\t \\\t\t\t \\\n\t  o---o---o---o---o\t  o'--o'--o'--o'--o'  subsystem\n\t\t\t   \\\n\t\t\t    *---*---*  topic\n------------\n\nIf you now continue development as usual, and eventually merge 'topic'\nto 'subsystem', the commits from 'subsystem' will remain duplicated forever:\n\n------------\n    o---o---o---o---o---o---o---o  master\n\t \\\t\t\t \\\n\t  o---o---o---o---o\t  o'--o'--o'--o'--o'--M\t subsystem\n\t\t\t   \\\t\t\t     /\n\t\t\t    *---*---*-..........-*--*  topic\n------------\n\nSuch duplicates are generally frowned upon because they clutter up\nhistory, making it harder to follow.  To clean things up, you need to\ntransplant the commits on 'topic' to the new 'subsystem' tip, i.e.,\nrebase 'topic'.  This becomes a ripple effect: anyone downstream from\n'topic' is forced to rebase too, and so on!\n\nThere are two kinds of fixes, discussed in the following subsections:\n\nEasy case: The changes are literally the same.::\n\n\tThis happens if the 'subsystem' rebase was a simple rebase and\n\thad no conflicts.\n\nHard case: The changes are not the same.::\n\n\tThis happens if the 'subsystem' rebase had conflicts, or used\n\t`--interactive` to omit, edit, squash, or fixup commits; or\n\tif the upstream used one of `commit --amend`, `reset`, or\n\ta full history rewriting command like\n\thttps://github.com/newren/git-filter-repo[`filter-repo`].\n\n\nThe easy case\n~~~~~~~~~~~~~\n\nOnly works if the changes (patch IDs based on the diff contents) on\n'subsystem' are literally the same before and after the rebase\n'subsystem' did.\n\nIn that case, the fix is easy because 'git rebase' knows to skip\nchanges that are already present in the new upstream (unless\n`--reapply-cherry-picks` is given). So if you say\n(assuming you're on 'topic')\n------------\n    $ git rebase subsystem\n------------\nyou will end up with the fixed history\n------------\n    o---o---o---o---o---o---o---o  master\n\t\t\t\t \\\n\t\t\t\t  o'--o'--o'--o'--o'  subsystem\n\t\t\t\t\t\t   \\\n\t\t\t\t\t\t    *---*---*  topic\n------------\n\n\nThe hard case\n~~~~~~~~~~~~~\n\nThings get more complicated if the 'subsystem' changes do not exactly\ncorrespond to the ones before the rebase.\n\nNOTE: While an \"easy case recovery\" sometimes appears to be successful\n      even in the hard case, it may have unintended consequences.  For\n      example, a commit that was removed via `git rebase\n      --interactive` will be **resurrected**!\n\nThe idea is to manually tell 'git rebase' \"where the old 'subsystem'\nended and your 'topic' began\", that is, what the old merge base\nbetween them was.  You will have to find a way to name the last commit\nof the old 'subsystem', for example:\n\n* With the 'subsystem' reflog: after 'git fetch', the old tip of\n  'subsystem' is at `subsystem@{1}`.  Subsequent fetches will\n  increase the number.  (See linkgit:git-reflog[1].)\n\n* Relative to the tip of 'topic': knowing that your 'topic' has three\n  commits, the old tip of 'subsystem' must be `topic~3`.\n\nYou can then transplant the old `subsystem..topic` to the new tip by\nsaying (for the reflog case, and assuming you are on 'topic' already):\n------------\n    $ git rebase --onto subsystem subsystem@{1}\n------------\n\nThe ripple effect of a \"hard case\" recovery is especially bad:\n'everyone' downstream from 'topic' will now have to perform a \"hard\ncase\" recovery too!\n\nREBASING MERGES\n---------------\n\nThe interactive rebase command was originally designed to handle\nindividual patch series. As such, it makes sense to exclude merge\ncommits from the todo list, as the developer may have merged the\nthen-current `master` while working on the branch, only to rebase\nall the commits onto `master` eventually (skipping the merge\ncommits).\n\nHowever, there are legitimate reasons why a developer may want to\nrecreate merge commits: to keep the branch structure (or \"commit\ntopology\") when working on multiple, inter-related branches.\n\nIn the following example, the developer works on a topic branch that\nrefactors the way buttons are defined, and on another topic branch\nthat uses that refactoring to implement a \"Report a bug\" button. The\noutput of `git log --graph --format=%s -5` may look like this:\n\n------------\n*   Merge branch 'report-a-bug'\n|\\\n| * Add the feedback button\n* | Merge branch 'refactor-button'\n|\\ \\\n| |/\n| * Use the Button class for all buttons\n| * Extract a generic Button class from the DownloadButton one\n------------\n\nThe developer might want to rebase those commits to a newer `master`\nwhile keeping the branch topology, for example when the first topic\nbranch is expected to be integrated into `master` much earlier than the\nsecond one, say, to resolve merge conflicts with changes to the\nDownloadButton class that made it into `master`.\n\nThis rebase can be performed using the `--rebase-merges` option.\nIt will generate a todo list looking like this:\n\n------------\nlabel onto\n\n# Branch: refactor-button\nreset onto\npick 123456 Extract a generic Button class from the DownloadButton one\npick 654321 Use the Button class for all buttons\nlabel refactor-button\n\n# Branch: report-a-bug\nreset refactor-button # Use the Button class for all buttons\npick abcdef Add the feedback button\nlabel report-a-bug\n\nreset onto\nmerge -C a1b2c3 refactor-button # Merge 'refactor-button'\nmerge -C 6f5e4d report-a-bug # Merge 'report-a-bug'\n------------\n\nIn contrast to a regular interactive rebase, there are `label`, `reset`\nand `merge` commands in addition to `pick` ones.\n\nThe `label` command associates a label with the current HEAD when that\ncommand is executed. These labels are created as worktree-local refs\n(`refs/rewritten/<label>`) that will be deleted when the rebase\nfinishes. That way, rebase operations in multiple worktrees linked to\nthe same repository do not interfere with one another. If the `label`\ncommand fails, it is rescheduled immediately, with a helpful message how\nto proceed.\n\nThe `reset` command resets the HEAD, index and worktree to the specified\nrevision. It is similar to an `exec git reset --hard <label>`, but\nrefuses to overwrite untracked files. If the `reset` command fails, it is\nrescheduled immediately, with a helpful message how to edit the todo list\n(this typically happens when a `reset` command was inserted into the todo\nlist manually and contains a typo).\n\nThe `merge` command will merge the specified revision(s) into whatever\nis HEAD at that time. With `-C <original-commit>`, the commit message of\nthe specified merge commit will be used. When the `-C` is changed to\na lower-case `-c`, the message will be opened in an editor after a\nsuccessful merge so that the user can edit the message.\n\nIf a `merge` command fails for any reason other than merge conflicts (i.e.\nwhen the merge operation did not even start), it is rescheduled immediately.\n\nAt this time, the `merge` command will *always* use the `recursive`\nmerge strategy for regular merges, and `octopus` for octopus merges,\nwith no way to choose a different one. To work around\nthis, an `exec` command can be used to call `git merge` explicitly,\nusing the fact that the labels are worktree-local refs (the ref\n`refs/rewritten/onto` would correspond to the label `onto`, for example).\n\nNote: the first command (`label onto`) labels the revision onto which\nthe commits are rebased; The name `onto` is just a convention, as a nod\nto the `--onto` option.\n\nIt is also possible to introduce completely new merge commits from scratch\nby adding a command of the form `merge <merge-head>`. This form will\ngenerate a tentative commit message and always open an editor to let the\nuser edit it. This can be useful e.g. when a topic branch turns out to\naddress more than a single concern and wants to be split into two or\neven more topic branches. Consider this todo list:\n\n------------\npick 192837 Switch from GNU Makefiles to CMake\npick 5a6c7e Document the switch to CMake\npick 918273 Fix detection of OpenSSL in CMake\npick afbecd http: add support for TLS v1.3\npick fdbaec Fix detection of cURL in CMake on Windows\n------------\n\nThe one commit in this list that is not related to CMake may very well\nhave been motivated by working on fixing all those bugs introduced by\nswitching to CMake, but it addresses a different concern. To split this\nbranch into two topic branches, the todo list could be edited like this:\n\n------------\nlabel onto\n\npick afbecd http: add support for TLS v1.3\nlabel tlsv1.3\n\nreset onto\npick 192837 Switch from GNU Makefiles to CMake\npick 918273 Fix detection of OpenSSL in CMake\npick fdbaec Fix detection of cURL in CMake on Windows\npick 5a6c7e Document the switch to CMake\nlabel cmake\n\nreset onto\nmerge tlsv1.3\nmerge cmake\n------------\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 45497,
            "end_index": 45508,
            "value": "The todo list presented by the deprecated `--preserve-merges --interactive`\ndoes not represent the topology of the revision graph (use `--rebase-merges`\ninstead).  Editing commits and rewording their commit messages should work\nfine, but attempts to reorder commits tend to produce counterintuitive results.\nUse `--rebase-merges` in such scenarios instead.\n\nFor example, an attempt to rearrange\n------------\n1 --- 2 --- 3 --- 4 --- 5\n------------"
        },
        "to": {
            "name": "to",
            "start_index": 45954,
            "end_index": 45971,
            "value": "1 --- 2 --- 4 --- 3 --- 5\n------------\nby moving the \"pick 4\" line will result in the following history:\n------------\n\t3\n       /\n1 --- 2 --- 4 --- 5\n------------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 46134,
            "end_index": 46143,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-receive-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-receive-pack - Receive what is pushed into the repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 114,
            "end_index": 133,
            "value": "[verse]\n'git-receive-pack' <directory>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 172,
            "end_index": 197,
            "value": "Invoked by 'git send-pack' and updates the repository with the\ninformation fed from the remote end.\n\nThis command is usually not invoked directly by the end user.\nThe UI for the protocol is on the 'git send-pack' side, and the\nprogram pair is meant to be used to push updates to remote\nrepository.  For pull operations, see linkgit:git-fetch-pack[1].\n\nThe command allows for creation and fast-forwarding of sha1 refs\n(heads/tags) on the remote end (strictly speaking, it is the\nlocal end 'git-receive-pack' runs, but to the user who is sitting at\nthe send-pack end, it is updating the remote.  Confused?)\n\nThere are other real-world examples of using update and\npost-update hooks found in the Documentation/howto directory.\n\n'git-receive-pack' honours the receive.denyNonFastForwards config\noption, which tells it if updates to a ref should be denied if they\nare not fast-forwards.\n\nA number of other receive.* config options are available to tweak\nits behavior, see linkgit:git-config[1].\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1187,
            "end_index": 1204,
            "value": "\n<directory>::\n\tThe repository to sync into.\n\nPRE-RECEIVE HOOK\n----------------\nBefore any ref is updated, if $GIT_DIR/hooks/pre-receive file exists\nand is executable, it will be invoked once with no parameters.  The\nstandard input of the hook will be one line per ref to be updated:\n\n       sha1-old SP sha1-new SP refname LF\n\nThe refname value is relative to $GIT_DIR; e.g. for the master\nhead this is \"refs/heads/master\".  The two sha1 values before\neach refname are the object names for the refname before and after\nthe update.  Refs to be created will have sha1-old equal to 0\\{40},\nwhile refs to be deleted will have sha1-new equal to 0\\{40}, otherwise\nsha1-old and sha1-new should be valid objects in the repository.\n\nWhen accepting a signed push (see linkgit:git-push[1]), the signed\npush certificate is stored in a blob and an environment variable\n`GIT_PUSH_CERT` can be consulted for its object name.  See the\ndescription of `post-receive` hook for an example.  In addition, the\ncertificate is verified using GPG and the result is exported with\nthe following environment variables:\n\n`GIT_PUSH_CERT_SIGNER`::\n\tThe name and the e-mail address of the owner of the key that\n\tsigned the push certificate.\n\n`GIT_PUSH_CERT_KEY`::\n\tThe GPG key ID of the key that signed the push certificate.\n\n`GIT_PUSH_CERT_STATUS`::\n\tThe status of GPG verification of the push certificate,\n\tusing the same mnemonic as used in `%G?` format of `git log`\n\tfamily of commands (see linkgit:git-log[1]).\n\n`GIT_PUSH_CERT_NONCE`::\n\tThe nonce string the process asked the signer to include\n\tin the push certificate.  If this does not match the value\n\trecorded on the \"nonce\" header in the push certificate, it\n\tmay indicate that the certificate is a valid one that is\n\tbeing replayed from a separate \"git push\" session.\n\n`GIT_PUSH_CERT_NONCE_STATUS`::\n`UNSOLICITED`;;\n\t\"git push --signed\" sent a nonce when we did not ask it to\n\tsend one.\n`MISSING`;;\n\t\"git push --signed\" did not send any nonce header.\n`BAD`;;\n\t\"git push --signed\" sent a bogus nonce.\n`OK`;;\n\t\"git push --signed\" sent the nonce we asked it to send.\n`SLOP`;;\n\t\"git push --signed\" sent a nonce different from what we\n\tasked it to send now, but in a previous session.  See\n\t`GIT_PUSH_CERT_NONCE_SLOP` environment variable.\n\n`GIT_PUSH_CERT_NONCE_SLOP`::\n\t\"git push --signed\" sent a nonce different from what we\n\tasked it to send now, but in a different session whose\n\tstarting time is different by this many seconds from the\n\tcurrent session.  Only meaningful when\n\t`GIT_PUSH_CERT_NONCE_STATUS` says `SLOP`.\n\tAlso read about `receive.certNonceSlop` variable in\n\tlinkgit:git-config[1].\n\nThis hook is called before any refname is updated and before any\nfast-forward checks are performed.\n\nIf the pre-receive hook exits with a non-zero exit status no updates\nwill be performed, and the update, post-receive and post-update\nhooks will not be invoked either.  This can be useful to quickly\nbail out if the update is not to be supported.\n\nSee the notes on the quarantine environment below.\n\nUPDATE HOOK\n-----------\nBefore each ref is updated, if $GIT_DIR/hooks/update file exists\nand is executable, it is invoked once per ref, with three parameters:\n\n       $GIT_DIR/hooks/update refname sha1-old sha1-new\n\nThe refname parameter is relative to $GIT_DIR; e.g. for the master\nhead this is \"refs/heads/master\".  The two sha1 arguments are\nthe object names for the refname before and after the update.\nNote that the hook is called before the refname is updated,\nso either sha1-old is 0\\{40} (meaning there is no such ref yet),\nor it should match what is recorded in refname.\n\nThe hook should exit with non-zero status if it wants to disallow\nupdating the named ref.  Otherwise it should exit with zero.\n\nSuccessful execution (a zero exit status) of this hook does not\nensure the ref will actually be updated, it is only a prerequisite.\nAs such it is not a good idea to send notices (e.g. email) from\nthis hook.  Consider using the post-receive hook instead.\n\nPOST-RECEIVE HOOK\n-----------------\nAfter all refs were updated (or attempted to be updated), if any\nref update was successful, and if $GIT_DIR/hooks/post-receive\nfile exists and is executable, it will be invoked once with no\nparameters.  The standard input of the hook will be one line\nfor each successfully updated ref:\n\n       sha1-old SP sha1-new SP refname LF\n\nThe refname value is relative to $GIT_DIR; e.g. for the master\nhead this is \"refs/heads/master\".  The two sha1 values before\neach refname are the object names for the refname before and after\nthe update.  Refs that were created will have sha1-old equal to\n0\\{40}, while refs that were deleted will have sha1-new equal to\n0\\{40}, otherwise sha1-old and sha1-new should be valid objects in\nthe repository.\n\nThe `GIT_PUSH_CERT*` environment variables can be inspected, just as\nin `pre-receive` hook, after accepting a signed push.\n\nUsing this hook, it is easy to generate mails describing the updates\nto the repository.  This example script sends one mail message per\nref listing the commits pushed to the repository, and logs the push\ncertificates of signed pushes with good signatures to a logger\nservice:\n\n----\n#!/bin/sh\n# mail out commit update information.\nwhile read oval nval ref\ndo\n\tif expr \"$oval\" : '0*$' >/dev/null\n\tthen\n\t\techo \"Created a new ref, with the following commits:\"\n\t\tgit rev-list --pretty \"$nval\"\n\telse\n\t\techo \"New commits:\"\n\t\tgit rev-list --pretty \"$nval\" \"^$oval\"\n\tfi |\n\tmail -s \"Changes to ref $ref\" commit-list@mydomain\ndone\n# log signed push certificate, if any\nif test -n \"${GIT_PUSH_CERT-}\" && test ${GIT_PUSH_CERT_STATUS} = G\nthen\n\t(\n\t\techo expected nonce is ${GIT_PUSH_NONCE}\n\t\tgit cat-file blob ${GIT_PUSH_CERT}\n\t) | mail -s \"push certificate from $GIT_PUSH_CERT_SIGNER\" push-log@mydomain\nfi\nexit 0\n----\n\nThe exit code from this hook invocation is ignored, however a\nnon-zero exit code will generate an error message.\n\nNote that it is possible for refname to not have sha1-new when this\nhook runs.  This can easily occur if another user modifies the ref\nafter it was updated by 'git-receive-pack', but before the hook was able\nto evaluate it.  It is recommended that hooks rely on sha1-new\nrather than the current value of refname.\n\nPOST-UPDATE HOOK\n----------------\nAfter all other processing, if at least one ref was updated, and\nif $GIT_DIR/hooks/post-update file exists and is executable, then\npost-update will be called with the list of refs that have been updated.\nThis can be used to implement any repository wide cleanup tasks.\n\nThe exit code from this hook invocation is ignored; the only thing\nleft for 'git-receive-pack' to do at that point is to exit itself\nanyway.\n\nThis hook can be used, for example, to run `git update-server-info`\nif the repository is packed and is served via a dumb transport.\n\n----\n#!/bin/sh\nexec git update-server-info\n----\n\n\nQUARANTINE ENVIRONMENT\n----------------------\n\nWhen `receive-pack` takes in objects, they are placed into a temporary\n\"quarantine\" directory within the `$GIT_DIR/objects` directory and\nmigrated into the main object store only after the `pre-receive` hook\nhas completed. If the push fails before then, the temporary directory is\nremoved entirely.\n\nThis has a few user-visible effects and caveats:\n\n  1. Pushes which fail due to problems with the incoming pack, missing\n     objects, or due to the `pre-receive` hook will not leave any\n     on-disk data. This is usually helpful to prevent repeated failed\n     pushes from filling up your disk, but can make debugging more\n     challenging.\n\n  2. Any objects created by the `pre-receive` hook will be created in\n     the quarantine directory (and migrated only if it succeeds).\n\n  3. The `pre-receive` hook MUST NOT update any refs to point to\n     quarantined objects. Other programs accessing the repository will\n     not be able to see the objects (and if the pre-receive hook fails,\n     those refs would become corrupted). For safety, any ref updates\n     from within `pre-receive` are automatically rejected.\n\n\nSEE ALSO\n--------\nlinkgit:git-send-pack[1], linkgit:gitnamespaces[7]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 9285,
            "end_index": 9294,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-reflog.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-reflog - Manage reflog information\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 79,
            "end_index": 98,
            "value": "[verse]\n'git reflog' <subcommand> <options>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 142,
            "end_index": 167,
            "value": "The command takes various subcommands, and different options\ndepending on the subcommand:\n\n[verse]\n'git reflog' ['show'] [log-options] [<ref>]\n'git reflog expire' [--expire=<time>] [--expire-unreachable=<time>]\n\t[--rewrite] [--updateref] [--stale-fix]\n\t[--dry-run | -n] [--verbose] [--all [--single-worktree] | <refs>...]\n'git reflog delete' [--rewrite] [--updateref]\n\t[--dry-run | -n] [--verbose] ref@\\{specifier\\}...\n'git reflog exists' <ref>\n\nReference logs, or \"reflogs\", record when the tips of branches and\nother references were updated in the local repository. Reflogs are\nuseful in various Git commands, to specify the old value of a\nreference. For example, `HEAD@{2}` means \"where HEAD used to be two\nmoves ago\", `master@{one.week.ago}` means \"where master used to point\nto one week ago in this local repository\", and so on. See\nlinkgit:gitrevisions[7] for more details.\n\nThis command manages the information recorded in the reflogs.\n\nThe \"show\" subcommand (which is also the default, in the absence of\nany subcommands) shows the log of the reference provided in the\ncommand-line (or `HEAD`, by default). The reflog covers all recent\nactions, and in addition the `HEAD` reflog records branch switching.\n`git reflog show` is an alias for `git log -g --abbrev-commit\n--pretty=oneline`; see linkgit:git-log[1] for more information.\n\nThe \"expire\" subcommand prunes older reflog entries. Entries older\nthan `expire` time, or entries older than `expire-unreachable` time\nand not reachable from the current tip, are removed from the reflog.\nThis is typically not used directly by end users -- instead, see\nlinkgit:git-gc[1].\n\nThe \"delete\" subcommand deletes single entries from the reflog. Its\nargument must be an _exact_ entry (e.g. \"`git reflog delete\nmaster@{2}`\"). This subcommand is also typically not used directly by\nend users.\n\nThe \"exists\" subcommand checks whether a ref has a reflog.  It exits\nwith zero status if the reflog exists, and non-zero status if it does\nnot.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 2149,
            "end_index": 2166,
            "value": "\nOptions for `show`\n~~~~~~~~~~~~~~~~~~\n\n`git reflog show` accepts any of the options accepted by `git log`.\n\n\nOptions for `expire`\n~~~~~~~~~~~~~~~~~~~~\n\n--all::\n\tProcess the reflogs of all references.\n\n--single-worktree::\n\tBy default when `--all` is specified, reflogs from all working\n\ttrees are processed. This option limits the processing to reflogs\n\tfrom the current working tree only.\n\n--expire=<time>::\n\tPrune entries older than the specified time. If this option is\n\tnot specified, the expiration time is taken from the\n\tconfiguration setting `gc.reflogExpire`, which in turn\n\tdefaults to 90 days. `--expire=all` prunes entries regardless\n\tof their age; `--expire=never` turns off pruning of reachable\n\tentries (but see `--expire-unreachable`).\n\n--expire-unreachable=<time>::\n\tPrune entries older than `<time>` that are not reachable from\n\tthe current tip of the branch. If this option is not\n\tspecified, the expiration time is taken from the configuration\n\tsetting `gc.reflogExpireUnreachable`, which in turn defaults\n\tto 30 days. `--expire-unreachable=all` prunes unreachable\n\tentries regardless of their age; `--expire-unreachable=never`\n\tturns off early pruning of unreachable entries (but see\n\t`--expire`).\n\n--updateref::\n\tUpdate the reference to the value of the top reflog entry (i.e.\n\t<ref>@\\{0\\}) if the previous top entry was pruned.  (This\n\toption is ignored for symbolic references.)\n\n--rewrite::\n\tIf a reflog entry's predecessor is pruned, adjust its \"old\"\n\tSHA-1 to be equal to the \"new\" SHA-1 field of the entry that\n\tnow precedes it.\n\n--stale-fix::\n\tPrune any reflog entries that point to \"broken commits\". A\n\tbroken commit is a commit that is not reachable from any of\n\tthe reference tips and that refers, directly or indirectly, to\n\ta missing commit, tree, or blob object.\n+\nThis computation involves traversing all the reachable objects, i.e. it\nhas the same cost as 'git prune'.  It is primarily intended to fix\ncorruption caused by garbage collecting using older versions of Git,\nwhich didn't protect objects referred to by reflogs.\n\n-n::\n--dry-run::\n\tDo not actually prune any entries; just show what would have\n\tbeen pruned.\n\n--verbose::\n\tPrint extra information on screen.\n\n\nOptions for `delete`\n~~~~~~~~~~~~~~~~~~~~\n\n`git reflog delete` accepts options `--updateref`, `--rewrite`, `-n`,\n`--dry-run`, and `--verbose`, with the same meanings as when they are\nused with `expire`.\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4576,
            "end_index": 4585,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-remote-ext.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-remote-ext - Bridge smart transport to external command.\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 108,
            "end_index": 127,
            "value": "[verse]\ngit remote add <nick> \"ext::<command>[ <arguments>...]\"\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 191,
            "end_index": 216,
            "value": "This remote helper uses the specified '<command>' to connect\nto a remote Git server.\n\nData written to stdin of the specified '<command>' is assumed\nto be sent to a git:// server, git-upload-pack, git-receive-pack\nor git-upload-archive (depending on situation), and data read\nfrom stdout of <command> is assumed to be received from\nthe same service.\n\nCommand and arguments are separated by an unescaped space.\n\nThe following sequences have a special meaning:\n\n'% '::\n\tLiteral space in command or argument.\n\n'%%'::\n\tLiteral percent sign.\n\n'%s'::\n\tReplaced with name (receive-pack, upload-pack, or\n\tupload-archive) of the service Git wants to invoke.\n\n'%S'::\n\tReplaced with long name (git-receive-pack,\n\tgit-upload-pack, or git-upload-archive) of the service\n\tGit wants to invoke.\n\n'%G' (must be the first characters in an argument)::\n\tThis argument will not be passed to '<command>'. Instead, it\n\twill cause the helper to start by sending git:// service requests to\n\tthe remote side with the service field set to an appropriate value and\n\tthe repository field set to rest of the argument. Default is not to send\n\tsuch a request.\n+\nThis is useful if remote side is git:// server accessed over\nsome tunnel.\n\n'%V' (must be first characters in argument)::\n\tThis argument will not be passed to '<command>'. Instead it sets\n\tthe vhost field in the git:// service request (to rest of the argument).\n\tDefault is not to send vhost in such request (if sent).\n\nENVIRONMENT VARIABLES\n---------------------\n\nGIT_TRANSLOOP_DEBUG::\n\tIf set, prints debugging information about various reads/writes.\n\nENVIRONMENT VARIABLES PASSED TO COMMAND\n---------------------------------------\n\nGIT_EXT_SERVICE::\n\tSet to long name (git-upload-pack, etc...) of service helper needs\n\tto invoke.\n\nGIT_EXT_SERVICE_NOPREFIX::\n\tSet to long name (upload-pack, etc...) of service helper needs\n\tto invoke.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 2082,
            "end_index": 2101,
            "value": "This remote helper is transparently used by Git when\nyou use commands such as \"git fetch <URL>\", \"git clone <URL>\",\n, \"git push <URL>\" or \"git remote add <nick> <URL>\", where <URL>\nbegins with `ext::`.  Examples:\n\n\"ext::ssh -i /home/foo/.ssh/somekey user&#64;host.example %S 'foo/repo'\"::\n\tLike host.example:foo/repo, but use /home/foo/.ssh/somekey as\n\tkeypair and user as user on remote side. This avoids needing to\n\tedit .ssh/config.\n\n\"ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo\"::\n\tRepresents repository with path /somerepo accessible over\n\tgit protocol at abstract namespace address /git-server.\n\n\"ext::git-server-alias foo %G/repo\"::\n\tRepresents a repository with path /repo accessed using the\n\thelper program \"git-server-alias foo\".  The path to the\n\trepository and type of request are not passed on the command\n\tline but as part of the protocol stream, as usual with git://\n\tprotocol.\n\n\"ext::git-server-alias foo %G/repo %Vfoo\"::\n\tRepresents a repository with path /repo accessed using the\n\thelper program \"git-server-alias foo\".  The hostname for the\n\tremote server passed in the protocol stream will be \"foo\"\n\t(this allows multiple virtual Git servers to share a\n\tlink-level address).\n\n\"ext::git-server-alias foo %G/repo% with% spaces %Vfoo\"::\n\tRepresents a repository with path `/repo with spaces` accessed\n\tusing the helper program \"git-server-alias foo\".  The hostname for\n\tthe remote server passed in the protocol stream will be \"foo\"\n\t(this allows multiple virtual Git servers to share a\n\tlink-level address).\n\n\"ext::git-ssl foo.example /bar\"::\n\tRepresents a repository accessed using the helper program\n\t\"git-ssl foo.example /bar\".  The type of request can be\n\tdetermined by the helper using environment variables (see\n\tabove).\n\nSEE ALSO\n--------\nlinkgit:gitremote-helpers[7]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3910,
            "end_index": 3919,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-remote-fd.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-remote-fd - Reflect smart transport stream back to caller\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 107,
            "end_index": 126,
            "value": "\"fd::<infd>[,<outfd>][/<anything>]\" (as URL)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 171,
            "end_index": 196,
            "value": "This helper uses specified file descriptors to connect to a remote Git server.\nThis is not meant for end users but for programs and scripts calling git\nfetch, push or archive.\n\nIf only <infd> is given, it is assumed to be a bidirectional socket connected\nto remote Git server (git-upload-pack, git-receive-pack or\ngit-upload-archive). If both <infd> and <outfd> are given, they are assumed\nto be pipes connected to a remote Git server (<infd> being the inbound pipe\nand <outfd> being the outbound pipe.\n\nIt is assumed that any handshaking procedures have already been completed\n(such as sending service request for git://) before this helper is started.\n\n<anything> can be any string. It is ignored. It is meant for providing\ninformation to user in the URL in case that URL is displayed in some\ncontext.\n\nENVIRONMENT VARIABLES\n---------------------\nGIT_TRANSLOOP_DEBUG::\n\tIf set, prints debugging information about various reads/writes.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1133,
            "end_index": 1152,
            "value": "`git fetch fd::17 master`::\n\tFetch master, using file descriptor #17 to communicate with\n\tgit-upload-pack.\n\n`git fetch fd::17/foo master`::\n\tSame as above.\n\n`git push fd::7,8 master (as URL)`::\n\tPush master, using file descriptor #7 to read data from\n\tgit-receive-pack and file descriptor #8 to write data to\n\tsame service.\n\n`git push fd::7,8/bar master`::\n\tSame as above.\n\nSEE ALSO\n--------\nlinkgit:gitremote-helpers[7]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1573,
            "end_index": 1582,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-remote.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-remote - Manage set of tracked repositories\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 88,
            "end_index": 107,
            "value": "[verse]\n'git remote' [-v | --verbose]\n'git remote add' [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=(fetch|push)] <name> <url>\n'git remote rename' <old> <new>\n'git remote remove' <name>\n'git remote set-head' <name> (-a | --auto | -d | --delete | <branch>)\n'git remote set-branches' [--add] <name> <branch>...\n'git remote get-url' [--push] [--all] <name>\n'git remote set-url' [--push] <name> <newurl> [<oldurl>]\n'git remote set-url --add' [--push] <name> <newurl>\n'git remote set-url --delete' [--push] <name> <url>\n'git remote' [-v | --verbose] 'show' [-n] <name>...\n'git remote prune' [-n | --dry-run] <name>...\n'git remote' [-v | --verbose] 'update' [-p | --prune] [(<group> | <remote>)...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 812,
            "end_index": 837,
            "value": "\nManage the set of repositories (\"remotes\") whose branches you track.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 908,
            "end_index": 925,
            "value": "\n-v::\n--verbose::\n\tBe a little more verbose and show remote url after name.\n\tNOTE: This must be placed between `remote` and subcommand.\n\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 1062,
            "end_index": 1081,
            "value": "\nWith no arguments, shows a list of existing remotes.  Several\nsubcommands are available to perform operations on the remotes.\n\n'add'::\n\nAdd a remote named <name> for the repository at\n<url>.  The command `git fetch <name>` can then be used to create and\nupdate remote-tracking branches <name>/<branch>.\n+\nWith `-f` option, `git fetch <name>` is run immediately after\nthe remote information is set up.\n+\nWith `--tags` option, `git fetch <name>` imports every tag from the\nremote repository.\n+\nWith `--no-tags` option, `git fetch <name>` does not import tags from\nthe remote repository.\n+\nBy default, only tags on fetched branches are imported\n(see linkgit:git-fetch[1]).\n+\nWith `-t <branch>` option, instead of the default glob\nrefspec for the remote to track all branches under\nthe `refs/remotes/<name>/` namespace, a refspec to track only `<branch>`\nis created.  You can give more than one `-t <branch>` to track\nmultiple branches without grabbing all branches.\n+\nWith `-m <master>` option, a symbolic-ref `refs/remotes/<name>/HEAD` is set\nup to point at remote's `<master>` branch. See also the set-head command.\n+\nWhen a fetch mirror is created with `--mirror=fetch`, the refs will not\nbe stored in the 'refs/remotes/' namespace, but rather everything in\n'refs/' on the remote will be directly mirrored into 'refs/' in the\nlocal repository. This option only makes sense in bare repositories,\nbecause a fetch would overwrite any local commits.\n+\nWhen a push mirror is created with `--mirror=push`, then `git push`\nwill always behave as if `--mirror` was passed.\n\n'rename'::\n\nRename the remote named <old> to <new>. All remote-tracking branches and\nconfiguration settings for the remote are updated.\n+\nIn case <old> and <new> are the same, and <old> is a file under\n`$GIT_DIR/remotes` or `$GIT_DIR/branches`, the remote is converted to\nthe configuration file format.\n\n'remove'::\n'rm'::\n\nRemove the remote named <name>. All remote-tracking branches and\nconfiguration settings for the remote are removed.\n\n'set-head'::\n\nSets or deletes the default branch (i.e. the target of the\nsymbolic-ref `refs/remotes/<name>/HEAD`) for\nthe named remote. Having a default branch for a remote is not required,\nbut allows the name of the remote to be specified in lieu of a specific\nbranch. For example, if the default branch for `origin` is set to\n`master`, then `origin` may be specified wherever you would normally\nspecify `origin/master`.\n+\nWith `-d` or `--delete`, the symbolic ref `refs/remotes/<name>/HEAD` is deleted.\n+\nWith `-a` or `--auto`, the remote is queried to determine its `HEAD`, then the\nsymbolic-ref `refs/remotes/<name>/HEAD` is set to the same branch. e.g., if the remote\n`HEAD` is pointed at `next`, `git remote set-head origin -a` will set\nthe symbolic-ref `refs/remotes/origin/HEAD` to `refs/remotes/origin/next`. This will\nonly work if `refs/remotes/origin/next` already exists; if not it must be\nfetched first.\n+\nUse `<branch>` to set the symbolic-ref `refs/remotes/<name>/HEAD` explicitly. e.g., `git\nremote set-head origin master` will set the symbolic-ref `refs/remotes/origin/HEAD` to\n`refs/remotes/origin/master`. This will only work if\n`refs/remotes/origin/master` already exists; if not it must be fetched first.\n+\n\n'set-branches'::\n\nChanges the list of branches tracked by the named remote.\nThis can be used to track a subset of the available remote branches\nafter the initial setup for a remote.\n+\nThe named branches will be interpreted as if specified with the\n`-t` option on the `git remote add` command line.\n+\nWith `--add`, instead of replacing the list of currently tracked\nbranches, adds to that list.\n\n'get-url'::\n\nRetrieves the URLs for a remote. Configurations for `insteadOf` and\n`pushInsteadOf` are expanded here. By default, only the first URL is listed.\n+\nWith `--push`, push URLs are queried rather than fetch URLs.\n+\nWith `--all`, all URLs for the remote will be listed.\n\n'set-url'::\n\nChanges URLs for the remote. Sets first URL for remote <name> that matches\nregex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If\n<oldurl> doesn't match any URL, an error occurs and nothing is changed.\n+\nWith `--push`, push URLs are manipulated instead of fetch URLs.\n+\nWith `--add`, instead of changing existing URLs, new URL is added.\n+\nWith `--delete`, instead of changing existing URLs, all URLs matching\nregex <url> are deleted for remote <name>.  Trying to delete all\nnon-push URLs is an error.\n+\nNote that the push URL and the fetch URL, even though they can\nbe set differently, must still refer to the same place.  What you\npushed to the push URL should be what you would see if you\nimmediately fetched from the fetch URL.  If you are trying to\nfetch from one place (e.g. your upstream) and push to another (e.g.\nyour publishing repository), use two separate remotes.\n\n\n'show'::\n\nGives some information about the remote <name>.\n+\nWith `-n` option, the remote heads are not queried first with\n`git ls-remote <name>`; cached information is used instead.\n\n'prune'::\n\nDeletes stale references associated with <name>. By default, stale\nremote-tracking branches under <name> are deleted, but depending on\nglobal configuration and the configuration of the remote we might even\nprune local tags that haven't been pushed there. Equivalent to `git\nfetch --prune <name>`, except that no new references will be fetched.\n+\nSee the PRUNING section of linkgit:git-fetch[1] for what it'll prune\ndepending on various configuration.\n+\nWith `--dry-run` option, report what branches would be pruned, but do not\nactually prune them.\n\n'update'::\n\nFetch updates for remotes or remote groups in the repository as defined by\n`remotes.<group>`. If neither group nor remote is specified on the command line,\nthe configuration parameter remotes.default will be used; if\nremotes.default is not defined, all remotes which do not have the\nconfiguration parameter `remote.<name>.skipDefaultUpdate` set to true will\nbe updated.  (See linkgit:git-config[1]).\n+\nWith `--prune` option, run pruning against all the remotes that are updated.\n\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 7127,
            "end_index": 7150,
            "value": "\nThe remote configuration is achieved using the `remote.origin.url` and\n`remote.origin.fetch` configuration variables.  (See\nlinkgit:git-config[1]).\n\nEXIT STATUS\n-----------\n\nOn success, the exit status is `0`.\n\nWhen subcommands such as 'add', 'rename', and 'remove' can't find the\nremote in question, the exit status is `2`. When the remote already\nexists, the exit status is `3`.\n\nOn any other error, the exit status may be any other non-zero value.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 7602,
            "end_index": 7621,
            "value": "\n* Add a new remote, fetch, and check out a branch from it\n+\n------------\n$ git remote\norigin\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n$ git remote\norigin\nstaging\n$ git fetch staging\n...\nFrom git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n * [new branch]      master     -> staging/master\n * [new branch]      staging-linus -> staging/staging-linus\n * [new branch]      staging-next -> staging/staging-next\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n  staging/master\n  staging/staging-linus\n  staging/staging-next\n$ git switch -c staging staging/master\n...\n------------\n\n* Imitate 'git clone' but track only selected branches\n+\n------------\n$ mkdir project.git\n$ cd project.git\n$ git init\n$ git remote add -f -t master -m master origin git://example.com/git.git/\n$ git merge origin\n------------\n\n\nSEE ALSO\n--------\nlinkgit:git-fetch[1]\nlinkgit:git-branch[1]\nlinkgit:git-config[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8626,
            "end_index": 8635,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-repack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-repack - Pack unpacked objects in a repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 91,
            "end_index": 110,
            "value": "[verse]\n'git repack' [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=<n>] [--depth=<n>] [--threads=<n>] [--keep-pack=<pack-name>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 247,
            "end_index": 272,
            "value": "\nThis command is used to combine all objects that do not currently\nreside in a \"pack\", into a pack.  It can also be used to re-organize\nexisting packs into a single, more efficient pack.\n\nA pack is a collection of objects, individually compressed, with\ndelta compression applied, stored in a single file, with an\nassociated index file.\n\nPacks are used to reduce the load on mirror systems, backup\nengines, disk storage, etc.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 697,
            "end_index": 714,
            "value": "\n-a::\n\tInstead of incrementally packing the unpacked objects,\n\tpack everything referenced into a single pack.\n\tEspecially useful when packing a repository that is used\n\tfor private development. Use\n\twith `-d`.  This will clean up the objects that `git prune`\n\tleaves behind, but `git fsck --full --dangling` shows as\n\tdangling.\n+\nNote that users fetching over dumb protocols will have to fetch the\nwhole new pack in order to get any contained object, no matter how many\nother objects in that pack they already have locally.\n+\nPromisor packfiles are repacked separately: if there are packfiles that\nhave an associated \".promisor\" file, these packfiles will be repacked\ninto another separate pack, and an empty \".promisor\" file corresponding\nto the new separate pack will be written.\n\n-A::\n\tSame as `-a`, unless `-d` is used.  Then any unreachable\n\tobjects in a previous pack become loose, unpacked objects,\n\tinstead of being left in the old pack.  Unreachable objects\n\tare never intentionally added to a pack, even when repacking.\n\tThis option prevents unreachable objects from being immediately\n\tdeleted by way of being left in the old pack and then\n\tremoved.  Instead, the loose unreachable objects\n\twill be pruned according to normal expiry rules\n\twith the next 'git gc' invocation. See linkgit:git-gc[1].\n\n-d::\n\tAfter packing, if the newly created packs make some\n\texisting packs redundant, remove the redundant packs.\n\tAlso run  'git prune-packed' to remove redundant\n\tloose object files.\n\n-l::\n\tPass the `--local` option to 'git pack-objects'. See\n\tlinkgit:git-pack-objects[1].\n\n-f::\n\tPass the `--no-reuse-delta` option to `git-pack-objects`, see\n\tlinkgit:git-pack-objects[1].\n\n-F::\n\tPass the `--no-reuse-object` option to `git-pack-objects`, see\n\tlinkgit:git-pack-objects[1].\n\n-q::\n\tPass the `-q` option to 'git pack-objects'. See\n\tlinkgit:git-pack-objects[1].\n\n-n::\n\tDo not update the server information with\n\t'git update-server-info'.  This option skips\n\tupdating local catalog files needed to publish\n\tthis repository (or a direct copy of it)\n\tover HTTP or FTP.  See linkgit:git-update-server-info[1].\n\n--window=<n>::\n--depth=<n>::\n\tThese two options affect how the objects contained in the pack are\n\tstored using delta compression. The objects are first internally\n\tsorted by type, size and optionally names and compared against the\n\tother objects within `--window` to see if using delta compression saves\n\tspace. `--depth` limits the maximum delta depth; making it too deep\n\taffects the performance on the unpacker side, because delta data needs\n\tto be applied that many times to get to the necessary object.\n+\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095.\n\n--threads=<n>::\n\tThis option is passed through to `git pack-objects`.\n\n--window-memory=<n>::\n\tThis option provides an additional limit on top of `--window`;\n\tthe window size will dynamically scale down so as to not take\n\tup more than '<n>' bytes in memory.  This is useful in\n\trepositories with a mix of large and small objects to not run\n\tout of memory with a large window, but still be able to take\n\tadvantage of the large window for the smaller objects.  The\n\tsize can be suffixed with \"k\", \"m\", or \"g\".\n\t`--window-memory=0` makes memory usage unlimited.  The default\n\tis taken from the `pack.windowMemory` configuration variable.\n\tNote that the actual memory usage will be the limit multiplied\n\tby the number of threads used by linkgit:git-pack-objects[1].\n\n--max-pack-size=<n>::\n\tMaximum size of each output pack file. The size can be suffixed with\n\t\"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB.\n\tIf specified, multiple packfiles may be created, which also\n\tprevents the creation of a bitmap index.\n\tThe default is unlimited, unless the config variable\n\t`pack.packSizeLimit` is set.\n\n-b::\n--write-bitmap-index::\n\tWrite a reachability bitmap index as part of the repack. This\n\tonly makes sense when used with `-a` or `-A`, as the bitmaps\n\tmust be able to refer to all reachable objects. This option\n\toverrides the setting of `repack.writeBitmaps`.  This option\n\thas no effect if multiple packfiles are created.\n\n--pack-kept-objects::\n\tInclude objects in `.keep` files when repacking.  Note that we\n\tstill do not delete `.keep` packs after `pack-objects` finishes.\n\tThis means that we may duplicate objects, but this makes the\n\toption safe to use when there are concurrent pushes or fetches.\n\tThis option is generally only useful if you are writing bitmaps\n\twith `-b` or `repack.writeBitmaps`, as it ensures that the\n\tbitmapped packfile has the necessary objects.\n\n--keep-pack=<pack-name>::\n\tExclude the given pack from repacking. This is the equivalent\n\tof having `.keep` file on the pack. `<pack-name>` is the\n\tpack file name without leading directory (e.g. `pack-123.pack`).\n\tThe option could be specified multiple times to keep multiple\n\tpacks.\n\n--unpack-unreachable=<when>::\n\tWhen loosening unreachable objects, do not bother loosening any\n\tobjects older than `<when>`. This can be used to optimize out\n\tthe write of any objects that would be immediately pruned by\n\ta follow-up `git prune`.\n\n-k::\n--keep-unreachable::\n\tWhen used with `-ad`, any unreachable objects from existing\n\tpacks will be appended to the end of the packfile instead of\n\tbeing removed. In addition, any unreachable loose objects will\n\tbe packed (and their loose counterparts removed).\n\n-i::\n--delta-islands::\n\tPass the `--delta-islands` option to `git-pack-objects`, see\n\tlinkgit:git-pack-objects[1].\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 6218,
            "end_index": 6247,
            "value": "\nVarious configuration variables affect packing, see\nlinkgit:git-config[1] (search for \"pack\" and \"delta\").\n\nBy default, the command passes `--delta-base-offset` option to\n'git pack-objects'; this typically results in slightly smaller packs,\nbut the generated packs are incompatible with versions of Git older than\nversion 1.4.4. If you need to share your repository with such ancient Git\nversions, either directly or via the dumb http protocol, then you\nneed to set the configuration variable `repack.UseDeltaBaseOffset` to\n\"false\" and repack. Access from old Git versions over the native protocol\nis unaffected by this option as the conversion is performed on the fly\nas needed in that case.\n\nDelta compression is not used on objects larger than the\n`core.bigFileThreshold` configuration variable and on files with the\nattribute `delta` set to false.\n\nSEE ALSO\n--------\nlinkgit:git-pack-objects[1]\nlinkgit:git-prune-packed[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7175,
            "end_index": 7184,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-replace.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-replace - Create, list, delete refs to replace objects\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 100,
            "end_index": 119,
            "value": "[verse]\n'git replace' [-f] <object> <replacement>\n'git replace' [-f] --edit <object>\n'git replace' [-f] --graft <commit> [<parent>...]\n'git replace' [-f] --convert-graft-file\n'git replace' -d <object>...\n'git replace' [--format=<format>] [-l [<pattern>]]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 374,
            "end_index": 399,
            "value": "Adds a 'replace' reference in `refs/replace/` namespace.\n\nThe name of the 'replace' reference is the SHA-1 of the object that is\nreplaced. The content of the 'replace' reference is the SHA-1 of the\nreplacement object.\n\nThe replaced object and the replacement object must be of the same type.\nThis restriction can be bypassed using `-f`.\n\nUnless `-f` is given, the 'replace' reference must not yet exist.\n\nThere is no other restriction on the replaced and replacement objects.\nMerge commits can be replaced by non-merge commits and vice versa.\n\nReplacement references will be used by default by all Git commands\nexcept those doing reachability traversal (prune, pack transfer and\nfsck).\n\nIt is possible to disable use of replacement references for any\ncommand using the `--no-replace-objects` option just after 'git'.\n\nFor example if commit 'foo' has been replaced by commit 'bar':\n\n------------------------------------------------\n$ git --no-replace-objects cat-file commit foo\n------------------------------------------------\n\nshows information about commit 'foo', while:\n\n------------------------------------------------\n$ git cat-file commit foo\n------------------------------------------------\n\nshows information about commit 'bar'.\n\nThe `GIT_NO_REPLACE_OBJECTS` environment variable can be set to\nachieve the same effect as the `--no-replace-objects` option.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1763,
            "end_index": 1780,
            "value": "\n-f::\n--force::\n\tIf an existing replace ref for the same object exists, it will\n\tbe overwritten (instead of failing).\n\n-d::\n--delete::\n\tDelete existing replace refs for the given objects.\n\n--edit <object>::\n\tEdit an object's content interactively. The existing content\n\tfor <object> is pretty-printed into a temporary file, an\n\teditor is launched on the file, and the result is parsed to\n\tcreate a new object of the same type as <object>. A\n\treplacement ref is then created to replace <object> with the\n\tnewly created object. See linkgit:git-var[1] for details about\n\thow the editor will be chosen.\n\n--raw::\n\tWhen editing, provide the raw object contents rather than\n\tpretty-printed ones. Currently this only affects trees, which\n\twill be shown in their binary form. This is harder to work with,\n\tbut can help when repairing a tree that is so corrupted it\n\tcannot be pretty-printed. Note that you may need to configure\n\tyour editor to cleanly read and write binary data.\n\n--graft <commit> [<parent>...]::\n\tCreate a graft commit. A new commit is created with the same\n\tcontent as <commit> except that its parents will be\n\t[<parent>...] instead of <commit>'s parents. A replacement ref\n\tis then created to replace <commit> with the newly created\n\tcommit. Use `--convert-graft-file` to convert a\n\t`$GIT_DIR/info/grafts` file and use replace refs instead.\n\n--convert-graft-file::\n\tCreates graft commits for all entries in `$GIT_DIR/info/grafts`\n\tand deletes that file upon success. The purpose is to help users\n\twith transitioning off of the now-deprecated graft file.\n\n-l <pattern>::\n--list <pattern>::\n\tList replace refs for objects that match the given pattern (or\n\tall if no pattern is given).\n\tTyping \"git replace\" without arguments, also lists all replace\n\trefs.\n\n--format=<format>::\n\tWhen listing, use the specified <format>, which can be one of\n\t'short', 'medium' and 'long'. When omitted, the format\n\tdefaults to 'short'.\n"
        },
        "FORMATS": {
            "name": "FORMATS",
            "start_index": 3706,
            "end_index": 3723,
            "value": "\nThe following format are available:\n\n* 'short':\n\t<replaced sha1>\n* 'medium':\n\t<replaced sha1> -> <replacement sha1>\n* 'long':\n\t<replaced sha1> (<replaced type>) -> <replacement sha1> (<replacement type>)\n\nCREATING REPLACEMENT OBJECTS\n----------------------------\n\nlinkgit:git-hash-object[1], linkgit:git-rebase[1], and\nhttps://github.com/newren/git-filter-repo[git-filter-repo], among other git commands, can be used to\ncreate replacement objects from existing objects. The `--edit` option\ncan also be used with 'git replace' to create a replacement object by\nediting an existing object.\n\nIf you want to replace many blobs, trees or commits that are part of a\nstring of commits, you may just want to create a replacement string of\ncommits and then only replace the commit at the tip of the target\nstring of commits with the commit at the tip of the replacement string\nof commits.\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 4604,
            "end_index": 4615,
            "value": "Comparing blobs or trees that have been replaced with those that\nreplace them will not work properly. And using `git reset --hard` to\ngo back to a replaced commit will move the branch to the replacement\ncommit instead of the replaced commit.\n\nThere may be other problems when using 'git rev-list' related to\npending objects.\n\nSEE ALSO\n--------\nlinkgit:git-hash-object[1]\nlinkgit:git-rebase[1]\nlinkgit:git-tag[1]\nlinkgit:git-branch[1]\nlinkgit:git-commit[1]\nlinkgit:git-var[1]\nlinkgit:git[1]\nhttps://github.com/newren/git-filter-repo[git-filter-repo]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5164,
            "end_index": 5173,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-request-pull.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-request-pull - Generates a summary of pending changes\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git request-pull' [-p] <start> <url> [<end>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 182,
            "end_index": 207,
            "value": "\nGenerate a request asking your upstream project to pull changes into\ntheir tree.  The request, printed to the standard output,\nbegins with the branch description, summarizes\nthe changes and indicates from where they can be pulled.\n\nThe upstream project is expected to have the commit named by\n`<start>` and the output asks it to integrate the changes you made\nsince that commit, up to the commit named by `<end>`, by visiting\nthe repository named by `<url>`.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 668,
            "end_index": 685,
            "value": "\n-p::\n\tInclude patch text in the output.\n\n<start>::\n\tCommit to start at.  This names a commit that is already in\n\tthe upstream history.\n\n<url>::\n\tThe repository URL to be pulled from.\n\n<end>::\n\tCommit to end at (defaults to HEAD).  This names the commit\n\tat the tip of the history you are asking to be pulled.\n+\nWhen the repository named by `<url>` has the commit at a tip of a\nref that is different from the ref you have locally, you can use the\n`<local>:<remote>` syntax, to have its local name, a colon `:`, and\nits remote name.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1217,
            "end_index": 1236,
            "value": "\nImagine that you built your work on your `master` branch on top of\nthe `v1.0` release, and want it to be integrated to the project.\nFirst you push that change to your public repository for others to\nsee:\n\n\tgit push https://git.ko.xz/project master\n\nThen, you run this command:\n\n\tgit request-pull v1.0 https://git.ko.xz/project master\n\nwhich will produce a request to the upstream, summarizing the\nchanges between the `v1.0` release and your `master`, to pull it\nfrom your public repository.\n\nIf you pushed your change to a branch whose name is different from\nthe one you have locally, e.g.\n\n\tgit push https://git.ko.xz/project master:for-linus\n\nthen you can ask that to be pulled with\n\n\tgit request-pull v1.0 https://git.ko.xz/project master:for-linus\n\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1990,
            "end_index": 1999,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-rerere.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-rerere - Reuse recorded resolution of conflicted merges\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 99,
            "end_index": 118,
            "value": "[verse]\n'git rerere' ['clear'|'forget' <pathspec>|'diff'|'remaining'|'status'|'gc']\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 202,
            "end_index": 227,
            "value": "\nIn a workflow employing relatively long lived topic branches,\nthe developer sometimes needs to resolve the same conflicts over\nand over again until the topic branches are done (either merged\nto the \"release\" branch, or sent out and accepted upstream).\n\nThis command assists the developer in this process by recording\nconflicted automerge results and corresponding hand resolve results\non the initial manual merge, and applying previously recorded\nhand resolutions to their corresponding automerge results.\n\n[NOTE]\nYou need to set the configuration variable `rerere.enabled` in order to\nenable this command.\n\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 836,
            "end_index": 855,
            "value": "\nNormally, 'git rerere' is run without arguments or user-intervention.\nHowever, it has several commands that allow it to interact with\nits working state.\n\n'clear'::\n\nReset the metadata used by rerere if a merge resolution is to be\naborted.  Calling 'git am [--skip|--abort]' or 'git rebase [--skip|--abort]'\nwill automatically invoke this command.\n\n'forget' <pathspec>::\n\nReset the conflict resolutions which rerere has recorded for the current\nconflict in <pathspec>.\n\n'diff'::\n\nDisplay diffs for the current state of the resolution.  It is\nuseful for tracking what has changed while the user is resolving\nconflicts.  Additional arguments are passed directly to the system\n'diff' command installed in PATH.\n\n'status'::\n\nPrint paths with conflicts whose merge resolution rerere will record.\n\n'remaining'::\n\nPrint paths with conflicts that have not been autoresolved by rerere.\nThis includes paths whose resolutions cannot be tracked by rerere,\nsuch as conflicting submodules.\n\n'gc'::\n\nPrune records of conflicted merges that\noccurred a long time ago.  By default, unresolved conflicts older\nthan 15 days and resolved conflicts older than 60\ndays are pruned.  These defaults are controlled via the\n`gc.rerereUnresolved` and `gc.rerereResolved` configuration\nvariables respectively.\n\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 2137,
            "end_index": 2160,
            "value": "\nWhen your topic branch modifies an overlapping area that your\nmaster branch (or upstream) touched since your topic branch\nforked from it, you may want to test it with the latest master,\neven before your topic branch is ready to be pushed upstream:\n\n------------\n              o---*---o topic\n             /\n    o---o---o---*---o---o master\n------------\n\nFor such a test, you need to merge master and topic somehow.\nOne way to do it is to pull master into the topic branch:\n\n------------\n\t$ git switch topic\n\t$ git merge master\n\n              o---*---o---+ topic\n             /           /\n    o---o---o---*---o---o master\n------------\n\nThe commits marked with `*` touch the same area in the same\nfile; you need to resolve the conflicts when creating the commit\nmarked with `+`.  Then you can test the result to make sure your\nwork-in-progress still works with what is in the latest master.\n\nAfter this test merge, there are two ways to continue your work\non the topic.  The easiest is to build on top of the test merge\ncommit `+`, and when your work in the topic branch is finally\nready, pull the topic branch into master, and/or ask the\nupstream to pull from you.  By that time, however, the master or\nthe upstream might have been advanced since the test merge `+`,\nin which case the final commit graph would look like this:\n\n------------\n\t$ git switch topic\n\t$ git merge master\n\t$ ... work on both topic and master branches\n\t$ git switch master\n\t$ git merge topic\n\n              o---*---o---+---o---o topic\n             /           /         \\\n    o---o---o---*---o---o---o---o---+ master\n------------\n\nWhen your topic branch is long-lived, however, your topic branch\nwould end up having many such \"Merge from master\" commits on it,\nwhich would unnecessarily clutter the development history.\nReaders of the Linux kernel mailing list may remember that Linus\ncomplained about such too frequent test merges when a subsystem\nmaintainer asked to pull from a branch full of \"useless merges\".\n\nAs an alternative, to keep the topic branch clean of test\nmerges, you could blow away the test merge, and keep building on\ntop of the tip before the test merge:\n\n------------\n\t$ git switch topic\n\t$ git merge master\n\t$ git reset --hard HEAD^ ;# rewind the test merge\n\t$ ... work on both topic and master branches\n\t$ git switch master\n\t$ git merge topic\n\n              o---*---o-------o---o topic\n             /                     \\\n    o---o---o---*---o---o---o---o---+ master\n------------\n\nThis would leave only one merge commit when your topic branch is\nfinally ready and merged into the master branch.  This merge\nwould require you to resolve the conflict, introduced by the\ncommits marked with `*`.  However, this conflict is often the\nsame conflict you resolved when you created the test merge you\nblew away.  'git rerere' helps you resolve this final\nconflicted merge using the information from your earlier hand\nresolve.\n\nRunning the 'git rerere' command immediately after a conflicted\nautomerge records the conflicted working tree files, with the\nusual conflict markers `<<<<<<<`, `=======`, and `>>>>>>>` in\nthem.  Later, after you are done resolving the conflicts,\nrunning 'git rerere' again will record the resolved state of these\nfiles.  Suppose you did this when you created the test merge of\nmaster into the topic branch.\n\nNext time, after seeing the same conflicted automerge,\nrunning 'git rerere' will perform a three-way merge between the\nearlier conflicted automerge, the earlier manual resolution, and\nthe current conflicted automerge.\nIf this three-way merge resolves cleanly, the result is written\nout to your working tree file, so you do not have to manually\nresolve it.  Note that 'git rerere' leaves the index file alone,\nso you still need to do the final sanity checks with `git diff`\n(or `git diff -c`) and 'git add' when you are satisfied.\n\nAs a convenience measure, 'git merge' automatically invokes\n'git rerere' upon exiting with a failed automerge and 'git rerere'\nrecords the hand resolve when it is a new conflict, or reuses the earlier hand\nresolve when it is not.  'git commit' also invokes 'git rerere'\nwhen committing a merge result.  What this means is that you do\nnot have to do anything special yourself (besides enabling\nthe rerere.enabled config variable).\n\nIn our example, when you do the test merge, the manual\nresolution is recorded, and it will be reused when you do the\nactual merge later with the updated master and topic branch, as long\nas the recorded resolution is still applicable.\n\nThe information 'git rerere' records is also used when running\n'git rebase'.  After blowing away the test merge and continuing\ndevelopment on the topic branch:\n\n------------\n              o---*---o-------o---o topic\n             /\n    o---o---o---*---o---o---o---o   master\n\n\t$ git rebase master topic\n\n\t\t\t\t  o---*---o-------o---o topic\n\t\t\t\t /\n    o---o---o---*---o---o---o---o   master\n------------\n\nyou could run `git rebase master topic`, to bring yourself\nup to date before your topic is ready to be sent upstream.\nThis would result in falling back to a three-way merge, and it\nwould conflict the same way as the test merge you resolved earlier.\n'git rerere' will be run by 'git rebase' to help you resolve this\nconflict.\n\n[NOTE] 'git rerere' relies on the conflict markers in the file to\ndetect the conflict.  If the file already contains lines that look the\nsame as lines with conflict markers, 'git rerere' may fail to record a\nconflict resolution.  To work around this, the `conflict-marker-size`\nsetting in linkgit:gitattributes[5] can be used.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 7738,
            "end_index": 7747,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-reset.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-reset - Reset current HEAD to the specified state\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 91,
            "end_index": 110,
            "value": "[verse]\n'git reset' [-q] [<tree-ish>] [--] <pathspec>...\n'git reset' [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]\n'git reset' (--patch | -p) [<tree-ish>] [--] [<pathspec>...]\n'git reset' [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 390,
            "end_index": 415,
            "value": "In the first three forms, copy entries from `<tree-ish>` to the index.\nIn the last form, set the current branch head (`HEAD`) to `<commit>`,\noptionally modifying index and working tree to match.\nThe `<tree-ish>`/`<commit>` defaults to `HEAD` in all forms.\n\n'git reset' [-q] [<tree-ish>] [--] <pathspec>...::\n'git reset' [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]::\n\tThese forms reset the index entries for all paths that match the\n\t`<pathspec>` to their state at `<tree-ish>`.  (It does not affect\n\tthe working tree or the current branch.)\n+\nThis means that `git reset <pathspec>` is the opposite of `git add\n<pathspec>`. This command is equivalent to\n`git restore [--source=<tree-ish>] --staged <pathspec>...`.\n+\nAfter running `git reset <pathspec>` to update the index entry, you can\nuse linkgit:git-restore[1] to check the contents out of the index to\nthe working tree. Alternatively, using linkgit:git-restore[1]\nand specifying a commit with `--source`, you\ncan copy the contents of a path out of a commit to the index and to the\nworking tree in one go.\n\n'git reset' (--patch | -p) [<tree-ish>] [--] [<pathspec>...]::\n\tInteractively select hunks in the difference between the index\n\tand `<tree-ish>` (defaults to `HEAD`).  The chosen hunks are applied\n\tin reverse to the index.\n+\nThis means that `git reset -p` is the opposite of `git add -p`, i.e.\nyou can use it to selectively reset hunks. See the ``Interactive Mode''\nsection of linkgit:git-add[1] to learn how to operate the `--patch` mode.\n\n'git reset' [<mode>] [<commit>]::\n\tThis form resets the current branch head to `<commit>` and\n\tpossibly updates the index (resetting it to the tree of `<commit>`) and\n\tthe working tree depending on `<mode>`. If `<mode>` is omitted,\n\tdefaults to `--mixed`. The `<mode>` must be one of the following:\n+\n--\n--soft::\n\tDoes not touch the index file or the working tree at all (but\n\tresets the head to `<commit>`, just like all modes do). This leaves\n\tall your changed files \"Changes to be committed\", as `git status`\n\twould put it.\n\n--mixed::\n\tResets the index but not the working tree (i.e., the changed files\n\tare preserved but not marked for commit) and reports what has not\n\tbeen updated. This is the default action.\n+\nIf `-N` is specified, removed paths are marked as intent-to-add (see\nlinkgit:git-add[1]).\n\n--hard::\n\tResets the index and working tree. Any changes to tracked files in the\n\tworking tree since `<commit>` are discarded.\n\n--merge::\n\tResets the index and updates the files in the working tree that are\n\tdifferent between `<commit>` and `HEAD`, but keeps those which are\n\tdifferent between the index and working tree (i.e. which have changes\n\twhich have not been added).\n\tIf a file that is different between `<commit>` and the index has\n\tunstaged changes, reset is aborted.\n+\nIn other words, `--merge` does something like a `git read-tree -u -m <commit>`,\nbut carries forward unmerged index entries.\n\n--keep::\n\tResets index entries and updates files in the working tree that are\n\tdifferent between `<commit>` and `HEAD`.\n\tIf a file that is different between `<commit>` and `HEAD` has local\n\tchanges, reset is aborted.\n\n--[no-]recurse-submodules::\n\tWhen the working tree is updated, using --recurse-submodules will\n\talso recursively reset the working tree of all active submodules\n\taccording to the commit recorded in the superproject, also setting\n\tthe submodules' HEAD to be detached at that commit.\n--\n\nSee \"Reset, restore and revert\" in linkgit:git[1] for the differences\nbetween the three commands.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 3959,
            "end_index": 3976,
            "value": "\n-q::\n--quiet::\n--no-quiet::\n\tBe quiet, only report errors. The default behavior is set by the\n\t`reset.quiet` config option. `--quiet` and `--no-quiet` will\n\toverride the default behavior.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<pathspec>...::\n\tLimits the paths affected by the operation.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4943,
            "end_index": 4962,
            "value": "\nUndo add::\n+\n------------\n$ edit                                     <1>\n$ git add frotz.c filfre.c\n$ mailx                                    <2>\n$ git reset                                <3>\n$ git pull git://info.example.com/ nitfol  <4>\n------------\n+\n<1> You are happily working on something, and find the changes\n    in these files are in good order.  You do not want to see them\n    when you run `git diff`, because you plan to work on other files\n    and changes with these files are distracting.\n<2> Somebody asks you to pull, and the changes sound worthy of merging.\n<3> However, you already dirtied the index (i.e. your index does\n    not match the `HEAD` commit).  But you know the pull you are going\n    to make does not affect `frotz.c` or `filfre.c`, so you revert the\n    index changes for these two files.  Your changes in working tree\n    remain there.\n<4> Then you can pull and merge, leaving `frotz.c` and `filfre.c`\n    changes still in the working tree.\n\nUndo a commit and redo::\n+\n------------\n$ git commit ...\n$ git reset --soft HEAD^      <1>\n$ edit                        <2>\n$ git commit -a -c ORIG_HEAD  <3>\n------------\n+\n<1> This is most often done when you remembered what you\n    just committed is incomplete, or you misspelled your commit\n    message, or both.  Leaves working tree as it was before \"reset\".\n<2> Make corrections to working tree files.\n<3> \"reset\" copies the old head to `.git/ORIG_HEAD`; redo the\n    commit by starting with its log message.  If you do not need to\n    edit the message further, you can give `-C` option instead.\n+\nSee also the `--amend` option to linkgit:git-commit[1].\n\nUndo a commit, making it a topic branch::\n+\n------------\n$ git branch topic/wip          <1>\n$ git reset --hard HEAD~3       <2>\n$ git switch topic/wip          <3>\n------------\n+\n<1> You have made some commits, but realize they were premature\n    to be in the `master` branch.  You want to continue polishing\n    them in a topic branch, so create `topic/wip` branch off of the\n    current `HEAD`.\n<2> Rewind the master branch to get rid of those three commits.\n<3> Switch to `topic/wip` branch and keep working.\n\nUndo commits permanently::\n+\n------------\n$ git commit ...\n$ git reset --hard HEAD~3   <1>\n------------\n+\n<1> The last three commits (`HEAD`, `HEAD^`, and `HEAD~2`) were bad\n    and you do not want to ever see them again.  Do *not* do this if\n    you have already given these commits to somebody else.  (See the\n    \"RECOVERING FROM UPSTREAM REBASE\" section in linkgit:git-rebase[1]\n    for the implications of doing so.)\n\nUndo a merge or pull::\n+\n------------\n$ git pull                         <1>\nAuto-merging nitfol\nCONFLICT (content): Merge conflict in nitfol\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git reset --hard                 <2>\n$ git pull . topic/branch          <3>\nUpdating from 41223... to 13134...\nFast-forward\n$ git reset --hard ORIG_HEAD       <4>\n------------\n+\n<1> Try to update from the upstream resulted in a lot of\n    conflicts; you were not ready to spend a lot of time merging\n    right now, so you decide to do that later.\n<2> \"pull\" has not made merge commit, so `git reset --hard`\n    which is a synonym for `git reset --hard HEAD` clears the mess\n    from the index file and the working tree.\n<3> Merge a topic branch into the current branch, which resulted\n    in a fast-forward.\n<4> But you decided that the topic branch is not ready for public\n    consumption yet.  \"pull\" or \"merge\" always leaves the original\n    tip of the current branch in `ORIG_HEAD`, so resetting hard to it\n    brings your index file and the working tree back to that state,\n    and resets the tip of the branch to that commit.\n\nUndo a merge or pull inside a dirty working tree::\n+\n------------\n$ git pull                         <1>\nAuto-merging nitfol\nMerge made by recursive.\n nitfol                |   20 +++++----\n ...\n$ git reset --merge ORIG_HEAD      <2>\n------------\n+\n<1> Even if you may have local modifications in your\n    working tree, you can safely say `git pull` when you know\n    that the change in the other branch does not overlap with\n    them.\n<2> After inspecting the result of the merge, you may find\n    that the change in the other branch is unsatisfactory.  Running\n    `git reset --hard ORIG_HEAD` will let you go back to where you\n    were, but it will discard your local changes, which you do not\n    want.  `git reset --merge` keeps your local changes.\n\n\nInterrupted workflow::\n+\nSuppose you are interrupted by an urgent fix request while you\nare in the middle of a large change.  The files in your\nworking tree are not in any shape to be committed yet, but you\nneed to get to the other branch for a quick bugfix.\n+\n------------\n$ git switch feature  ;# you were working in \"feature\" branch and\n$ work work work      ;# got interrupted\n$ git commit -a -m \"snapshot WIP\"                 <1>\n$ git switch master\n$ fix fix fix\n$ git commit ;# commit with real log\n$ git switch feature\n$ git reset --soft HEAD^ ;# go back to WIP state  <2>\n$ git reset                                       <3>\n------------\n+\n<1> This commit will get blown away so a throw-away log message is OK.\n<2> This removes the 'WIP' commit from the commit history, and sets\n    your working tree to the state just before you made that snapshot.\n<3> At this point the index file still has all the WIP changes you\n    committed as 'snapshot WIP'.  This updates the index to show your\n    WIP files as uncommitted.\n+\nSee also linkgit:git-stash[1].\n\nReset a single file in the index::\n+\nSuppose you have added a file to your index, but later decide you do not\nwant to add it to your commit. You can remove the file from the index\nwhile keeping your changes with git reset.\n+\n------------\n$ git reset -- frotz.c                      <1>\n$ git commit -m \"Commit files in index\"     <2>\n$ git add frotz.c                           <3>\n------------\n+\n<1> This removes the file from the index while keeping it in the working\n    directory.\n<2> This commits all other changes in the index.\n<3> Adds the file to the index again.\n\nKeep changes in working tree while discarding some previous commits::\n+\nSuppose you are working on something and you commit it, and then you\ncontinue working a bit more, but now you think that what you have in\nyour working tree should be in another branch that has nothing to do\nwith what you committed previously. You can start a new branch and\nreset it while keeping the changes in your working tree.\n+\n------------\n$ git tag start\n$ git switch -c branch1\n$ edit\n$ git commit ...                            <1>\n$ edit\n$ git switch -c branch2                     <2>\n$ git reset --keep start                    <3>\n------------\n+\n<1> This commits your first edits in `branch1`.\n<2> In the ideal world, you could have realized that the earlier\n    commit did not belong to the new topic when you created and switched\n    to `branch2` (i.e. `git switch -c branch2 start`), but nobody is\n    perfect.\n<3> But you can use `reset --keep` to remove the unwanted commit after\n    you switched to `branch2`.\n\nSplit a commit apart into a sequence of commits::\n+\nSuppose that you have created lots of logically separate changes and committed\nthem together. Then, later you decide that it might be better to have each\nlogical chunk associated with its own commit. You can use git reset to rewind\nhistory without changing the contents of your local files, and then successively\nuse `git add -p` to interactively select which hunks to include into each commit,\nusing `git commit -c` to pre-populate the commit message.\n+\n------------\n$ git reset -N HEAD^                        <1>\n$ git add -p                                <2>\n$ git diff --cached                         <3>\n$ git commit -c HEAD@{1}                    <4>\n...                                         <5>\n$ git add ...                               <6>\n$ git diff --cached                         <7>\n$ git commit ...                            <8>\n------------\n+\n<1> First, reset the history back one commit so that we remove the original\n    commit, but leave the working tree with all the changes. The -N ensures\n    that any new files added with `HEAD` are still marked so that `git add -p`\n    will find them.\n<2> Next, we interactively select diff hunks to add using the `git add -p`\n    facility. This will ask you about each diff hunk in sequence and you can\n    use simple commands such as \"yes, include this\", \"No don't include this\"\n    or even the very powerful \"edit\" facility.\n<3> Once satisfied with the hunks you want to include, you should verify what\n    has been prepared for the first commit by using `git diff --cached`. This\n    shows all the changes that have been moved into the index and are about\n    to be committed.\n<4> Next, commit the changes stored in the index. The `-c` option specifies to\n    pre-populate the commit message from the original message that you started\n    with in the first commit. This is helpful to avoid retyping it. The\n    `HEAD@{1}` is a special notation for the commit that `HEAD` used to be at\n    prior to the original reset commit (1 change ago).\n    See linkgit:git-reflog[1] for more details. You may also use any other\n    valid commit reference.\n<5> You can repeat steps 2-4 multiple times to break the original code into\n    any number of commits.\n<6> Now you've split out many of the changes into their own commits, and might\n    no longer use the patch mode of `git add`, in order to select all remaining\n    uncommitted changes.\n<7> Once again, check to verify that you've included what you want to. You may\n    also wish to verify that git diff doesn't show any remaining changes to be\n    committed later.\n<8> And finally create the final commit.\n\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 14746,
            "end_index": 14769,
            "value": "\nThe tables below show what happens when running:\n\n----------\ngit reset --option target\n----------\n\nto reset the `HEAD` to another commit (`target`) with the different\nreset options depending on the state of the files.\n\nIn these tables, `A`, `B`, `C` and `D` are some different states of a\nfile. For example, the first line of the first table means that if a\nfile is in state `A` in the working tree, in state `B` in the index, in\nstate `C` in `HEAD` and in state `D` in the target, then `git reset --soft\ntarget` will leave the file in the working tree in state `A` and in the\nindex in state `B`.  It resets (i.e. moves) the `HEAD` (i.e. the tip of\nthe current branch, if you are on one) to `target` (which has the file\nin state `D`).\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    D     --soft   A       B     D\n\t\t\t  --mixed  A       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep  (disallowed)\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    C     --soft   A       B     C\n\t\t\t  --mixed  A       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep   A       C     C\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    D     --soft   B       B     D\n\t\t\t  --mixed  B       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge  D       D     D\n\t\t\t  --keep  (disallowed)\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    C     --soft   B       B     C\n\t\t\t  --mixed  B       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge  C       C     C\n\t\t\t  --keep   B       C     C\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    D     --soft   B       C     D\n\t\t\t  --mixed  B       D     D\n\t\t\t  --hard   D       D     D\n\t\t\t  --merge (disallowed)\n\t\t\t  --keep  (disallowed)\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    C     --soft   B       C     C\n\t\t\t  --mixed  B       C     C\n\t\t\t  --hard   C       C     C\n\t\t\t  --merge  B       C     C\n\t\t\t  --keep   B       C     C\n....\n\n`reset --merge` is meant to be used when resetting out of a conflicted\nmerge. Any mergy operation guarantees that the working tree file that is\ninvolved in the merge does not have a local change with respect to the index\nbefore it starts, and that it writes the result out to the working tree. So if\nwe see some difference between the index and the target and also\nbetween the index and the working tree, then it means that we are not\nresetting out from a state that a mergy operation left after failing\nwith a conflict. That is why we disallow `--merge` option in this case.\n\n`reset --keep` is meant to be used when removing some of the last\ncommits in the current branch while keeping changes in the working\ntree. If there could be conflicts between the changes in the commit we\nwant to remove and the changes in the working tree we want to keep,\nthe reset is disallowed. That's why it is disallowed if there are both\nchanges between the working tree and `HEAD`, and between `HEAD` and the\ntarget. To be safe, it is also disallowed when there are unmerged\nentries.\n\nThe following tables show what happens when there are unmerged\nentries:\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    B     --soft  (disallowed)\n\t\t\t  --mixed  X       B     B\n\t\t\t  --hard   B       B     B\n\t\t\t  --merge  B       B     B\n\t\t\t  --keep  (disallowed)\n....\n\n....\nworking index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    A     --soft  (disallowed)\n\t\t\t  --mixed  X       A     A\n\t\t\t  --hard   A       A     A\n\t\t\t  --merge  A       A     A\n\t\t\t  --keep  (disallowed)\n....\n\n`X` means any state and `U` means an unmerged index.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 18964,
            "end_index": 18973,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-restore.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-restore - Restore working tree files\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 82,
            "end_index": 101,
            "value": "[verse]\n'git restore' [<options>] [--source=<tree>] [--staged] [--worktree] [--] <pathspec>...\n'git restore' [<options>] [--source=<tree>] [--staged] [--worktree] --pathspec-from-file=<file> [--pathspec-file-nul]\n'git restore' (-p|--patch) [<options>] [--source=<tree>] [--staged] [--worktree] [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 416,
            "end_index": 441,
            "value": "Restore specified paths in the working tree with some contents from a\nrestore source. If a path is tracked but does not exist in the restore\nsource, it will be removed to match the source.\n\nThe command can also be used to restore the content in the index with\n`--staged`, or restore both the working tree and the index with\n`--staged --worktree`.\n\nBy default, if `--staged` is given, the contents are restored from `HEAD`,\notherwise from the index. Use `--source` to restore from a different commit.\n\nSee \"Reset, restore and revert\" in linkgit:git[1] for the differences\nbetween the three commands.\n\nTHIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1096,
            "end_index": 1113,
            "value": "\n-s <tree>::\n--source=<tree>::\n\tRestore the working tree files with the content from the given\n\ttree. It is common to specify the source tree by naming a\n\tcommit, branch or tag associated with it.\n+\nIf not specified, the contents are restored from `HEAD` if `--staged` is\ngiven, otherwise from the index.\n+\nAs a special case, you may use `\"A...B\"` as a shortcut for the\nmerge base of `A` and `B` if there is exactly one merge base. You can\nleave out at most one of `A` and `B`, in which case it defaults to `HEAD`.\n\n-p::\n--patch::\n\tInteractively select hunks in the difference between the\n\trestore source and the restore location. See the ``Interactive\n\tMode'' section of linkgit:git-add[1] to learn how to operate\n\tthe `--patch` mode.\n+\nNote that `--patch` can accept no pathspec and will prompt to restore\nall modified paths.\n\n-W::\n--worktree::\n-S::\n--staged::\n\tSpecify the restore location. If neither option is specified,\n\tby default the working tree is restored. Specifying `--staged`\n\twill only restore the index. Specifying both restores both.\n\n-q::\n--quiet::\n\tQuiet, suppress feedback messages. Implies `--no-progress`.\n\n--progress::\n--no-progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless `--quiet`\n\tis specified. This flag enables progress reporting even if not\n\tattached to a terminal, regardless of `--quiet`.\n\n--ours::\n--theirs::\n\tWhen restoring files in the working tree from the index, use\n\tstage #2 ('ours') or #3 ('theirs') for unmerged paths.\n+\nNote that during `git rebase` and `git pull --rebase`, 'ours' and\n'theirs' may appear swapped. See the explanation of the same options\nin linkgit:git-checkout[1] for details.\n\n-m::\n--merge::\n\tWhen restoring files on the working tree from the index,\n\trecreate the conflicted merge in the unmerged paths.\n\n--conflict=<style>::\n\tThe same as `--merge` option above, but changes the way the\n\tconflicting hunks are presented, overriding the\n\t`merge.conflictStyle` configuration variable.  Possible values\n\tare \"merge\" (default) and \"diff3\" (in addition to what is\n\tshown by \"merge\" style, shows the original contents).\n\n--ignore-unmerged::\n\tWhen restoring files on the working tree from the index, do\n\tnot abort the operation if there are unmerged entries and\n\tneither `--ours`, `--theirs`, `--merge` or `--conflict` is\n\tspecified. Unmerged paths on the working tree are left alone.\n\n--ignore-skip-worktree-bits::\n\tIn sparse checkout mode, by default is to only update entries\n\tmatched by `<pathspec>` and sparse patterns in\n\t$GIT_DIR/info/sparse-checkout. This option ignores the sparse\n\tpatterns and unconditionally restores any files in\n\t`<pathspec>`.\n\n--recurse-submodules::\n--no-recurse-submodules::\n\tIf `<pathspec>` names an active submodule and the restore location\n\tincludes the working tree, the submodule will only be updated if\n\tthis option is given, in which case its working tree will be\n\trestored to the commit recorded in the superproject, and any local\n\tmodifications overwritten. If nothing (or\n\t`--no-recurse-submodules`) is used, submodules working trees will\n\tnot be updated. Just like linkgit:git-checkout[1], this will detach\n\t`HEAD` of the submodule.\n\n--overlay::\n--no-overlay::\n\tIn overlay mode, the command never removes files when\n\trestoring. In no-overlay mode, tracked files that do not\n\tappear in the `--source` tree are removed, to make them match\n\t`<tree>` exactly. The default is no-overlay mode.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<pathspec>...::\n\tLimits the paths affected by the operation.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5348,
            "end_index": 5367,
            "value": "\nThe following sequence switches to the `master` branch, reverts the\n`Makefile` to two revisions back, deletes hello.c by mistake, and gets\nit back from the index.\n\n------------\n$ git switch master\n$ git restore --source master~2 Makefile  <1>\n$ rm -f hello.c\n$ git restore hello.c                     <2>\n------------\n\n<1> take a file out of another commit\n<2> restore hello.c from the index\n\nIf you want to restore _all_ C source files to match the version in\nthe index, you can say\n\n------------\n$ git restore '*.c'\n------------\n\nNote the quotes around `*.c`.  The file `hello.c` will also be\nrestored, even though it is no longer in the working tree, because the\nfile globbing is used to match entries in the index (not in the\nworking tree by the shell).\n\nTo restore all files in the current directory\n\n------------\n$ git restore .\n------------\n\nor to restore all working tree files with 'top' pathspec magic (see\nlinkgit:gitglossary[7])\n\n------------\n$ git restore :/\n------------\n\nTo restore a file in the index to match the version in `HEAD` (this is\nthe same as using linkgit:git-reset[1])\n\n------------\n$ git restore --staged hello.c\n------------\n\nor you can restore both the index and the working tree (this the same\nas using linkgit:git-checkout[1])\n\n------------\n$ git restore --source=HEAD --staged --worktree hello.c\n------------\n\nor the short form which is more practical but less readable:\n\n------------\n$ git restore -s@ -SW hello.c\n------------\n\nSEE ALSO\n--------\nlinkgit:git-checkout[1],\nlinkgit:git-reset[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6895,
            "end_index": 6904,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-rev-list.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-rev-list - Lists commit objects in reverse chronological order\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 111,
            "end_index": 130,
            "value": "[verse]\n'git rev-list' [<options>] <commit>... [[--] <path>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 194,
            "end_index": 219,
            "value": "\n:git-rev-list: 1\ninclude::rev-list-description.txt[]\n\n'rev-list' is a very essential Git command, since it\nprovides the ability to build and traverse commit ancestry graphs. For\nthis reason, it has a lot of different options that enables it to be\nused by commands as different as 'git bisect' and\n'git repack'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 531,
            "end_index": 548,
            "value": "\n:git-rev-list: 1\ninclude::rev-list-options.txt[]\n\ninclude::pretty-formats.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 629,
            "end_index": 648,
            "value": "\n* Print the list of commits reachable from the current branch.\n+\n----------\ngit rev-list HEAD\n----------\n\n* Print the list of commits on this branch, but not present in the\n  upstream branch.\n+\n----------\ngit rev-list @{upstream}..HEAD\n----------\n\n* Format commits with their author and commit message (see also the\n  porcelain linkgit:git-log[1]).\n+\n----------\ngit rev-list --format=medium HEAD\n----------\n\n* Format commits along with their diffs (see also the porcelain\n  linkgit:git-log[1], which can do this in a single process).\n+\n----------\ngit rev-list HEAD |\ngit diff-tree --stdin --format=medium -p\n----------\n\n* Print the list of commits on the current branch that touched any\n  file in the `Documentation` directory.\n+\n----------\ngit rev-list HEAD -- Documentation/\n----------\n\n* Print the list of commits authored by you in the past year, on\n  any branch, tag, or other ref.\n+\n----------\ngit rev-list --author=you@example.com --since=1.year.ago --all\n----------\n\n* Print the list of objects reachable from the current branch (i.e., all\n  commits and the blobs and trees they contain).\n+\n----------\ngit rev-list --objects HEAD\n----------\n\n* Compare the disk size of all reachable objects, versus those\n  reachable from reflogs, versus the total packed size. This can tell\n  you whether running `git repack -ad` might reduce the repository size\n  (by dropping unreachable objects), and whether expiring reflogs might\n  help.\n+\n----------\n# reachable objects\ngit rev-list --disk-usage --objects --all\n# plus reflogs\ngit rev-list --disk-usage --objects --all --reflog\n# total disk size used\ndu -c .git/objects/pack/*.pack .git/objects/??/*\n# alternative to du: add up \"size\" and \"size-pack\" fields\ngit count-objects -v\n----------\n\n* Report the disk size of each branch, not including objects used by the\n  current branch. This can find outliers that are contributing to a\n  bloated repository size (e.g., because somebody accidentally committed\n  large build artifacts).\n+\n----------\ngit for-each-ref --format='%(refname)' |\nwhile read branch\ndo\n\tsize=$(git rev-list --disk-usage --objects HEAD..$branch)\n\techo \"$size $branch\"\ndone |\nsort -n\n----------\n\n* Compare the on-disk size of branches in one group of refs, excluding\n  another. If you co-mingle objects from multiple remotes in a single\n  repository, this can show which remotes are contributing to the\n  repository size (taking the size of `origin` as a baseline).\n+\n----------\ngit rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin\n----------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3183,
            "end_index": 3192,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-rev-parse.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-rev-parse - Pick out and massage parameters\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 94,
            "end_index": 113,
            "value": "[verse]\n'git rev-parse' [<options>] <args>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 159,
            "end_index": 184,
            "value": "\nMany Git porcelainish commands take mixture of flags\n(i.e. parameters that begin with a dash '-') and parameters\nmeant for the underlying 'git rev-list' command they use internally\nand flags and parameters for the other commands they use\ndownstream of 'git rev-list'.  This command is used to\ndistinguish between them.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 505,
            "end_index": 522,
            "value": "\nOperation Modes\n~~~~~~~~~~~~~~~\n\nEach of these options must appear first on the command line.\n\n--parseopt::\n\tUse 'git rev-parse' in option parsing mode (see PARSEOPT section below).\n\n--sq-quote::\n\tUse 'git rev-parse' in shell quoting mode (see SQ-QUOTE\n\tsection below). In contrast to the `--sq` option below, this\n\tmode does only quoting. Nothing else is done to command input.\n\nOptions for --parseopt\n~~~~~~~~~~~~~~~~~~~~~~\n\n--keep-dashdash::\n\tOnly meaningful in `--parseopt` mode. Tells the option parser to echo\n\tout the first `--` met instead of skipping it.\n\n--stop-at-non-option::\n\tOnly meaningful in `--parseopt` mode.  Lets the option parser stop at\n\tthe first non-option argument.  This can be used to parse sub-commands\n\tthat take options themselves.\n\n--stuck-long::\n\tOnly meaningful in `--parseopt` mode. Output the options in their\n\tlong form if available, and with their arguments stuck.\n\nOptions for Filtering\n~~~~~~~~~~~~~~~~~~~~~\n\n--revs-only::\n\tDo not output flags and parameters not meant for\n\t'git rev-list' command.\n\n--no-revs::\n\tDo not output flags and parameters meant for\n\t'git rev-list' command.\n\n--flags::\n\tDo not output non-flag parameters.\n\n--no-flags::\n\tDo not output flag parameters.\n\nOptions for Output\n~~~~~~~~~~~~~~~~~~\n\n--default <arg>::\n\tIf there is no parameter given by the user, use `<arg>`\n\tinstead.\n\n--prefix <arg>::\n\tBehave as if 'git rev-parse' was invoked from the `<arg>`\n\tsubdirectory of the working tree.  Any relative filenames are\n\tresolved as if they are prefixed by `<arg>` and will be printed\n\tin that form.\n+\nThis can be used to convert arguments to a command run in a subdirectory\nso that they can still be used after moving to the top-level of the\nrepository.  For example:\n+\n----\nprefix=$(git rev-parse --show-prefix)\ncd \"$(git rev-parse --show-toplevel)\"\n# rev-parse provides the -- needed for 'set'\neval \"set $(git rev-parse --sq --prefix \"$prefix\" -- \"$@\")\"\n----\n\n--verify::\n\tVerify that exactly one parameter is provided, and that it\n\tcan be turned into a raw 20-byte SHA-1 that can be used to\n\taccess the object database. If so, emit it to the standard\n\toutput; otherwise, error out.\n+\nIf you want to make sure that the output actually names an object in\nyour object database and/or can be used as a specific type of object\nyou require, you can add the `^{type}` peeling operator to the parameter.\nFor example, `git rev-parse \"$VAR^{commit}\"` will make sure `$VAR`\nnames an existing object that is a commit-ish (i.e. a commit, or an\nannotated tag that points at a commit).  To make sure that `$VAR`\nnames an existing object of any type, `git rev-parse \"$VAR^{object}\"`\ncan be used.\n+\nNote that if you are verifying a name from an untrusted source, it is\nwise to use `--end-of-options` so that the name argument is not mistaken\nfor another option.\n\n-q::\n--quiet::\n\tOnly meaningful in `--verify` mode. Do not output an error\n\tmessage if the first argument is not a valid object name;\n\tinstead exit with non-zero status silently.\n\tSHA-1s for valid object names are printed to stdout on success.\n\n--sq::\n\tUsually the output is made one line per flag and\n\tparameter.  This option makes output a single line,\n\tproperly quoted for consumption by shell.  Useful when\n\tyou expect your parameter to contain whitespaces and\n\tnewlines (e.g. when using pickaxe `-S` with\n\t'git diff-{asterisk}'). In contrast to the `--sq-quote` option,\n\tthe command input is still interpreted as usual.\n\n--short[=length]::\n\tSame as `--verify` but shortens the object name to a unique\n\tprefix with at least `length` characters. The minimum length\n\tis 4, the default is the effective value of the `core.abbrev`\n\tconfiguration variable (see linkgit:git-config[1]).\n\n--not::\n\tWhen showing object names, prefix them with '{caret}' and\n\tstrip '{caret}' prefix from the object names that already have\n\tone.\n\n--abbrev-ref[=(strict|loose)]::\n\tA non-ambiguous short name of the objects name.\n\tThe option core.warnAmbiguousRefs is used to select the strict\n\tabbreviation mode.\n\n--symbolic::\n\tUsually the object names are output in SHA-1 form (with\n\tpossible '{caret}' prefix); this option makes them output in a\n\tform as close to the original input as possible.\n\n--symbolic-full-name::\n\tThis is similar to --symbolic, but it omits input that\n\tare not refs (i.e. branch or tag names; or more\n\texplicitly disambiguating \"heads/master\" form, when you\n\twant to name the \"master\" branch when there is an\n\tunfortunately named tag \"master\"), and show them as full\n\trefnames (e.g. \"refs/heads/master\").\n\nOptions for Objects\n~~~~~~~~~~~~~~~~~~~\n\n--all::\n\tShow all refs found in `refs/`.\n\n--branches[=pattern]::\n--tags[=pattern]::\n--remotes[=pattern]::\n\tShow all branches, tags, or remote-tracking branches,\n\trespectively (i.e., refs found in `refs/heads`,\n\t`refs/tags`, or `refs/remotes`, respectively).\n+\nIf a `pattern` is given, only refs matching the given shell glob are\nshown.  If the pattern does not contain a globbing character (`?`,\n`*`, or `[`), it is turned into a prefix match by appending `/*`.\n\n--glob=pattern::\n\tShow all refs matching the shell glob pattern `pattern`. If\n\tthe pattern does not start with `refs/`, this is automatically\n\tprepended.  If the pattern does not contain a globbing\n\tcharacter (`?`, `*`, or `[`), it is turned into a prefix\n\tmatch by appending `/*`.\n\n--exclude=<glob-pattern>::\n\tDo not include refs matching '<glob-pattern>' that the next `--all`,\n\t`--branches`, `--tags`, `--remotes`, or `--glob` would otherwise\n\tconsider. Repetitions of this option accumulate exclusion patterns\n\tup to the next `--all`, `--branches`, `--tags`, `--remotes`, or\n\t`--glob` option (other options or arguments do not clear\n\taccumulated patterns).\n+\nThe patterns given should not begin with `refs/heads`, `refs/tags`, or\n`refs/remotes` when applied to `--branches`, `--tags`, or `--remotes`,\nrespectively, and they must begin with `refs/` when applied to `--glob`\nor `--all`. If a trailing '/{asterisk}' is intended, it must be given\nexplicitly.\n\n--disambiguate=<prefix>::\n\tShow every object whose name begins with the given prefix.\n\tThe <prefix> must be at least 4 hexadecimal digits long to\n\tavoid listing each and every object in the repository by\n\tmistake.\n\nOptions for Files\n~~~~~~~~~~~~~~~~~\n\n--local-env-vars::\n\tList the GIT_* environment variables that are local to the\n\trepository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).\n\tOnly the names of the variables are listed, not their value,\n\teven if they are set.\n\n--path-format=(absolute|relative)::\n\tControls the behavior of certain other options. If specified as absolute, the\n\tpaths printed by those options will be absolute and canonical. If specified as\n\trelative, the paths will be relative to the current working directory if that\n\tis possible.  The default is option specific.\n+\nThis option may be specified multiple times and affects only the arguments that\nfollow it on the command line, either to the end of the command line or the next\ninstance of this option.\n\nThe following options are modified by `--path-format`:\n\n--git-dir::\n\tShow `$GIT_DIR` if defined. Otherwise show the path to\n\tthe .git directory. The path shown, when relative, is\n\trelative to the current working directory.\n+\nIf `$GIT_DIR` is not defined and the current directory\nis not detected to lie in a Git repository or work tree\nprint a message to stderr and exit with nonzero status.\n\n--git-common-dir::\n\tShow `$GIT_COMMON_DIR` if defined, else `$GIT_DIR`.\n\n--resolve-git-dir <path>::\n\tCheck if <path> is a valid repository or a gitfile that\n\tpoints at a valid repository, and print the location of the\n\trepository.  If <path> is a gitfile then the resolved path\n\tto the real repository is printed.\n\n--git-path <path>::\n\tResolve \"$GIT_DIR/<path>\" and takes other path relocation\n\tvariables such as $GIT_OBJECT_DIRECTORY,\n\t$GIT_INDEX_FILE... into account. For example, if\n\t$GIT_OBJECT_DIRECTORY is set to /foo/bar then \"git rev-parse\n\t--git-path objects/abc\" returns /foo/bar/abc.\n\n--show-toplevel::\n\tShow the (by default, absolute) path of the top-level directory\n\tof the working tree. If there is no working tree, report an error.\n\n--show-superproject-working-tree::\n\tShow the absolute path of the root of the superproject's\n\tworking tree (if exists) that uses the current repository as\n\tits submodule.  Outputs nothing if the current repository is\n\tnot used as a submodule by any project.\n\n--shared-index-path::\n\tShow the path to the shared index file in split index mode, or\n\tempty if not in split-index mode.\n\nThe following options are unaffected by `--path-format`:\n\n--absolute-git-dir::\n\tLike `--git-dir`, but its output is always the canonicalized\n\tabsolute path.\n\n--is-inside-git-dir::\n\tWhen the current working directory is below the repository\n\tdirectory print \"true\", otherwise \"false\".\n\n--is-inside-work-tree::\n\tWhen the current working directory is inside the work tree of the\n\trepository print \"true\", otherwise \"false\".\n\n--is-bare-repository::\n\tWhen the repository is bare print \"true\", otherwise \"false\".\n\n--is-shallow-repository::\n\tWhen the repository is shallow print \"true\", otherwise \"false\".\n\n--show-cdup::\n\tWhen the command is invoked from a subdirectory, show the\n\tpath of the top-level directory relative to the current\n\tdirectory (typically a sequence of \"../\", or an empty string).\n\n--show-prefix::\n\tWhen the command is invoked from a subdirectory, show the\n\tpath of the current directory relative to the top-level\n\tdirectory.\n\n--show-object-format[=(storage|input|output)]::\n\tShow the object format (hash algorithm) used for the repository\n\tfor storage inside the `.git` directory, input, or output. For\n\tinput, multiple algorithms may be printed, space-separated.\n\tIf not specified, the default is \"storage\".\n\n\nOther Options\n~~~~~~~~~~~~~\n\n--since=datestring::\n--after=datestring::\n\tParse the date string, and output the corresponding\n\t--max-age= parameter for 'git rev-list'.\n\n--until=datestring::\n--before=datestring::\n\tParse the date string, and output the corresponding\n\t--min-age= parameter for 'git rev-list'.\n\n<args>...::\n\tFlags and parameters to be parsed.\n\n\ninclude::revisions.txt[]\n"
        },
        "PARSEOPT": {
            "name": "PARSEOPT",
            "start_index": 10622,
            "end_index": 10641,
            "value": "\nIn `--parseopt` mode, 'git rev-parse' helps massaging options to bring to shell\nscripts the same facilities C builtins have. It works as an option normalizer\n(e.g. splits single switches aggregate values), a bit like `getopt(1)` does.\n\nIt takes on the standard input the specification of the options to parse and\nunderstand, and echoes on the standard output a string suitable for `sh(1)` `eval`\nto replace the arguments with normalized ones.  In case of error, it outputs\nusage on the standard error stream, and exits with code 129.\n\nNote: Make sure you quote the result when passing it to `eval`.  See\nbelow for an example.\n\nInput Format\n~~~~~~~~~~~~\n\n'git rev-parse --parseopt' input format is fully text based. It has two parts,\nseparated by a line that contains only `--`. The lines before the separator\n(should be one or more) are used for the usage.\nThe lines after the separator describe the options.\n\nEach line of options has this format:\n\n------------\n<opt-spec><flags>*<arg-hint>? SP+ help LF\n------------\n\n`<opt-spec>`::\n\tits format is the short option character, then the long option name\n\tseparated by a comma. Both parts are not required, though at least one\n\tis necessary. May not contain any of the `<flags>` characters.\n\t`h,help`, `dry-run` and `f` are examples of correct `<opt-spec>`.\n\n`<flags>`::\n\t`<flags>` are of `*`, `=`, `?` or `!`.\n\t* Use `=` if the option takes an argument.\n\n\t* Use `?` to mean that the option takes an optional argument. You\n\t  probably want to use the `--stuck-long` mode to be able to\n\t  unambiguously parse the optional argument.\n\n\t* Use `*` to mean that this option should not be listed in the usage\n\t  generated for the `-h` argument. It's shown for `--help-all` as\n\t  documented in linkgit:gitcli[7].\n\n\t* Use `!` to not make the corresponding negated long option available.\n\n`<arg-hint>`::\n\t`<arg-hint>`, if specified, is used as a name of the argument in the\n\thelp output, for options that take arguments. `<arg-hint>` is\n\tterminated by the first whitespace.  It is customary to use a\n\tdash to separate words in a multi-word argument hint.\n\nThe remainder of the line, after stripping the spaces, is used\nas the help associated to the option.\n\nBlank lines are ignored, and lines that don't match this specification are used\nas option group headers (start the line with a space to create such\nlines on purpose).\n\nExample\n~~~~~~~\n\n------------\nOPTS_SPEC=\"\\\nsome-command [<options>] <args>...\n\nsome-command does foo and bar!\n--\nh,help    show the help\n\nfoo       some nifty option --foo\nbar=      some cool option --bar with an argument\nbaz=arg   another cool option --baz with a named argument\nqux?path  qux may take a path argument but has meaning by itself\n\n  An option group Header\nC?        option C with an optional argument\"\n\neval \"$(echo \"$OPTS_SPEC\" | git rev-parse --parseopt -- \"$@\" || echo exit $?)\"\n------------\n\n\nUsage text\n~~~~~~~~~~\n\nWhen `\"$@\"` is `-h` or `--help` in the above example, the following\nusage text would be shown:\n\n------------\nusage: some-command [<options>] <args>...\n\n    some-command does foo and bar!\n\n    -h, --help            show the help\n    --foo                 some nifty option --foo\n    --bar ...             some cool option --bar with an argument\n    --baz <arg>           another cool option --baz with a named argument\n    --qux[=<path>]        qux may take a path argument but has meaning by itself\n\nAn option group Header\n    -C[...]               option C with an optional argument\n------------\n\nSQ-QUOTE\n--------\n\nIn `--sq-quote` mode, 'git rev-parse' echoes on the standard output a\nsingle line suitable for `sh(1)` `eval`. This line is made by\nnormalizing the arguments following `--sq-quote`. Nothing other than\nquoting the arguments is done.\n\nIf you want command input to still be interpreted as usual by\n'git rev-parse' before the output is shell quoted, see the `--sq`\noption.\n\nExample\n~~~~~~~\n\n------------\n$ cat >your-git-script.sh <<\\EOF\n#!/bin/sh\nargs=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\ncommand=\"git frotz -n24 $args\"          # and use it inside a handcrafted\n\t\t\t\t\t# command line\neval \"$command\"\nEOF\n\n$ sh your-git-script.sh \"a b'c\"\n------------\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 14832,
            "end_index": 14851,
            "value": "\n* Print the object name of the current commit:\n+\n------------\n$ git rev-parse --verify HEAD\n------------\n\n* Print the commit object name from the revision in the $REV shell variable:\n+\n------------\n$ git rev-parse --verify --end-of-options $REV^{commit}\n------------\n+\nThis will error out if $REV is empty or not a valid revision.\n\n* Similar to above:\n+\n------------\n$ git rev-parse --default master --verify --end-of-options $REV\n------------\n+\nbut if $REV is empty, the commit object name from master will be printed.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 15372,
            "end_index": 15381,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-revert.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-revert - Revert some existing commits\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 81,
            "end_index": 100,
            "value": "[verse]\n'git revert' [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>...\n'git revert' (--continue | --skip | --abort | --quit)\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 244,
            "end_index": 269,
            "value": "\nGiven one or more existing commits, revert the changes that the\nrelated patches introduce, and record some new commits that record\nthem.  This requires your working tree to be clean (no modifications\nfrom the HEAD commit).\n\nNote: 'git revert' is used to record some new commits to reverse the\neffect of some earlier commits (often only a faulty one).  If you want to\nthrow away all uncommitted changes in your working directory, you\nshould see linkgit:git-reset[1], particularly the `--hard` option.  If\nyou want to extract specific files as they were in another commit, you\nshould see linkgit:git-restore[1], specifically the `--source`\noption. Take care with these alternatives as\nboth will discard uncommitted changes in your working directory.\n\nSee \"Reset, restore and revert\" in linkgit:git[1] for the differences\nbetween the three commands.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1117,
            "end_index": 1134,
            "value": "\n<commit>...::\n\tCommits to revert.\n\tFor a more complete list of ways to spell commit names, see\n\tlinkgit:gitrevisions[7].\n\tSets of commits can also be given but no traversal is done by\n\tdefault, see linkgit:git-rev-list[1] and its `--no-walk`\n\toption.\n\n-e::\n--edit::\n\tWith this option, 'git revert' will let you edit the commit\n\tmessage prior to committing the revert. This is the default if\n\tyou run the command from a terminal.\n\n-m parent-number::\n--mainline parent-number::\n\tUsually you cannot revert a merge because you do not know which\n\tside of the merge should be considered the mainline.  This\n\toption specifies the parent number (starting from 1) of\n\tthe mainline and allows revert to reverse the change\n\trelative to the specified parent.\n+\nReverting a merge commit declares that you will never want the tree changes\nbrought in by the merge.  As a result, later merges will only bring in tree\nchanges introduced by commits that are not ancestors of the previously\nreverted merge.  This may or may not be what you want.\n+\nSee the link:howto/revert-a-faulty-merge.html[revert-a-faulty-merge How-To] for\nmore details.\n\n--no-edit::\n\tWith this option, 'git revert' will not start the commit\n\tmessage editor.\n\n--cleanup=<mode>::\n\tThis option determines how the commit message will be cleaned up before\n\tbeing passed on to the commit machinery. See linkgit:git-commit[1] for more\n\tdetails. In particular, if the '<mode>' is given a value of `scissors`,\n\tscissors will be appended to `MERGE_MSG` before being passed on in the case\n\tof a conflict.\n\n-n::\n--no-commit::\n\tUsually the command automatically creates some commits with\n\tcommit log messages stating which commits were\n\treverted.  This flag applies the changes necessary\n\tto revert the named commits to your working tree\n\tand the index, but does not make the commits.  In addition,\n\twhen this option is used, your index does not have to match\n\tthe HEAD commit.  The revert is done against the\n\tbeginning state of your index.\n+\nThis is useful when reverting more than one commits'\neffect to your index in a row.\n\n-S[<keyid>]::\n--gpg-sign[=<keyid>]::\n--no-gpg-sign::\n\tGPG-sign commits. The `keyid` argument is optional and\n\tdefaults to the committer identity; if specified, it must be\n\tstuck to the option without a space. `--no-gpg-sign` is useful to\n\tcountermand both `commit.gpgSign` configuration variable, and\n\tearlier `--gpg-sign`.\n\n-s::\n--signoff::\n\tAdd a `Signed-off-by` trailer at the end of the commit message.\n\tSee the signoff option in linkgit:git-commit[1] for more information.\n\n--strategy=<strategy>::\n\tUse the given merge strategy.  Should only be used once.\n\tSee the MERGE STRATEGIES section in linkgit:git-merge[1]\n\tfor details.\n\n-X<option>::\n--strategy-option=<option>::\n\tPass the merge strategy-specific option through to the\n\tmerge strategy.  See linkgit:git-merge[1] for details.\n\n--rerere-autoupdate::\n--no-rerere-autoupdate::\n\tAllow the rerere mechanism to update the index with the\n\tresult of auto-conflict resolution if possible.\n\nSEQUENCER SUBCOMMANDS\n---------------------\ninclude::sequencer.txt[]\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 4215,
            "end_index": 4234,
            "value": "`git revert HEAD~3`::\n\n\tRevert the changes specified by the fourth last commit in HEAD\n\tand create a new commit with the reverted changes.\n\n`git revert -n master~5..master~2`::\n\n\tRevert the changes done by commits from the fifth last commit\n\tin master (included) to the third last commit in master\n\t(included), but do not create any commit with the reverted\n\tchanges. The revert only modifies the working tree and the\n\tindex.\n\nSEE ALSO\n--------\nlinkgit:git-cherry-pick[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4706,
            "end_index": 4715,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-rm.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 20,
            "end_index": 31,
            "value": "git-rm - Remove files from the working tree and from the index\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 94,
            "end_index": 113,
            "value": "[verse]\n'git rm' [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]\n\t  [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 274,
            "end_index": 299,
            "value": "Remove files matching pathspec from the index, or from the working tree\nand the index. `git rm` will not remove a file from just your working\ndirectory. (There is no option to remove a file only from the working\ntree and yet keep it in the index; use `/bin/rm` if you want to do\nthat.) The files being removed have to be identical to the tip of the\nbranch, and no updates to their contents can be staged in the index,\nthough that default behavior can be overridden with the `-f` option.\nWhen `--cached` is given, the staged content has to\nmatch either the tip of the branch or the file on disk,\nallowing the file to be removed from just the index.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 948,
            "end_index": 965,
            "value": "\n<pathspec>...::\n\tFiles to remove.  A leading directory name (e.g. `dir` to remove\n\t`dir/file1` and `dir/file2`) can be given to remove all files in\n\tthe directory, and recursively all sub-directories, but this\n\trequires the `-r` option to be explicitly given.\n+\nThe command removes only the paths that are known to Git.\n+\nFile globbing matches across directory boundaries.  Thus, given two\ndirectories `d` and `d2`, there is a difference between using\n`git rm 'd*'` and `git rm 'd/*'`, as the former will also remove all\nof directory `d2`.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n\n-f::\n--force::\n\tOverride the up-to-date check.\n\n-n::\n--dry-run::\n\tDon't actually remove any file(s).  Instead, just show\n\tif they exist in the index and would otherwise be removed\n\tby the command.\n\n-r::\n        Allow recursive removal when a leading directory name is\n        given.\n\n\\--::\n\tThis option can be used to separate command-line options from\n\tthe list of files, (useful when filenames might be mistaken\n\tfor command-line options).\n\n--cached::\n\tUse this option to unstage and remove paths only from the index.\n\tWorking tree files, whether modified or not, will be\n\tleft alone.\n\n--ignore-unmatch::\n\tExit with a zero status even if no files matched.\n\n-q::\n--quiet::\n\t`git rm` normally outputs one line (in the form of an `rm` command)\n\tfor each file removed. This option suppresses that output.\n\n--pathspec-from-file=<file>::\n\tPathspec is passed in `<file>` instead of commandline args. If\n\t`<file>` is exactly `-` then standard input is used. Pathspec\n\telements are separated by LF or CR/LF. Pathspec elements can be\n\tquoted as explained for the configuration variable `core.quotePath`\n\t(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\n\tglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tOnly meaningful with `--pathspec-from-file`. Pathspec elements are\n\tseparated with NUL character and all other characters are taken\n\tliterally (including newlines and quotes).\n\n\nREMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM\n--------------------------------------------------------\nThere is no option for `git rm` to remove from the index only\nthe paths that have disappeared from the filesystem. However,\ndepending on the use case, there are several ways that can be\ndone.\n\nUsing ``git commit -a''\n~~~~~~~~~~~~~~~~~~~~~~~\nIf you intend that your next commit should record all modifications\nof tracked files in the working tree and record all removals of\nfiles that have been removed from the working tree with `rm`\n(as opposed to `git rm`), use `git commit -a`, as it will\nautomatically notice and record all removals.  You can also have a\nsimilar effect without committing by using `git add -u`.\n\nUsing ``git add -A''\n~~~~~~~~~~~~~~~~~~~~\nWhen accepting a new code drop for a vendor branch, you probably\nwant to record both the removal of paths and additions of new paths\nas well as modifications of existing paths.\n\nTypically you would first remove all tracked files from the working\ntree using this command:\n\n----------------\ngit ls-files -z | xargs -0 rm -f\n----------------\n\nand then untar the new code in the working tree. Alternately\nyou could 'rsync' the changes into the working tree.\n\nAfter that, the easiest way to record all removals, additions, and\nmodifications in the working tree is:\n\n----------------\ngit add -A\n----------------\n\nSee linkgit:git-add[1].\n\nOther ways\n~~~~~~~~~~\nIf all you really want to do is to remove from the index the files\nthat are no longer present in the working tree (perhaps because\nyour working tree is dirty so that you cannot use `git commit -a`),\nuse the following command:\n\n----------------\ngit diff --name-only --diff-filter=D -z | xargs -0 git rm --cached\n----------------\n"
        },
        "SUBMODULES": {
            "name": "SUBMODULES",
            "start_index": 4726,
            "end_index": 4749,
            "value": "Only submodules using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will be removed from the work\ntree, as their repository lives inside the .git directory of the\nsuperproject. If a submodule (or one of those nested inside it)\nstill uses a .git directory, `git rm` will move the submodules\ngit directory into the superprojects git directory to protect\nthe submodule's history. If it exists the submodule.<name> section\nin the linkgit:gitmodules[5] file will also be removed and that file\nwill be staged (unless --cached or -n are used).\n\nA submodule is considered up to date when the HEAD is the same as\nrecorded in the index, no tracked files are modified and no untracked\nfiles that aren't ignored are present in the submodules work tree.\nIgnored files are deemed expendable and won't stop a submodule's work\ntree from being removed.\n\nIf you only want to remove the local checkout of a submodule from your\nwork tree without committing the removal, use linkgit:git-submodule[1] `deinit`\ninstead. Also see linkgit:gitsubmodules[7] for details on submodule removal.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5843,
            "end_index": 5862,
            "value": "`git rm Documentation/\\*.txt`::\n\tRemoves all `*.txt` files from the index that are under the\n\t`Documentation` directory and any of its subdirectories.\n+\nNote that the asterisk `*` is quoted from the shell in this\nexample; this lets Git, and not the shell, expand the pathnames\nof files and subdirectories under the `Documentation/` directory.\n\n`git rm -f git-*.sh`::\n\tBecause this example lets the shell expand the asterisk\n\t(i.e. you are listing the files explicitly), it\n\tdoes not remove `subdir/git-foo.sh`.\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 6373,
            "end_index": 6384,
            "value": "Each time a superproject update removes a populated submodule\n(e.g. when switching between commits before and after the removal) a\nstale submodule checkout will remain in the old location. Removing the\nold directory is only safe when it uses a gitfile, as otherwise the\nhistory of the submodule will be deleted too. This step will be\nobsolete when recursive submodule update has been implemented.\n\nSEE ALSO\n--------\nlinkgit:git-add[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6819,
            "end_index": 6828,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-send-email.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-send-email - Send a collection of patches as emails\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 104,
            "end_index": 123,
            "value": "[verse]\n'git send-email' [<options>] <file|directory|rev-list options>...\n'git send-email' --dump-aliases\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 230,
            "end_index": 255,
            "value": "Takes the patches given on the command line and emails them out.\nPatches can be specified as files, directories (which will send all\nfiles in the directory), or directly as a revision list.  In the\nlast case, any format accepted by linkgit:git-format-patch[1] can\nbe passed to git send-email.\n\nThe header of the email is configurable via command-line options.  If not\nspecified on the command line, the user will be prompted with a ReadLine\nenabled interface to provide the necessary information.\n\nThere are two formats accepted for patch files:\n\n1. mbox format files\n+\nThis is what linkgit:git-format-patch[1] generates.  Most headers and MIME\nformatting are ignored.\n\n2. The original format used by Greg Kroah-Hartman's 'send_lots_of_email.pl'\n   script\n+\nThis format expects the first line of the file to contain the \"Cc:\" value\nand the \"Subject:\" of the message as the second line.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1142,
            "end_index": 1159,
            "value": "\nComposing\n~~~~~~~~~\n\n--annotate::\n\tReview and edit each patch you're about to send. Default is the value\n\tof `sendemail.annotate`. See the CONFIGURATION section for\n\t`sendemail.multiEdit`.\n\n--bcc=<address>,...::\n\tSpecify a \"Bcc:\" value for each email. Default is the value of\n\t`sendemail.bcc`.\n+\nThis option may be specified multiple times.\n\n--cc=<address>,...::\n\tSpecify a starting \"Cc:\" value for each email.\n\tDefault is the value of `sendemail.cc`.\n+\nThis option may be specified multiple times.\n\n--compose::\n\tInvoke a text editor (see GIT_EDITOR in linkgit:git-var[1])\n\tto edit an introductory message for the patch series.\n+\nWhen `--compose` is used, git send-email will use the From, Subject, and\nIn-Reply-To headers specified in the message. If the body of the message\n(what you type after the headers and a blank line) only contains blank\n(or Git: prefixed) lines, the summary won't be sent, but From, Subject,\nand In-Reply-To headers will be used unless they are removed.\n+\nMissing From or In-Reply-To headers will be prompted for.\n+\nSee the CONFIGURATION section for `sendemail.multiEdit`.\n\n--from=<address>::\n\tSpecify the sender of the emails.  If not specified on the command line,\n\tthe value of the `sendemail.from` configuration option is used.  If\n\tneither the command-line option nor `sendemail.from` are set, then the\n\tuser will be prompted for the value.  The default for the prompt will be\n\tthe value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not\n\tset, as returned by \"git var -l\".\n\n--reply-to=<address>::\n\tSpecify the address where replies from recipients should go to.\n\tUse this if replies to messages should go to another address than what\n\tis specified with the --from parameter.\n\n--in-reply-to=<identifier>::\n\tMake the first mail (or all the mails with `--no-thread`) appear as a\n\treply to the given Message-Id, which avoids breaking threads to\n\tprovide a new patch series.\n\tThe second and subsequent emails will be sent as replies according to\n\tthe `--[no-]chain-reply-to` setting.\n+\nSo for example when `--thread` and `--no-chain-reply-to` are specified, the\nsecond and subsequent patches will be replies to the first one like in the\nillustration below where `[PATCH v2 0/3]` is in reply to `[PATCH 0/2]`:\n+\n  [PATCH 0/2] Here is what I did...\n    [PATCH 1/2] Clean up and tests\n    [PATCH 2/2] Implementation\n    [PATCH v2 0/3] Here is a reroll\n      [PATCH v2 1/3] Clean up\n      [PATCH v2 2/3] New tests\n      [PATCH v2 3/3] Implementation\n+\nOnly necessary if --compose is also set.  If --compose\nis not set, this will be prompted for.\n\n--subject=<string>::\n\tSpecify the initial subject of the email thread.\n\tOnly necessary if --compose is also set.  If --compose\n\tis not set, this will be prompted for.\n\n--to=<address>,...::\n\tSpecify the primary recipient of the emails generated. Generally, this\n\twill be the upstream maintainer of the project involved. Default is the\n\tvalue of the `sendemail.to` configuration value; if that is unspecified,\n\tand --to-cmd is not specified, this will be prompted for.\n+\nThis option may be specified multiple times.\n\n--8bit-encoding=<encoding>::\n\tWhen encountering a non-ASCII message or subject that does not\n\tdeclare its encoding, add headers/quoting to indicate it is\n\tencoded in <encoding>.  Default is the value of the\n\t'sendemail.assume8bitEncoding'; if that is unspecified, this\n\twill be prompted for if any non-ASCII files are encountered.\n+\nNote that no attempts whatsoever are made to validate the encoding.\n\n--compose-encoding=<encoding>::\n\tSpecify encoding of compose message. Default is the value of the\n\t'sendemail.composeencoding'; if that is unspecified, UTF-8 is assumed.\n\n--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)::\n\tSpecify the transfer encoding to be used to send the message over SMTP.\n\t7bit will fail upon encountering a non-ASCII message.  quoted-printable\n\tcan be useful when the repository contains files that contain carriage\n\treturns, but makes the raw patch email file (as saved from a MUA) much\n\tharder to inspect manually.  base64 is even more fool proof, but also\n\teven more opaque.  auto will use 8bit when possible, and quoted-printable\n\totherwise.\n+\nDefault is the value of the `sendemail.transferEncoding` configuration\nvalue; if that is unspecified, default to `auto`.\n\n--xmailer::\n--no-xmailer::\n\tAdd (or prevent adding) the \"X-Mailer:\" header.  By default,\n\tthe header is added, but it can be turned off by setting the\n\t`sendemail.xmailer` configuration variable to `false`.\n\nSending\n~~~~~~~\n\n--envelope-sender=<address>::\n\tSpecify the envelope sender used to send the emails.\n\tThis is useful if your default address is not the address that is\n\tsubscribed to a list. In order to use the 'From' address, set the\n\tvalue to \"auto\". If you use the sendmail binary, you must have\n\tsuitable privileges for the -f parameter.  Default is the value of the\n\t`sendemail.envelopeSender` configuration variable; if that is\n\tunspecified, choosing the envelope sender is left to your MTA.\n\n--smtp-encryption=<encryption>::\n\tSpecify the encryption to use, either 'ssl' or 'tls'.  Any other\n\tvalue reverts to plain SMTP.  Default is the value of\n\t`sendemail.smtpEncryption`.\n\n--smtp-domain=<FQDN>::\n\tSpecifies the Fully Qualified Domain Name (FQDN) used in the\n\tHELO/EHLO command to the SMTP server.  Some servers require the\n\tFQDN to match your IP address.  If not set, git send-email attempts\n\tto determine your FQDN automatically.  Default is the value of\n\t`sendemail.smtpDomain`.\n\n--smtp-auth=<mechanisms>::\n\tWhitespace-separated list of allowed SMTP-AUTH mechanisms. This setting\n\tforces using only the listed mechanisms. Example:\n+\n------\n$ git send-email --smtp-auth=\"PLAIN LOGIN GSSAPI\" ...\n------\n+\nIf at least one of the specified mechanisms matches the ones advertised by the\nSMTP server and if it is supported by the utilized SASL library, the mechanism\nis used for authentication. If neither 'sendemail.smtpAuth' nor `--smtp-auth`\nis specified, all mechanisms supported by the SASL library can be used. The\nspecial value 'none' maybe specified to completely disable authentication\nindependently of `--smtp-user`\n\n--smtp-pass[=<password>]::\n\tPassword for SMTP-AUTH. The argument is optional: If no\n\targument is specified, then the empty string is used as\n\tthe password. Default is the value of `sendemail.smtpPass`,\n\thowever `--smtp-pass` always overrides this value.\n+\nFurthermore, passwords need not be specified in configuration files\nor on the command line. If a username has been specified (with\n`--smtp-user` or a `sendemail.smtpUser`), but no password has been\nspecified (with `--smtp-pass` or `sendemail.smtpPass`), then\na password is obtained using 'git-credential'.\n\n--no-smtp-auth::\n\tDisable SMTP authentication. Short hand for `--smtp-auth=none`\n\n--smtp-server=<host>::\n\tIf set, specifies the outgoing SMTP server to use (e.g.\n\t`smtp.example.com` or a raw IP address).  Alternatively it can\n\tspecify a full pathname of a sendmail-like program instead;\n\tthe program must support the `-i` option.  Default value can\n\tbe specified by the `sendemail.smtpServer` configuration\n\toption; the built-in default is to search for `sendmail` in\n\t`/usr/sbin`, `/usr/lib` and $PATH if such program is\n\tavailable, falling back to `localhost` otherwise.\n\n--smtp-server-port=<port>::\n\tSpecifies a port different from the default port (SMTP\n\tservers typically listen to smtp port 25, but may also listen to\n\tsubmission port 587, or the common SSL smtp port 465);\n\tsymbolic port names (e.g. \"submission\" instead of 587)\n\tare also accepted. The port can also be set with the\n\t`sendemail.smtpServerPort` configuration variable.\n\n--smtp-server-option=<option>::\n\tIf set, specifies the outgoing SMTP server option to use.\n\tDefault value can be specified by the `sendemail.smtpServerOption`\n\tconfiguration option.\n+\nThe --smtp-server-option option must be repeated for each option you want\nto pass to the server. Likewise, different lines in the configuration files\nmust be used for each option.\n\n--smtp-ssl::\n\tLegacy alias for '--smtp-encryption ssl'.\n\n--smtp-ssl-cert-path::\n\tPath to a store of trusted CA certificates for SMTP SSL/TLS\n\tcertificate validation (either a directory that has been processed\n\tby 'c_rehash', or a single file containing one or more PEM format\n\tcertificates concatenated together: see verify(1) -CAfile and\n\t-CApath for more information on these). Set it to an empty string\n\tto disable certificate verification. Defaults to the value of the\n\t`sendemail.smtpsslcertpath` configuration variable, if set, or the\n\tbacking SSL library's compiled-in default otherwise (which should\n\tbe the best choice on most platforms).\n\n--smtp-user=<user>::\n\tUsername for SMTP-AUTH. Default is the value of `sendemail.smtpUser`;\n\tif a username is not specified (with `--smtp-user` or `sendemail.smtpUser`),\n\tthen authentication is not attempted.\n\n--smtp-debug=0|1::\n\tEnable (1) or disable (0) debug output. If enabled, SMTP\n\tcommands and replies will be printed. Useful to debug TLS\n\tconnection and authentication problems.\n\n--batch-size=<num>::\n\tSome email servers (e.g. smtp.163.com) limit the number emails to be\n\tsent per session (connection) and this will lead to a failure when\n\tsending many messages.  With this option, send-email will disconnect after\n\tsending $<num> messages and wait for a few seconds (see --relogin-delay)\n\tand reconnect, to work around such a limit.  You may want to\n\tuse some form of credential helper to avoid having to retype\n\tyour password every time this happens.  Defaults to the\n\t`sendemail.smtpBatchSize` configuration variable.\n\n--relogin-delay=<int>::\n\tWaiting $<int> seconds before reconnecting to SMTP server. Used together\n\twith --batch-size option.  Defaults to the `sendemail.smtpReloginDelay`\n\tconfiguration variable.\n\nAutomating\n~~~~~~~~~~\n\n--no-[to|cc|bcc]::\n\tClears any list of \"To:\", \"Cc:\", \"Bcc:\" addresses previously\n\tset via config.\n\n--no-identity::\n\tClears the previously read value of `sendemail.identity` set\n\tvia config, if any.\n\n--to-cmd=<command>::\n\tSpecify a command to execute once per patch file which\n\tshould generate patch file specific \"To:\" entries.\n\tOutput of this command must be single email address per line.\n\tDefault is the value of 'sendemail.tocmd' configuration value.\n\n--cc-cmd=<command>::\n\tSpecify a command to execute once per patch file which\n\tshould generate patch file specific \"Cc:\" entries.\n\tOutput of this command must be single email address per line.\n\tDefault is the value of `sendemail.ccCmd` configuration value.\n\n--[no-]chain-reply-to::\n\tIf this is set, each email will be sent as a reply to the previous\n\temail sent.  If disabled with \"--no-chain-reply-to\", all emails after\n\tthe first will be sent as replies to the first email sent.  When using\n\tthis, it is recommended that the first file given be an overview of the\n\tentire patch series. Disabled by default, but the `sendemail.chainReplyTo`\n\tconfiguration variable can be used to enable it.\n\n--identity=<identity>::\n\tA configuration identity. When given, causes values in the\n\t'sendemail.<identity>' subsection to take precedence over\n\tvalues in the 'sendemail' section. The default identity is\n\tthe value of `sendemail.identity`.\n\n--[no-]signed-off-by-cc::\n\tIf this is set, add emails found in the `Signed-off-by` trailer or Cc: lines to the\n\tcc list. Default is the value of `sendemail.signedoffbycc` configuration\n\tvalue; if that is unspecified, default to --signed-off-by-cc.\n\n--[no-]cc-cover::\n\tIf this is set, emails found in Cc: headers in the first patch of\n\tthe series (typically the cover letter) are added to the cc list\n\tfor each email set. Default is the value of 'sendemail.cccover'\n\tconfiguration value; if that is unspecified, default to --no-cc-cover.\n\n--[no-]to-cover::\n\tIf this is set, emails found in To: headers in the first patch of\n\tthe series (typically the cover letter) are added to the to list\n\tfor each email set. Default is the value of 'sendemail.tocover'\n\tconfiguration value; if that is unspecified, default to --no-to-cover.\n\n--suppress-cc=<category>::\n\tSpecify an additional category of recipients to suppress the\n\tauto-cc of:\n+\n--\n- 'author' will avoid including the patch author.\n- 'self' will avoid including the sender.\n- 'cc' will avoid including anyone mentioned in Cc lines in the patch header\n  except for self (use 'self' for that).\n- 'bodycc' will avoid including anyone mentioned in Cc lines in the\n  patch body (commit message) except for self (use 'self' for that).\n- 'sob' will avoid including anyone mentioned in the Signed-off-by trailers except\n  for self (use 'self' for that).\n- 'misc-by' will avoid including anyone mentioned in Acked-by,\n  Reviewed-by, Tested-by and other \"-by\" lines in the patch body,\n  except Signed-off-by (use 'sob' for that).\n- 'cccmd' will avoid running the --cc-cmd.\n- 'body' is equivalent to 'sob' + 'bodycc' + 'misc-by'.\n- 'all' will suppress all auto cc values.\n--\n+\nDefault is the value of `sendemail.suppresscc` configuration value; if\nthat is unspecified, default to 'self' if --suppress-from is\nspecified, as well as 'body' if --no-signed-off-cc is specified.\n\n--[no-]suppress-from::\n\tIf this is set, do not add the From: address to the cc: list.\n\tDefault is the value of `sendemail.suppressFrom` configuration\n\tvalue; if that is unspecified, default to --no-suppress-from.\n\n--[no-]thread::\n\tIf this is set, the In-Reply-To and References headers will be\n\tadded to each email sent.  Whether each mail refers to the\n\tprevious email (`deep` threading per 'git format-patch'\n\twording) or to the first email (`shallow` threading) is\n\tgoverned by \"--[no-]chain-reply-to\".\n+\nIf disabled with \"--no-thread\", those headers will not be added\n(unless specified with --in-reply-to).  Default is the value of the\n`sendemail.thread` configuration value; if that is unspecified,\ndefault to --thread.\n+\nIt is up to the user to ensure that no In-Reply-To header already\nexists when 'git send-email' is asked to add it (especially note that\n'git format-patch' can be configured to do the threading itself).\nFailure to do so may not produce the expected result in the\nrecipient's MUA.\n\n\nAdministering\n~~~~~~~~~~~~~\n\n--confirm=<mode>::\n\tConfirm just before sending:\n+\n--\n- 'always' will always confirm before sending\n- 'never' will never confirm before sending\n- 'cc' will confirm before sending when send-email has automatically\n  added addresses from the patch to the Cc list\n- 'compose' will confirm before sending the first message when using --compose.\n- 'auto' is equivalent to 'cc' + 'compose'\n--\n+\nDefault is the value of `sendemail.confirm` configuration value; if that\nis unspecified, default to 'auto' unless any of the suppress options\nhave been specified, in which case default to 'compose'.\n\n--dry-run::\n\tDo everything except actually send the emails.\n\n--[no-]format-patch::\n\tWhen an argument may be understood either as a reference or as a file name,\n\tchoose to understand it as a format-patch argument (`--format-patch`)\n\tor as a file name (`--no-format-patch`). By default, when such a conflict\n\toccurs, git send-email will fail.\n\n--quiet::\n\tMake git-send-email less verbose.  One line per email should be\n\tall that is output.\n\n--[no-]validate::\n\tPerform sanity checks on patches.\n\tCurrently, validation means the following:\n+\n--\n\t\t*\tInvoke the sendemail-validate hook if present (see linkgit:githooks[5]).\n\t\t*\tWarn of patches that contain lines longer than\n\t\t\t998 characters unless a suitable transfer encoding\n\t\t\t('auto', 'base64', or 'quoted-printable') is used;\n\t\t\tthis is due to SMTP limits as described by\n\t\t\thttp://www.ietf.org/rfc/rfc5322.txt.\n--\n+\nDefault is the value of `sendemail.validate`; if this is not set,\ndefault to `--validate`.\n\n--force::\n\tSend emails even if safety checks would prevent it.\n\n\nInformation\n~~~~~~~~~~~\n\n--dump-aliases::\n\tInstead of the normal operation, dump the shorthand alias names from\n\tthe configured alias file(s), one per line in alphabetical order. Note,\n\tthis only includes the alias name and not its expanded email addresses.\n\tSee 'sendemail.aliasesfile' for more information about aliases.\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 17252,
            "end_index": 17281,
            "value": "\nsendemail.aliasesFile::\n\tTo avoid typing long email addresses, point this to one or more\n\temail aliases files.  You must also supply `sendemail.aliasFileType`.\n\nsendemail.aliasFileType::\n\tFormat of the file(s) specified in sendemail.aliasesFile. Must be\n\tone of 'mutt', 'mailrc', 'pine', 'elm', or 'gnus', or 'sendmail'.\n+\nWhat an alias file in each format looks like can be found in\nthe documentation of the email program of the same name. The\ndifferences and limitations from the standard formats are\ndescribed below:\n+\n--\nsendmail;;\n*\tQuoted aliases and quoted addresses are not supported: lines that\n\tcontain a `\"` symbol are ignored.\n*\tRedirection to a file (`/path/name`) or pipe (`|command`) is not\n\tsupported.\n*\tFile inclusion (`:include: /path/name`) is not supported.\n*\tWarnings are printed on the standard error output for any\n\texplicitly unsupported constructs, and any other lines that are not\n\trecognized by the parser.\n--\n\nsendemail.multiEdit::\n\tIf true (default), a single editor instance will be spawned to edit\n\tfiles you have to edit (patches when `--annotate` is used, and the\n\tsummary when `--compose` is used). If false, files will be edited one\n\tafter the other, spawning a new editor each time.\n\nsendemail.confirm::\n\tSets the default for whether to confirm before sending. Must be\n\tone of 'always', 'never', 'cc', 'compose', or 'auto'. See `--confirm`\n\tin the previous section for the meaning of these values.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 18716,
            "end_index": 18735,
            "value": "Use gmail as the smtp server\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTo use 'git send-email' to send your patches through the GMail SMTP server,\nedit ~/.gitconfig to specify your account settings:\n\n----\n[sendemail]\n\tsmtpEncryption = tls\n\tsmtpServer = smtp.gmail.com\n\tsmtpUser = yourname@gmail.com\n\tsmtpServerPort = 587\n----\n\nIf you have multi-factor authentication set up on your Gmail account, you will\nneed to generate an app-specific password for use with 'git send-email'. Visit\nhttps://security.google.com/settings/security/apppasswords to create it.\n\nIf you do not have multi-factor authentication set up on your Gmail account,\nyou will need to allow less secure app access. Visit\nhttps://myaccount.google.com/lesssecureapps to enable it.\n\nOnce your commits are ready to be sent to the mailing list, run the\nfollowing commands:\n\n\t$ git format-patch --cover-letter -M origin/master -o outgoing/\n\t$ edit outgoing/0000-*\n\t$ git send-email outgoing/*\n\nThe first time you run it, you will be prompted for your credentials.  Enter the\napp-specific or your regular password as appropriate.  If you have credential\nhelper configured (see linkgit:git-credential[1]), the password will be saved in\nthe credential store so you won't have to type it the next time.\n\nNote: the following core Perl modules that may be installed with your\ndistribution of Perl are required:\nMIME::Base64, MIME::QuotedPrint, Net::Domain and Net::SMTP.\nThese additional Perl modules are also required:\nAuthen::SASL and Mail::Address.\n\n\nSEE ALSO\n--------\nlinkgit:git-format-patch[1], linkgit:git-imap-send[1], mbox(5)\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 20313,
            "end_index": 20322,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-send-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-send-pack - Push objects over Git protocol to another repository\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 115,
            "end_index": 134,
            "value": "[verse]\n'git send-pack' [--all] [--dry-run] [--force] [--receive-pack=<git-receive-pack>]\n\t\t[--verbose] [--thin] [--atomic]\n\t\t[--[no-]signed|--signed=(true|false|if-asked)]\n\t\t[<host>:]<directory> [<ref>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 341,
            "end_index": 366,
            "value": "Usually you would want to use 'git push', which is a\nhigher-level wrapper of this command, instead. See linkgit:git-push[1].\n\nInvokes 'git-receive-pack' on a possibly remote repository, and\nupdates it from the current repository, sending named refs.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 617,
            "end_index": 634,
            "value": "\n--receive-pack=<git-receive-pack>::\n\tPath to the 'git-receive-pack' program on the remote\n\tend.  Sometimes useful when pushing to a remote\n\trepository over ssh, and you do not have the program in\n\ta directory on the default $PATH.\n\n--exec=<git-receive-pack>::\n\tSame as --receive-pack=<git-receive-pack>.\n\n--all::\n\tInstead of explicitly specifying which refs to update,\n\tupdate all heads that locally exist.\n\n--stdin::\n\tTake the list of refs from stdin, one per line. If there\n\tare refs specified on the command line in addition to this\n\toption, then the refs from stdin are processed after those\n\ton the command line.\n+\nIf `--stateless-rpc` is specified together with this option then\nthe list of refs must be in packet format (pkt-line). Each ref must\nbe in a separate packet, and the list must end with a flush packet.\n\n--dry-run::\n\tDo everything except actually send the updates.\n\n--force::\n\tUsually, the command refuses to update a remote ref that\n\tis not an ancestor of the local ref used to overwrite it.\n\tThis flag disables the check.  What this means is that\n\tthe remote repository can lose commits; use it with\n\tcare.\n\n--verbose::\n\tRun verbosely.\n\n--thin::\n\tSend a \"thin\" pack, which records objects in deltified form based\n\ton objects not included in the pack to reduce network traffic.\n\n--atomic::\n\tUse an atomic transaction for updating the refs. If any of the refs\n\tfails to update then the entire push will fail without changing any\n\trefs.\n\n--[no-]signed::\n--signed=(true|false|if-asked)::\n\tGPG-sign the push request to update refs on the receiving\n\tside, to allow it to be checked by the hooks and/or be\n\tlogged.  If `false` or `--no-signed`, no signing will be\n\tattempted.  If `true` or `--signed`, the push will fail if the\n\tserver does not support signed pushes.  If set to `if-asked`,\n\tsign if and only if the server supports signed pushes.  The push\n\twill also fail if the actual call to `gpg --sign` fails.  See\n\tlinkgit:git-receive-pack[1] for the details on the receiving end.\n\n--push-option=<string>::\n\tPass the specified string as a push option for consumption by\n\thooks on the server side.  If the server doesn't support push\n\toptions, error out.  See linkgit:git-push[1] and\n\tlinkgit:githooks[5] for details.\n\n<host>::\n\tA remote host to house the repository.  When this\n\tpart is specified, 'git-receive-pack' is invoked via\n\tssh.\n\n<directory>::\n\tThe repository to update.\n\n<ref>...::\n\tThe remote refs to update.\n\n\nSPECIFYING THE REFS\n-------------------\n\nThere are three ways to specify which refs to update on the\nremote end.\n\nWith `--all` flag, all refs that exist locally are transferred to\nthe remote side.  You cannot specify any '<ref>' if you use\nthis flag.\n\nWithout `--all` and without any '<ref>', the heads that exist\nboth on the local side and on the remote side are updated.\n\nWhen one or more '<ref>' are specified explicitly (whether on the\ncommand line or via `--stdin`), it can be either a\nsingle pattern, or a pair of such pattern separated by a colon\n\":\" (this means that a ref name cannot have a colon in it).  A\nsingle pattern '<name>' is just a shorthand for '<name>:<name>'.\n\nEach pattern pair consists of the source side (before the colon)\nand the destination side (after the colon).  The ref to be\npushed is determined by finding a match that matches the source\nside, and where it is pushed is determined by using the\ndestination side. The rules used to match a ref are the same\nrules used by 'git rev-parse' to resolve a symbolic ref\nname. See linkgit:git-rev-parse[1].\n\n - It is an error if <src> does not match exactly one of the\n   local refs.\n\n - It is an error if <dst> matches more than one remote refs.\n\n - If <dst> does not match any remote ref, either\n\n   * it has to start with \"refs/\"; <dst> is used as the\n     destination literally in this case.\n\n   * <src> == <dst> and the ref that matched the <src> must not\n     exist in the set of remote refs; the ref matched <src>\n     locally is used as the name of the destination.\n\nWithout `--force`, the <src> ref is stored at the remote only if\n<dst> does not exist, or <dst> is a proper subset (i.e. an\nancestor) of <src>.  This check, known as \"fast-forward check\",\nis performed in order to avoid accidentally overwriting the\nremote ref and lose other peoples' commits from there.\n\nWith `--force`, the fast-forward check is disabled for all refs.\n\nOptionally, a <ref> parameter can be prefixed with a plus '+' sign\nto disable the fast-forward check only on that ref.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 5112,
            "end_index": 5121,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-sh-i18n--envsubst.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 60,
            "end_index": 71,
            "value": "git-sh-i18n--envsubst - Git's own envsubst(1) for i18n fallbacks\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 136,
            "end_index": 155,
            "value": "[verse]\neval_gettext () {\n\tprintf \"%s\" \"$1\" | (\n\t\texport PATH $('git sh-i18n{litdd}envsubst' --variables \"$1\");\n\t\t'git sh-i18n{litdd}envsubst' \"$1\"\n\t)\n}\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 308,
            "end_index": 333,
            "value": "\nThis is not a command the end user would want to run.  Ever.\nThis documentation is meant for people who are studying the\nplumbing scripts and/or are writing new ones.\n\n'git sh-i18n{litdd}envsubst' is Git's stripped-down copy of the GNU\n`envsubst(1)` program that comes with the GNU gettext package. It's\nused internally by linkgit:git-sh-i18n[1] to interpolate the variables\npassed to the `eval_gettext` function.\n\nNo promises are made about the interface, or that this\nprogram won't disappear without warning in the next version\nof Git. Don't use it.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 886,
            "end_index": 895,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-sh-i18n.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 30,
            "end_index": 41,
            "value": "git-sh-i18n - Git's i18n setup code for shell scripts\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'. \"$(git --exec-path)/git-sh-i18n\"'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 159,
            "end_index": 184,
            "value": "\nThis is not a command the end user would want to run.  Ever.\nThis documentation is meant for people who are studying the\nPorcelain-ish scripts and/or are writing new ones.\n\nThe 'git sh-i18n scriptlet is designed to be sourced (using\n`.`) by Git's porcelain programs implemented in shell\nscript. It provides wrappers for the GNU `gettext` and\n`eval_gettext` functions accessible through the `gettext.sh`\nscript, and provides pass-through fallbacks on systems\nwithout GNU gettext.\n"
        },
        "FUNCTIONS": {
            "name": "FUNCTIONS",
            "start_index": 664,
            "end_index": 685,
            "value": "\ngettext::\n\tCurrently a dummy fall-through function implemented as a wrapper\n\taround `printf(1)`. Will be replaced by a real gettext\n\timplementation in a later version.\n\neval_gettext::\n\tCurrently a dummy fall-through function implemented as a wrapper\n\taround `printf(1)` with variables expanded by the\n\tlinkgit:git-sh-i18n{litdd}envsubst[1] helper. Will be replaced by a\n\treal gettext implementation in a later version.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1105,
            "end_index": 1114,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-sh-setup.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-sh-setup - Common Git shell script setup code\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 93,
            "end_index": 112,
            "value": "[verse]\n'. \"$(git --exec-path)/git-sh-setup\"'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 158,
            "end_index": 183,
            "value": "\nThis is not a command the end user would want to run.  Ever.\nThis documentation is meant for people who are studying the\nPorcelain-ish scripts and/or are writing new ones.\n\nThe 'git sh-setup' scriptlet is designed to be sourced (using\n`.`) by other shell scripts to set up some variables pointing at\nthe normal Git directories and a few helper shell functions.\n\nBefore sourcing it, your script should set up a few variables;\n`USAGE` (and `LONG_USAGE`, if any) is used to define message\ngiven by `usage()` shell function.  `SUBDIRECTORY_OK` can be set\nif the script can run from a subdirectory of the working tree\n(some commands do not).\n\nThe scriptlet sets `GIT_DIR` and `GIT_OBJECT_DIRECTORY` shell\nvariables, but does *not* export them to the environment.\n"
        },
        "FUNCTIONS": {
            "name": "FUNCTIONS",
            "start_index": 942,
            "end_index": 963,
            "value": "\ndie::\n\texit after emitting the supplied error message to the\n\tstandard error stream.\n\nusage::\n\tdie with the usage message.\n\nset_reflog_action::\n\tSet `GIT_REFLOG_ACTION` environment to a given string (typically\n\tthe name of the program) unless it is already set.  Whenever\n\tthe script runs a `git` command that updates refs, a reflog\n\tentry is created using the value of this string to leave the\n\trecord of what command updated the ref.\n\ngit_editor::\n\truns an editor of user's choice (GIT_EDITOR, core.editor, VISUAL or\n\tEDITOR) on a given file, but error out if no editor is specified\n\tand the terminal is dumb.\n\nis_bare_repository::\n\toutputs `true` or `false` to the standard output stream\n\tto indicate if the repository is a bare repository\n\t(i.e. without an associated working tree).\n\ncd_to_toplevel::\n\truns chdir to the toplevel of the working tree.\n\nrequire_work_tree::\n\tchecks if the current directory is within the working tree\n\tof the repository, and otherwise dies.\n\nrequire_work_tree_exists::\n\tchecks if the working tree associated with the repository\n\texists, and otherwise dies.  Often done before calling\n\tcd_to_toplevel, which is impossible to do if there is no\n\tworking tree.\n\nrequire_clean_work_tree <action> [<hint>]::\n\tchecks that the working tree and index associated with the\n\trepository have no uncommitted changes to tracked files.\n\tOtherwise it emits an error message of the form `Cannot\n\t<action>: <reason>. <hint>`, and dies.  Example:\n+\n----------------\nrequire_clean_work_tree rebase \"Please commit or stash them.\"\n----------------\n\nget_author_ident_from_commit::\n\toutputs code for use with eval to set the GIT_AUTHOR_NAME,\n\tGIT_AUTHOR_EMAIL and GIT_AUTHOR_DATE variables for a given commit.\n\ncreate_virtual_base::\n\tmodifies the first file so only lines in common with the\n\tsecond file remain. If there is insufficient common material,\n\tthen the first file is left empty. The result is suitable\n\tas a virtual base input for a 3-way merge.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2930,
            "end_index": 2939,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-shell.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-shell - Restricted login shell for Git-only SSH access\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 97,
            "end_index": 116,
            "value": "[verse]\n'chsh' -s $(command -v git-shell) <user>\n'git clone' <user>`@localhost:/path/to/repo.git`\n'ssh' <user>`@localhost`\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 239,
            "end_index": 264,
            "value": "\nThis is a login shell for SSH accounts to provide restricted Git access.\nIt permits execution only of server-side Git commands implementing the\npull/push functionality, plus custom commands present in a subdirectory\nnamed `git-shell-commands` in the user's home directory.\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 538,
            "end_index": 557,
            "value": "\n'git shell' accepts the following commands after the `-c` option:\n\n'git receive-pack <argument>'::\n'git upload-pack <argument>'::\n'git upload-archive <argument>'::\n\tCall the corresponding server-side command to support\n\tthe client's 'git push', 'git fetch', or 'git archive --remote'\n\trequest.\n'cvs server'::\n\tImitate a CVS server.  See linkgit:git-cvsserver[1].\n\nIf a `~/git-shell-commands` directory is present, 'git shell' will\nalso handle other, custom commands by running\n\"`git-shell-commands/<command> <arguments>`\" from the user's home\ndirectory.\n\nINTERACTIVE USE\n---------------\n\nBy default, the commands above can be executed only with the `-c`\noption; the shell is not interactive.\n\nIf a `~/git-shell-commands` directory is present, 'git shell'\ncan also be run interactively (with no arguments).  If a `help`\ncommand is present in the `git-shell-commands` directory, it is\nrun to provide the user with an overview of allowed actions.  Then a\n\"git> \" prompt is presented at which one can enter any of the\ncommands from the `git-shell-commands` directory, or `exit` to close\nthe connection.\n\nGenerally this mode is used as an administrative interface to allow\nusers to list repositories they have access to, create, delete, or\nrename repositories, or change repository descriptions and\npermissions.\n\nIf a `no-interactive-login` command exists, then it is run and the\ninteractive shell is aborted.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1963,
            "end_index": 1982,
            "value": "\nTo disable interactive logins, displaying a greeting instead:\n\n----------------\n$ chsh -s /usr/bin/git-shell\n$ mkdir $HOME/git-shell-commands\n$ cat >$HOME/git-shell-commands/no-interactive-login <<\\EOF\n#!/bin/sh\nprintf '%s\\n' \"Hi $USER! You've successfully authenticated, but I do not\"\nprintf '%s\\n' \"provide interactive shell access.\"\nexit 128\nEOF\n$ chmod +x $HOME/git-shell-commands/no-interactive-login\n----------------\n\nTo enable git-cvsserver access (which should generally have the\n`no-interactive-login` example above as a prerequisite, as creating\nthe git-shell-commands directory allows interactive logins):\n\n----------------\n$ cat >$HOME/git-shell-commands/cvs <<\\EOF\nif ! test $# = 1 && test \"$1\" = \"server\"\nthen\n\techo >&2 \"git-cvsserver only handles \\\"server\\\"\"\n\texit 1\nfi\nexec git cvsserver server\nEOF\n$ chmod +x $HOME/git-shell-commands/cvs\n----------------\n\nSEE ALSO\n--------\nssh(1),\nlinkgit:git-daemon[1],\ncontrib/git-shell-commands/README\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2939,
            "end_index": 2948,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-shortlog.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-shortlog - Summarize 'git log' output\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 85,
            "end_index": 104,
            "value": "[verse]\n'git shortlog' [<options>] [<revision range>] [[--] <path>...]\ngit log --pretty=short | 'git shortlog' [<options>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 227,
            "end_index": 252,
            "value": "Summarizes 'git log' output in a format suitable for inclusion\nin release announcements. Each commit will be grouped by author and title.\n\nAdditionally, \"[PATCH]\" will be stripped from the commit description.\n\nIf no revisions are passed on the command line and either standard input\nis not a terminal or there is no current branch, 'git shortlog' will\noutput a summary of the log read from standard input, without\nreference to the current repository.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 703,
            "end_index": 720,
            "value": "\n-n::\n--numbered::\n\tSort output according to the number of commits per author instead\n\tof author alphabetic order.\n\n-s::\n--summary::\n\tSuppress commit description and provide a commit count summary only.\n\n-e::\n--email::\n\tShow the email address of each author.\n\n--format[=<format>]::\n\tInstead of the commit subject, use some other information to\n\tdescribe each commit.  '<format>' can be any string accepted\n\tby the `--format` option of 'git log', such as '* [%h] %s'.\n\t(See the \"PRETTY FORMATS\" section of linkgit:git-log[1].)\n\n\tEach pretty-printed commit will be rewrapped before it is shown.\n\n--group=<type>::\n\tGroup commits based on `<type>`. If no `--group` option is\n\tspecified, the default is `author`. `<type>` is one of:\n+\n--\n - `author`, commits are grouped by author\n - `committer`, commits are grouped by committer (the same as `-c`)\n - `trailer:<field>`, the `<field>` is interpreted as a case-insensitive\n   commit message trailer (see linkgit:git-interpret-trailers[1]). For\n   example, if your project uses `Reviewed-by` trailers, you might want\n   to see who has been reviewing with\n   `git shortlog -ns --group=trailer:reviewed-by`.\n+\nNote that commits that do not include the trailer will not be counted.\nLikewise, commits with multiple trailers (e.g., multiple signoffs) may\nbe counted more than once (but only once per unique trailer value in\nthat commit).\n+\nShortlog will attempt to parse each trailer value as a `name <email>`\nidentity. If successful, the mailmap is applied and the email is omitted\nunless the `--email` option is specified. If the value cannot be parsed\nas an identity, it will be taken literally and completely.\n--\n+\nIf `--group` is specified multiple times, commits are counted under each\nvalue (but again, only once per unique value in that commit). For\nexample, `git shortlog --group=author --group=trailer:co-authored-by`\ncounts both authors and co-authors.\n\n-c::\n--committer::\n\tThis is an alias for `--group=committer`.\n\n-w[<width>[,<indent1>[,<indent2>]]]::\n\tLinewrap the output by wrapping each line at `width`.  The first\n\tline of each entry is indented by `indent1` spaces, and the second\n\tand subsequent lines are indented by `indent2` spaces. `width`,\n\t`indent1`, and `indent2` default to 76, 6 and 9 respectively.\n+\nIf width is `0` (zero) then indent the lines of the output without wrapping\nthem.\n\n<revision range>::\n\tShow only commits in the specified revision range.  When no\n\t<revision range> is specified, it defaults to `HEAD` (i.e. the\n\twhole history leading to the current commit).  `origin..HEAD`\n\tspecifies all the commits reachable from the current commit\n\t(i.e. `HEAD`), but not from `origin`. For a complete list of\n\tways to spell <revision range>, see the \"Specifying Ranges\"\n\tsection of linkgit:gitrevisions[7].\n\n[--] <path>...::\n\tConsider only commits that are enough to explain how the files\n\tthat match the specified paths came to be.\n+\nPaths may need to be prefixed with `--` to separate them from\noptions or the revision range, when confusion arises.\n\n:git-shortlog: 1\ninclude::rev-list-options.txt[]\n\nMAPPING AUTHORS\n---------------\n\nSee linkgit:gitmailmap[5].\n\nNote that if `git shortlog` is run outside of a repository (to process\nlog contents on standard input), it will look for a `.mailmap` file in\nthe current directory.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 4020,
            "end_index": 4029,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-show-branch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-show-branch - Show branches and their commits\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 99,
            "end_index": 118,
            "value": "[verse]\n'git show-branch' [-a|--all] [-r|--remotes] [--topo-order | --date-order]\n\t\t[--current] [--color[=<when>] | --no-color] [--sparse]\n\t\t[--more=<n> | --list | --independent | --merge-base]\n\t\t[--no-name | --sha1-name] [--topics]\n\t\t[(<rev> | <glob>)...]\n'git show-branch' (-g|--reflog)[=<n>[,<base>]] [--list] [<ref>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 439,
            "end_index": 464,
            "value": "\nShows the commit ancestry graph starting from the commits named\nwith <rev>s or <glob>s (or all refs under refs/heads\nand/or refs/tags) semi-visually.\n\nIt cannot show more than 29 branches and commits at a time.\n\nIt uses `showbranch.default` multi-valued configuration items if\nno <rev> or <glob> is given on the command line.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 792,
            "end_index": 809,
            "value": "\n<rev>::\n\tArbitrary extended SHA-1 expression (see linkgit:gitrevisions[7])\n\tthat typically names a branch head or a tag.\n\n<glob>::\n\tA glob pattern that matches branch or tag names under\n\trefs/.  For example, if you have many topic\n\tbranches under refs/heads/topic, giving\n\t`topic/*` would show all of them.\n\n-r::\n--remotes::\n\tShow the remote-tracking branches.\n\n-a::\n--all::\n\tShow both remote-tracking branches and local branches.\n\n--current::\n\tWith this option, the command includes the current\n\tbranch to the list of revs to be shown when it is not\n\tgiven on the command line.\n\n--topo-order::\n        By default, the branches and their commits are shown in\n        reverse chronological order.  This option makes them\n        appear in topological order (i.e., descendant commits\n        are shown before their parents).\n\n--date-order::\n\tThis option is similar to `--topo-order` in the sense that no\n\tparent comes before all of its children, but otherwise commits\n\tare ordered according to their commit date.\n\n--sparse::\n\tBy default, the output omits merges that are reachable\n\tfrom only one tip being shown.  This option makes them\n\tvisible.\n\n--more=<n>::\n\tUsually the command stops output upon showing the commit\n\tthat is the common ancestor of all the branches.  This\n\tflag tells the command to go <n> more common commits\n\tbeyond that.  When <n> is negative, display only the\n\t<reference>s given, without showing the commit ancestry\n\ttree.\n\n--list::\n\tSynonym to `--more=-1`\n\n--merge-base::\n\tInstead of showing the commit list, determine possible\n\tmerge bases for the specified commits. All merge bases\n\twill be contained in all specified commits. This is\n\tdifferent from how linkgit:git-merge-base[1] handles\n\tthe case of three or more commits.\n\n--independent::\n\tAmong the <reference>s given, display only the ones that\n\tcannot be reached from any other <reference>.\n\n--no-name::\n\tDo not show naming strings for each commit.\n\n--sha1-name::\n\tInstead of naming the commits using the path to reach\n\tthem from heads (e.g. \"master~2\" to mean the grandparent\n\tof \"master\"), name them with the unique prefix of their\n\tobject names.\n\n--topics::\n\tShows only commits that are NOT on the first branch given.\n\tThis helps track topic branches by hiding any commit that\n\tis already in the main line of development.  When given\n\t\"git show-branch --topics master topic1 topic2\", this\n\twill show the revisions given by \"git rev-list {caret}master\n\ttopic1 topic2\"\n\n-g::\n--reflog[=<n>[,<base>]] [<ref>]::\n\tShows <n> most recent ref-log entries for the given\n\tref.  If <base> is given, <n> entries going back from\n\tthat entry.  <base> can be specified as count or date.\n\tWhen no explicit <ref> parameter is given, it defaults to the\n\tcurrent branch (or `HEAD` if it is detached).\n\n--color[=<when>]::\n\tColor the status sign (one of these: `*` `!` `+` `-`) of each commit\n\tcorresponding to the branch it's in.\n\tThe value must be always (the default), never, or auto.\n\n--no-color::\n\tTurn off colored output, even when the configuration file gives the\n\tdefault to color output.\n\tSame as `--color=never`.\n\nNote that --more, --list, --independent and --merge-base options\nare mutually exclusive.\n\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 3985,
            "end_index": 4000,
            "value": "Given N <references>, the first N lines are the one-line\ndescription from their commit message.  The branch head that is\npointed at by $GIT_DIR/HEAD is prefixed with an asterisk `*`\ncharacter while other heads are prefixed with a `!` character.\n\nFollowing these N lines, one-line log for each commit is\ndisplayed, indented N places.  If a commit is on the I-th\nbranch, the I-th indentation character shows a `+` sign;\notherwise it shows a space.  Merge commits are denoted by\na `-` sign.  Each commit shows a short name that\ncan be used as an extended SHA-1 to name that commit.\n\nThe following example shows three branches, \"master\", \"fixes\"\nand \"mhf\":\n\n------------------------------------------------\n$ git show-branch master fixes mhf\n* [master] Add 'git show-branch'.\n ! [fixes] Introduce \"reset type\" flag to \"git reset\"\n  ! [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n---\n  + [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n  + [mhf~1] Use git-octopus when pulling more than one heads.\n +  [fixes] Introduce \"reset type\" flag to \"git reset\"\n  + [mhf~2] \"git fetch --force\".\n  + [mhf~3] Use .git/remote/origin, not .git/branches/origin.\n  + [mhf~4] Make \"git pull\" and \"git fetch\" default to origin\n  + [mhf~5] Infamous 'octopus merge'\n  + [mhf~6] Retire git-parse-remote.\n  + [mhf~7] Multi-head fetch.\n  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.\n*++ [master] Add 'git show-branch'.\n------------------------------------------------\n\nThese three branches all forked from a common commit, [master],\nwhose commit message is \"Add \\'git show-branch'\".\nThe \"fixes\" branch adds one commit \"Introduce \"reset type\" flag to\n\"git reset\"\". The \"mhf\" branch adds many other commits.\nThe current branch is \"master\".\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 5764,
            "end_index": 5783,
            "value": "\nIf you keep your primary branches immediately under\n`refs/heads`, and topic branches in subdirectories of\nit, having the following in the configuration file may help:\n\n------------\n[showbranch]\n\tdefault = --topo-order\n\tdefault = heads/*\n\n------------\n\nWith this, `git show-branch` without extra parameters would show\nonly the primary branches.  In addition, if you happen to be on\nyour topic branch, it is shown as well.\n\n------------\n$ git show-branch --reflog=\"10,1 hour ago\" --list master\n------------\n\nshows 10 reflog entries going back from the tip as of 1 hour ago.\nWithout `--list`, the output also shows how these tips are\ntopologically related with each other.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6454,
            "end_index": 6463,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-show-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-show-index - Show packed archive index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 91,
            "end_index": 110,
            "value": "[verse]\n'git show-index' [--object-format=<hash-algorithm>]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 171,
            "end_index": 196,
            "value": "Read the `.idx` file for a Git packfile (created with\nlinkgit:git-pack-objects[1] or linkgit:git-index-pack[1]) from the\nstandard input, and dump its contents. The output consists of one object\nper line, with each line containing two or three space-separated\ncolumns:\n\n  - the first column is the offset in bytes of the object within the\n    corresponding packfile\n\n  - the second column is the object id of the object\n\n  - if the index version is 2 or higher, the third column contains the\n    CRC32 of the object data\n\nThe objects are output in the order in which they are found in the index\nfile, which should be (in a correctly constructed file) sorted by object\nid.\n\nNote that you can get more information on a packfile by calling\nlinkgit:git-verify-pack[1]. However, as this command considers only the\nindex file itself, it's both faster and more flexible.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1059,
            "end_index": 1076,
            "value": "\n--object-format=<hash-algorithm>::\n\tSpecify the given object format (hash algorithm) for the index file.  The\n\tvalid values are 'sha1' and (if enabled) 'sha256'.  The default is the\n\talgorithm for the current repository (set by `extensions.objectFormat`), or\n\t'sha1' if no value is set or outside a repository..\n+\ninclude::object-format-disclaimer.txt[]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1431,
            "end_index": 1440,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-show-ref.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-show-ref - List references in a local repository\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 96,
            "end_index": 115,
            "value": "[verse]\n'git show-ref' [-q|--quiet] [--verify] [--head] [-d|--dereference]\n\t     [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]\n\t     [--heads] [--] [<pattern>...]\n'git show-ref' --exclude-existing[=<pattern>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 322,
            "end_index": 347,
            "value": "\nDisplays references available in a local repository along with the associated\ncommit IDs. Results can be filtered using a pattern and tags can be\ndereferenced into object IDs. Additionally, it can be used to test whether a\nparticular ref exists.\n\nBy default, shows the tags, heads, and remote refs.\n\nThe --exclude-existing form is a filter that does the inverse. It reads\nrefs from stdin, one ref per line, and shows those that don't exist in\nthe local repository.\n\nUse of this utility is encouraged in favor of directly accessing files under\nthe `.git` directory.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 913,
            "end_index": 930,
            "value": "\n--head::\n\n\tShow the HEAD reference, even if it would normally be filtered out.\n\n--heads::\n--tags::\n\n\tLimit to \"refs/heads\" and \"refs/tags\", respectively.  These options\n\tare not mutually exclusive; when given both, references stored in\n\t\"refs/heads\" and \"refs/tags\" are displayed.\n\n-d::\n--dereference::\n\n\tDereference tags into object IDs as well. They will be shown with \"{caret}{}\"\n\tappended.\n\n-s::\n--hash[=<n>]::\n\n\tOnly show the SHA-1 hash, not the reference name. When combined with\n\t--dereference the dereferenced tag will still be shown after the SHA-1.\n\n--verify::\n\n\tEnable stricter reference checking by requiring an exact ref path.\n\tAside from returning an error code of 1, it will also print an error\n\tmessage if `--quiet` was not specified.\n\n--abbrev[=<n>]::\n\n\tAbbreviate the object name.  When using `--hash`, you do\n\tnot have to say `--hash --abbrev`; `--hash=n` would do.\n\n-q::\n--quiet::\n\n\tDo not print any results to stdout. When combined with `--verify` this\n\tcan be used to silently check if a reference exists.\n\n--exclude-existing[=<pattern>]::\n\n\tMake 'git show-ref' act as a filter that reads refs from stdin of the\n\tform \"`^(?:<anything>\\s)?<refname>(?:\\^{})?$`\"\n\tand performs the following actions on each:\n\t(1) strip \"{caret}{}\" at the end of line if any;\n\t(2) ignore if pattern is provided and does not head-match refname;\n\t(3) warn if refname is not a well-formed refname and skip;\n\t(4) ignore if refname is a ref that exists in the local repository;\n\t(5) otherwise output the line.\n\n\n<pattern>...::\n\n\tShow references matching one or more patterns. Patterns are matched from\n\tthe end of the full name, and only complete parts are matched, e.g.\n\t'master' matches 'refs/heads/master', 'refs/remotes/origin/master',\n\t'refs/tags/jedi/master' but not 'refs/heads/mymaster' or\n\t'refs/remotes/master/jedi'.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 2754,
            "end_index": 2769,
            "value": "\nThe output is in the format: '<SHA-1 ID>' '<space>' '<reference name>'.\n\n-----------------------------------------------------------------------------\n$ git show-ref --head --dereference\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin\n3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c\n6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^{}\n055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4\n423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^{}\n...\n-----------------------------------------------------------------------------\n\nWhen using --hash (and not --dereference) the output format is: '<SHA-1 ID>'\n\n-----------------------------------------------------------------------------\n$ git show-ref --heads --hash\n2e3ba0114a1f52b47df29743d6915d056be13278\n185008ae97960c8d551adcd9e23565194651b5d1\n03adf42c988195b50e1a1935ba5fcbc39b2b029b\n...\n-----------------------------------------------------------------------------\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 3839,
            "end_index": 3858,
            "value": "\nTo show all references called \"master\", whether tags or heads or anything\nelse, and regardless of how deep in the reference naming hierarchy they are,\nuse:\n\n-----------------------------------------------------------------------------\n\tgit show-ref master\n-----------------------------------------------------------------------------\n\nThis will show \"refs/heads/master\" but also \"refs/remote/other-repo/master\",\nif such references exists.\n\nWhen using the `--verify` flag, the command requires an exact path:\n\n-----------------------------------------------------------------------------\n\tgit show-ref --verify refs/heads/master\n-----------------------------------------------------------------------------\n\nwill only match the exact branch called \"master\".\n\nIf nothing matches, 'git show-ref' will return an error code of 1,\nand in the case of verification, it will show an error message.\n\nFor scripting, you can ask it to be quiet with the \"--quiet\" flag, which\nallows you to do things like\n\n-----------------------------------------------------------------------------\n\tgit show-ref --quiet --verify -- \"refs/heads/$headname\" ||\n\t\techo \"$headname is not a valid branch\"\n-----------------------------------------------------------------------------\n\nto check whether a particular branch exists or not (notice how we don't\nactually want to show any results, and we want to use the full refname for it\nin order to not trigger the problem with ambiguous partial matches).\n\nTo show only tags, or only proper branch heads, use \"--tags\" and/or \"--heads\"\nrespectively (using both means that it shows tags and heads, but not other\nrandom references under the refs/ subdirectory).\n\nTo do automatic tag object dereferencing, use the \"-d\" or \"--dereference\"\nflag, so you can do\n\n-----------------------------------------------------------------------------\n\tgit show-ref --tags --dereference\n-----------------------------------------------------------------------------\n\nto get a listing of all tags together with what they dereference.\n"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 5886,
            "end_index": 5899,
            "value": "`.git/refs/*`, `.git/packed-refs`\n\nSEE ALSO\n--------\nlinkgit:git-for-each-ref[1],\nlinkgit:git-ls-remote[1],\nlinkgit:git-update-ref[1],\nlinkgit:gitrepository-layout[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6066,
            "end_index": 6075,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-show.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 24,
            "end_index": 35,
            "value": "git-show - Show various types of objects\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 77,
            "end_index": 96,
            "value": "[verse]\n'git show' [<options>] [<object>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 141,
            "end_index": 166,
            "value": "Shows one or more objects (blobs, trees, tags and commits).\n\nFor commits it shows the log message and textual diff. It also\npresents the merge commit in a special format as produced by\n'git diff-tree --cc'.\n\nFor tags, it shows the tag message and the referenced objects.\n\nFor trees, it shows the names (equivalent to 'git ls-tree'\nwith --name-only).\n\nFor plain blobs, it shows the plain contents.\n\nThe command takes options applicable to the 'git diff-tree' command to\ncontrol how the changes the commit introduces are shown.\n\nThis manual page describes only the most frequently used options.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 760,
            "end_index": 777,
            "value": "\n<object>...::\n\tThe names of objects to show (defaults to 'HEAD').\n\tFor a more complete list of ways to spell object names, see\n\t\"SPECIFYING REVISIONS\" section in linkgit:gitrevisions[7].\n\ninclude::pretty-options.txt[]\n\n\ninclude::pretty-formats.txt[]\n\n\nDIFF FORMATTING\n---------------\nThe options below can be used to change the way `git show` generates\ndiff output.\n\n:git-log: 1\n:diff-merges-default: `dense-combined`\ninclude::diff-options.txt[]\n\ninclude::diff-generate-patch.txt[]\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1260,
            "end_index": 1279,
            "value": "\n`git show v1.0.0`::\n\tShows the tag `v1.0.0`, along with the object the tags\n\tpoints at.\n\n`git show v1.0.0^{tree}`::\n\tShows the tree pointed to by the tag `v1.0.0`.\n\n`git show -s --format=%s v1.0.0^{commit}`::\n\tShows the subject of the commit pointed to by the\n\ttag `v1.0.0`.\n\n`git show next~10:Documentation/README`::\n\tShows the contents of the file `Documentation/README` as\n\tthey were current in the 10th last commit of the branch\n\t`next`.\n\n`git show master:Makefile master:t/Makefile`::\n\tConcatenates the contents of said Makefiles in the head\n\tof the branch `master`.\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 1852,
            "end_index": 1875,
            "value": "\ninclude::i18n.txt[]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1896,
            "end_index": 1905,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-sparse-checkout.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 46,
            "end_index": 57,
            "value": "git-sparse-checkout - Initialize and modify the sparse-checkout\nconfiguration, which reduces the checkout to a set of paths\ngiven by a list of patterns.\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 211,
            "end_index": 230,
            "value": "[verse]\n'git sparse-checkout <subcommand> [options]'\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 284,
            "end_index": 309,
            "value": "\nInitialize and modify the sparse-checkout configuration, which reduces\nthe checkout to a set of paths given by a list of patterns.\n\nTHIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER\nCOMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN\nTHE FUTURE.\n\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 593,
            "end_index": 612,
            "value": "'list'::\n\tDescribe the patterns in the sparse-checkout file.\n\n'init'::\n\tEnable the `core.sparseCheckout` setting. If the\n\tsparse-checkout file does not exist, then populate it with\n\tpatterns that match every file in the root directory and\n\tno other directories, then will remove all directories tracked\n\tby Git. Add patterns to the sparse-checkout file to\n\trepopulate the working directory.\n+\nTo avoid interfering with other worktrees, it first enables the\n`extensions.worktreeConfig` setting and makes sure to set the\n`core.sparseCheckout` setting in the worktree-specific config file.\n+\nWhen `--cone` is provided, the `core.sparseCheckoutCone` setting is\nalso set, allowing for better performance with a limited set of\npatterns (see 'CONE PATTERN SET' below).\n\n'set'::\n\tWrite a set of patterns to the sparse-checkout file, as given as\n\ta list of arguments following the 'set' subcommand. Update the\n\tworking directory to match the new patterns. Enable the\n\tcore.sparseCheckout config setting if it is not already enabled.\n+\nWhen the `--stdin` option is provided, the patterns are read from\nstandard in as a newline-delimited list instead of from the arguments.\n+\nWhen `core.sparseCheckoutCone` is enabled, the input list is considered a\nlist of directories instead of sparse-checkout patterns. The command writes\npatterns to the sparse-checkout file to include all files contained in those\ndirectories (recursively) as well as files that are siblings of ancestor\ndirectories. The input format matches the output of `git ls-tree --name-only`.\nThis includes interpreting pathnames that begin with a double quote (\") as\nC-style quoted strings.\n\n'add'::\n\tUpdate the sparse-checkout file to include additional patterns.\n\tBy default, these patterns are read from the command-line arguments,\n\tbut they can be read from stdin using the `--stdin` option. When\n\t`core.sparseCheckoutCone` is enabled, the given patterns are interpreted\n\tas directory names as in the 'set' subcommand.\n\n'reapply'::\n\tReapply the sparsity pattern rules to paths in the working tree.\n\tCommands like merge or rebase can materialize paths to do their\n\twork (e.g. in order to show you a conflict), and other\n\tsparse-checkout commands might fail to sparsify an individual file\n\t(e.g. because it has unstaged changes or conflicts).  In such\n\tcases, it can make sense to run `git sparse-checkout reapply` later\n\tafter cleaning up affected paths (e.g. resolving conflicts, undoing\n\tor committing changes, etc.).\n\n'disable'::\n\tDisable the `core.sparseCheckout` config setting, and restore the\n\tworking directory to include all files. Leaves the sparse-checkout\n\tfile intact so a later 'git sparse-checkout init' command may\n\treturn the working directory to the same state.\n\nSPARSE CHECKOUT\n---------------\n\n\"Sparse checkout\" allows populating the working directory sparsely.\nIt uses the skip-worktree bit (see linkgit:git-update-index[1]) to tell\nGit whether a file in the working directory is worth looking at. If\nthe skip-worktree bit is set, then the file is ignored in the working\ndirectory. Git will not populate the contents of those files, which\nmakes a sparse checkout helpful when working in a repository with many\nfiles, but only a few are important to the current user.\n\nThe `$GIT_DIR/info/sparse-checkout` file is used to define the\nskip-worktree reference bitmap. When Git updates the working\ndirectory, it updates the skip-worktree bits in the index based\non this file. The files matching the patterns in the file will\nappear in the working directory, and the rest will not.\n\nTo enable the sparse-checkout feature, run `git sparse-checkout init` to\ninitialize a simple sparse-checkout file and enable the `core.sparseCheckout`\nconfig setting. Then, run `git sparse-checkout set` to modify the patterns in\nthe sparse-checkout file.\n\nTo repopulate the working directory with all files, use the\n`git sparse-checkout disable` command.\n\n\nFULL PATTERN SET\n----------------\n\nBy default, the sparse-checkout file uses the same syntax as `.gitignore`\nfiles.\n\nWhile `$GIT_DIR/info/sparse-checkout` is usually used to specify what\nfiles are included, you can also specify what files are _not_ included,\nusing negative patterns. For example, to remove the file `unwanted`:\n\n----------------\n/*\n!unwanted\n----------------\n\n\nCONE PATTERN SET\n----------------\n\nThe full pattern set allows for arbitrary pattern matches and complicated\ninclusion/exclusion rules. These can result in O(N*M) pattern matches when\nupdating the index, where N is the number of patterns and M is the number\nof paths in the index. To combat this performance issue, a more restricted\npattern set is allowed when `core.sparseCheckoutCone` is enabled.\n\nThe accepted patterns in the cone pattern set are:\n\n1. *Recursive:* All paths inside a directory are included.\n\n2. *Parent:* All files immediately inside a directory are included.\n\nIn addition to the above two patterns, we also expect that all files in the\nroot directory are included. If a recursive pattern is added, then all\nleading directories are added as parent patterns.\n\nBy default, when running `git sparse-checkout init`, the root directory is\nadded as a parent pattern. At this point, the sparse-checkout file contains\nthe following patterns:\n\n----------------\n/*\n!/*/\n----------------\n\nThis says \"include everything in root, but nothing two levels below root.\"\n\nWhen in cone mode, the `git sparse-checkout set` subcommand takes a list of\ndirectories instead of a list of sparse-checkout patterns. In this mode,\nthe command `git sparse-checkout set A/B/C` sets the directory `A/B/C` as\na recursive pattern, the directories `A` and `A/B` are added as parent\npatterns. The resulting sparse-checkout file is now\n\n----------------\n/*\n!/*/\n/A/\n!/A/*/\n/A/B/\n!/A/B/*/\n/A/B/C/\n----------------\n\nHere, order matters, so the negative patterns are overridden by the positive\npatterns that appear lower in the file.\n\nIf `core.sparseCheckoutCone=true`, then Git will parse the sparse-checkout file\nexpecting patterns of these types. Git will warn if the patterns do not match.\nIf the patterns do match the expected format, then Git will use faster hash-\nbased algorithms to compute inclusion in the sparse-checkout.\n\nIn the cone mode case, the `git sparse-checkout list` subcommand will list the\ndirectories that define the recursive patterns. For the example sparse-checkout\nfile above, the output is as follows:\n\n--------------------------\n$ git sparse-checkout list\nA/B/C\n--------------------------\n\nIf `core.ignoreCase=true`, then the pattern-matching algorithm will use a\ncase-insensitive check. This corrects for case mismatched filenames in the\n'git sparse-checkout set' command to reflect the expected cone in the working\ndirectory.\n\n"
        },
        "SUBMODULES": {
            "name": "SUBMODULES",
            "start_index": 7339,
            "end_index": 7362,
            "value": "\nIf your repository contains one or more submodules, then submodules\nare populated based on interactions with the `git submodule` command.\nSpecifically, `git submodule init -- <path>` will ensure the submodule\nat `<path>` is present, while `git submodule deinit [-f] -- <path>`\nwill remove the files for the submodule at `<path>` (including any\nuntracked files, uncommitted changes, and unpushed history).  Similar\nto how sparse-checkout removes files from the working tree but still\nleaves entries in the index, deinitialized submodules are removed from\nthe working directory but still have an entry in the index.\n\nSince submodules may have unpushed changes or untracked files,\nremoving them could result in data loss.  Thus, changing sparse\ninclusion/exclusion rules will not cause an already checked out\nsubmodule to be removed from the working copy.  Said another way, just\nas `checkout` will not cause submodules to be automatically removed or\ninitialized even when switching between branches that remove or add\nsubmodules, using `sparse-checkout` to reduce or expand the scope of\n\"interesting\" files will not cause submodules to be automatically\ndeinitialized or initialized either.\n\nFurther, the above facts mean that there are multiple reasons that\n\"tracked\" files might not be present in the working copy: sparsity\npattern application from sparse-checkout, and submodule initialization\nstate.  Thus, commands like `git grep` that work on tracked files in\nthe working copy may return results that are limited by either or both\nof these restrictions.\n\n\nSEE ALSO\n--------\n\nlinkgit:git-read-tree[1]\nlinkgit:gitignore[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8987,
            "end_index": 8996,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-stage.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-stage - Add file contents to the staging area\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 88,
            "end_index": 107,
            "value": "[verse]\n'git stage' args...\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 136,
            "end_index": 161,
            "value": "\nThis is a synonym for linkgit:git-add[1].  Please refer to the\ndocumentation of that command.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 256,
            "end_index": 265,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-stash.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 26,
            "end_index": 37,
            "value": "git-stash - Stash the changes in a dirty working directory away\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 101,
            "end_index": 120,
            "value": "[verse]\n'git stash' list [<log-options>]\n'git stash' show [<diff-options>] [<stash>]\n'git stash' drop [-q|--quiet] [<stash>]\n'git stash' ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n'git stash' branch <branchname> [<stash>]\n'git stash' [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n\t     [-u|--include-untracked] [-a|--all] [-m|--message <message>]\n\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t     [--] [<pathspec>...]]\n'git stash' clear\n'git stash' create [<message>]\n'git stash' store [-m|--message <message>] [-q|--quiet] <commit>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 682,
            "end_index": 707,
            "value": "\nUse `git stash` when you want to record the current state of the\nworking directory and the index, but want to go back to a clean\nworking directory.  The command saves your local modifications away\nand reverts the working directory to match the `HEAD` commit.\n\nThe modifications stashed away by this command can be listed with\n`git stash list`, inspected with `git stash show`, and restored\n(potentially on top of a different commit) with `git stash apply`.\nCalling `git stash` without any arguments is equivalent to `git stash push`.\nA stash is by default listed as \"WIP on 'branchname' ...\", but\nyou can give a more descriptive message on the command line when\nyou create one.\n\nThe latest stash you created is stored in `refs/stash`; older\nstashes are found in the reflog of this reference and can be named using\nthe usual reflog syntax (e.g. `stash@{0}` is the most recently\ncreated stash, `stash@{1}` is the one before it, `stash@{2.hours.ago}`\nis also possible). Stashes may also be referenced by specifying just the\nstash index (e.g. the integer `n` is equivalent to `stash@{n}`).\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 1794,
            "end_index": 1813,
            "value": "\npush [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]::\n\n\tSave your local modifications to a new 'stash entry' and roll them\n\tback to HEAD (in the working tree and in the index).\n\tThe <message> part is optional and gives\n\tthe description along with the stashed state.\n+\nFor quickly making a snapshot, you can omit \"push\".  In this mode,\nnon-option arguments are not allowed to prevent a misspelled\nsubcommand from making an unwanted stash entry.  The two exceptions to this\nare `stash -p` which acts as alias for `stash push -p` and pathspec elements,\nwhich are allowed after a double hyphen `--` for disambiguation.\n\nsave [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]::\n\n\tThis option is deprecated in favour of 'git stash push'.  It\n\tdiffers from \"stash push\" in that it cannot take pathspec.\n\tInstead, all non-option arguments are concatenated to form the stash\n\tmessage.\n\nlist [<log-options>]::\n\n\tList the stash entries that you currently have.  Each 'stash entry' is\n\tlisted with its name (e.g. `stash@{0}` is the latest entry, `stash@{1}` is\n\tthe one before, etc.), the name of the branch that was current when the\n\tentry was made, and a short description of the commit the entry was\n\tbased on.\n+\n----------------------------------------------------------------\nstash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\nstash@{1}: On master: 9cc0589... Add git-stash\n----------------------------------------------------------------\n+\nThe command takes options applicable to the 'git log'\ncommand to control what is shown and how. See linkgit:git-log[1].\n\nshow [<diff-options>] [<stash>]::\n\n\tShow the changes recorded in the stash entry as a diff between the\n\tstashed contents and the commit back when the stash entry was first\n\tcreated.\n\tBy default, the command shows the diffstat, but it will accept any\n\tformat known to 'git diff' (e.g., `git stash show -p stash@{1}`\n\tto view the second most recent entry in patch form).\n\tYou can use stash.showStat and/or stash.showPatch config variables\n\tto change the default behavior.\n\npop [--index] [-q|--quiet] [<stash>]::\n\n\tRemove a single stashed state from the stash list and apply it\n\ton top of the current working tree state, i.e., do the inverse\n\toperation of `git stash push`. The working directory must\n\tmatch the index.\n+\nApplying the state can fail with conflicts; in this case, it is not\nremoved from the stash list. You need to resolve the conflicts by hand\nand call `git stash drop` manually afterwards.\n\napply [--index] [-q|--quiet] [<stash>]::\n\n\tLike `pop`, but do not remove the state from the stash list. Unlike `pop`,\n\t`<stash>` may be any commit that looks like a commit created by\n\t`stash push` or `stash create`.\n\nbranch <branchname> [<stash>]::\n\n\tCreates and checks out a new branch named `<branchname>` starting from\n\tthe commit at which the `<stash>` was originally created, applies the\n\tchanges recorded in `<stash>` to the new working tree and index.\n\tIf that succeeds, and `<stash>` is a reference of the form\n\t`stash@{<revision>}`, it then drops the `<stash>`.\n+\nThis is useful if the branch on which you ran `git stash push` has\nchanged enough that `git stash apply` fails due to conflicts. Since\nthe stash entry is applied on top of the commit that was HEAD at the\ntime `git stash` was run, it restores the originally stashed state\nwith no conflicts.\n\nclear::\n\tRemove all the stash entries. Note that those entries will then\n\tbe subject to pruning, and may be impossible to recover (see\n\t'Examples' below for a possible strategy).\n\ndrop [-q|--quiet] [<stash>]::\n\n\tRemove a single stash entry from the list of stash entries.\n\ncreate::\n\n\tCreate a stash entry (which is a regular commit object) and\n\treturn its object name, without storing it anywhere in the ref\n\tnamespace.\n\tThis is intended to be useful for scripts.  It is probably not\n\tthe command you want to use; see \"push\" above.\n\nstore::\n\n\tStore a given stash created via 'git stash create' (which is a\n\tdangling merge commit) in the stash ref, updating the stash\n\treflog.  This is intended to be useful for scripts.  It is\n\tprobably not the command you want to use; see \"push\" above.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 6126,
            "end_index": 6143,
            "value": "\n-a::\n--all::\n\tThis option is only valid for `push` and `save` commands.\n+\nAll ignored and untracked files are also stashed and then cleaned\nup with `git clean`.\n\n-u::\n--include-untracked::\n\tThis option is only valid for `push` and `save` commands.\n+\nAll untracked files are also stashed and then cleaned up with\n`git clean`.\n\n--index::\n\tThis option is only valid for `pop` and `apply` commands.\n+\nTries to reinstate not only the working tree's changes, but also\nthe index's ones. However, this can fail, when you have conflicts\n(which are stored in the index, where you therefore can no longer\napply the changes as they were originally).\n\n-k::\n--keep-index::\n--no-keep-index::\n\tThis option is only valid for `push` and `save` commands.\n+\nAll changes already added to the index are left intact.\n\n-p::\n--patch::\n\tThis option is only valid for `push` and `save` commands.\n+\nInteractively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the ``Interactive Mode'' section of linkgit:git-add[1]\nto learn how to operate the `--patch` mode.\n+\nThe `--patch` option implies `--keep-index`.  You can use\n`--no-keep-index` to override this.\n\n--pathspec-from-file=<file>::\n\tThis option is only valid for `push` command.\n+\nPathspec is passed in `<file>` instead of commandline args. If\n`<file>` is exactly `-` then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable `core.quotePath`\n(see linkgit:git-config[1]). See also `--pathspec-file-nul` and\nglobal `--literal-pathspecs`.\n\n--pathspec-file-nul::\n\tThis option is only valid for `push` command.\n+\nOnly meaningful with `--pathspec-from-file`. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes).\n\n-q::\n--quiet::\n\tThis option is only valid for `apply`, `drop`, `pop`, `push`,\n\t`save`, `store` commands.\n+\nQuiet, suppress feedback messages.\n\n\\--::\n\tThis option is only valid for `push` command.\n+\nSeparates pathspec from options for disambiguation purposes.\n\n<pathspec>...::\n\tThis option is only valid for `push` command.\n+\nThe new stash entry records the modified states only for the files\nthat match the pathspec.  The index entries and working tree files\nare then rolled back to the state in HEAD only for these files,\ntoo, leaving files that do not match the pathspec intact.\n+\nFor more details, see the 'pathspec' entry in linkgit:gitglossary[7].\n\n<stash>::\n\tThis option is only valid for `apply`, `branch`, `drop`, `pop`,\n\t`show` commands.\n+\nA reference of the form `stash@{<revision>}`. When no `<stash>` is\ngiven, the latest stash is assumed (that is, `stash@{0}`).\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 9099,
            "end_index": 9122,
            "value": "\nA stash entry is represented as a commit whose tree records the state\nof the working directory, and its first parent is the commit at `HEAD`\nwhen the entry was created.  The tree of the second parent records the\nstate of the index when the entry is made, and it is made a child of\nthe `HEAD` commit.  The ancestry graph looks like this:\n\n            .----W\n           /    /\n     -----H----I\n\nwhere `H` is the `HEAD` commit, `I` is a commit that records the state\nof the index, and `W` is a commit that records the state of the working\ntree.\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 9666,
            "end_index": 9685,
            "value": "\nPulling into a dirty tree::\n\nWhen you are in the middle of something, you learn that there are\nupstream changes that are possibly relevant to what you are\ndoing.  When your local changes do not conflict with the changes in\nthe upstream, a simple `git pull` will let you move forward.\n+\nHowever, there are cases in which your local changes do conflict with\nthe upstream changes, and `git pull` refuses to overwrite your\nchanges.  In such a case, you can stash your changes away,\nperform a pull, and then unstash, like this:\n+\n----------------------------------------------------------------\n$ git pull\n ...\nfile foobar not up to date, cannot merge.\n$ git stash\n$ git pull\n$ git stash pop\n----------------------------------------------------------------\n\nInterrupted workflow::\n\nWhen you are in the middle of something, your boss comes in and\ndemands that you fix something immediately.  Traditionally, you would\nmake a commit to a temporary branch to store your changes away, and\nreturn to your original branch to make the emergency fix, like this:\n+\n----------------------------------------------------------------\n# ... hack hack hack ...\n$ git switch -c my_wip\n$ git commit -a -m \"WIP\"\n$ git switch master\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git switch my_wip\n$ git reset --soft HEAD^\n# ... continue hacking ...\n----------------------------------------------------------------\n+\nYou can use 'git stash' to simplify the above, like this:\n+\n----------------------------------------------------------------\n# ... hack hack hack ...\n$ git stash\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git stash pop\n# ... continue hacking ...\n----------------------------------------------------------------\n\nTesting partial commits::\n\nYou can use `git stash push --keep-index` when you want to make two or\nmore commits out of the changes in the work tree, and you want to test\neach change before committing:\n+\n----------------------------------------------------------------\n# ... hack hack hack ...\n$ git add --patch foo            # add just first part to the index\n$ git stash push --keep-index    # save all other changes to the stash\n$ edit/build/test first part\n$ git commit -m 'First part'     # commit fully tested change\n$ git stash pop                  # prepare to work on all other changes\n# ... repeat above five steps until one commit remains ...\n$ edit/build/test remaining parts\n$ git commit foo -m 'Remaining parts'\n----------------------------------------------------------------\n\nRecovering stash entries that were cleared/dropped erroneously::\n\nIf you mistakenly drop or clear stash entries, they cannot be recovered\nthrough the normal safety mechanisms.  However, you can try the\nfollowing incantation to get a list of stash entries that are still in\nyour repository, but not reachable any more:\n+\n----------------------------------------------------------------\ngit fsck --unreachable |\ngrep commit | cut -d\\  -f3 |\nxargs git log --merges --no-walk --grep=WIP\n----------------------------------------------------------------\n\n\nSEE ALSO\n--------\nlinkgit:git-checkout[1],\nlinkgit:git-commit[1],\nlinkgit:git-reflog[1],\nlinkgit:git-reset[1],\nlinkgit:git-switch[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 12892,
            "end_index": 12901,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-status.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-status - Show the working tree status\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 82,
            "end_index": 101,
            "value": "[verse]\n'git status' [<options>...] [--] [<pathspec>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 158,
            "end_index": 183,
            "value": "Displays paths that have differences between the index file and the\ncurrent HEAD commit, paths that have differences between the working\ntree and the index file, and paths in the working tree that are not\ntracked by Git (and are not ignored by linkgit:gitignore[5]). The first\nare what you _would_ commit by running `git commit`; the second and\nthird are what you _could_ commit by running 'git add' before running\n`git commit`.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 612,
            "end_index": 629,
            "value": "\n-s::\n--short::\n\tGive the output in the short-format.\n\n-b::\n--branch::\n\tShow the branch and tracking info even in short-format.\n\n--show-stash::\n\tShow the number of entries currently stashed away.\n\n--porcelain[=<version>]::\n\tGive the output in an easy-to-parse format for scripts.\n\tThis is similar to the short output, but will remain stable\n\tacross Git versions and regardless of user configuration. See\n\tbelow for details.\n+\nThe version parameter is used to specify the format version.\nThis is optional and defaults to the original version 'v1' format.\n\n--long::\n\tGive the output in the long-format. This is the default.\n\n-v::\n--verbose::\n\tIn addition to the names of files that have been changed, also\n\tshow the textual changes that are staged to be committed\n\t(i.e., like the output of `git diff --cached`). If `-v` is specified\n\ttwice, then also show the changes in the working tree that\n\thave not yet been staged (i.e., like the output of `git diff`).\n\n-u[<mode>]::\n--untracked-files[=<mode>]::\n\tShow untracked files.\n+\n--\nThe mode parameter is used to specify the handling of untracked files.\nIt is optional: it defaults to 'all', and if specified, it must be\nstuck to the option (e.g. `-uno`, but not `-u no`).\n\nThe possible options are:\n\n\t- 'no'     - Show no untracked files.\n\t- 'normal' - Shows untracked files and directories.\n\t- 'all'    - Also shows individual files in untracked directories.\n\nWhen `-u` option is not used, untracked files and directories are\nshown (i.e. the same as specifying `normal`), to help you avoid\nforgetting to add newly created files.  Because it takes extra work\nto find untracked files in the filesystem, this mode may take some\ntime in a large working tree.\nConsider enabling untracked cache and split index if supported (see\n`git update-index --untracked-cache` and `git update-index\n--split-index`), Otherwise you can use `no` to have `git status`\nreturn more quickly without showing untracked files.\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in linkgit:git-config[1].\n--\n\n--ignore-submodules[=<when>]::\n\tIgnore changes to submodules when looking for changes. <when> can be\n\teither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\n\tUsing \"none\" will consider the submodule modified when it either contains\n\tuntracked or modified files or its HEAD differs from the commit recorded\n\tin the superproject and can be used to override any settings of the\n\t'ignore' option in linkgit:git-config[1] or linkgit:gitmodules[5]. When\n\t\"untracked\" is used submodules are not considered dirty when they only\n\tcontain untracked content (but they are still scanned for modified\n\tcontent). Using \"dirty\" ignores all changes to the work tree of submodules,\n\tonly changes to the commits stored in the superproject are shown (this was\n\tthe behavior before 1.7.0). Using \"all\" hides all changes to submodules\n\t(and suppresses the output of submodule summaries when the config option\n\t`status.submoduleSummary` is set).\n\n--ignored[=<mode>]::\n\tShow ignored files as well.\n+\n--\nThe mode parameter is used to specify the handling of ignored files.\nIt is optional: it defaults to 'traditional'.\n\nThe possible options are:\n\n\t- 'traditional' - Shows ignored files and directories, unless\n\t\t\t  --untracked-files=all is specified, in which case\n\t\t\t  individual files in ignored directories are\n\t\t\t  displayed.\n\t- 'no'\t        - Show no ignored files.\n\t- 'matching'    - Shows ignored files and directories matching an\n\t\t\t  ignore pattern.\n\nWhen 'matching' mode is specified, paths that explicitly match an\nignored pattern are shown. If a directory matches an ignore pattern,\nthen it is shown, but not paths contained in the ignored directory. If\na directory does not match an ignore pattern, but all contents are\nignored, then the directory is not shown, but all contents are shown.\n--\n\n-z::\n\tTerminate entries with NUL, instead of LF.  This implies\n\tthe `--porcelain=v1` output format if no other format is given.\n\n--column[=<options>]::\n--no-column::\n\tDisplay untracked files in columns. See configuration variable\n\t`column.status` for option syntax. `--column` and `--no-column`\n\twithout options are equivalent to 'always' and 'never'\n\trespectively.\n\n--ahead-behind::\n--no-ahead-behind::\n\tDisplay or do not display detailed ahead/behind counts for the\n\tbranch relative to its upstream branch.  Defaults to true.\n\n--renames::\n--no-renames::\n\tTurn on/off rename detection regardless of user configuration.\n\tSee also linkgit:git-diff[1] `--no-renames`.\n\n--find-renames[=<n>]::\n\tTurn on rename detection, optionally setting the similarity\n\tthreshold.\n\tSee also linkgit:git-diff[1] `--find-renames`.\n\n<pathspec>...::\n\tSee the 'pathspec' entry in linkgit:gitglossary[7].\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 5381,
            "end_index": 5396,
            "value": "The output from this command is designed to be used as a commit\ntemplate comment.\nThe default, long format, is designed to be human readable,\nverbose and descriptive.  Its contents and format are subject to change\nat any time.\n\nThe paths mentioned in the output, unlike many other Git commands, are\nmade relative to the current directory if you are working in a\nsubdirectory (this is on purpose, to help cutting and pasting). See\nthe status.relativePaths config option below.\n\nShort Format\n~~~~~~~~~~~~\n\nIn the short-format, the status of each path is shown as one of these\nforms\n\n\tXY PATH\n\tXY ORIG_PATH -> PATH\n\nwhere `ORIG_PATH` is where the renamed/copied contents came\nfrom. `ORIG_PATH` is only shown when the entry is renamed or\ncopied. The `XY` is a two-letter status code.\n\nThe fields (including the `->`) are separated from each other by a\nsingle space. If a filename contains whitespace or other nonprintable\ncharacters, that field will be quoted in the manner of a C string\nliteral: surrounded by ASCII double quote (34) characters, and with\ninterior special characters backslash-escaped.\n\nThere are three different types of states that are shown using this format, and\neach one uses the `XY` syntax differently:\n\n* When a merge is occurring and the merge was successful, or outside of a merge\n\tsituation, `X` shows the status of the index and `Y` shows the status of the\n\tworking tree.\n* When a merge conflict has occurred and has not yet been resolved, `X` and `Y`\n\tshow the state introduced by each head of the merge, relative to the common\n\tancestor. These paths are said to be _unmerged_.\n* When a path is untracked, `X` and `Y` are always the same, since they are\n\tunknown to the index. `??` is used for untracked paths. Ignored files are\n\tnot listed unless `--ignored` is used; if it is, ignored files are indicated\n\tby `!!`.\n\nNote that the term _merge_ here also includes rebases using the default\n`--merge` strategy, cherry-picks, and anything else using the merge machinery.\n\nIn the following table, these three classes are shown in separate sections, and\nthese characters are used for `X` and `Y` fields for the first two sections that\nshow tracked paths:\n\n* ' ' = unmodified\n* 'M' = modified\n* 'A' = added\n* 'D' = deleted\n* 'R' = renamed\n* 'C' = copied\n* 'U' = updated but unmerged\n\n....\nX          Y     Meaning\n-------------------------------------------------\n\t [AMD]   not updated\nM        [ MD]   updated in index\nA        [ MD]   added to index\nD                deleted from index\nR        [ MD]   renamed in index\nC        [ MD]   copied in index\n[MARC]           index and work tree matches\n[ MARC]     M    work tree changed since index\n[ MARC]     D    deleted in work tree\n[ D]        R    renamed in work tree\n[ D]        C    copied in work tree\n-------------------------------------------------\nD           D    unmerged, both deleted\nA           U    unmerged, added by us\nU           D    unmerged, deleted by them\nU           A    unmerged, added by them\nD           U    unmerged, deleted by us\nA           A    unmerged, both added\nU           U    unmerged, both modified\n-------------------------------------------------\n?           ?    untracked\n!           !    ignored\n-------------------------------------------------\n....\n\nSubmodules have more state and instead report\n\t\tM    the submodule has a different HEAD than\n\t\t     recorded in the index\n\t\tm    the submodule has modified content\n\t\t?    the submodule has untracked files\nsince modified content or untracked files in a submodule cannot be added\nvia `git add` in the superproject to prepare a commit.\n\n'm' and '?' are applied recursively. For example if a nested submodule\nin a submodule contains an untracked file, this is reported as '?' as well.\n\nIf -b is used the short-format status is preceded by a line\n\n    ## branchname tracking info\n\nPorcelain Format Version 1\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nVersion 1 porcelain format is similar to the short format, but is guaranteed\nnot to change in a backwards-incompatible way between Git versions or\nbased on user configuration. This makes it ideal for parsing by scripts.\nThe description of the short format above also describes the porcelain\nformat, with a few exceptions:\n\n1. The user's color.status configuration is not respected; color will\n   always be off.\n\n2. The user's status.relativePaths configuration is not respected; paths\n   shown will always be relative to the repository root.\n\nThere is also an alternate -z format recommended for machine parsing. In\nthat format, the status field is the same, but some other things\nchange.  First, the '\\->' is omitted from rename entries and the field\norder is reversed (e.g 'from \\-> to' becomes 'to from'). Second, a NUL\n(ASCII 0) follows each filename, replacing space as a field separator\nand the terminating newline (but a space still separates the status\nfield from the first filename).  Third, filenames containing special\ncharacters are not specially formatted; no quoting or\nbackslash-escaping is performed.\n\nAny submodule changes are reported as modified `M` instead of `m` or single `?`.\n\nPorcelain Format Version 2\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nVersion 2 format adds more detailed information about the state of\nthe worktree and changed items.  Version 2 also defines an extensible\nset of easy to parse optional headers.\n\nHeader lines start with \"#\" and are added in response to specific\ncommand line arguments.  Parsers should ignore headers they\ndon't recognize.\n\nBranch Headers\n^^^^^^^^^^^^^^\n\nIf `--branch` is given, a series of header lines are printed with\ninformation about the current branch.\n\n....\nLine                                     Notes\n------------------------------------------------------------\n# branch.oid <commit> | (initial)        Current commit.\n# branch.head <branch> | (detached)      Current branch.\n# branch.upstream <upstream_branch>      If upstream is set.\n# branch.ab +<ahead> -<behind>           If upstream is set and\n\t\t\t\t\t the commit is present.\n------------------------------------------------------------\n....\n\nChanged Tracked Entries\n^^^^^^^^^^^^^^^^^^^^^^^\n\nFollowing the headers, a series of lines are printed for tracked\nentries.  One of three different line formats may be used to describe\nan entry depending on the type of change.  Tracked entries are printed\nin an undefined order; parsers should allow for a mixture of the 3\nline types in any order.\n\nOrdinary changed entries have the following format:\n\n    1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>\n\nRenamed or copied entries have the following format:\n\n    2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>\n\n....\nField       Meaning\n--------------------------------------------------------\n<XY>        A 2 character field containing the staged and\n\t    unstaged XY values described in the short format,\n\t    with unchanged indicated by a \".\" rather than\n\t    a space.\n<sub>       A 4 character field describing the submodule state.\n\t    \"N...\" when the entry is not a submodule.\n\t    \"S<c><m><u>\" when the entry is a submodule.\n\t    <c> is \"C\" if the commit changed; otherwise \".\".\n\t    <m> is \"M\" if it has tracked changes; otherwise \".\".\n\t    <u> is \"U\" if there are untracked changes; otherwise \".\".\n<mH>        The octal file mode in HEAD.\n<mI>        The octal file mode in the index.\n<mW>        The octal file mode in the worktree.\n<hH>        The object name in HEAD.\n<hI>        The object name in the index.\n<X><score>  The rename or copy score (denoting the percentage\n\t    of similarity between the source and target of the\n\t    move or copy). For example \"R100\" or \"C75\".\n<path>      The pathname.  In a renamed/copied entry, this\n\t    is the target path.\n<sep>       When the `-z` option is used, the 2 pathnames are separated\n\t    with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)\n\t    byte separates them.\n<origPath>  The pathname in the commit at HEAD or in the index.\n\t    This is only present in a renamed/copied entry, and\n\t    tells where the renamed/copied contents came from.\n--------------------------------------------------------\n....\n\nUnmerged entries have the following format; the first character is\na \"u\" to distinguish from ordinary changed entries.\n\n    u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>\n\n....\nField       Meaning\n--------------------------------------------------------\n<XY>        A 2 character field describing the conflict type\n\t    as described in the short format.\n<sub>       A 4 character field describing the submodule state\n\t    as described above.\n<m1>        The octal file mode in stage 1.\n<m2>        The octal file mode in stage 2.\n<m3>        The octal file mode in stage 3.\n<mW>        The octal file mode in the worktree.\n<h1>        The object name in stage 1.\n<h2>        The object name in stage 2.\n<h3>        The object name in stage 3.\n<path>      The pathname.\n--------------------------------------------------------\n....\n\nOther Items\n^^^^^^^^^^^\n\nFollowing the tracked entries (and if requested), a series of\nlines will be printed for untracked and then ignored items\nfound in the worktree.\n\nUntracked items have the following format:\n\n    ? <path>\n\nIgnored items have the following format:\n\n    ! <path>\n\nPathname Format Notes and -z\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen the `-z` option is given, pathnames are printed as is and\nwithout any quoting and lines are terminated with a NUL (ASCII 0x00)\nbyte.\n\nWithout the `-z` option, pathnames with \"unusual\" characters are\nquoted as explained for the configuration variable `core.quotePath`\n(see linkgit:git-config[1]).\n\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 14989,
            "end_index": 15018,
            "value": "\nThe command honors `color.status` (or `status.color` -- they\nmean the same thing and the latter is kept for backward\ncompatibility) and `color.status.<slot>` configuration variables\nto colorize its output.\n\nIf the config variable `status.relativePaths` is set to false, then all\npaths shown are relative to the repository root, not to the current\ndirectory.\n\nIf `status.submoduleSummary` is set to a non zero number or true (identical\nto -1 or an unlimited number), the submodule summary will be enabled for\nthe long format and a summary of commits for modified submodules will be\nshown (see --summary-limit option of linkgit:git-submodule[1]). Please note\nthat the summary output from the status command will be suppressed for all\nsubmodules when `diff.ignoreSubmodules` is set to 'all' or only for those\nsubmodules where `submodule.<name>.ignore=all`. To also view the summary for\nignored submodules you can either use the --ignore-submodules=dirty command\nline option or the 'git submodule summary' command, which shows a similar\noutput but does not honor these settings.\n\nBACKGROUND REFRESH\n------------------\n\nBy default, `git status` will automatically refresh the index, updating\nthe cached stat information from the working tree and writing out the\nresult. Writing out the updated index is an optimization that isn't\nstrictly necessary (`status` computes the values for itself, but writing\nthem out is just to save subsequent programs from repeating our\ncomputation). When `status` is run in the background, the lock held\nduring the write may conflict with other simultaneous processes, causing\nthem to fail. Scripts running `status` in the background should consider\nusing `git --no-optional-locks status` (see linkgit:git[1] for details).\n\nSEE ALSO\n--------\nlinkgit:gitignore[5]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 16808,
            "end_index": 16817,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-stripspace.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-stripspace - Remove unnecessary whitespace\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 95,
            "end_index": 114,
            "value": "[verse]\n'git stripspace' [-s | --strip-comments]\n'git stripspace' [-c | --comment-lines]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 203,
            "end_index": 228,
            "value": "\nRead text, such as commit messages, notes, tags and branch\ndescriptions, from the standard input and clean it in the manner\nused by Git.\n\nWith no arguments, this will:\n\n- remove trailing whitespace from all lines\n- collapse multiple consecutive empty lines into one empty line\n- remove empty lines from the beginning and end of the input\n- add a missing '\\n' to the last line if necessary.\n\nIn the case where the input consists entirely of whitespace characters, no\noutput will be produced.\n\n*NOTE*: This is intended for cleaning metadata, prefer the `--whitespace=fix`\nmode of linkgit:git-apply[1] for correcting whitespace of patches or files in\nthe repository.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 893,
            "end_index": 910,
            "value": "\n-s::\n--strip-comments::\n\tSkip and remove all lines starting with comment character (default '#').\n\n-c::\n--comment-lines::\n\tPrepend comment character and blank to each line. Lines will automatically\n\tbe terminated with a newline. On empty lines, only the comment character\n\twill be prepended.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 1202,
            "end_index": 1221,
            "value": "\nGiven the following noisy input with '$' indicating the end of a line:\n\n---------\n|A brief introduction   $\n|   $\n|$\n|A new paragraph$\n|# with a commented-out line    $\n|explaining lots of stuff.$\n|$\n|# An old paragraph, also commented-out. $\n|      $\n|The end.$\n|  $\n---------\n\nUse 'git stripspace' with no arguments to obtain:\n\n---------\n|A brief introduction$\n|$\n|A new paragraph$\n|# with a commented-out line$\n|explaining lots of stuff.$\n|$\n|# An old paragraph, also commented-out.$\n|$\n|The end.$\n---------\n\nUse 'git stripspace --strip-comments' to obtain:\n\n---------\n|A brief introduction$\n|$\n|A new paragraph$\n|explaining lots of stuff.$\n|$\n|The end.$\n---------\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1890,
            "end_index": 1899,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-submodule.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 34,
            "end_index": 45,
            "value": "git-submodule - Initialize, update or inspect submodules\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 103,
            "end_index": 122,
            "value": "[verse]\n'git submodule' [--quiet] [--cached]\n'git submodule' [--quiet] add [<options>] [--] <repository> [<path>]\n'git submodule' [--quiet] status [--cached] [--recursive] [--] [<path>...]\n'git submodule' [--quiet] init [--] [<path>...]\n'git submodule' [--quiet] deinit [-f|--force] (--all|[--] <path>...)\n'git submodule' [--quiet] update [<options>] [--] [<path>...]\n'git submodule' [--quiet] set-branch [<options>] [--] <path>\n'git submodule' [--quiet] set-url [--] <path> <newurl>\n'git submodule' [--quiet] summary [<options>] [--] [<path>...]\n'git submodule' [--quiet] foreach [--recursive] <command>\n'git submodule' [--quiet] sync [--recursive] [--] [<path>...]\n'git submodule' [--quiet] absorbgitdirs [--] [<path>...]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 847,
            "end_index": 872,
            "value": "Inspects, updates and manages submodules.\n\nFor more information about submodules, see linkgit:gitsubmodules[7].\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 984,
            "end_index": 1003,
            "value": "With no arguments, shows the status of existing submodules.  Several\nsubcommands are available to perform operations on the submodules.\n\nadd [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]::\n\tAdd the given repository as a submodule at the given path\n\tto the changeset to be committed next to the current\n\tproject: the current project is termed the \"superproject\".\n+\n<repository> is the URL of the new submodule's origin repository.\nThis may be either an absolute URL, or (if it begins with ./\nor ../), the location relative to the superproject's default remote\nrepository (Please note that to specify a repository 'foo.git'\nwhich is located right next to a superproject 'bar.git', you'll\nhave to use `../foo.git` instead of `./foo.git` - as one might expect\nwhen following the rules for relative URLs - because the evaluation\nof relative URLs in Git is identical to that of relative directories).\n+\nThe default remote is the remote of the remote-tracking branch\nof the current branch. If no such remote-tracking branch exists or\nthe HEAD is detached, \"origin\" is assumed to be the default remote.\nIf the superproject doesn't have a default remote configured\nthe superproject is its own authoritative upstream and the current\nworking directory is used instead.\n+\nThe optional argument <path> is the relative location for the cloned\nsubmodule to exist in the superproject. If <path> is not given, the\ncanonical part of the source repository is used (\"repo\" for\n\"/path/to/repo.git\" and \"foo\" for \"host.xz:foo/.git\"). If <path>\nexists and is already a valid Git repository, then it is staged\nfor commit without cloning. The <path> is also used as the submodule's\nlogical name in its configuration entries unless `--name` is used\nto specify a logical name.\n+\nThe given URL is recorded into `.gitmodules` for use by subsequent users\ncloning the superproject. If the URL is given relative to the\nsuperproject's repository, the presumption is the superproject and\nsubmodule repositories will be kept together in the same relative\nlocation, and only the superproject's URL needs to be provided.\ngit-submodule will correctly locate the submodule using the relative\nURL in `.gitmodules`.\n\nstatus [--cached] [--recursive] [--] [<path>...]::\n\tShow the status of the submodules. This will print the SHA-1 of the\n\tcurrently checked out commit for each submodule, along with the\n\tsubmodule path and the output of 'git describe' for the\n\tSHA-1. Each SHA-1 will possibly be prefixed with `-` if the submodule is\n\tnot initialized, `+` if the currently checked out submodule commit\n\tdoes not match the SHA-1 found in the index of the containing\n\trepository and `U` if the submodule has merge conflicts.\n+\nIf `--cached` is specified, this command will instead print the SHA-1\nrecorded in the superproject for each submodule.\n+\nIf `--recursive` is specified, this command will recurse into nested\nsubmodules, and show their status as well.\n+\nIf you are only interested in changes of the currently initialized\nsubmodules with respect to the commit recorded in the index or the HEAD,\nlinkgit:git-status[1] and linkgit:git-diff[1] will provide that information\ntoo (and can also report changes to a submodule's work tree).\n\ninit [--] [<path>...]::\n\tInitialize the submodules recorded in the index (which were\n\tadded and committed elsewhere) by setting `submodule.$name.url`\n\tin .git/config. It uses the same setting from `.gitmodules` as\n\ta template. If the URL is relative, it will be resolved using\n\tthe default remote. If there is no default remote, the current\n\trepository will be assumed to be upstream.\n+\nOptional <path> arguments limit which submodules will be initialized.\nIf no path is specified and submodule.active has been configured, submodules\nconfigured to be active will be initialized, otherwise all submodules are\ninitialized.\n+\nWhen present, it will also copy the value of `submodule.$name.update`.\nThis command does not alter existing information in .git/config.\nYou can then customize the submodule clone URLs in .git/config\nfor your local setup and proceed to `git submodule update`;\nyou can also just use `git submodule update --init` without\nthe explicit 'init' step if you do not intend to customize\nany submodule locations.\n+\nSee the add subcommand for the definition of default remote.\n\ndeinit [-f|--force] (--all|[--] <path>...)::\n\tUnregister the given submodules, i.e. remove the whole\n\t`submodule.$name` section from .git/config together with their work\n\ttree. Further calls to `git submodule update`, `git submodule foreach`\n\tand `git submodule sync` will skip any unregistered submodules until\n\tthey are initialized again, so use this command if you don't want to\n\thave a local checkout of the submodule in your working tree anymore.\n+\nWhen the command is run without pathspec, it errors out,\ninstead of deinit-ing everything, to prevent mistakes.\n+\nIf `--force` is specified, the submodule's working tree will\nbe removed even if it contains local modifications.\n+\nIf you really want to remove a submodule from the repository and commit\nthat use linkgit:git-rm[1] instead. See linkgit:gitsubmodules[7] for removal\noptions.\n\nupdate [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--] [<path>...]::\n+\n--\nUpdate the registered submodules to match what the superproject\nexpects by cloning missing submodules, fetching missing commits\nin submodules and updating the working tree of\nthe submodules. The \"updating\" can be done in several ways depending\non command line options and the value of `submodule.<name>.update`\nconfiguration variable. The command line option takes precedence over\nthe configuration variable. If neither is given, a 'checkout' is performed.\nThe 'update' procedures supported both from the command line as well as\nthrough the `submodule.<name>.update` configuration are:\n\n\tcheckout;; the commit recorded in the superproject will be\n\t    checked out in the submodule on a detached HEAD.\n+\nIf `--force` is specified, the submodule will be checked out (using\n`git checkout --force`), even if the commit specified\nin the index of the containing repository already matches the commit\nchecked out in the submodule.\n\n\trebase;; the current branch of the submodule will be rebased\n\t    onto the commit recorded in the superproject.\n\n\tmerge;; the commit recorded in the superproject will be merged\n\t    into the current branch in the submodule.\n\nThe following 'update' procedures are only available via the\n`submodule.<name>.update` configuration variable:\n\n\tcustom command;; arbitrary shell command that takes a single\n\t    argument (the sha1 of the commit recorded in the\n\t    superproject) is executed. When `submodule.<name>.update`\n\t    is set to '!command', the remainder after the exclamation mark\n\t    is the custom command.\n\n\tnone;; the submodule is not updated.\n\nIf the submodule is not yet initialized, and you just want to use the\nsetting as stored in `.gitmodules`, you can automatically initialize the\nsubmodule with the `--init` option.\n\nIf `--recursive` is specified, this command will recurse into the\nregistered submodules, and update any nested submodules within.\n--\nset-branch (-b|--branch) <branch> [--] <path>::\nset-branch (-d|--default) [--] <path>::\n\tSets the default remote tracking branch for the submodule. The\n\t`--branch` option allows the remote branch to be specified. The\n\t`--default` option removes the submodule.<name>.branch configuration\n\tkey, which causes the tracking branch to default to the remote 'HEAD'.\n\nset-url [--] <path> <newurl>::\n\tSets the URL of the specified submodule to <newurl>. Then, it will\n\tautomatically synchronize the submodule's new remote URL\n\tconfiguration.\n\nsummary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<path>...]::\n\tShow commit summary between the given commit (defaults to HEAD) and\n\tworking tree/index. For a submodule in question, a series of commits\n\tin the submodule between the given super project commit and the\n\tindex or working tree (switched by `--cached`) are shown. If the option\n\t`--files` is given, show the series of commits in the submodule between\n\tthe index of the super project and the working tree of the submodule\n\t(this option doesn't allow to use the `--cached` option or to provide an\n\texplicit commit).\n+\nUsing the `--submodule=log` option with linkgit:git-diff[1] will provide that\ninformation too.\n\nforeach [--recursive] <command>::\n\tEvaluates an arbitrary shell command in each checked out submodule.\n\tThe command has access to the variables $name, $sm_path, $displaypath,\n\t$sha1 and $toplevel:\n\t$name is the name of the relevant submodule section in `.gitmodules`,\n\t$sm_path is the path of the submodule as recorded in the immediate\n\tsuperproject, $displaypath contains the relative path from the\n\tcurrent working directory to the submodules root directory,\n\t$sha1 is the commit as recorded in the immediate\n\tsuperproject, and $toplevel is the absolute path to the top-level\n\tof the immediate superproject.\n\tNote that to avoid conflicts with '$PATH' on Windows, the '$path'\n\tvariable is now a deprecated synonym of '$sm_path' variable.\n\tAny submodules defined in the superproject but not checked out are\n\tignored by this command. Unless given `--quiet`, foreach prints the name\n\tof each submodule before evaluating the command.\n\tIf `--recursive` is given, submodules are traversed recursively (i.e.\n\tthe given shell command is evaluated in nested submodules as well).\n\tA non-zero return from the command in any submodule causes\n\tthe processing to terminate. This can be overridden by adding '|| :'\n\tto the end of the command.\n+\nAs an example, the command below will show the path and currently\nchecked out commit for each submodule:\n+\n--------------\ngit submodule foreach 'echo $sm_path `git rev-parse HEAD`'\n--------------\n\nsync [--recursive] [--] [<path>...]::\n\tSynchronizes submodules' remote URL configuration setting\n\tto the value specified in `.gitmodules`. It will only affect those\n\tsubmodules which already have a URL entry in .git/config (that is the\n\tcase when they are initialized or freshly added). This is useful when\n\tsubmodule URLs change upstream and you need to update your local\n\trepositories accordingly.\n+\n`git submodule sync` synchronizes all submodules while\n`git submodule sync -- A` synchronizes submodule \"A\" only.\n+\nIf `--recursive` is specified, this command will recurse into the\nregistered submodules, and sync any nested submodules within.\n\nabsorbgitdirs::\n\tIf a git directory of a submodule is inside the submodule,\n\tmove the git directory of the submodule into its superproject's\n\t`$GIT_DIR/modules` path and then connect the git directory and\n\tits working directory by setting the `core.worktree` and adding\n\ta .git file pointing to the git directory embedded in the\n\tsuperprojects git directory.\n+\nA repository that was cloned independently and later added as a submodule or\nold setups have the submodules git directory inside the submodule instead of\nembedded into the superprojects git directory.\n+\nThis command is recursive by default.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 12228,
            "end_index": 12245,
            "value": "\n-q::\n--quiet::\n\tOnly print error messages.\n\n--progress::\n\tThis option is only valid for add and update commands.\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless -q\n\tis specified. This flag forces progress status even if the\n\tstandard error stream is not directed to a terminal.\n\n--all::\n\tThis option is only valid for the deinit command. Unregister all\n\tsubmodules in the working tree.\n\n-b <branch>::\n--branch <branch>::\n\tBranch of repository to add as submodule.\n\tThe name of the branch is recorded as `submodule.<name>.branch` in\n\t`.gitmodules` for `update --remote`.  A special value of `.` is used to\n\tindicate that the name of the branch in the submodule should be the\n\tsame name as the current branch in the current repository.  If the\n\toption is not specified, it defaults to the remote 'HEAD'.\n\n-f::\n--force::\n\tThis option is only valid for add, deinit and update commands.\n\tWhen running add, allow adding an otherwise ignored submodule path.\n\tWhen running deinit the submodule working trees will be removed even\n\tif they contain local changes.\n\tWhen running update (only effective with the checkout procedure),\n\tthrow away local changes in submodules when switching to a\n\tdifferent commit; and always run a checkout operation in the\n\tsubmodule, even if the commit listed in the index of the\n\tcontaining repository matches the commit checked out in the\n\tsubmodule.\n\n--cached::\n\tThis option is only valid for status and summary commands.  These\n\tcommands typically use the commit found in the submodule HEAD, but\n\twith this option, the commit stored in the index is used instead.\n\n--files::\n\tThis option is only valid for the summary command. This command\n\tcompares the commit in the index with that in the submodule HEAD\n\twhen this option is used.\n\n-n::\n--summary-limit::\n\tThis option is only valid for the summary command.\n\tLimit the summary size (number of commits shown in total).\n\tGiving 0 will disable the summary; a negative number means unlimited\n\t(the default). This limit only applies to modified submodules. The\n\tsize is always limited to 1 for added/deleted/typechanged submodules.\n\n--remote::\n\tThis option is only valid for the update command.  Instead of using\n\tthe superproject's recorded SHA-1 to update the submodule, use the\n\tstatus of the submodule's remote-tracking branch.  The remote used\n\tis branch's remote (`branch.<name>.remote`), defaulting to `origin`.\n\tThe remote branch used defaults to the remote `HEAD`, but the branch\n\tname may be overridden by setting the `submodule.<name>.branch`\n\toption in either `.gitmodules` or `.git/config` (with `.git/config`\n\ttaking precedence).\n+\nThis works for any of the supported update procedures (`--checkout`,\n`--rebase`, etc.).  The only change is the source of the target SHA-1.\nFor example, `submodule update --remote --merge` will merge upstream\nsubmodule changes into the submodules, while `submodule update\n--merge` will merge superproject gitlink changes into the submodules.\n+\nIn order to ensure a current tracking branch state, `update --remote`\nfetches the submodule's remote repository before calculating the\nSHA-1.  If you don't want to fetch, you should use `submodule update\n--remote --no-fetch`.\n+\nUse this option to integrate changes from the upstream subproject with\nyour submodule's current HEAD.  Alternatively, you can run `git pull`\nfrom the submodule, which is equivalent except for the remote branch\nname: `update --remote` uses the default upstream repository and\n`submodule.<name>.branch`, while `git pull` uses the submodule's\n`branch.<name>.merge`.  Prefer `submodule.<name>.branch` if you want\nto distribute the default upstream branch with the superproject and\n`branch.<name>.merge` if you want a more native feel while working in\nthe submodule itself.\n\n-N::\n--no-fetch::\n\tThis option is only valid for the update command.\n\tDon't fetch new objects from the remote site.\n\n--checkout::\n\tThis option is only valid for the update command.\n\tCheckout the commit recorded in the superproject on a detached HEAD\n\tin the submodule. This is the default behavior, the main use of\n\tthis option is to override `submodule.$name.update` when set to\n\ta value other than `checkout`.\n\tIf the key `submodule.$name.update` is either not explicitly set or\n\tset to `checkout`, this option is implicit.\n\n--merge::\n\tThis option is only valid for the update command.\n\tMerge the commit recorded in the superproject into the current branch\n\tof the submodule. If this option is given, the submodule's HEAD will\n\tnot be detached. If a merge failure prevents this process, you will\n\thave to resolve the resulting conflicts within the submodule with the\n\tusual conflict resolution tools.\n\tIf the key `submodule.$name.update` is set to `merge`, this option is\n\timplicit.\n\n--rebase::\n\tThis option is only valid for the update command.\n\tRebase the current branch onto the commit recorded in the\n\tsuperproject. If this option is given, the submodule's HEAD will not\n\tbe detached. If a merge failure prevents this process, you will have\n\tto resolve these failures with linkgit:git-rebase[1].\n\tIf the key `submodule.$name.update` is set to `rebase`, this option is\n\timplicit.\n\n--init::\n\tThis option is only valid for the update command.\n\tInitialize all submodules for which \"git submodule init\" has not been\n\tcalled so far before updating.\n\n--name::\n\tThis option is only valid for the add command. It sets the submodule's\n\tname to the given string instead of defaulting to its path. The name\n\tmust be valid as a directory name and may not end with a '/'.\n\n--reference <repository>::\n\tThis option is only valid for add and update commands.  These\n\tcommands sometimes need to clone a remote repository. In this case,\n\tthis option will be passed to the linkgit:git-clone[1] command.\n+\n*NOTE*: Do *not* use this option unless you have read the note\nfor linkgit:git-clone[1]'s `--reference`, `--shared`, and `--dissociate`\noptions carefully.\n\n--dissociate::\n\tThis option is only valid for add and update commands.  These\n\tcommands sometimes need to clone a remote repository. In this case,\n\tthis option will be passed to the linkgit:git-clone[1] command.\n+\n*NOTE*: see the NOTE for the `--reference` option.\n\n--recursive::\n\tThis option is only valid for foreach, update, status and sync commands.\n\tTraverse submodules recursively. The operation is performed not\n\tonly in the submodules of the current repo, but also\n\tin any nested submodules inside those submodules (and so on).\n\n--depth::\n\tThis option is valid for add and update commands. Create a 'shallow'\n\tclone with a history truncated to the specified number of revisions.\n\tSee linkgit:git-clone[1]\n\n--[no-]recommend-shallow::\n\tThis option is only valid for the update command.\n\tThe initial clone of a submodule will use the recommended\n\t`submodule.<name>.shallow` as provided by the `.gitmodules` file\n\tby default. To ignore the suggestions use `--no-recommend-shallow`.\n\n-j <n>::\n--jobs <n>::\n\tThis option is only valid for the update command.\n\tClone new submodules in parallel with as many jobs.\n\tDefaults to the `submodule.fetchJobs` option.\n\n--[no-]single-branch::\n\tThis option is only valid for the update command.\n\tClone only one branch during update: HEAD or one specified by --branch.\n\n<path>...::\n\tPaths to submodule(s). When specified this will restrict the command\n\tto only operate on the submodules found at the specified paths.\n\t(This argument is required with add).\n"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 19708,
            "end_index": 19721,
            "value": "When initializing submodules, a `.gitmodules` file in the top-level directory\nof the containing repository is used to find the url of each submodule.\nThis file should be formatted in the same way as `$GIT_DIR/config`. The key\nto each submodule url is \"submodule.$name.url\".  See linkgit:gitmodules[5]\nfor details.\n\nSEE ALSO\n--------\nlinkgit:gitsubmodules[7], linkgit:gitmodules[5].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 20103,
            "end_index": 20112,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-svn.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-svn - Bidirectional operation between a Subversion repository and Git\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 107,
            "end_index": 126,
            "value": "[verse]\n'git svn' <command> [<options>] [<arguments>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 180,
            "end_index": 205,
            "value": "'git svn' is a simple conduit for changesets between Subversion and Git.\nIt provides a bidirectional flow of changes between a Subversion and a Git\nrepository.\n\n'git svn' can track a standard Subversion repository,\nfollowing the common \"trunk/branches/tags\" layout, with the --stdlayout option.\nIt can also follow branches and tags in any layout with the -T/-t/-b options\n(see options to 'init' below, and also the 'clone' command).\n\nOnce tracking a Subversion repository (with any of the above methods), the Git\nrepository can be updated from Subversion by the 'fetch' command and\nSubversion updated from Git by the 'dcommit' command.\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 841,
            "end_index": 860,
            "value": "\n'init'::\n\tInitializes an empty Git repository with additional\n\tmetadata directories for 'git svn'.  The Subversion URL\n\tmay be specified as a command-line argument, or as full\n\tURL arguments to -T/-t/-b.  Optionally, the target\n\tdirectory to operate on can be specified as a second\n\targument.  Normally this command initializes the current\n\tdirectory.\n\n-T<trunk_subdir>;;\n--trunk=<trunk_subdir>;;\n-t<tags_subdir>;;\n--tags=<tags_subdir>;;\n-b<branches_subdir>;;\n--branches=<branches_subdir>;;\n-s;;\n--stdlayout;;\n\tThese are optional command-line options for init.  Each of\n\tthese flags can point to a relative repository path\n\t(--tags=project/tags) or a full url\n\t(--tags=https://foo.org/project/tags).\n\tYou can specify more than one --tags and/or --branches options, in case\n\tyour Subversion repository places tags or branches under multiple paths.\n\tThe option --stdlayout is\n\ta shorthand way of setting trunk,tags,branches as the relative paths,\n\twhich is the Subversion default. If any of the other options are given\n\tas well, they take precedence.\n--no-metadata;;\n\tSet the 'noMetadata' option in the [svn-remote] config.\n\tThis option is not recommended, please read the 'svn.noMetadata'\n\tsection of this manpage before using this option.\n--use-svm-props;;\n\tSet the 'useSvmProps' option in the [svn-remote] config.\n--use-svnsync-props;;\n\tSet the 'useSvnsyncProps' option in the [svn-remote] config.\n--rewrite-root=<URL>;;\n\tSet the 'rewriteRoot' option in the [svn-remote] config.\n--rewrite-uuid=<UUID>;;\n\tSet the 'rewriteUUID' option in the [svn-remote] config.\n--username=<user>;;\n\tFor transports that SVN handles authentication for (http,\n\thttps, and plain svn), specify the username.  For other\n\ttransports (e.g. `svn+ssh://`), you must include the username in\n\tthe URL, e.g. `svn+ssh://foo@svn.bar.com/project`\n--prefix=<prefix>;;\n\tThis allows one to specify a prefix which is prepended\n\tto the names of remotes if trunk/branches/tags are\n\tspecified.  The prefix does not automatically include a\n\ttrailing slash, so be sure you include one in the\n\targument if that is what you want.  If --branches/-b is\n\tspecified, the prefix must include a trailing slash.\n\tSetting a prefix (with a trailing slash) is strongly\n\tencouraged in any case, as your SVN-tracking refs will\n\tthen be located at \"refs/remotes/$prefix/*\", which is\n\tcompatible with Git's own remote-tracking ref layout\n\t(refs/remotes/$remote/*). Setting a prefix is also useful\n\tif you wish to track multiple projects that share a common\n\trepository.\n\tBy default, the prefix is set to 'origin/'.\n+\nNOTE: Before Git v2.0, the default prefix was \"\" (no prefix). This\nmeant that SVN-tracking refs were put at \"refs/remotes/*\", which is\nincompatible with how Git's own remote-tracking refs are organized.\nIf you still want the old default, you can get it by passing\n`--prefix \"\"` on the command line (`--prefix=\"\"` may not work if\nyour Perl's Getopt::Long is < v2.37).\n\n--ignore-refs=<regex>;;\n\tWhen passed to 'init' or 'clone' this regular expression will\n\tbe preserved as a config key.  See 'fetch' for a description\n\tof `--ignore-refs`.\n--ignore-paths=<regex>;;\n\tWhen passed to 'init' or 'clone' this regular expression will\n\tbe preserved as a config key.  See 'fetch' for a description\n\tof `--ignore-paths`.\n--include-paths=<regex>;;\n\tWhen passed to 'init' or 'clone' this regular expression will\n\tbe preserved as a config key.  See 'fetch' for a description\n\tof `--include-paths`.\n--no-minimize-url;;\n\tWhen tracking multiple directories (using --stdlayout,\n\t--branches, or --tags options), git svn will attempt to connect\n\tto the root (or highest allowed level) of the Subversion\n\trepository.  This default allows better tracking of history if\n\tentire projects are moved within a repository, but may cause\n\tissues on repositories where read access restrictions are in\n\tplace.  Passing `--no-minimize-url` will allow git svn to\n\taccept URLs as-is without attempting to connect to a higher\n\tlevel directory.  This option is off by default when only\n\tone URL/branch is tracked (it would do little good).\n\n'fetch'::\n\tFetch unfetched revisions from the Subversion remote we are\n\ttracking.  The name of the [svn-remote \"...\"] section in the\n\t$GIT_DIR/config file may be specified as an optional\n\tcommand-line argument.\n+\nThis automatically updates the rev_map if needed (see\n'$GIT_DIR/svn/\\**/.rev_map.*' in the FILES section below for details).\n\n--localtime;;\n\tStore Git commit times in the local time zone instead of UTC.  This\n\tmakes 'git log' (even without --date=local) show the same times\n\tthat `svn log` would in the local time zone.\n+\nThis doesn't interfere with interoperating with the Subversion\nrepository you cloned from, but if you wish for your local Git\nrepository to be able to interoperate with someone else's local Git\nrepository, either don't use this option or you should both use it in\nthe same local time zone.\n\n--parent;;\n\tFetch only from the SVN parent of the current HEAD.\n\n--ignore-refs=<regex>;;\n\tIgnore refs for branches or tags matching the Perl regular\n\texpression. A \"negative look-ahead assertion\" like\n\t`^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$`\n\tcan be used to allow only certain refs.\n+\n[verse]\nconfig key: svn-remote.<name>.ignore-refs\n+\nIf the ignore-refs configuration key is set, and the command-line\noption is also given, both regular expressions will be used.\n\n--ignore-paths=<regex>;;\n\tThis allows one to specify a Perl regular expression that will\n\tcause skipping of all matching paths from checkout from SVN.\n\tThe `--ignore-paths` option should match for every 'fetch'\n\t(including automatic fetches due to 'clone', 'dcommit',\n\t'rebase', etc) on a given repository.\n+\n[verse]\nconfig key: svn-remote.<name>.ignore-paths\n+\nIf the ignore-paths configuration key is set, and the command-line\noption is also given, both regular expressions will be used.\n+\nExamples:\n+\n--\nSkip \"doc*\" directory for every fetch;;\n+\n------------------------------------------------------------------------\n--ignore-paths=\"^doc\"\n------------------------------------------------------------------------\n\nSkip \"branches\" and \"tags\" of first level directories;;\n+\n------------------------------------------------------------------------\n--ignore-paths=\"^[^/]+/(?:branches|tags)\"\n------------------------------------------------------------------------\n--\n\n--include-paths=<regex>;;\n\tThis allows one to specify a Perl regular expression that will\n\tcause the inclusion of only matching paths from checkout from SVN.\n\tThe `--include-paths` option should match for every 'fetch'\n\t(including automatic fetches due to 'clone', 'dcommit',\n\t'rebase', etc) on a given repository. `--ignore-paths` takes\n\tprecedence over `--include-paths`.\n+\n[verse]\nconfig key: svn-remote.<name>.include-paths\n\n--log-window-size=<n>;;\n\tFetch <n> log entries per request when scanning Subversion history.\n\tThe default is 100. For very large Subversion repositories, larger\n\tvalues may be needed for 'clone'/'fetch' to complete in reasonable\n\ttime. But overly large values may lead to higher memory usage and\n\trequest timeouts.\n\n'clone'::\n\tRuns 'init' and 'fetch'.  It will automatically create a\n\tdirectory based on the basename of the URL passed to it;\n\tor if a second argument is passed; it will create a directory\n\tand work within that.  It accepts all arguments that the\n\t'init' and 'fetch' commands accept; with the exception of\n\t`--fetch-all` and `--parent`.  After a repository is cloned,\n\tthe 'fetch' command will be able to update revisions without\n\taffecting the working tree; and the 'rebase' command will be\n\table to update the working tree with the latest changes.\n\n--preserve-empty-dirs;;\n\tCreate a placeholder file in the local Git repository for each\n\tempty directory fetched from Subversion.  This includes directories\n\tthat become empty by removing all entries in the Subversion\n\trepository (but not the directory itself).  The placeholder files\n\tare also tracked and removed when no longer necessary.\n\n--placeholder-filename=<filename>;;\n\tSet the name of placeholder files created by --preserve-empty-dirs.\n\tDefault: \".gitignore\"\n\n'rebase'::\n\tThis fetches revisions from the SVN parent of the current HEAD\n\tand rebases the current (uncommitted to SVN) work against it.\n+\nThis works similarly to `svn update` or 'git pull' except that\nit preserves linear history with 'git rebase' instead of\n'git merge' for ease of dcommitting with 'git svn'.\n+\nThis accepts all options that 'git svn fetch' and 'git rebase'\naccept.  However, `--fetch-all` only fetches from the current\n[svn-remote], and not all [svn-remote] definitions.\n+\nLike 'git rebase'; this requires that the working tree be clean\nand have no uncommitted changes.\n+\nThis automatically updates the rev_map if needed (see\n'$GIT_DIR/svn/\\**/.rev_map.*' in the FILES section below for details).\n\n-l;;\n--local;;\n\tDo not fetch remotely; only run 'git rebase' against the\n\tlast fetched commit from the upstream SVN.\n\n'dcommit'::\n\tCommit each diff from the current branch directly to the SVN\n\trepository, and then rebase or reset (depending on whether or\n\tnot there is a diff between SVN and head).  This will create\n\ta revision in SVN for each commit in Git.\n+\nWhen an optional Git branch name (or a Git commit object name)\nis specified as an argument, the subcommand works on the specified\nbranch, not on the current branch.\n+\nUse of 'dcommit' is preferred to 'set-tree' (below).\n+\n--no-rebase;;\n\tAfter committing, do not rebase or reset.\n--commit-url <URL>;;\n\tCommit to this SVN URL (the full path).  This is intended to\n\tallow existing 'git svn' repositories created with one transport\n\tmethod (e.g. `svn://` or `http://` for anonymous read) to be\n\treused if a user is later given access to an alternate transport\n\tmethod (e.g. `svn+ssh://` or `https://`) for commit.\n+\n[verse]\nconfig key: svn-remote.<name>.commiturl\nconfig key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)\n+\nNote that the SVN URL of the commiturl config key includes the SVN branch.\nIf you rather want to set the commit URL for an entire SVN repository use\nsvn-remote.<name>.pushurl instead.\n+\nUsing this option for any other purpose (don't ask) is very strongly\ndiscouraged.\n\n--mergeinfo=<mergeinfo>;;\n\tAdd the given merge information during the dcommit\n\t(e.g. `--mergeinfo=\"/branches/foo:1-10\"`). All svn server versions can\n\tstore this information (as a property), and svn clients starting from\n\tversion 1.5 can make use of it. To specify merge information from multiple\n\tbranches, use a single space character between the branches\n\t(`--mergeinfo=\"/branches/foo:1-10 /branches/bar:3,5-6,8\"`)\n+\n[verse]\nconfig key: svn.pushmergeinfo\n+\nThis option will cause git-svn to attempt to automatically populate the\nsvn:mergeinfo property in the SVN repository when possible. Currently, this can\nonly be done when dcommitting non-fast-forward merges where all parents but the\nfirst have already been pushed into SVN.\n\n--interactive;;\n\tAsk the user to confirm that a patch set should actually be sent to SVN.\n\tFor each patch, one may answer \"yes\" (accept this patch), \"no\" (discard this\n\tpatch), \"all\" (accept all patches), or \"quit\".\n+\n'git svn dcommit' returns immediately if answer is \"no\" or \"quit\", without\ncommitting anything to SVN.\n\n'branch'::\n\tCreate a branch in the SVN repository.\n\n-m;;\n--message;;\n\tAllows to specify the commit message.\n\n-t;;\n--tag;;\n\tCreate a tag by using the tags_subdir instead of the branches_subdir\n\tspecified during git svn init.\n\n-d<path>;;\n--destination=<path>;;\n\n\tIf more than one --branches (or --tags) option was given to the 'init'\n\tor 'clone' command, you must provide the location of the branch (or\n\ttag) you wish to create in the SVN repository.  <path> specifies which\n\tpath to use to create the branch or tag and should match the pattern\n\ton the left-hand side of one of the configured branches or tags\n\trefspecs.  You can see these refspecs with the commands\n+\n\tgit config --get-all svn-remote.<name>.branches\n\tgit config --get-all svn-remote.<name>.tags\n+\nwhere <name> is the name of the SVN repository as specified by the -R option to\n'init' (or \"svn\" by default).\n\n--username;;\n\tSpecify the SVN username to perform the commit as.  This option overrides\n\tthe 'username' configuration property.\n\n--commit-url;;\n\tUse the specified URL to connect to the destination Subversion\n\trepository.  This is useful in cases where the source SVN\n\trepository is read-only.  This option overrides configuration\n\tproperty 'commiturl'.\n+\n\tgit config --get-all svn-remote.<name>.commiturl\n+\n\n--parents;;\n\tCreate parent folders. This parameter is equivalent to the parameter\n\t--parents on svn cp commands and is useful for non-standard repository\n\tlayouts.\n\n'tag'::\n\tCreate a tag in the SVN repository. This is a shorthand for\n\t'branch -t'.\n\n'log'::\n\tThis should make it easy to look up svn log messages when svn\n\tusers refer to -r/--revision numbers.\n+\nThe following features from `svn log' are supported:\n+\n--\n-r <n>[:<n>];;\n--revision=<n>[:<n>];;\n\tis supported, non-numeric args are not:\n\tHEAD, NEXT, BASE, PREV, etc ...\n-v;;\n--verbose;;\n\tit's not completely compatible with the --verbose\n\toutput in svn log, but reasonably close.\n--limit=<n>;;\n\tis NOT the same as --max-count, doesn't count\n\tmerged/excluded commits\n--incremental;;\n\tsupported\n--\n+\nNew features:\n+\n--\n--show-commit;;\n\tshows the Git commit sha1, as well\n--oneline;;\n\tour version of --pretty=oneline\n--\n+\nNOTE: SVN itself only stores times in UTC and nothing else. The regular svn\nclient converts the UTC time to the local time (or based on the TZ=\nenvironment). This command has the same behaviour.\n+\nAny other arguments are passed directly to 'git log'\n\n'blame'::\n\tShow what revision and author last modified each line of a file. The\n\toutput of this mode is format-compatible with the output of\n\t`svn blame' by default. Like the SVN blame command,\n\tlocal uncommitted changes in the working tree are ignored;\n\tthe version of the file in the HEAD revision is annotated. Unknown\n\targuments are passed directly to 'git blame'.\n+\n--git-format;;\n\tProduce output in the same format as 'git blame', but with\n\tSVN revision numbers instead of Git commit hashes. In this mode,\n\tchanges that haven't been committed to SVN (including local\n\tworking-copy edits) are shown as revision 0.\n\n'find-rev'::\n\tWhen given an SVN revision number of the form 'rN', returns the\n\tcorresponding Git commit hash (this can optionally be followed by a\n\ttree-ish to specify which branch should be searched).  When given a\n\ttree-ish, returns the corresponding SVN revision number.\n+\n-B;;\n--before;;\n\tDon't require an exact match if given an SVN revision, instead find\n\tthe commit corresponding to the state of the SVN repository (on the\n\tcurrent branch) at the specified revision.\n+\n-A;;\n--after;;\n\tDon't require an exact match if given an SVN revision; if there is\n\tnot an exact match return the closest match searching forward in the\n\thistory.\n\n'set-tree'::\n\tYou should consider using 'dcommit' instead of this command.\n\tCommit specified commit or tree objects to SVN.  This relies on\n\tyour imported fetch data being up to date.  This makes\n\tabsolutely no attempts to do patching when committing to SVN, it\n\tsimply overwrites files with those specified in the tree or\n\tcommit.  All merging is assumed to have taken place\n\tindependently of 'git svn' functions.\n\n'create-ignore'::\n\tRecursively finds the svn:ignore property on directories and\n\tcreates matching .gitignore files. The resulting files are staged to\n\tbe committed, but are not committed. Use -r/--revision to refer to a\n\tspecific revision.\n\n'show-ignore'::\n\tRecursively finds and lists the svn:ignore property on\n\tdirectories.  The output is suitable for appending to\n\tthe $GIT_DIR/info/exclude file.\n\n'mkdirs'::\n\tAttempts to recreate empty directories that core Git cannot track\n\tbased on information in $GIT_DIR/svn/<refname>/unhandled.log files.\n\tEmpty directories are automatically recreated when using\n\t\"git svn clone\" and \"git svn rebase\", so \"mkdirs\" is intended\n\tfor use after commands like \"git checkout\" or \"git reset\".\n\t(See the svn-remote.<name>.automkdirs config file option for\n\tmore information.)\n\n'commit-diff'::\n\tCommits the diff of two tree-ish arguments from the\n\tcommand-line.  This command does not rely on being inside a `git svn\n\tinit`-ed repository.  This command takes three arguments, (a) the\n\toriginal tree to diff against, (b) the new tree result, (c) the\n\tURL of the target Subversion repository.  The final argument\n\t(URL) may be omitted if you are working from a 'git svn'-aware\n\trepository (that has been `init`-ed with 'git svn').\n\tThe -r<revision> option is required for this.\n+\nThe commit message is supplied either directly with the `-m` or `-F`\noption, or indirectly from the tag or commit when the second tree-ish\ndenotes such an object, or it is requested by invoking an editor (see\n`--edit` option below).\n\n-m <msg>;;\n--message=<msg>;;\n\tUse the given `msg` as the commit message. This option\n\tdisables the `--edit` option.\n\n-F <filename>;;\n--file=<filename>;;\n\tTake the commit message from the given file. This option\n\tdisables the `--edit` option.\n\n'info'::\n\tShows information about a file or directory similar to what\n\t`svn info' provides.  Does not currently support a -r/--revision\n\targument.  Use the --url option to output only the value of the\n\t'URL:' field.\n\n'proplist'::\n\tLists the properties stored in the Subversion repository about a\n\tgiven file or directory.  Use -r/--revision to refer to a specific\n\tSubversion revision.\n\n'propget'::\n\tGets the Subversion property given as the first argument, for a\n\tfile.  A specific revision can be specified with -r/--revision.\n\n'propset'::\n\tSets the Subversion property given as the first argument, to the\n\tvalue given as the second argument for the file given as the\n\tthird argument.\n+\nExample:\n+\n------------------------------------------------------------------------\ngit svn propset svn:keywords \"FreeBSD=%H\" devel/py-tipper/Makefile\n------------------------------------------------------------------------\n+\nThis will set the property 'svn:keywords' to 'FreeBSD=%H' for the file\n'devel/py-tipper/Makefile'.\n\n'show-externals'::\n\tShows the Subversion externals.  Use -r/--revision to specify a\n\tspecific revision.\n\n'gc'::\n\tCompress $GIT_DIR/svn/<refname>/unhandled.log files and remove\n\t$GIT_DIR/svn/<refname>/index files.\n\n'reset'::\n\tUndoes the effects of 'fetch' back to the specified revision.\n\tThis allows you to re-'fetch' an SVN revision.  Normally the\n\tcontents of an SVN revision should never change and 'reset'\n\tshould not be necessary.  However, if SVN permissions change,\n\tor if you alter your --ignore-paths option, a 'fetch' may fail\n\twith \"not found in commit\" (file not previously visible) or\n\t\"checksum mismatch\" (missed a modification).  If the problem\n\tfile cannot be ignored forever (with --ignore-paths) the only\n\tway to repair the repo is to use 'reset'.\n+\nOnly the rev_map and refs/remotes/git-svn are changed (see\n'$GIT_DIR/svn/\\**/.rev_map.*' in the FILES section below for details).\nFollow 'reset' with a 'fetch' and then 'git reset' or 'git rebase' to\nmove local branches onto the new tree.\n\n-r <n>;;\n--revision=<n>;;\n\tSpecify the most recent revision to keep.  All later revisions\n\tare discarded.\n-p;;\n--parent;;\n\tDiscard the specified revision as well, keeping the nearest\n\tparent instead.\nExample:;;\nAssume you have local changes in \"master\", but you need to refetch \"r2\".\n+\n------------\n    r1---r2---r3 remotes/git-svn\n                \\\n                 A---B master\n------------\n+\nFix the ignore-paths or SVN permissions problem that caused \"r2\" to\nbe incomplete in the first place.  Then:\n+\n[verse]\ngit svn reset -r2 -p\ngit svn fetch\n+\n------------\n    r1---r2'--r3' remotes/git-svn\n      \\\n       r2---r3---A---B master\n------------\n+\nThen fixup \"master\" with 'git rebase'.\nDo NOT use 'git merge' or your history will not be compatible with a\nfuture 'dcommit'!\n+\n[verse]\ngit rebase --onto remotes/git-svn A^ master\n+\n------------\n    r1---r2'--r3' remotes/git-svn\n                \\\n                 A'--B' master\n------------\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 20962,
            "end_index": 20979,
            "value": "\n--shared[=(false|true|umask|group|all|world|everybody)]::\n--template=<template_directory>::\n\tOnly used with the 'init' command.\n\tThese are passed directly to 'git init'.\n\n-r <arg>::\n--revision <arg>::\n\t   Used with the 'fetch' command.\n+\nThis allows revision ranges for partial/cauterized history\nto be supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),\n$NUMBER:HEAD, and BASE:$NUMBER are all supported.\n+\nThis can allow you to make partial mirrors when running fetch;\nbut is generally not recommended because history will be skipped\nand lost.\n\n-::\n--stdin::\n\tOnly used with the 'set-tree' command.\n+\nRead a list of commits from stdin and commit them in reverse\norder.  Only the leading sha1 is read from each line, so\n'git rev-list --pretty=oneline' output can be used.\n\n--rmdir::\n\tOnly used with the 'dcommit', 'set-tree' and 'commit-diff' commands.\n+\nRemove directories from the SVN tree if there are no files left\nbehind.  SVN can version empty directories, and they are not\nremoved by default if there are no files left in them.  Git\ncannot version empty directories.  Enabling this flag will make\nthe commit to SVN act like Git.\n+\n[verse]\nconfig key: svn.rmdir\n\n-e::\n--edit::\n\tOnly used with the 'dcommit', 'set-tree' and 'commit-diff' commands.\n+\nEdit the commit message before committing to SVN.  This is off by\ndefault for objects that are commits, and forced on when committing\ntree objects.\n+\n[verse]\nconfig key: svn.edit\n\n-l<num>::\n--find-copies-harder::\n\tOnly used with the 'dcommit', 'set-tree' and 'commit-diff' commands.\n+\nThey are both passed directly to 'git diff-tree'; see\nlinkgit:git-diff-tree[1] for more information.\n+\n[verse]\nconfig key: svn.l\nconfig key: svn.findcopiesharder\n\n-A<filename>::\n--authors-file=<filename>::\n\tSyntax is compatible with the file used by 'git cvsimport' but\n\tan empty email address can be supplied with '<>':\n+\n------------------------------------------------------------------------\n\tloginname = Joe User <user@example.com>\n------------------------------------------------------------------------\n+\nIf this option is specified and 'git svn' encounters an SVN\ncommitter name that does not exist in the authors-file, 'git svn'\nwill abort operation. The user will then have to add the\nappropriate entry.  Re-running the previous 'git svn' command\nafter the authors-file is modified should continue operation.\n+\n[verse]\nconfig key: svn.authorsfile\n\n--authors-prog=<filename>::\n\tIf this option is specified, for each SVN committer name that\n\tdoes not exist in the authors file, the given file is executed\n\twith the committer name as the first argument.  The program is\n\texpected to return a single line of the form \"Name <email>\" or\n\t\"Name <>\", which will be treated as if included in the authors\n\tfile.\n+\nDue to historical reasons a relative 'filename' is first searched\nrelative to the current directory for 'init' and 'clone' and relative\nto the root of the working tree for 'fetch'. If 'filename' is\nnot found, it is searched like any other command in '$PATH'.\n+\n[verse]\nconfig key: svn.authorsProg\n\n-q::\n--quiet::\n\tMake 'git svn' less verbose. Specify a second time to make it\n\teven less verbose.\n\n-m::\n--merge::\n-s<strategy>::\n--strategy=<strategy>::\n-p::\n--rebase-merges::\n--preserve-merges (DEPRECATED)::\n\tThese are only used with the 'dcommit' and 'rebase' commands.\n+\nPassed directly to 'git rebase' when using 'dcommit' if a\n'git reset' cannot be used (see 'dcommit').\n\n-n::\n--dry-run::\n\tThis can be used with the 'dcommit', 'rebase', 'branch' and\n\t'tag' commands.\n+\nFor 'dcommit', print out the series of Git arguments that would show\nwhich diffs would be committed to SVN.\n+\nFor 'rebase', display the local branch associated with the upstream svn\nrepository associated with the current branch and the URL of svn\nrepository that will be fetched from.\n+\nFor 'branch' and 'tag', display the urls that will be used for copying when\ncreating the branch or tag.\n\n--use-log-author::\n\tWhen retrieving svn commits into Git (as part of 'fetch', 'rebase', or\n\t'dcommit' operations), look for the first `From:` line or `Signed-off-by` trailer\n\tin the log message and use that as the author string.\n+\n[verse]\nconfig key: svn.useLogAuthor\n\n--add-author-from::\n\tWhen committing to svn from Git (as part of 'set-tree' or 'dcommit'\n\toperations), if the existing log message doesn't already have a\n\t`From:` or `Signed-off-by` trailer, append a `From:` line based on the\n\tGit commit's author string.  If you use this, then `--use-log-author`\n\twill retrieve a valid author string for all commits.\n+\n[verse]\nconfig key: svn.addAuthorFrom\n\nADVANCED OPTIONS\n----------------\n\n-i<GIT_SVN_ID>::\n--id <GIT_SVN_ID>::\n\tThis sets GIT_SVN_ID (instead of using the environment).  This\n\tallows the user to override the default refname to fetch from\n\twhen tracking a single URL.  The 'log' and 'dcommit' commands\n\tno longer require this switch as an argument.\n\n-R<remote name>::\n--svn-remote <remote name>::\n\tSpecify the [svn-remote \"<remote name>\"] section to use,\n\tthis allows SVN multiple repositories to be tracked.\n\tDefault: \"svn\"\n\n--follow-parent::\n\tThis option is only relevant if we are tracking branches (using\n\tone of the repository layout options --trunk, --tags,\n\t--branches, --stdlayout). For each tracked branch, try to find\n\tout where its revision was copied from, and set\n\ta suitable parent in the first Git commit for the branch.\n\tThis is especially helpful when we're tracking a directory\n\tthat has been moved around within the repository.  If this\n\tfeature is disabled, the branches created by 'git svn' will all\n\tbe linear and not share any history, meaning that there will be\n\tno information on where branches were branched off or merged.\n\tHowever, following long/convoluted histories can take a long\n\ttime, so disabling this feature may speed up the cloning\n\tprocess. This feature is enabled by default, use\n\t--no-follow-parent to disable it.\n+\n[verse]\nconfig key: svn.followparent\n\nCONFIG FILE-ONLY OPTIONS\n------------------------\n\nsvn.noMetadata::\nsvn-remote.<name>.noMetadata::\n\tThis gets rid of the 'git-svn-id:' lines at the end of every commit.\n+\nThis option can only be used for one-shot imports as 'git svn'\nwill not be able to fetch again without metadata. Additionally,\nif you lose your '$GIT_DIR/svn/\\**/.rev_map.*' files, 'git svn' will not\nbe able to rebuild them.\n+\nThe 'git svn log' command will not work on repositories using\nthis, either.  Using this conflicts with the 'useSvmProps'\noption for (hopefully) obvious reasons.\n+\nThis option is NOT recommended as it makes it difficult to track down\nold references to SVN revision numbers in existing documentation, bug\nreports, and archives.  If you plan to eventually migrate from SVN to\nGit and are certain about dropping SVN history, consider\nhttps://github.com/newren/git-filter-repo[git-filter-repo] instead.\nfilter-repo also allows reformatting of metadata for ease-of-reading\nand rewriting authorship info for non-\"svn.authorsFile\" users.\n\nsvn.useSvmProps::\nsvn-remote.<name>.useSvmProps::\n\tThis allows 'git svn' to re-map repository URLs and UUIDs from\n\tmirrors created using SVN::Mirror (or svk) for metadata.\n+\nIf an SVN revision has a property, \"svm:headrev\", it is likely\nthat the revision was created by SVN::Mirror (also used by SVK).\nThe property contains a repository UUID and a revision.  We want\nto make it look like we are mirroring the original URL, so\nintroduce a helper function that returns the original identity\nURL and UUID, and use it when generating metadata in commit\nmessages.\n\nsvn.useSvnsyncProps::\nsvn-remote.<name>.useSvnsyncprops::\n\tSimilar to the useSvmProps option; this is for users\n\tof the svnsync(1) command distributed with SVN 1.4.x and\n\tlater.\n\nsvn-remote.<name>.rewriteRoot::\n\tThis allows users to create repositories from alternate\n\tURLs.  For example, an administrator could run 'git svn' on the\n\tserver locally (accessing via file://) but wish to distribute\n\tthe repository with a public http:// or svn:// URL in the\n\tmetadata so users of it will see the public URL.\n\nsvn-remote.<name>.rewriteUUID::\n\tSimilar to the useSvmProps option; this is for users who need\n\tto remap the UUID manually. This may be useful in situations\n\twhere the original UUID is not available via either useSvmProps\n\tor useSvnsyncProps.\n\nsvn-remote.<name>.pushurl::\n\n\tSimilar to Git's `remote.<name>.pushurl`, this key is designed\n\tto be used in cases where 'url' points to an SVN repository\n\tvia a read-only transport, to provide an alternate read/write\n\ttransport. It is assumed that both keys point to the same\n\trepository. Unlike 'commiturl', 'pushurl' is a base path. If\n\teither 'commiturl' or 'pushurl' could be used, 'commiturl'\n\ttakes precedence.\n\nsvn.brokenSymlinkWorkaround::\n\tThis disables potentially expensive checks to workaround\n\tbroken symlinks checked into SVN by broken clients.  Set this\n\toption to \"false\" if you track a SVN repository with many\n\tempty blobs that are not symlinks.  This option may be changed\n\twhile 'git svn' is running and take effect on the next\n\trevision fetched.  If unset, 'git svn' assumes this option to\n\tbe \"true\".\n\nsvn.pathnameencoding::\n\tThis instructs git svn to recode pathnames to a given encoding.\n\tIt can be used by windows users and by those who work in non-utf8\n\tlocales to avoid corrupted file names with non-ASCII characters.\n\tValid encodings are the ones supported by Perl's Encode module.\n\nsvn-remote.<name>.automkdirs::\n\tNormally, the \"git svn clone\" and \"git svn rebase\" commands\n\tattempt to recreate empty directories that are in the\n\tSubversion repository.  If this option is set to \"false\", then\n\tempty directories will only be created if the \"git svn mkdirs\"\n\tcommand is run explicitly.  If unset, 'git svn' assumes this\n\toption to be \"true\".\n\nSince the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and useSvmProps\noptions all affect the metadata generated and used by 'git svn'; they\n*must* be set in the configuration file before any history is imported\nand these settings should never be changed once they are set.\n\nAdditionally, only one of these options can be used per svn-remote\nsection because they affect the 'git-svn-id:' metadata line, except\nfor rewriteRoot and rewriteUUID which can be used together.\n\n\nBASIC EXAMPLES\n--------------\n\nTracking and contributing to the trunk of a Subversion-managed project\n(ignoring tags and branches):\n\n------------------------------------------------------------------------\n# Clone a repo (like git clone):\n\tgit svn clone http://svn.example.com/project/trunk\n# Enter the newly cloned directory:\n\tcd trunk\n# You should be on master branch, double-check with 'git branch'\n\tgit branch\n# Do some work and commit locally to Git:\n\tgit commit ...\n# Something is committed to SVN, rebase your local changes against the\n# latest changes in SVN:\n\tgit svn rebase\n# Now commit your changes (that were committed previously using Git) to SVN,\n# as well as automatically updating your working HEAD:\n\tgit svn dcommit\n# Append svn:ignore settings to the default Git exclude file:\n\tgit svn show-ignore >> .git/info/exclude\n------------------------------------------------------------------------\n\nTracking and contributing to an entire Subversion-managed project\n(complete with a trunk, tags and branches):\n\n------------------------------------------------------------------------\n# Clone a repo with standard SVN directory layout (like git clone):\n\tgit svn clone http://svn.example.com/project --stdlayout --prefix svn/\n# Or, if the repo uses a non-standard directory layout:\n\tgit svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/\n# View all branches and tags you have cloned:\n\tgit branch -r\n# Create a new branch in SVN\n\tgit svn branch waldo\n# Reset your master to trunk (or any other branch, replacing 'trunk'\n# with the appropriate name):\n\tgit reset --hard svn/trunk\n# You may only dcommit to one branch/tag/trunk at a time.  The usage\n# of dcommit/rebase/show-ignore should be the same as above.\n------------------------------------------------------------------------\n\nThe initial 'git svn clone' can be quite time-consuming\n(especially for large Subversion repositories). If multiple\npeople (or one person with multiple machines) want to use\n'git svn' to interact with the same Subversion repository, you can\ndo the initial 'git svn clone' to a repository on a server and\nhave each person clone that repository with 'git clone':\n\n------------------------------------------------------------------------\n# Do the initial import on a server\n\tssh server \"cd /pub && git svn clone http://svn.example.com/project [options...]\"\n# Clone locally - make sure the refs/remotes/ space matches the server\n\tmkdir project\n\tcd project\n\tgit init\n\tgit remote add origin server:/pub/project\n\tgit config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'\n\tgit fetch\n# Prevent fetch/pull from remote Git server in the future,\n# we only want to use git svn for future updates\n\tgit config --remove-section remote.origin\n# Create a local branch from one of the branches just fetched\n\tgit checkout -b master FETCH_HEAD\n# Initialize 'git svn' locally (be sure to use the same URL and\n# --stdlayout/-T/-b/-t/--prefix options as were used on server)\n\tgit svn init http://svn.example.com/project [options...]\n# Pull the latest changes from Subversion\n\tgit svn rebase\n------------------------------------------------------------------------\n\nREBASE VS. PULL/MERGE\n---------------------\nPrefer to use 'git svn rebase' or 'git rebase', rather than\n'git pull' or 'git merge' to synchronize unintegrated commits with a 'git svn'\nbranch. Doing so will keep the history of unintegrated commits linear with\nrespect to the upstream SVN repository and allow the use of the preferred\n'git svn dcommit' subcommand to push unintegrated commits back into SVN.\n\nOriginally, 'git svn' recommended that developers pulled or merged from\nthe 'git svn' branch.  This was because the author favored\n`git svn set-tree B` to commit a single head rather than the\n`git svn set-tree A..B` notation to commit multiple commits. Use of\n'git pull' or 'git merge' with `git svn set-tree A..B` will cause non-linear\nhistory to be flattened when committing into SVN and this can lead to merge\ncommits unexpectedly reversing previous commits in SVN.\n\nMERGE TRACKING\n--------------\nWhile 'git svn' can track\ncopy history (including branches and tags) for repositories adopting a\nstandard layout, it cannot yet represent merge history that happened\ninside git back upstream to SVN users.  Therefore it is advised that\nusers keep history as linear as possible inside Git to ease\ncompatibility with SVN (see the CAVEATS section below).\n\nHANDLING OF SVN BRANCHES\n------------------------\nIf 'git svn' is configured to fetch branches (and --follow-branches\nis in effect), it sometimes creates multiple Git branches for one\nSVN branch, where the additional branches have names of the form\n'branchname@nnn' (with nnn an SVN revision number).  These additional\nbranches are created if 'git svn' cannot find a parent commit for the\nfirst commit in an SVN branch, to connect the branch to the history of\nthe other branches.\n\nNormally, the first commit in an SVN branch consists\nof a copy operation. 'git svn' will read this commit to get the SVN\nrevision the branch was created from. It will then try to find the\nGit commit that corresponds to this SVN revision, and use that as the\nparent of the branch. However, it is possible that there is no suitable\nGit commit to serve as parent.  This will happen, among other reasons,\nif the SVN branch is a copy of a revision that was not fetched by 'git\nsvn' (e.g. because it is an old revision that was skipped with\n`--revision`), or if in SVN a directory was copied that is not tracked\nby 'git svn' (such as a branch that is not tracked at all, or a\nsubdirectory of a tracked branch). In these cases, 'git svn' will still\ncreate a Git branch, but instead of using an existing Git commit as the\nparent of the branch, it will read the SVN history of the directory the\nbranch was copied from and create appropriate Git commits.  This is\nindicated by the message \"Initializing parent: <branchname>\".\n\nAdditionally, it will create a special branch named\n'<branchname>@<SVN-Revision>', where <SVN-Revision> is the SVN revision\nnumber the branch was copied from.  This branch will point to the newly\ncreated parent commit of the branch.  If in SVN the branch was deleted\nand later recreated from a different version, there will be multiple\nsuch branches with an '@'.\n\nNote that this may mean that multiple Git commits are created for a\nsingle SVN revision.\n\nAn example: in an SVN repository with a standard\ntrunk/tags/branches layout, a directory trunk/sub is created in r.100.\nIn r.200, trunk/sub is branched by copying it to branches/. 'git svn\nclone -s' will then create a branch 'sub'. It will also create new Git\ncommits for r.100 through r.199 and use these as the history of branch\n'sub'. Thus there will be two Git commits for each revision from r.100\nto r.199 (one containing trunk/, one containing trunk/sub/). Finally,\nit will create a branch 'sub@200' pointing to the new parent commit of\nbranch 'sub' (i.e. the commit for r.200 and trunk/sub/).\n"
        },
        "CAVEATS": {
            "name": "CAVEATS",
            "start_index": 38197,
            "end_index": 38214,
            "value": "\nFor the sake of simplicity and interoperating with Subversion,\nit is recommended that all 'git svn' users clone, fetch and dcommit\ndirectly from the SVN server, and avoid all 'git clone'/'pull'/'merge'/'push'\noperations between Git repositories and branches.  The recommended\nmethod of exchanging code between Git branches and users is\n'git format-patch' and 'git am', or just 'dcommit'ing to the SVN repository.\n\nRunning 'git merge' or 'git pull' is NOT recommended on a branch you\nplan to 'dcommit' from because Subversion users cannot see any\nmerges you've made.  Furthermore, if you merge or pull from a Git branch\nthat is a mirror of an SVN branch, 'dcommit' may commit to the wrong\nbranch.\n\nIf you do merge, note the following rule: 'git svn dcommit' will\nattempt to commit on top of the SVN commit named in\n------------------------------------------------------------------------\ngit log --grep=^git-svn-id: --first-parent -1\n------------------------------------------------------------------------\nYou 'must' therefore ensure that the most recent commit of the branch\nyou want to dcommit to is the 'first' parent of the merge.  Chaos will\nensue otherwise, especially if the first parent is an older commit on\nthe same SVN branch.\n\n'git clone' does not clone branches under the refs/remotes/ hierarchy or\nany 'git svn' metadata, or config.  So repositories created and managed with\nusing 'git svn' should use 'rsync' for cloning, if cloning is to be done\nat all.\n\nSince 'dcommit' uses rebase internally, any Git branches you 'git push' to\nbefore 'dcommit' on will require forcing an overwrite of the existing ref\non the remote repository.  This is generally considered bad practice,\nsee the linkgit:git-push[1] documentation for details.\n\nDo not use the --amend option of linkgit:git-commit[1] on a change you've\nalready dcommitted.  It is considered bad practice to --amend commits\nyou've already pushed to a remote repository for other users, and\ndcommit with SVN is analogous to that.\n\nWhen cloning an SVN repository, if none of the options for describing\nthe repository layout is used (--trunk, --tags, --branches,\n--stdlayout), 'git svn clone' will create a Git repository with\ncompletely linear history, where branches and tags appear as separate\ndirectories in the working copy.  While this is the easiest way to get a\ncopy of a complete repository, for projects with many branches it will\nlead to a working copy many times larger than just the trunk. Thus for\nprojects using the standard directory structure (trunk/branches/tags),\nit is recommended to clone with option `--stdlayout`. If the project\nuses a non-standard structure, and/or if branches and tags are not\nrequired, it is easiest to only clone one directory (typically trunk),\nwithout giving any repository layout options.  If the full history with\nbranches and tags is required, the options `--trunk` / `--branches` /\n`--tags` must be used.\n\nWhen using multiple --branches or --tags, 'git svn' does not automatically\nhandle name collisions (for example, if two branches from different paths have\nthe same name, or if a branch and a tag have the same name).  In these cases,\nuse 'init' to set up your Git repository then, before your first 'fetch', edit\nthe $GIT_DIR/config file so that the branches and tags are associated\nwith different name spaces.  For example:\n\n\tbranches = stable/*:refs/remotes/svn/stable/*\n\tbranches = debug/*:refs/remotes/svn/debug/*\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 41650,
            "end_index": 41661,
            "value": "\nWe ignore all SVN properties except svn:executable.  Any unhandled\nproperties are logged to $GIT_DIR/svn/<refname>/unhandled.log\n\nRenamed and copied directories are not detected by Git and hence not\ntracked when committing to SVN.  I do not plan on adding support for\nthis as it's quite difficult and time-consuming to get working for all\nthe possible corner cases (Git doesn't do it, either).  Committing\nrenamed and copied files is fully supported if they're similar enough\nfor Git to detect them.\n\nIn SVN, it is possible (though discouraged) to commit changes to a tag\n(because a tag is just a directory copy, thus technically the same as a\nbranch). When cloning an SVN repository, 'git svn' cannot know if such a\ncommit to a tag will happen in the future. Thus it acts conservatively\nand imports all SVN tags as branches, prefixing the tag name with 'tags/'.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 42525,
            "end_index": 42554,
            "value": "\n'git svn' stores [svn-remote] configuration information in the\nrepository $GIT_DIR/config file.  It is similar the core Git\n[remote] sections except 'fetch' keys do not accept glob\narguments; but they are instead handled by the 'branches'\nand 'tags' keys.  Since some SVN repositories are oddly\nconfigured with multiple projects glob expansions such those\nlisted below are allowed:\n\n------------------------------------------------------------------------\n[svn-remote \"project-a\"]\n\turl = http://server.org/svn\n\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n\tbranches = branches/*/project-a:refs/remotes/project-a/branches/*\n\tbranches = branches/release_*:refs/remotes/project-a/branches/release_*\n\tbranches = branches/re*se:refs/remotes/project-a/branches/*\n\ttags = tags/*/project-a:refs/remotes/project-a/tags/*\n------------------------------------------------------------------------\n\nKeep in mind that the `*` (asterisk) wildcard of the local ref\n(right of the `:`) *must* be the farthest right path component;\nhowever the remote wildcard may be anywhere as long as it's an\nindependent path component (surrounded by `/` or EOL).   This\ntype of configuration is not automatically created by 'init' and\nshould be manually entered with a text-editor or using 'git config'.\n\nAlso note that only one asterisk is allowed per word. For example:\n\n\tbranches = branches/re*se:refs/remotes/project-a/branches/*\n\nwill match branches 'release', 'rese', 're123se', however\n\n\tbranches = branches/re*s*e:refs/remotes/project-a/branches/*\n\nwill produce an error.\n\nIt is also possible to fetch a subset of branches or tags by using a\ncomma-separated list of names within braces. For example:\n\n------------------------------------------------------------------------\n[svn-remote \"huge-project\"]\n\turl = http://server.org/svn\n\tfetch = trunk/src:refs/remotes/trunk\n\tbranches = branches/{red,green}/src:refs/remotes/project-a/branches/*\n\ttags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/*\n------------------------------------------------------------------------\n\nMultiple fetch, branches, and tags keys are supported:\n\n------------------------------------------------------------------------\n[svn-remote \"messy-repo\"]\n\turl = http://server.org/svn\n\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n\tfetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo\n\tbranches = branches/server/*:refs/remotes/project-a/branches/*\n\tbranches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*\n\ttags = tags/server/*:refs/remotes/project-a/tags/*\n------------------------------------------------------------------------\n\nCreating a branch in such a configuration requires disambiguating which\nlocation to use using the -d or --destination flag:\n\n------------------------------------------------------------------------\n$ git svn branch -d branches/server release-2-3-0\n------------------------------------------------------------------------\n\nNote that git-svn keeps track of the highest revision in which a branch\nor tag has appeared. If the subset of branches or tags is changed after\nfetching, then $GIT_DIR/svn/.metadata must be manually edited to remove\n(or reset) branches-maxRev and/or tags-maxRev as appropriate.\n"
        },
        "FILES": {
            "name": "FILES",
            "start_index": 45791,
            "end_index": 45804,
            "value": "$GIT_DIR/svn/\\**/.rev_map.*::\n\tMapping between Subversion revision numbers and Git commit\n\tnames.  In a repository where the noMetadata option is not set,\n\tthis can be rebuilt from the git-svn-id: lines that are at the\n\tend of every commit (see the 'svn.noMetadata' section above for\n\tdetails).\n+\n'git svn fetch' and 'git svn rebase' automatically update the rev_map\nif it is missing or not up to date.  'git svn reset' automatically\nrewinds it.\n\nSEE ALSO\n--------\nlinkgit:git-rebase[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 46291,
            "end_index": 46300,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-switch.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 28,
            "end_index": 39,
            "value": "git-switch - Switch branches\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 68,
            "end_index": 87,
            "value": "[verse]\n'git switch' [<options>] [--no-guess] <branch>\n'git switch' [<options>] --detach [<start-point>]\n'git switch' [<options>] (-c|-C) <new-branch> [<start-point>]\n'git switch' [<options>] --orphan <new-branch>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 301,
            "end_index": 326,
            "value": "Switch to a specified branch. The working tree and the index are\nupdated to match the branch. All new commits will be added to the tip\nof this branch.\n\nOptionally a new branch could be created with either `-c`, `-C`,\nautomatically from a remote branch of same name (see `--guess`), or\ndetach the working tree from any branch with `--detach`, along with\nswitching.\n\nSwitching branches does not require a clean index and working tree\n(i.e. no differences compared to `HEAD`). The operation is aborted\nhowever if the operation leads to loss of local changes, unless told\notherwise with `--discard-changes` or `--merge`.\n\nTHIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 999,
            "end_index": 1016,
            "value": "\n<branch>::\n\tBranch to switch to.\n\n<new-branch>::\n\tName for the new branch.\n\n<start-point>::\n\tThe starting point for the new branch. Specifying a\n\t`<start-point>` allows you to create a branch based on some\n\tother point in history than where HEAD currently points. (Or,\n\tin the case of `--detach`, allows you to inspect and detach\n\tfrom some other point.)\n+\nYou can use the `@{-N}` syntax to refer to the N-th last\nbranch/commit switched to using \"git switch\" or \"git checkout\"\noperation. You may also specify `-` which is synonymous to `@{-1}`.\nThis is often used to switch quickly between two branches, or to undo\na branch switch by mistake.\n+\nAs a special case, you may use `A...B` as a shortcut for the merge\nbase of `A` and `B` if there is exactly one merge base. You can leave\nout at most one of `A` and `B`, in which case it defaults to `HEAD`.\n\n-c <new-branch>::\n--create <new-branch>::\n\tCreate a new branch named `<new-branch>` starting at\n\t`<start-point>` before switching to the branch. This is a\n\tconvenient shortcut for:\n+\n------------\n$ git branch <new-branch>\n$ git switch <new-branch>\n------------\n\n-C <new-branch>::\n--force-create <new-branch>::\n\tSimilar to `--create` except that if `<new-branch>` already\n\texists, it will be reset to `<start-point>`. This is a\n\tconvenient shortcut for:\n+\n------------\n$ git branch -f <new-branch>\n$ git switch <new-branch>\n------------\n\n-d::\n--detach::\n\tSwitch to a commit for inspection and discardable\n\texperiments. See the \"DETACHED HEAD\" section in\n\tlinkgit:git-checkout[1] for details.\n\n--guess::\n--no-guess::\n\tIf `<branch>` is not found but there does exist a tracking\n\tbranch in exactly one remote (call it `<remote>`) with a\n\tmatching name, treat as equivalent to\n+\n------------\n$ git switch -c <branch> --track <remote>/<branch>\n------------\n+\nIf the branch exists in multiple remotes and one of them is named by\nthe `checkout.defaultRemote` configuration variable, we'll use that\none for the purposes of disambiguation, even if the `<branch>` isn't\nunique across all remotes. Set it to e.g. `checkout.defaultRemote=origin`\nto always checkout remote branches from there if `<branch>` is\nambiguous but exists on the 'origin' remote. See also\n`checkout.defaultRemote` in linkgit:git-config[1].\n+\n`--guess` is the default behavior. Use `--no-guess` to disable it.\n+\nThe default behavior can be set via the `checkout.guess` configuration\nvariable.\n\n-f::\n--force::\n\tAn alias for `--discard-changes`.\n\n--discard-changes::\n\tProceed even if the index or the working tree differs from\n\t`HEAD`. Both the index and working tree are restored to match\n\tthe switching target. If `--recurse-submodules` is specified,\n\tsubmodule content is also restored to match the switching\n\ttarget. This is used to throw away local changes.\n\n-m::\n--merge::\n\tIf you have local modifications to one or more files that are\n\tdifferent between the current branch and the branch to which\n\tyou are switching, the command refuses to switch branches in\n\torder to preserve your modifications in context.  However,\n\twith this option, a three-way merge between the current\n\tbranch, your working tree contents, and the new branch is\n\tdone, and you will be on the new branch.\n+\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with `git add` (or `git rm` if the merge\nshould result in deletion of the path).\n\n--conflict=<style>::\n\tThe same as `--merge` option above, but changes the way the\n\tconflicting hunks are presented, overriding the\n\t`merge.conflictStyle` configuration variable.  Possible values are\n\t\"merge\" (default) and \"diff3\" (in addition to what is shown by\n\t\"merge\" style, shows the original contents).\n\n-q::\n--quiet::\n\tQuiet, suppress feedback messages.\n\n--progress::\n--no-progress::\n\tProgress status is reported on the standard error stream\n\tby default when it is attached to a terminal, unless `--quiet`\n\tis specified. This flag enables progress reporting even if not\n\tattached to a terminal, regardless of `--quiet`.\n\n-t::\n--track::\n\tWhen creating a new branch, set up \"upstream\" configuration.\n\t`-c` is implied. See `--track` in linkgit:git-branch[1] for\n\tdetails.\n+\nIf no `-c` option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use `hack` as\nthe local branch when branching off of `origin/hack` (or\n`remotes/origin/hack`, or even `refs/remotes/origin/hack`).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with\n`-c` in such a case.\n\n--no-track::\n\tDo not set up \"upstream\" configuration, even if the\n\t`branch.autoSetupMerge` configuration variable is true.\n\n--orphan <new-branch>::\n\tCreate a new 'orphan' branch, named `<new-branch>`. All\n\ttracked files are removed.\n\n--ignore-other-worktrees::\n\t`git switch` refuses when the wanted ref is already\n\tchecked out by another worktree. This option makes it check\n\tthe ref out anyway. In other words, the ref can be held by\n\tmore than one worktree.\n\n--recurse-submodules::\n--no-recurse-submodules::\n\tUsing `--recurse-submodules` will update the content of all\n\tactive submodules according to the commit recorded in the\n\tsuperproject. If nothing (or `--no-recurse-submodules`) is\n\tused, submodules working trees will not be updated. Just\n\tlike linkgit:git-submodule[1], this will detach `HEAD` of the\n\tsubmodules.\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 6611,
            "end_index": 6630,
            "value": "\nThe following command switches to the \"master\" branch:\n\n------------\n$ git switch master\n------------\n\nAfter working in the wrong branch, switching to the correct branch\nwould be done using:\n\n------------\n$ git switch mytopic\n------------\n\nHowever, your \"wrong\" branch and correct \"mytopic\" branch may differ\nin files that you have modified locally, in which case the above\nswitch would fail like this:\n\n------------\n$ git switch mytopic\nerror: You have local changes to 'frotz'; not switching branches.\n------------\n\nYou can give the `-m` flag to the command, which would try a three-way\nmerge:\n\n------------\n$ git switch -m mytopic\nAuto-merging frotz\n------------\n\nAfter this three-way merge, the local modifications are _not_\nregistered in your index file, so `git diff` would show you what\nchanges you made since the tip of the new branch.\n\nTo switch back to the previous branch before we switched to mytopic\n(i.e. \"master\" branch):\n\n------------\n$ git switch -\n------------\n\nYou can grow a new branch from any commit. For example, switch to\n\"HEAD~3\" and create branch \"fixup\":\n\n------------\n$ git switch -c fixup HEAD~3\nSwitched to a new branch 'fixup'\n------------\n\nIf you want to start a new branch from a remote branch of the same\nname:\n\n------------\n$ git switch new-topic\nBranch 'new-topic' set up to track remote branch 'new-topic' from 'origin'\nSwitched to a new branch 'new-topic'\n------------\n\nTo check out commit `HEAD~3` for temporary inspection or experiment\nwithout creating a new branch:\n\n------------\n$ git switch --detach HEAD~3\nHEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits'\n------------\n\nIf it turns out whatever you have done is worth keeping, you can\nalways create a new name for it (without switching away):\n\n------------\n$ git switch -c good-surprises\n------------\n\nSEE ALSO\n--------\nlinkgit:git-checkout[1],\nlinkgit:git-branch[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 8508,
            "end_index": 8517,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-symbolic-ref.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-symbolic-ref - Read, modify and delete symbolic refs\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 108,
            "end_index": 127,
            "value": "[verse]\n'git symbolic-ref' [-m <reason>] <name> <ref>\n'git symbolic-ref' [-q] [--short] <name>\n'git symbolic-ref' --delete [-q] <name>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 262,
            "end_index": 287,
            "value": "Given one argument, reads which branch head the given symbolic\nref refers to and outputs its path, relative to the `.git/`\ndirectory.  Typically you would give `HEAD` as the <name>\nargument to see which branch your working tree is on.\n\nGiven two arguments, creates or updates a symbolic ref <name> to\npoint at the given branch <ref>.\n\nGiven `--delete` and an additional argument, deletes the given\nsymbolic ref.\n\nA symbolic ref is a regular file that stores a string that\nbegins with `ref: refs/`.  For example, your `.git/HEAD` is\na regular file whose contents is `ref: refs/heads/master`.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 878,
            "end_index": 895,
            "value": "\n-d::\n--delete::\n\tDelete the symbolic ref <name>.\n\n-q::\n--quiet::\n\tDo not issue an error message if the <name> is not a\n\tsymbolic ref but a detached HEAD; instead exit with\n\tnon-zero status silently.\n\n--short::\n\tWhen showing the value of <name> as a symbolic ref, try to shorten the\n\tvalue, e.g. from `refs/heads/master` to `master`.\n\n-m::\n\tUpdate the reflog for <name> with <reason>.  This is valid only\n\twhen creating or updating a symbolic ref.\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 1343,
            "end_index": 1356,
            "value": "In the past, `.git/HEAD` was a symbolic link pointing at\n`refs/heads/master`.  When we wanted to switch to another branch,\nwe did `ln -sf refs/heads/newbranch .git/HEAD`, and when we wanted\nto find out which branch we are on, we did `readlink .git/HEAD`.\nBut symbolic links are not entirely portable, so they are now\ndeprecated and symbolic refs (as described above) are used by\ndefault.\n\n'git symbolic-ref' will exit with status 0 if the contents of the\nsymbolic ref were printed correctly, with status 1 if the requested\nname is not a symbolic ref, or 128 if another error occurs.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1939,
            "end_index": 1948,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-tag.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-tag - Create, list, delete or verify a tag object signed with GPG\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 104,
            "end_index": 123,
            "value": "[verse]\n'git tag' [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]\n\t<tagname> [<commit> | <object>]\n'git tag' -d <tagname>...\n'git tag' [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n\t[--points-at <object>] [--column[=<options>] | --no-column]\n\t[--create-reflog] [--sort=<key>] [--format=<format>]\n\t[--merged <commit>] [--no-merged <commit>] [<pattern>...]\n'git tag' -v [--format=<format>] <tagname>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 548,
            "end_index": 573,
            "value": "\nAdd a tag reference in `refs/tags/`, unless `-d/-l/-v` is given\nto delete, list or verify tags.\n\nUnless `-f` is given, the named tag must not yet exist.\n\nIf one of `-a`, `-s`, or `-u <keyid>` is passed, the command\ncreates a 'tag' object, and requires a tag message.  Unless\n`-m <msg>` or `-F <file>` is given, an editor is started for the user to type\nin the tag message.\n\nIf `-m <msg>` or `-F <file>` is given and `-a`, `-s`, and `-u <keyid>`\nare absent, `-a` is implied.\n\nOtherwise, a tag reference that points directly at the given object\n(i.e., a lightweight tag) is created.\n\nA GnuPG signed tag object will be created when `-s` or `-u\n<keyid>` is used.  When `-u <keyid>` is not used, the\ncommitter identity for the current user is used to find the\nGnuPG key for signing. \tThe configuration variable `gpg.program`\nis used to specify custom GnuPG binary.\n\nTag objects (created with `-a`, `-s`, or `-u`) are called \"annotated\"\ntags; they contain a creation date, the tagger name and e-mail, a\ntagging message, and an optional GnuPG signature. Whereas a\n\"lightweight\" tag is simply a name for an object (usually a commit\nobject).\n\nAnnotated tags are meant for release while lightweight tags are meant\nfor private or temporary object labels. For this reason, some git\ncommands for naming objects (like `git describe`) will ignore\nlightweight tags by default.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1936,
            "end_index": 1953,
            "value": "\n-a::\n--annotate::\n\tMake an unsigned, annotated tag object\n\n-s::\n--sign::\n\tMake a GPG-signed tag, using the default e-mail address's key.\n\tThe default behavior of tag GPG-signing is controlled by `tag.gpgSign`\n\tconfiguration variable if it exists, or disabled otherwise.\n\tSee linkgit:git-config[1].\n\n--no-sign::\n\tOverride `tag.gpgSign` configuration variable that is\n\tset to force each and every tag to be signed.\n\n-u <keyid>::\n--local-user=<keyid>::\n\tMake a GPG-signed tag, using the given key.\n\n-f::\n--force::\n\tReplace an existing tag with the given name (instead of failing)\n\n-d::\n--delete::\n\tDelete existing tags with the given names.\n\n-v::\n--verify::\n\tVerify the GPG signature of the given tag names.\n\n-n<num>::\n\t<num> specifies how many lines from the annotation, if any,\n\tare printed when using -l. Implies `--list`.\n+\nThe default is not to print any annotation lines.\nIf no number is given to `-n`, only the first line is printed.\nIf the tag is not annotated, the commit message is displayed instead.\n\n-l::\n--list::\n\tList tags. With optional `<pattern>...`, e.g. `git tag --list\n\t'v-*'`, list only the tags that match the pattern(s).\n+\nRunning \"git tag\" without arguments also lists all tags. The pattern\nis a shell wildcard (i.e., matched using fnmatch(3)). Multiple\npatterns may be given; if any of them matches, the tag is shown.\n+\nThis option is implicitly supplied if any other list-like option such\nas `--contains` is provided. See the documentation for each of those\noptions for details.\n\n--sort=<key>::\n\tSort based on the key given.  Prefix `-` to sort in\n\tdescending order of the value. You may use the --sort=<key> option\n\tmultiple times, in which case the last key becomes the primary\n\tkey. Also supports \"version:refname\" or \"v:refname\" (tag\n\tnames are treated as versions). The \"version:refname\" sort\n\torder can also be affected by the \"versionsort.suffix\"\n\tconfiguration variable.\n\tThe keys supported are the same as those in `git for-each-ref`.\n\tSort order defaults to the value configured for the `tag.sort`\n\tvariable if it exists, or lexicographic order otherwise. See\n\tlinkgit:git-config[1].\n\n--color[=<when>]::\n\tRespect any colors specified in the `--format` option. The\n\t`<when>` field must be one of `always`, `never`, or `auto` (if\n\t`<when>` is absent, behave as if `always` was given).\n\n-i::\n--ignore-case::\n\tSorting and filtering tags are case insensitive.\n\n--column[=<options>]::\n--no-column::\n\tDisplay tag listing in columns. See configuration variable\n\t`column.tag` for option syntax. `--column` and `--no-column`\n\twithout options are equivalent to 'always' and 'never' respectively.\n+\nThis option is only applicable when listing tags without annotation lines.\n\n--contains [<commit>]::\n\tOnly list tags which contain the specified commit (HEAD if not\n\tspecified). Implies `--list`.\n\n--no-contains [<commit>]::\n\tOnly list tags which don't contain the specified commit (HEAD if\n\tnot specified). Implies `--list`.\n\n--merged [<commit>]::\n\tOnly list tags whose commits are reachable from the specified\n\tcommit (`HEAD` if not specified).\n\n--no-merged [<commit>]::\n\tOnly list tags whose commits are not reachable from the specified\n\tcommit (`HEAD` if not specified).\n\n--points-at <object>::\n\tOnly list tags of the given object (HEAD if not\n\tspecified). Implies `--list`.\n\n-m <msg>::\n--message=<msg>::\n\tUse the given tag message (instead of prompting).\n\tIf multiple `-m` options are given, their values are\n\tconcatenated as separate paragraphs.\n\tImplies `-a` if none of `-a`, `-s`, or `-u <keyid>`\n\tis given.\n\n-F <file>::\n--file=<file>::\n\tTake the tag message from the given file.  Use '-' to\n\tread the message from the standard input.\n\tImplies `-a` if none of `-a`, `-s`, or `-u <keyid>`\n\tis given.\n\n-e::\n--edit::\n\tThe message taken from file with `-F` and command line with\n\t`-m` are usually used as the tag message unmodified.\n\tThis option lets you further edit the message taken from these sources.\n\n--cleanup=<mode>::\n\tThis option sets how the tag message is cleaned up.\n\tThe  '<mode>' can be one of 'verbatim', 'whitespace' and 'strip'.  The\n\t'strip' mode is default. The 'verbatim' mode does not change message at\n\tall, 'whitespace' removes just leading/trailing whitespace lines and\n\t'strip' removes both whitespace and commentary.\n\n--create-reflog::\n\tCreate a reflog for the tag. To globally enable reflogs for tags, see\n\t`core.logAllRefUpdates` in linkgit:git-config[1].\n\tThe negated form `--no-create-reflog` only overrides an earlier\n\t`--create-reflog`, but currently does not negate the setting of\n\t`core.logAllRefUpdates`.\n\n--format=<format>::\n\tA string that interpolates `%(fieldname)` from a tag ref being shown\n\tand the object it points at.  The format is the same as\n\tthat of linkgit:git-for-each-ref[1].  When unspecified,\n\tdefaults to `%(refname:strip=2)`.\n\n<tagname>::\n\tThe name of the tag to create, delete, or describe.\n\tThe new tag name must pass all checks defined by\n\tlinkgit:git-check-ref-format[1].  Some of these checks\n\tmay restrict the characters allowed in a tag name.\n\n<commit>::\n<object>::\n\tThe object that the new tag will refer to, usually a commit.\n\tDefaults to HEAD.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 7083,
            "end_index": 7112,
            "value": "By default, 'git tag' in sign-with-default mode (-s) will use your\ncommitter identity (of the form `Your Name <your@email.address>`) to\nfind a key.  If you want to use a different default key, you can specify\nit in the repository configuration as follows:\n\n-------------------------------------\n[user]\n    signingKey = <gpg-keyid>\n-------------------------------------\n\n`pager.tag` is only respected when listing tags, i.e., when `-l` is\nused or implied. The default is to use a pager.\nSee linkgit:git-config[1].\n"
        },
        "DISCUSSION": {
            "name": "DISCUSSION",
            "start_index": 7625,
            "end_index": 7648,
            "value": "\nOn Re-tagging\n~~~~~~~~~~~~~\n\nWhat should you do when you tag a wrong commit and you would\nwant to re-tag?\n\nIf you never pushed anything out, just re-tag it. Use \"-f\" to\nreplace the old one. And you're done.\n\nBut if you have pushed things out (or others could just read\nyour repository directly), then others will have already seen\nthe old tag. In that case you can do one of two things:\n\n. The sane thing.\n  Just admit you screwed up, and use a different name. Others have\n  already seen one tag-name, and if you keep the same name, you\n  may be in the situation that two people both have \"version X\",\n  but they actually have 'different' \"X\"'s.  So just call it \"X.1\"\n  and be done with it.\n\n. The insane thing.\n  You really want to call the new version \"X\" too, 'even though'\n  others have already seen the old one. So just use 'git tag -f'\n  again, as if you hadn't already published the old one.\n\nHowever, Git does *not* (and it should not) change tags behind\nusers back. So if somebody already got the old tag, doing a\n'git pull' on your tree shouldn't just make them overwrite the old\none.\n\nIf somebody got a release tag from you, you cannot just change\nthe tag for them by updating your own one. This is a big\nsecurity issue, in that people MUST be able to trust their\ntag-names.  If you really want to do the insane thing, you need\nto just fess up to it, and tell people that you messed up. You\ncan do that by making a very public announcement saying:\n\n------------\nOk, I messed up, and I pushed out an earlier version tagged as X. I\nthen fixed something, and retagged the *fixed* tree as X again.\n\nIf you got the wrong tag, and want the new one, please delete\nthe old one and fetch the new one by doing:\n\n\tgit tag -d X\n\tgit fetch origin tag X\n\nto get my updated tag.\n\nYou can test which tag you have by doing\n\n\tgit rev-parse X\n\nwhich should return 0123456789abcdef.. if you have the new version.\n\nSorry for the inconvenience.\n------------\n\nDoes this seem a bit complicated?  It *should* be. There is no\nway that it would be correct to just \"fix\" it automatically.\nPeople need to know that their tags might have been changed.\n\n\nOn Automatic following\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are following somebody else's tree, you are most likely\nusing remote-tracking branches (eg. `refs/remotes/origin/master`).\nYou usually want the tags from the other end.\n\nOn the other hand, if you are fetching because you would want a\none-shot merge from somebody else, you typically do not want to\nget tags from there.  This happens more often for people near\nthe toplevel but not limited to them.  Mere mortals when pulling\nfrom each other do not necessarily want to automatically get\nprivate anchor point tags from the other person.\n\nOften, \"please pull\" messages on the mailing list just provide\ntwo pieces of information: a repo URL and a branch name; this\nis designed to be easily cut&pasted at the end of a 'git fetch'\ncommand line:\n\n------------\nLinus, please pull from\n\n\tgit://git..../proj.git master\n\nto get the following updates...\n------------\n\nbecomes:\n\n------------\n$ git pull git://git..../proj.git master\n------------\n\nIn such a case, you do not want to automatically follow the other\nperson's tags.\n\nOne important aspect of Git is its distributed nature, which\nlargely means there is no inherent \"upstream\" or\n\"downstream\" in the system.  On the face of it, the above\nexample might seem to indicate that the tag namespace is owned\nby the upper echelon of people and that tags only flow downwards, but\nthat is not the case.  It only shows that the usage pattern\ndetermines who are interested in whose tags.\n\nA one-shot pull is a sign that a commit history is now crossing\nthe boundary between one circle of people (e.g. \"people who are\nprimarily interested in the networking part of the kernel\") who may\nhave their own set of tags (e.g. \"this is the third release\ncandidate from the networking group to be proposed for general\nconsumption with 2.6.21 release\") to another circle of people\n(e.g. \"people who integrate various subsystem improvements\").\nThe latter are usually not interested in the detailed tags used\ninternally in the former group (that is what \"internal\" means).\nThat is why it is desirable not to follow tags automatically in\nthis case.\n\nIt may well be that among networking people, they may want to\nexchange the tags internal to their group, but in that workflow\nthey are most likely tracking each other's progress by\nhaving remote-tracking branches.  Again, the heuristic to automatically\nfollow such tags is a good thing.\n\n\nOn Backdating Tags\n~~~~~~~~~~~~~~~~~~\n\nIf you have imported some changes from another VCS and would like\nto add tags for major releases of your work, it is useful to be able\nto specify the date to embed inside of the tag object; such data in\nthe tag object affects, for example, the ordering of tags in the\ngitweb interface.\n\nTo set the date used in future tag objects, set the environment\nvariable GIT_COMMITTER_DATE (see the later discussion of possible\nvalues; the most common form is \"YYYY-MM-DD HH:MM\").\n\nFor example:\n\n------------\n$ GIT_COMMITTER_DATE=\"2006-10-02 10:31\" git tag -s v1.0.1\n------------\n\ninclude::date-formats.txt[]\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 12835,
            "end_index": 12848,
            "value": "\ninclude::ref-reachability-filters.txt[]\n\nSEE ALSO\n--------\nlinkgit:git-check-ref-format[1].\nlinkgit:git-config[1].\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 12964,
            "end_index": 12973,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-tools.txt": {},
    "git-unpack-file.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-unpack-file - Creates a temporary file with a blob's contents\n\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 117,
            "end_index": 136,
            "value": "[verse]\n'git unpack-file' <blob>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 169,
            "end_index": 194,
            "value": "Creates a file holding the contents of the blob specified by sha1. It\nreturns the name of the temporary file in the following format:\n\t.merge_file_XXXXX\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 347,
            "end_index": 364,
            "value": "\n<blob>::\n\tMust be a blob id\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 392,
            "end_index": 401,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-unpack-objects.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 44,
            "end_index": 55,
            "value": "git-unpack-objects - Unpack objects from a packed archive\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 114,
            "end_index": 133,
            "value": "[verse]\n'git unpack-objects' [-n] [-q] [-r] [--strict]\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 189,
            "end_index": 214,
            "value": "Read a packed archive (.pack) from the standard input, expanding\nthe objects contained within and writing them into the repository in\n\"loose\" (one object per file) format.\n\nObjects that already exist in the repository will *not* be unpacked\nfrom the packfile.  Therefore, nothing will be unpacked if you use\nthis command on a packfile that exists within the target repository.\n\nSee linkgit:git-repack[1] for options to generate\nnew packs and replace existing ones.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 679,
            "end_index": 696,
            "value": "\n-n::\n        Dry run.  Check the pack file without actually unpacking\n\tthe objects.\n\n-q::\n\tThe command usually shows percentage progress.  This\n\tflag suppresses it.\n\n-r::\n\tWhen unpacking a corrupt packfile, the command dies at\n\tthe first corruption.  This flag tells it to keep going\n\tand make the best effort to recover as many objects as\n\tpossible.\n\n--strict::\n\tDon't write objects with broken content or links.\n\n--max-input-size=<size>::\n\tDie, if the pack is larger than <size>.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1178,
            "end_index": 1187,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-update-index.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 40,
            "end_index": 51,
            "value": "git-update-index - Register file contents in the working tree to the index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 127,
            "end_index": 146,
            "value": "[verse]\n'git update-index'\n\t     [--add] [--remove | --force-remove] [--replace]\n\t     [--refresh] [-q] [--unmerged] [--ignore-missing]\n\t     [(--cacheinfo <mode>,<object>,<file>)...]\n\t     [--chmod=(+|-)x]\n\t     [--[no-]assume-unchanged]\n\t     [--[no-]skip-worktree]\n\t     [--[no-]ignore-skip-worktree-entries]\n\t     [--[no-]fsmonitor-valid]\n\t     [--ignore-submodules]\n\t     [--[no-]split-index]\n\t     [--[no-|test-|force-]untracked-cache]\n\t     [--[no-]fsmonitor]\n\t     [--really-refresh] [--unresolve] [--again | -g]\n\t     [--info-only] [--index-info]\n\t     [-z] [--stdin] [--index-version <n>]\n\t     [--verbose]\n\t     [--] [<file>...]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 786,
            "end_index": 811,
            "value": "Modifies the index. Each file mentioned is updated into the index and\nany 'unmerged' or 'needs updating' state is cleared.\n\nSee also linkgit:git-add[1] for a more user-friendly way to do some of\nthe most common operations on the index.\n\nThe way 'git update-index' handles files it is told about can be modified\nusing the various options:\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1149,
            "end_index": 1166,
            "value": "\n--add::\n\tIf a specified file isn't in the index already then it's\n\tadded.\n\tDefault behaviour is to ignore new files.\n\n--remove::\n\tIf a specified file is in the index but is missing then it's\n\tremoved.\n\tDefault behavior is to ignore removed file.\n\n--refresh::\n\tLooks at the current index and checks to see if merges or\n\tupdates are needed by checking stat() information.\n\n-q::\n        Quiet.  If --refresh finds that the index needs an update, the\n        default behavior is to error out.  This option makes\n\t'git update-index' continue anyway.\n\n--ignore-submodules::\n\tDo not try to update submodules.  This option is only respected\n\twhen passed before --refresh.\n\n--unmerged::\n        If --refresh finds unmerged changes in the index, the default\n\tbehavior is to error out.  This option makes 'git update-index'\n        continue anyway.\n\n--ignore-missing::\n\tIgnores missing files during a --refresh\n\n--cacheinfo <mode>,<object>,<path>::\n--cacheinfo <mode> <object> <path>::\n\tDirectly insert the specified info into the index.  For\n\tbackward compatibility, you can also give these three\n\targuments as three separate parameters, but new users are\n\tencouraged to use a single-parameter form.\n\n--index-info::\n        Read index information from stdin.\n\n--chmod=(+|-)x::\n        Set the execute permissions on the updated files.\n\n--[no-]assume-unchanged::\n\tWhen this flag is specified, the object names recorded\n\tfor the paths are not updated.  Instead, this option\n\tsets/unsets the \"assume unchanged\" bit for the\n\tpaths.  When the \"assume unchanged\" bit is on, the user\n\tpromises not to change the file and allows Git to assume\n\tthat the working tree file matches what is recorded in\n\tthe index.  If you want to change the working tree file,\n\tyou need to unset the bit to tell Git.  This is\n\tsometimes helpful when working with a big project on a\n\tfilesystem that has very slow lstat(2) system call\n\t(e.g. cifs).\n+\nGit will fail (gracefully) in case it needs to modify this file\nin the index e.g. when merging in a commit;\nthus, in case the assumed-untracked file is changed upstream,\nyou will need to handle the situation manually.\n\n--really-refresh::\n\tLike `--refresh`, but checks stat information unconditionally,\n\twithout regard to the \"assume unchanged\" setting.\n\n--[no-]skip-worktree::\n\tWhen one of these flags is specified, the object name recorded\n\tfor the paths are not updated. Instead, these options\n\tset and unset the \"skip-worktree\" bit for the paths. See\n\tsection \"Skip-worktree bit\" below for more information.\n\n\n--[no-]ignore-skip-worktree-entries::\n\tDo not remove skip-worktree (AKA \"index-only\") entries even when\n\tthe `--remove` option was specified.\n\n--[no-]fsmonitor-valid::\n\tWhen one of these flags is specified, the object name recorded\n\tfor the paths are not updated. Instead, these options\n\tset and unset the \"fsmonitor valid\" bit for the paths. See\n\tsection \"File System Monitor\" below for more information.\n\n-g::\n--again::\n\tRuns 'git update-index' itself on the paths whose index\n\tentries are different from those from the `HEAD` commit.\n\n--unresolve::\n\tRestores the 'unmerged' or 'needs updating' state of a\n\tfile during a merge if it was cleared by accident.\n\n--info-only::\n\tDo not create objects in the object database for all\n\t<file> arguments that follow this flag; just insert\n\ttheir object IDs into the index.\n\n--force-remove::\n\tRemove the file from the index even when the working directory\n\tstill has such a file. (Implies --remove.)\n\n--replace::\n\tBy default, when a file `path` exists in the index,\n\t'git update-index' refuses an attempt to add `path/file`.\n\tSimilarly if a file `path/file` exists, a file `path`\n\tcannot be added.  With --replace flag, existing entries\n\tthat conflict with the entry being added are\n\tautomatically removed with warning messages.\n\n--stdin::\n\tInstead of taking list of paths from the command line,\n\tread list of paths from the standard input.  Paths are\n\tseparated by LF (i.e. one path per line) by default.\n\n--verbose::\n        Report what is being added and removed from index.\n\n--index-version <n>::\n\tWrite the resulting index out in the named on-disk format version.\n\tSupported versions are 2, 3 and 4. The current default version is 2\n\tor 3, depending on whether extra features are used, such as\n\t`git add -N`.\n+\nVersion 4 performs a simple pathname compression that reduces index\nsize by 30%-50% on large repositories, which results in faster load\ntime. Version 4 is relatively young (first released in 1.8.0 in\nOctober 2012). Other Git implementations such as JGit and libgit2\nmay not support it yet.\n\n-z::\n\tOnly meaningful with `--stdin` or `--index-info`; paths are\n\tseparated with NUL character instead of LF.\n\n--split-index::\n--no-split-index::\n\tEnable or disable split index mode. If split-index mode is\n\talready enabled and `--split-index` is given again, all\n\tchanges in $GIT_DIR/index are pushed back to the shared index\n\tfile.\n+\nThese options take effect whatever the value of the `core.splitIndex`\nconfiguration variable (see linkgit:git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option.\n\n--untracked-cache::\n--no-untracked-cache::\n\tEnable or disable untracked cache feature. Please use\n\t`--test-untracked-cache` before enabling it.\n+\nThese options take effect whatever the value of the `core.untrackedCache`\nconfiguration variable (see linkgit:git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option.\n\n--test-untracked-cache::\n\tOnly perform tests on the working directory to make sure\n\tuntracked cache can be used. You have to manually enable\n\tuntracked cache using `--untracked-cache` or\n\t`--force-untracked-cache` or the `core.untrackedCache`\n\tconfiguration variable afterwards if you really want to use\n\tit. If a test fails the exit code is 1 and a message\n\texplains what is not working as needed, otherwise the exit\n\tcode is 0 and OK is printed.\n\n--force-untracked-cache::\n\tSame as `--untracked-cache`. Provided for backwards\n\tcompatibility with older versions of Git where\n\t`--untracked-cache` used to imply `--test-untracked-cache` but\n\tthis option would enable the extension unconditionally.\n\n--fsmonitor::\n--no-fsmonitor::\n\tEnable or disable files system monitor feature. These options\n\ttake effect whatever the value of the `core.fsmonitor`\n\tconfiguration variable (see linkgit:git-config[1]). But a warning\n\tis emitted when the change goes against the configured value, as\n\tthe configured value will take effect next time the index is\n\tread and this will remove the intended effect of the option.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\n<file>::\n\tFiles to act on.\n\tNote that files beginning with '.' are discarded. This includes\n\t`./file` and `dir/./file`. If you don't want this, then use\n\tcleaner names.\n\tThe same applies to directories ending '/' and paths with '//'\n\nUSING --REFRESH\n---------------\n`--refresh` does not calculate a new sha1 file or bring the index\nup to date for mode/content changes. But what it *does* do is to\n\"re-match\" the stat information of a file with the index, so that you\ncan refresh the index for a file that hasn't been changed but where\nthe stat entry is out of date.\n\nFor example, you'd want to do this after doing a 'git read-tree', to link\nup the stat index details with the proper files.\n\nUSING --CACHEINFO OR --INFO-ONLY\n--------------------------------\n`--cacheinfo` is used to register a file that is not in the\ncurrent working directory.  This is useful for minimum-checkout\nmerging.\n\nTo pretend you have a file at path with mode and sha1, say:\n\n----------------\n$ git update-index --add --cacheinfo <mode>,<sha1>,<path>\n----------------\n\n`--info-only` is used to register files without placing them in the object\ndatabase.  This is useful for status-only repositories.\n\nBoth `--cacheinfo` and `--info-only` behave similarly: the index is updated\nbut the object database isn't.  `--cacheinfo` is useful when the object is\nin the database but the file isn't available locally.  `--info-only` is\nuseful when the file is available, but you do not wish to update the\nobject database.\n\n\nUSING --INDEX-INFO\n------------------\n\n`--index-info` is a more powerful mechanism that lets you feed\nmultiple entry definitions from the standard input, and designed\nspecifically for scripts.  It can take inputs of three formats:\n\n    . mode SP type SP sha1          TAB path\n+\nThis format is to stuff `git ls-tree` output into the index.\n\n    . mode         SP sha1 SP stage TAB path\n+\nThis format is to put higher order stages into the\nindex file and matches 'git ls-files --stage' output.\n\n    . mode         SP sha1          TAB path\n+\nThis format is no longer produced by any Git command, but is\nand will continue to be supported by `update-index --index-info`.\n\nTo place a higher stage entry to the index, the path should\nfirst be removed by feeding a mode=0 entry for the path, and\nthen feeding necessary input lines in the third format.\n\nFor example, starting with this index:\n\n------------\n$ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz\n------------\n\nyou can feed the following input to `--index-info`:\n\n------------\n$ git update-index --index-info\n0 0000000000000000000000000000000000000000\tfrotz\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1\tfrotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2\tfrotz\n------------\n\nThe first line of the input feeds 0 as the mode to remove the\npath; the SHA-1 does not matter as long as it is well formatted.\nThen the second and third line feeds stage 1 and stage 2 entries\nfor that path.  After the above, we would end up with this:\n\n------------\n$ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1\tfrotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2\tfrotz\n------------\n\n\nUSING ``ASSUME UNCHANGED'' BIT\n------------------------------\n\nMany operations in Git depend on your filesystem to have an\nefficient `lstat(2)` implementation, so that `st_mtime`\ninformation for working tree files can be cheaply checked to see\nif the file contents have changed from the version recorded in\nthe index file.  Unfortunately, some filesystems have\ninefficient `lstat(2)`.  If your filesystem is one of them, you\ncan set \"assume unchanged\" bit to paths you have not changed to\ncause Git not to do this check.  Note that setting this bit on a\npath does not mean Git will check the contents of the file to\nsee if it has changed -- it makes Git to omit any checking and\nassume it has *not* changed.  When you make changes to working\ntree files, you have to explicitly tell Git about it by dropping\n\"assume unchanged\" bit, either before or after you modify them.\n\nIn order to set \"assume unchanged\" bit, use `--assume-unchanged`\noption.  To unset, use `--no-assume-unchanged`. To see which files\nhave the \"assume unchanged\" bit set, use `git ls-files -v`\n(see linkgit:git-ls-files[1]).\n\nThe command looks at `core.ignorestat` configuration variable.  When\nthis is true, paths updated with `git update-index paths...` and\npaths updated with other Git commands that update both index and\nworking tree (e.g. 'git apply --index', 'git checkout-index -u',\nand 'git read-tree -u') are automatically marked as \"assume\nunchanged\".  Note that \"assume unchanged\" bit is *not* set if\n`git update-index --refresh` finds the working tree file matches\nthe index (use `git update-index --really-refresh` if you want\nto mark them as \"assume unchanged\").\n\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 12849,
            "end_index": 12868,
            "value": "To update and refresh only the files already checked out:\n\n----------------\n$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh\n----------------\n\nOn an inefficient filesystem with `core.ignorestat` set::\n+\n------------\n$ git update-index --really-refresh              <1>\n$ git update-index --no-assume-unchanged foo.c   <2>\n$ git diff --name-only                           <3>\n$ edit foo.c\n$ git diff --name-only                           <4>\nM foo.c\n$ git update-index foo.c                         <5>\n$ git diff --name-only                           <6>\n$ edit foo.c\n$ git diff --name-only                           <7>\n$ git update-index --no-assume-unchanged foo.c   <8>\n$ git diff --name-only                           <9>\nM foo.c\n------------\n+\n<1> forces lstat(2) to set \"assume unchanged\" bits for paths that match index.\n<2> mark the path to be edited.\n<3> this does lstat(2) and finds index matches the path.\n<4> this does lstat(2) and finds index does *not* match the path.\n<5> registering the new version to index sets \"assume unchanged\" bit.\n<6> and it is assumed unchanged.\n<7> even after you edit it.\n<8> you can tell about the change after the fact.\n<9> now it checks with lstat(2) and finds it has been changed.\n\n\nSKIP-WORKTREE BIT\n-----------------\n\nSkip-worktree bit can be defined in one (long) sentence: When reading\nan entry, if it is marked as skip-worktree, then Git pretends its\nworking directory version is up to date and read the index version\ninstead.\n\nTo elaborate, \"reading\" means checking for file existence, reading\nfile attributes or file content. The working directory version may be\npresent or absent. If present, its content may match against the index\nversion or not. Writing is not affected by this bit, content safety\nis still first priority. Note that Git _can_ update working directory\nfile, that is marked skip-worktree, if it is safe to do so (i.e.\nworking directory version matches index version)\n\nAlthough this bit looks similar to assume-unchanged bit, its goal is\ndifferent from assume-unchanged bit's. Skip-worktree also takes\nprecedence over assume-unchanged bit when both are set.\n\nSPLIT INDEX\n-----------\n\nThis mode is designed for repositories with very large indexes, and\naims at reducing the time it takes to repeatedly write these indexes.\n\nIn this mode, the index is split into two files, $GIT_DIR/index and\n$GIT_DIR/sharedindex.<SHA-1>. Changes are accumulated in\n$GIT_DIR/index, the split index, while the shared index file contains\nall index entries and stays unchanged.\n\nAll changes in the split index are pushed back to the shared index\nfile when the number of entries in the split index reaches a level\nspecified by the splitIndex.maxPercentChange config variable (see\nlinkgit:git-config[1]).\n\nEach time a new shared index file is created, the old shared index\nfiles are deleted if their modification time is older than what is\nspecified by the splitIndex.sharedIndexExpire config variable (see\nlinkgit:git-config[1]).\n\nTo avoid deleting a shared index file that is still used, its\nmodification time is updated to the current time every time a new split\nindex based on the shared index file is either created or read from.\n\nUNTRACKED CACHE\n---------------\n\nThis cache is meant to speed up commands that involve determining\nuntracked files such as `git status`.\n\nThis feature works by recording the mtime of the working tree\ndirectories and then omitting reading directories and stat calls\nagainst files in those directories whose mtime hasn't changed. For\nthis to work the underlying operating system and file system must\nchange the `st_mtime` field of directories if files in the directory\nare added, modified or deleted.\n\nYou can test whether the filesystem supports that with the\n`--test-untracked-cache` option. The `--untracked-cache` option used\nto implicitly perform that test in older versions of Git, but that's\nno longer the case.\n\nIf you want to enable (or disable) this feature, it is easier to use\nthe `core.untrackedCache` configuration variable (see\nlinkgit:git-config[1]) than using the `--untracked-cache` option to\n`git update-index` in each repository, especially if you want to do so\nacross all repositories you use, because you can set the configuration\nvariable to `true` (or `false`) in your `$HOME/.gitconfig` just once\nand have it affect all repositories you touch.\n\nWhen the `core.untrackedCache` configuration variable is changed, the\nuntracked cache is added to or removed from the index the next time a\ncommand reads the index; while when `--[no-|force-]untracked-cache`\nare used, the untracked cache is immediately added to or removed from\nthe index.\n\nBefore 2.17, the untracked cache had a bug where replacing a directory\nwith a symlink to another directory could cause it to incorrectly show\nfiles tracked by git as untracked. See the \"status: add a failing test\nshowing a core.untrackedCache bug\" commit to git.git. A workaround for\nthat is (and this might work for other undiscovered bugs in the\nfuture):\n\n----------------\n$ git -c core.untrackedCache=false status\n----------------\n\nThis bug has also been shown to affect non-symlink cases of replacing\na directory with a file when it comes to the internal structures of\nthe untracked cache, but no case has been reported where this resulted in\nwrong \"git status\" output.\n\nThere are also cases where existing indexes written by git versions\nbefore 2.17 will reference directories that don't exist anymore,\npotentially causing many \"could not open directory\" warnings to be\nprinted on \"git status\". These are new warnings for existing issues\nthat were previously silently discarded.\n\nAs with the bug described above the solution is to one-off do a \"git\nstatus\" run with `core.untrackedCache=false` to flush out the leftover\nbad data.\n\nFILE SYSTEM MONITOR\n-------------------\n\nThis feature is intended to speed up git operations for repos that have\nlarge working directories.\n\nIt enables git to work together with a file system monitor (see the\n\"fsmonitor-watchman\" section of linkgit:githooks[5]) that can\ninform it as to what files have been modified. This enables git to avoid\nhaving to lstat() every file to find modified files.\n\nWhen used in conjunction with the untracked cache, it can further improve\nperformance by avoiding the cost of scanning the entire working directory\nlooking for new files.\n\nIf you want to enable (or disable) this feature, it is easier to use\nthe `core.fsmonitor` configuration variable (see\nlinkgit:git-config[1]) than using the `--fsmonitor` option to\n`git update-index` in each repository, especially if you want to do so\nacross all repositories you use, because you can set the configuration\nvariable in your `$HOME/.gitconfig` just once and have it affect all\nrepositories you touch.\n\nWhen the `core.fsmonitor` configuration variable is changed, the\nfile system monitor is added to or removed from the index the next time\na command reads the index. When `--[no-]fsmonitor` are used, the file\nsystem monitor is immediately added to or removed from the index.\n"
        },
        "CONFIGURATION": {
            "name": "CONFIGURATION",
            "start_index": 19934,
            "end_index": 19963,
            "value": "\nThe command honors `core.filemode` configuration variable.  If\nyour repository is on a filesystem whose executable bits are\nunreliable, this should be set to 'false' (see linkgit:git-config[1]).\nThis causes the command to ignore differences in file modes recorded\nin the index and the file mode on the filesystem if they differ only on\nexecutable bit.   On such an unfortunate filesystem, you may\nneed to use 'git update-index --chmod='.\n\nQuite similarly, if `core.symlinks` configuration variable is set\nto 'false' (see linkgit:git-config[1]), symbolic links are checked out\nas plain files, and this command does not modify a recorded file mode\nfrom symbolic link to regular file.\n\nThe command looks at `core.ignorestat` configuration variable.  See\n'Using \"assume unchanged\" bit' section above.\n\nThe command also looks at `core.trustctime` configuration variable.\nIt can be useful when the inode change time is regularly modified by\nsomething outside Git (file system crawlers and backup systems use\nctime for marking files processed) (see linkgit:git-config[1]).\n\nThe untracked cache extension can be enabled by the\n`core.untrackedCache` configuration variable (see\nlinkgit:git-config[1]).\n"
        },
        "NOTES": {
            "name": "NOTES",
            "start_index": 21157,
            "end_index": 21170,
            "value": "\nUsers often try to use the assume-unchanged and skip-worktree bits\nto tell Git to ignore changes to files that are tracked.  This does not\nwork as expected, since Git may still check working tree files against\nthe index when performing certain operations.  In general, Git does not\nprovide a way to ignore changes to tracked files, so alternate solutions\nare recommended.\n\nFor example, if the file you want to change is some sort of config file,\nthe repository can include a sample config file that can then be copied\ninto the ignored name and modified.  The repository can even include a\nscript to treat the sample file as a template, modifying and copying it\nautomatically.\n\nSEE ALSO\n--------\nlinkgit:git-config[1],\nlinkgit:git-add[1],\nlinkgit:git-ls-files[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 21933,
            "end_index": 21942,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-update-ref.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-update-ref - Update the object name stored in a ref safely\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 110,
            "end_index": 129,
            "value": "[verse]\n'git update-ref' [-m <reason>] [--no-deref] (-d <ref> [<oldvalue>] | [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 270,
            "end_index": 295,
            "value": "Given two arguments, stores the <newvalue> in the <ref>, possibly\ndereferencing the symbolic refs.  E.g. `git update-ref HEAD\n<newvalue>` updates the current branch head to the new object.\n\nGiven three arguments, stores the <newvalue> in the <ref>,\npossibly dereferencing the symbolic refs, after verifying that\nthe current value of the <ref> matches <oldvalue>.\nE.g. `git update-ref refs/heads/master <newvalue> <oldvalue>`\nupdates the master branch head to <newvalue> only if its current\nvalue is <oldvalue>.  You can specify 40 \"0\" or an empty string\nas <oldvalue> to make sure that the ref you are creating does\nnot exist.\n\nIt also allows a \"ref\" file to be a symbolic pointer to another\nref file by starting with the four-byte header sequence of\n\"ref:\".\n\nMore importantly, it allows the update of a ref file to follow\nthese symbolic pointers, whether they are symlinks or these\n\"regular file symbolic refs\".  It follows *real* symlinks only\nif they start with \"refs/\": otherwise it will just try to read\nthem and update them as a regular file (i.e. it will allow the\nfilesystem to follow them, but will overwrite such a symlink to\nsomewhere else with a regular filename).\n\nIf --no-deref is given, <ref> itself is overwritten, rather than\nthe result of following the symbolic pointers.\n\nIn general, using\n\n\tgit update-ref HEAD \"$head\"\n\nshould be a _lot_ safer than doing\n\n\techo \"$head\" > \"$GIT_DIR/HEAD\"\n\nboth from a symlink following standpoint *and* an error checking\nstandpoint.  The \"refs/\" rule for symlinks means that symlinks\nthat point to \"outside\" the tree are safe: they'll be followed\nfor reading but not for writing (so we'll never write through a\nref symlink to some other tree, if you have copied a whole\narchive by creating a symlink tree).\n\nWith `-d` flag, it deletes the named <ref> after verifying it\nstill contains <oldvalue>.\n\nWith `--stdin`, update-ref reads instructions from standard input and\nperforms all modifications together.  Specify commands of the form:\n\n\tupdate SP <ref> SP <newvalue> [SP <oldvalue>] LF\n\tcreate SP <ref> SP <newvalue> LF\n\tdelete SP <ref> [SP <oldvalue>] LF\n\tverify SP <ref> [SP <oldvalue>] LF\n\toption SP <opt> LF\n\tstart LF\n\tprepare LF\n\tcommit LF\n\tabort LF\n\nWith `--create-reflog`, update-ref will create a reflog for each ref\neven if one would not ordinarily be created.\n\nQuote fields containing whitespace as if they were strings in C source\ncode; i.e., surrounded by double-quotes and with backslash escapes.\nUse 40 \"0\" characters or the empty string to specify a zero value.  To\nspecify a missing value, omit the value and its preceding SP entirely.\n\nAlternatively, use `-z` to specify in NUL-terminated format, without\nquoting:\n\n\tupdate SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL\n\tcreate SP <ref> NUL <newvalue> NUL\n\tdelete SP <ref> NUL [<oldvalue>] NUL\n\tverify SP <ref> NUL [<oldvalue>] NUL\n\toption SP <opt> NUL\n\tstart NUL\n\tprepare NUL\n\tcommit NUL\n\tabort NUL\n\nIn this format, use 40 \"0\" to specify a zero value, and use the empty\nstring to specify a missing value.\n\nIn either format, values can be specified in any form that Git\nrecognizes as an object name.  Commands in any other format or a\nrepeated <ref> produce an error.  Command meanings are:\n\nupdate::\n\tSet <ref> to <newvalue> after verifying <oldvalue>, if given.\n\tSpecify a zero <newvalue> to ensure the ref does not exist\n\tafter the update and/or a zero <oldvalue> to make sure the\n\tref does not exist before the update.\n\ncreate::\n\tCreate <ref> with <newvalue> after verifying it does not\n\texist.  The given <newvalue> may not be zero.\n\ndelete::\n\tDelete <ref> after verifying it exists with <oldvalue>, if\n\tgiven.  If given, <oldvalue> may not be zero.\n\nverify::\n\tVerify <ref> against <oldvalue> but do not change it.  If\n\t<oldvalue> is zero or missing, the ref must not exist.\n\noption::\n\tModify behavior of the next command naming a <ref>.\n\tThe only valid option is `no-deref` to avoid dereferencing\n\ta symbolic ref.\n\nstart::\n\tStart a transaction. In contrast to a non-transactional session, a\n\ttransaction will automatically abort if the session ends without an\n\texplicit commit. This command may create a new empty transaction when\n\tthe current one has been committed or aborted already.\n\nprepare::\n\tPrepare to commit the transaction. This will create lock files for all\n\tqueued reference updates. If one reference could not be locked, the\n\ttransaction will be aborted.\n\ncommit::\n\tCommit all reference updates queued for the transaction, ending the\n\ttransaction.\n\nabort::\n\tAbort the transaction, releasing all locks if the transaction is in\n\tprepared state.\n\nIf all <ref>s can be locked with matching <oldvalue>s\nsimultaneously, all modifications are performed.  Otherwise, no\nmodifications are performed.  Note that while each individual\n<ref> is updated or deleted atomically, a concurrent reader may\nstill see a subset of the modifications.\n\nLOGGING UPDATES\n---------------\nIf config parameter \"core.logAllRefUpdates\" is true and the ref is one\nunder \"refs/heads/\", \"refs/remotes/\", \"refs/notes/\", or a pseudoref\nlike HEAD or ORIG_HEAD; or the file \"$GIT_DIR/logs/<ref>\" exists then\n`git update-ref` will append a line to the log file\n\"$GIT_DIR/logs/<ref>\" (dereferencing all symbolic refs before creating\nthe log name) describing the change in ref value.  Log lines are\nformatted as:\n\n    oldsha1 SP newsha1 SP committer LF\n\nWhere \"oldsha1\" is the 40 character hexadecimal value previously\nstored in <ref>, \"newsha1\" is the 40 character hexadecimal value of\n<newvalue> and \"committer\" is the committer's name, email address\nand date in the standard Git committer ident format.\n\nOptionally with -m:\n\n    oldsha1 SP newsha1 SP committer TAB message LF\n\nWhere all fields are as described above and \"message\" is the\nvalue supplied to the -m option.\n\nAn update will fail (without changing <ref>) if the current user is\nunable to create a new log file, append to the existing log file\nor does not have committer information available.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 6252,
            "end_index": 6261,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-update-server-info.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 52,
            "end_index": 63,
            "value": "git-update-server-info - Update auxiliary info file to help dumb servers\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 137,
            "end_index": 156,
            "value": "[verse]\n'git update-server-info'\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 189,
            "end_index": 214,
            "value": "A dumb server that does not do on-the-fly pack generations must\nhave some auxiliary information files in $GIT_DIR/info and\n$GIT_OBJECT_DIRECTORY/info directories to help clients discover\nwhat references and packs the server has.  This command\ngenerates such auxiliary files.\n"
        },
        "OUTPUT": {
            "name": "OUTPUT",
            "start_index": 489,
            "end_index": 504,
            "value": "\nCurrently the command updates the following files.  Please see\nlinkgit:gitrepository-layout[5] for description of\nwhat they are for:\n\n* objects/info/packs\n\n* info/refs\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 673,
            "end_index": 682,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-upload-archive.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 44,
            "end_index": 55,
            "value": "git-upload-archive - Send archive back to git-archive\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 110,
            "end_index": 129,
            "value": "[verse]\n'git upload-archive' <directory>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 170,
            "end_index": 195,
            "value": "Invoked by 'git archive --remote' and sends a generated archive to the\nother end over the Git protocol.\n\nThis command is usually not invoked directly by the end user.  The UI\nfor the protocol is on the 'git archive' side, and the program pair\nis meant to be used to get an archive from a remote repository.\n"
        },
        "SECURITY": {
            "name": "SECURITY",
            "start_index": 502,
            "end_index": 521,
            "value": "\nIn order to protect the privacy of objects that have been removed from\nhistory but may not yet have been pruned, `git-upload-archive` avoids\nserving archives for commits and trees that are not reachable from the\nrepository's refs.  However, because calculating object reachability is\ncomputationally expensive, `git-upload-archive` implements a stricter\nbut easier-to-check set of rules:\n\n  1. Clients may request a commit or tree that is pointed to directly by\n     a ref. E.g., `git archive --remote=origin v1.0`.\n\n  2. Clients may request a sub-tree within a commit or tree using the\n     `ref:path` syntax. E.g., `git archive --remote=origin v1.0:Documentation`.\n\n  3. Clients may _not_ use other sha1 expressions, even if the end\n     result is reachable. E.g., neither a relative commit like `master^`\n     nor a literal sha1 like `abcd1234` is allowed, even if the result\n     is reachable from the refs.\n\nNote that rule 3 disallows many cases that do not have any privacy\nimplications. These rules are subject to change in future versions of\ngit, and the server accessed by `git archive --remote` may or may not\nfollow these exact rules.\n\nIf the config option `uploadArchive.allowUnreachable` is true, these\nrules are ignored, and clients may use arbitrary sha1 expressions.\nThis is useful if you do not care about the privacy of unreachable\nobjects, or if your object database is already publicly available for\naccess via non-smart-http.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1969,
            "end_index": 1986,
            "value": "\n<directory>::\n\tThe repository to get a tar archive from.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 2043,
            "end_index": 2052,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-upload-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-upload-pack - Send objects packed back to git-fetch-pack\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 111,
            "end_index": 130,
            "value": "[verse]\n'git-upload-pack' [--[no-]strict] [--timeout=<n>] [--stateless-rpc]\n\t\t  [--advertise-refs] <directory>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 241,
            "end_index": 266,
            "value": "Invoked by 'git fetch-pack', learns what\nobjects the other side is missing, and sends them after packing.\n\nThis command is usually not invoked directly by the end user.\nThe UI for the protocol is on the 'git fetch-pack' side, and the\nprogram pair is meant to be used to pull updates from a remote\nrepository.  For push operations, see 'git send-pack'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 618,
            "end_index": 635,
            "value": "\n--[no-]strict::\n\tDo not try <directory>/.git/ if <directory> is no Git directory.\n\n--timeout=<n>::\n\tInterrupt transfer after <n> seconds of inactivity.\n\n--stateless-rpc::\n\tPerform only a single read-write cycle with stdin and stdout.\n\tThis fits with the HTTP POST request processing model where\n\ta program may read the request, write a response, and must exit.\n\n--advertise-refs::\n\tOnly the initial ref advertisement is output, and the program exits\n\timmediately. This fits with the HTTP GET request model, where\n\tno request content is received but a response must be produced.\n\n<directory>::\n\tThe repository to sync from.\n\nSEE ALSO\n--------\nlinkgit:gitnamespaces[7]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1303,
            "end_index": 1312,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-var.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 22,
            "end_index": 33,
            "value": "git-var - Show a Git logical variable\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 72,
            "end_index": 91,
            "value": "[verse]\n'git var' ( -l | <variable> )\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 129,
            "end_index": 154,
            "value": "Prints a Git logical variable.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 185,
            "end_index": 202,
            "value": "\n-l::\n\tCause the logical variables to be listed. In addition, all the\n\tvariables of the Git configuration file .git/config are listed\n\tas well. (However, the configuration variables listing functionality\n\tis deprecated in favor of `git config -l`.)\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 450,
            "end_index": 469,
            "value": "\t$ git var GIT_AUTHOR_IDENT\n\tEric W. Biederman <ebiederm@lnxi.com> 1121223278 -0600\n\n"
        },
        "VARIABLES": {
            "name": "VARIABLES",
            "start_index": 554,
            "end_index": 575,
            "value": "GIT_AUTHOR_IDENT::\n    The author of a piece of code.\n\nGIT_COMMITTER_IDENT::\n    The person who put a piece of code into Git.\n\nGIT_EDITOR::\n    Text editor for use by Git commands.  The value is meant to be\n    interpreted by the shell when it is used.  Examples: `~/bin/vi`,\n    `$SOME_ENVIRONMENT_VARIABLE`, `\"C:\\Program Files\\Vim\\gvim.exe\"\n    --nofork`.  The order of preference is the `$GIT_EDITOR`\n    environment variable, then `core.editor` configuration, then\n    `$VISUAL`, then `$EDITOR`, and then the default chosen at compile\n    time, which is usually 'vi'.\nifdef::git-default-editor[]\n    The build you are using chose '{git-default-editor}' as the default.\nendif::git-default-editor[]\n\nGIT_PAGER::\n    Text viewer for use by Git commands (e.g., 'less').  The value\n    is meant to be interpreted by the shell.  The order of preference\n    is the `$GIT_PAGER` environment variable, then `core.pager`\n    configuration, then `$PAGER`, and then the default chosen at\n    compile time (usually 'less').\nifdef::git-default-pager[]\n    The build you are using chose '{git-default-pager}' as the default.\nendif::git-default-pager[]\n\nSEE ALSO\n--------\nlinkgit:git-commit-tree[1]\nlinkgit:git-tag[1]\nlinkgit:git-config[1]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1803,
            "end_index": 1812,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-verify-commit.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 42,
            "end_index": 53,
            "value": "git-verify-commit - Check the GPG signature of commits\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 108,
            "end_index": 127,
            "value": "[verse]\n'git verify-commit' <commit>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 167,
            "end_index": 192,
            "value": "Validates the GPG signature created by 'git commit -S'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 248,
            "end_index": 265,
            "value": "\n--raw::\n\tPrint the raw gpg status output to standard error instead of the normal\n\thuman-readable output.\n\n-v::\n--verbose::\n\tPrint the contents of the commit object before validating it.\n\n<commit>...::\n\tSHA-1 identifiers of Git commit objects.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 508,
            "end_index": 517,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-verify-pack.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-verify-pack - Validate packed Git archive files\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 102,
            "end_index": 121,
            "value": "[verse]\n'git verify-pack' [-v|--verbose] [-s|--stat-only] [--] <pack>.idx ...\n\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 200,
            "end_index": 225,
            "value": "Reads given idx file for packed Git archive created with the\n'git pack-objects' command and verifies idx file and the\ncorresponding pack file.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 368,
            "end_index": 385,
            "value": "\n<pack>.idx ...::\n\tThe idx files to verify.\n\n-v::\n--verbose::\n\tAfter verifying the pack, show list of objects contained\n\tin the pack and a histogram of delta chain length.\n\n-s::\n--stat-only::\n\tDo not verify the pack contents; only show the histogram of delta\n\tchain length.  With `--verbose`, list of objects is also shown.\n\n\\--::\n\tDo not interpret any more arguments as options.\n\nOUTPUT FORMAT\n-------------\nWhen specifying the -v option the format used is:\n\n\tSHA-1 type size size-in-packfile offset-in-packfile\n\nfor objects that are not deltified in the pack, and\n\n\tSHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1\n\nfor objects that are deltified.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1054,
            "end_index": 1063,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-verify-tag.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-verify-tag - Check the GPG signature of tags\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 96,
            "end_index": 115,
            "value": "[verse]\n'git verify-tag' [--format=<format>] <tag>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 169,
            "end_index": 194,
            "value": "Validates the gpg signature created by 'git tag'.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 244,
            "end_index": 261,
            "value": "\n--raw::\n\tPrint the raw gpg status output to standard error instead of the normal\n\thuman-readable output.\n\n-v::\n--verbose::\n\tPrint the contents of the tag object before validating it.\n\n<tag>...::\n\tSHA-1 identifiers of Git tag objects.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 495,
            "end_index": 504,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-web--browse.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 48,
            "end_index": 59,
            "value": "git-web--browse - Git helper script to launch a web browser\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 119,
            "end_index": 138,
            "value": "[verse]\n'git web{litdd}browse' [<options>] <url|file>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 195,
            "end_index": 220,
            "value": "\nThis script tries, as much as possible, to display the URLs and FILEs\nthat are passed as arguments, as HTML pages in new tabs on an already\nopened web browser.\n\nThe following browsers (or commands) are currently supported:\n\n* firefox (this is the default under X Window when not using KDE)\n* iceweasel\n* seamonkey\n* iceape\n* chromium (also supported as chromium-browser)\n* google-chrome (also supported as chrome)\n* konqueror (this is the default under KDE, see 'Note about konqueror' below)\n* opera\n* w3m (this is the default outside graphical environments)\n* elinks\n* links\n* lynx\n* dillo\n* open (this is the default under Mac OS X GUI)\n* start (this is the default under MinGW)\n* cygstart (this is the default under Cygwin)\n* xdg-open\n\nCustom commands may also be specified.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 999,
            "end_index": 1016,
            "value": "\n-b <browser>::\n--browser=<browser>::\n\tUse the specified browser. It must be in the list of supported\n\tbrowsers.\n\n-t <browser>::\n--tool=<browser>::\n\tSame as above.\n\n-c <conf.var>::\n--config=<conf.var>::\n\tCONF.VAR is looked up in the Git config files. If it's set,\n\tthen its value specifies the browser that should be used.\n\nCONFIGURATION VARIABLES\n-----------------------\n\nCONF.VAR (from -c option) and web.browser\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe web browser can be specified using a configuration variable passed\nwith the -c (or --config) command-line option, or the `web.browser`\nconfiguration variable if the former is not used.\n\nbrowser.<tool>.path\n~~~~~~~~~~~~~~~~~~~\n\nYou can explicitly provide a full path to your preferred browser by\nsetting the configuration variable `browser.<tool>.path`. For example,\nyou can configure the absolute path to firefox by setting\n'browser.firefox.path'. Otherwise, 'git web{litdd}browse' assumes the tool\nis available in PATH.\n\nbrowser.<tool>.cmd\n~~~~~~~~~~~~~~~~~~\n\nWhen the browser, specified by options or configuration variables, is\nnot among the supported ones, then the corresponding\n`browser.<tool>.cmd` configuration variable will be looked up. If this\nvariable exists then 'git web{litdd}browse' will treat the specified tool\nas a custom command and will use a shell eval to run the command with\nthe URLs passed as arguments.\n\nNOTE ABOUT KONQUEROR\n--------------------\n\nWhen 'konqueror' is specified by a command-line option or a\nconfiguration variable, we launch 'kfmclient' to try to open the HTML\nman page on an already opened konqueror in a new tab if possible.\n\nFor consistency, we also try such a trick if 'browser.konqueror.path' is\nset to something like `A_PATH_TO/konqueror`. That means we will try to\nlaunch `A_PATH_TO/kfmclient` instead.\n\nIf you really want to use 'konqueror', then you can use something like\nthe following:\n\n------------------------------------------------\n\t[web]\n\t\tbrowser = konq\n\n\t[browser \"konq\"]\n\t\tcmd = A_PATH_TO/konqueror\n------------------------------------------------\n\nNote about git-config --global\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNote that these configuration variables should probably be set using\nthe `--global` flag, for example like this:\n\n------------------------------------------------\n$ git config --global web.browser firefox\n------------------------------------------------\n\nas they are probably more user specific than repository specific.\nSee linkgit:git-config[1] for more information about this.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 3530,
            "end_index": 3539,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-whatchanged.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 38,
            "end_index": 49,
            "value": "git-whatchanged - Show logs with difference each commit introduces\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 117,
            "end_index": 136,
            "value": "[verse]\n'git whatchanged' <option>...\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 174,
            "end_index": 199,
            "value": "\nShows commit logs and diff output each commit introduces.\n\nNew users are encouraged to use linkgit:git-log[1] instead.  The\n`whatchanged` command is essentially the same as linkgit:git-log[1]\nbut defaults to show the raw format diff output and to skip merges.\n\nThe command is kept primarily for historical reasons; fingers of\nmany people who learned Git long before `git log` was invented by\nreading Linux kernel mailing list are trained to type it.\n\n"
        },
        "Examples": {
            "name": "Examples",
            "start_index": 651,
            "end_index": 670,
            "value": "`git whatchanged -p v2.6.12.. include/scsi drivers/scsi`::\n\n\tShow as patches the commits since version 'v2.6.12' that changed\n\tany file in the include/scsi or drivers/scsi subdirectories\n\n`git whatchanged --since=\"2 weeks ago\" -- gitk`::\n\n\tShow the changes during the last two weeks to the file 'gitk'.\n\tThe \"--\" is necessary to avoid confusion with the *branch* named\n\t'gitk'\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 1047,
            "end_index": 1056,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-worktree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 32,
            "end_index": 43,
            "value": "git-worktree - Manage multiple working trees\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 89,
            "end_index": 108,
            "value": "[verse]\n'git worktree add' [-f] [--detach] [--checkout] [--lock] [-b <new-branch>] <path> [<commit-ish>]\n'git worktree list' [--porcelain]\n'git worktree lock' [--reason <string>] <worktree>\n'git worktree move' <worktree> <new-path>\n'git worktree prune' [-n] [-v] [--expire <expire>]\n'git worktree remove' [-f] <worktree>\n'git worktree repair' [<path>...]\n'git worktree unlock' <worktree>\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 496,
            "end_index": 521,
            "value": "\nManage multiple working trees attached to the same repository.\n\nA git repository can support multiple working trees, allowing you to check\nout more than one branch at a time.  With `git worktree add` a new working\ntree is associated with the repository.  This new working tree is called a\n\"linked working tree\" as opposed to the \"main working tree\" prepared by\nlinkgit:git-init[1] or linkgit:git-clone[1].\nA repository has one main working tree (if it's not a\nbare repository) and zero or more linked working trees. When you are done\nwith a linked working tree, remove it with `git worktree remove`.\n\nIn its simplest form, `git worktree add <path>` automatically creates a\nnew branch whose name is the final component of `<path>`, which is\nconvenient if you plan to work on a new topic. For instance, `git\nworktree add ../hotfix` creates new branch `hotfix` and checks it out at\npath `../hotfix`. To instead work on an existing branch in a new working\ntree, use `git worktree add <path> <branch>`. On the other hand, if you\njust plan to make some experimental changes or do testing without\ndisturbing existing development, it is often convenient to create a\n'throwaway' working tree not associated with any branch. For instance,\n`git worktree add -d <path>` creates a new working tree with a detached\n`HEAD` at the same commit as the current branch.\n\nIf a working tree is deleted without using `git worktree remove`, then\nits associated administrative files, which reside in the repository\n(see \"DETAILS\" below), will eventually be removed automatically (see\n`gc.worktreePruneExpire` in linkgit:git-config[1]), or you can run\n`git worktree prune` in the main or any linked working tree to\nclean up any stale administrative files.\n\nIf a linked working tree is stored on a portable device or network share\nwhich is not always mounted, you can prevent its administrative files from\nbeing pruned by issuing the `git worktree lock` command, optionally\nspecifying `--reason` to explain why the working tree is locked.\n"
        },
        "COMMANDS": {
            "name": "COMMANDS",
            "start_index": 2534,
            "end_index": 2553,
            "value": "add <path> [<commit-ish>]::\n\nCreate `<path>` and checkout `<commit-ish>` into it. The new working directory\nis linked to the current repository, sharing everything except working\ndirectory specific files such as `HEAD`, `index`, etc. As a convenience,\n`<commit-ish>` may be a bare \"`-`\", which is synonymous with `@{-1}`.\n+\nIf `<commit-ish>` is a branch name (call it `<branch>`) and is not found,\nand neither `-b` nor `-B` nor `--detach` are used, but there does\nexist a tracking branch in exactly one remote (call it `<remote>`)\nwith a matching name, treat as equivalent to:\n+\n------------\n$ git worktree add --track -b <branch> <path> <remote>/<branch>\n------------\n+\nIf the branch exists in multiple remotes and one of them is named by\nthe `checkout.defaultRemote` configuration variable, we'll use that\none for the purposes of disambiguation, even if the `<branch>` isn't\nunique across all remotes. Set it to\ne.g. `checkout.defaultRemote=origin` to always checkout remote\nbranches from there if `<branch>` is ambiguous but exists on the\n`origin` remote. See also `checkout.defaultRemote` in\nlinkgit:git-config[1].\n+\nIf `<commit-ish>` is omitted and neither `-b` nor `-B` nor `--detach` used,\nthen, as a convenience, the new working tree is associated with a branch\n(call it `<branch>`) named after `$(basename <path>)`.  If `<branch>`\ndoesn't exist, a new branch based on `HEAD` is automatically created as\nif `-b <branch>` was given.  If `<branch>` does exist, it will be\nchecked out in the new working tree, if it's not checked out anywhere\nelse, otherwise the command will refuse to create the working tree (unless\n`--force` is used).\n\nlist::\n\nList details of each working tree.  The main working tree is listed first,\nfollowed by each of the linked working trees.  The output details include\nwhether the working tree is bare, the revision currently checked out, the\nbranch currently checked out (or \"detached HEAD\" if none), \"locked\" if\nthe worktree is locked, \"prunable\" if the worktree can be pruned by `prune`\ncommand.\n\nlock::\n\nIf a working tree is on a portable device or network share which\nis not always mounted, lock it to prevent its administrative\nfiles from being pruned automatically. This also prevents it from\nbeing moved or deleted. Optionally, specify a reason for the lock\nwith `--reason`.\n\nmove::\n\nMove a working tree to a new location. Note that the main working tree\nor linked working trees containing submodules cannot be moved with this\ncommand. (The `git worktree repair` command, however, can reestablish\nthe connection with linked working trees if you move the main working\ntree manually.)\n\nprune::\n\nPrune working tree information in `$GIT_DIR/worktrees`.\n\nremove::\n\nRemove a working tree. Only clean working trees (no untracked files\nand no modification in tracked files) can be removed. Unclean working\ntrees or ones with submodules can be removed with `--force`. The main\nworking tree cannot be removed.\n\nrepair [<path>...]::\n\nRepair working tree administrative files, if possible, if they have\nbecome corrupted or outdated due to external factors.\n+\nFor instance, if the main working tree (or bare repository) is moved,\nlinked working trees will be unable to locate it. Running `repair` in\nthe main working tree will reestablish the connection from linked\nworking trees back to the main working tree.\n+\nSimilarly, if a linked working tree is moved without using `git worktree\nmove`, the main working tree (or bare repository) will be unable to\nlocate it. Running `repair` within the recently-moved working tree will\nreestablish the connection. If multiple linked working trees are moved,\nrunning `repair` from any working tree with each tree's new `<path>` as\nan argument, will reestablish the connection to all the specified paths.\n+\nIf both the main working tree and linked working trees have been moved\nmanually, then running `repair` in the main working tree and specifying the\nnew `<path>` of each linked working tree will reestablish all connections\nin both directions.\n\nunlock::\n\nUnlock a working tree, allowing it to be pruned, moved or deleted.\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 6644,
            "end_index": 6661,
            "value": "\n-f::\n--force::\n\tBy default, `add` refuses to create a new working tree when\n\t`<commit-ish>` is a branch name and is already checked out by\n\tanother working tree, or if `<path>` is already assigned to some\n\tworking tree but is missing (for instance, if `<path>` was deleted\n\tmanually). This option overrides these safeguards. To add a missing but\n\tlocked working tree path, specify `--force` twice.\n+\n`move` refuses to move a locked working tree unless `--force` is specified\ntwice. If the destination is already assigned to some other working tree but is\nmissing (for instance, if `<new-path>` was deleted manually), then `--force`\nallows the move to proceed; use `--force` twice if the destination is locked.\n+\n`remove` refuses to remove an unclean working tree unless `--force` is used.\nTo remove a locked working tree, specify `--force` twice.\n\n-b <new-branch>::\n-B <new-branch>::\n\tWith `add`, create a new branch named `<new-branch>` starting at\n\t`<commit-ish>`, and check out `<new-branch>` into the new working tree.\n\tIf `<commit-ish>` is omitted, it defaults to `HEAD`.\n\tBy default, `-b` refuses to create a new branch if it already\n\texists. `-B` overrides this safeguard, resetting `<new-branch>` to\n\t`<commit-ish>`.\n\n-d::\n--detach::\n\tWith `add`, detach `HEAD` in the new working tree. See \"DETACHED HEAD\"\n\tin linkgit:git-checkout[1].\n\n--[no-]checkout::\n\tBy default, `add` checks out `<commit-ish>`, however, `--no-checkout` can\n\tbe used to suppress checkout in order to make customizations,\n\tsuch as configuring sparse-checkout. See \"Sparse checkout\"\n\tin linkgit:git-read-tree[1].\n\n--[no-]guess-remote::\n\tWith `worktree add <path>`, without `<commit-ish>`, instead\n\tof creating a new branch from `HEAD`, if there exists a tracking\n\tbranch in exactly one remote matching the basename of `<path>`,\n\tbase the new branch on the remote-tracking branch, and mark\n\tthe remote-tracking branch as \"upstream\" from the new branch.\n+\nThis can also be set up as the default behaviour by using the\n`worktree.guessRemote` config option.\n\n--[no-]track::\n\tWhen creating a new branch, if `<commit-ish>` is a branch,\n\tmark it as \"upstream\" from the new branch.  This is the\n\tdefault if `<commit-ish>` is a remote-tracking branch.  See\n\t`--track` in linkgit:git-branch[1] for details.\n\n--lock::\n\tKeep the working tree locked after creation. This is the\n\tequivalent of `git worktree lock` after `git worktree add`,\n\tbut without a race condition.\n\n-n::\n--dry-run::\n\tWith `prune`, do not remove anything; just report what it would\n\tremove.\n\n--porcelain::\n\tWith `list`, output in an easy-to-parse format for scripts.\n\tThis format will remain stable across Git versions and regardless of user\n\tconfiguration.  See below for details.\n\n-q::\n--quiet::\n\tWith `add`, suppress feedback messages.\n\n-v::\n--verbose::\n\tWith `prune`, report all removals.\n+\nWith `list`, output additional information about worktrees (see below).\n\n--expire <time>::\n\tWith `prune`, only expire unused working trees older than `<time>`.\n+\nWith `list`, annotate missing working trees as prunable if they are\nolder than `<time>`.\n\n--reason <string>::\n\tWith `lock`, an explanation why the working tree is locked.\n\n<worktree>::\n\tWorking trees can be identified by path, either relative or\n\tabsolute.\n+\nIf the last path components in the working tree's path is unique among\nworking trees, it can be used to identify a working tree. For example if\nyou only have two working trees, at `/abc/def/ghi` and `/abc/def/ggg`,\nthen `ghi` or `def/ghi` is enough to point to the former working tree.\n"
        },
        "REFS": {
            "name": "REFS",
            "start_index": 10199,
            "end_index": 10210,
            "value": "In multiple working trees, some refs may be shared between all working\ntrees and some refs are local. One example is `HEAD` which is different for each\nworking tree. This section is about the sharing rules and how to access\nrefs of one working tree from another.\n\nIn general, all pseudo refs are per working tree and all refs starting\nwith `refs/` are shared. Pseudo refs are ones like `HEAD` which are\ndirectly under `$GIT_DIR` instead of inside `$GIT_DIR/refs`. There are\nexceptions, however: refs inside `refs/bisect` and `refs/worktree` are not\nshared.\n\nRefs that are per working tree can still be accessed from another\nworking tree via two special paths, `main-worktree` and `worktrees`. The\nformer gives access to per-working tree refs of the main working tree,\nwhile the latter to all linked working trees.\n\nFor example, `main-worktree/HEAD` or `main-worktree/refs/bisect/good`\nresolve to the same value as the main working tree's `HEAD` and\n`refs/bisect/good` respectively. Similarly, `worktrees/foo/HEAD` or\n`worktrees/bar/refs/bisect/bad` are the same as\n`$GIT_COMMON_DIR/worktrees/foo/HEAD` and\n`$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad`.\n\nTo access refs, it's best not to look inside `$GIT_DIR` directly. Instead\nuse commands such as linkgit:git-rev-parse[1] or linkgit:git-update-ref[1]\nwhich will handle refs correctly.\n\nCONFIGURATION FILE\n------------------\nBy default, the repository `config` file is shared across all working\ntrees. If the config variables `core.bare` or `core.worktree` are\nalready present in the config file, they will be applied to the main\nworking trees only.\n\nIn order to have configuration specific to working trees, you can turn\non the `worktreeConfig` extension, e.g.:\n\n------------\n$ git config extensions.worktreeConfig true\n------------\n\nIn this mode, specific configuration stays in the path pointed by `git\nrev-parse --git-path config.worktree`. You can add or update\nconfiguration in this file with `git config --worktree`. Older Git\nversions will refuse to access repositories with this extension.\n\nNote that in this file, the exception for `core.bare` and `core.worktree`\nis gone. If they exist in `$GIT_DIR/config`, you must move\nthem to the `config.worktree` of the main working tree. You may also\ntake this opportunity to review and move other configuration that you\ndo not want to share to all working trees:\n\n - `core.worktree` and `core.bare` should never be shared\n\n - `core.sparseCheckout` is recommended per working tree, unless you\n   are sure you always use sparse checkout for all working trees.\n"
        },
        "DETAILS": {
            "name": "DETAILS",
            "start_index": 12773,
            "end_index": 12790,
            "value": "Each linked working tree has a private sub-directory in the repository's\n`$GIT_DIR/worktrees` directory.  The private sub-directory's name is usually\nthe base name of the linked working tree's path, possibly appended with a\nnumber to make it unique.  For example, when `$GIT_DIR=/path/main/.git` the\ncommand `git worktree add /path/other/test-next next` creates the linked\nworking tree in `/path/other/test-next` and also creates a\n`$GIT_DIR/worktrees/test-next` directory (or `$GIT_DIR/worktrees/test-next1`\nif `test-next` is already taken).\n\nWithin a linked working tree, `$GIT_DIR` is set to point to this private\ndirectory (e.g. `/path/main/.git/worktrees/test-next` in the example) and\n`$GIT_COMMON_DIR` is set to point back to the main working tree's `$GIT_DIR`\n(e.g. `/path/main/.git`). These settings are made in a `.git` file located at\nthe top directory of the linked working tree.\n\nPath resolution via `git rev-parse --git-path` uses either\n`$GIT_DIR` or `$GIT_COMMON_DIR` depending on the path. For example, in the\nlinked working tree `git rev-parse --git-path HEAD` returns\n`/path/main/.git/worktrees/test-next/HEAD` (not\n`/path/other/test-next/.git/HEAD` or `/path/main/.git/HEAD`) while `git\nrev-parse --git-path refs/heads/master` uses\n`$GIT_COMMON_DIR` and returns `/path/main/.git/refs/heads/master`,\nsince refs are shared across all working trees, except `refs/bisect` and\n`refs/worktree`.\n\nSee linkgit:gitrepository-layout[5] for more information. The rule of\nthumb is do not make any assumption about whether a path belongs to\n`$GIT_DIR` or `$GIT_COMMON_DIR` when you need to directly access something\ninside `$GIT_DIR`. Use `git rev-parse --git-path` to get the final path.\n\nIf you manually move a linked working tree, you need to update the `gitdir` file\nin the entry's directory. For example, if a linked working tree is moved\nto `/newpath/test-next` and its `.git` file points to\n`/path/main/.git/worktrees/test-next`, then update\n`/path/main/.git/worktrees/test-next/gitdir` to reference `/newpath/test-next`\ninstead. Better yet, run `git worktree repair` to reestablish the connection\nautomatically.\n\nTo prevent a `$GIT_DIR/worktrees` entry from being pruned (which\ncan be useful in some situations, such as when the\nentry's working tree is stored on a portable device), use the\n`git worktree lock` command, which adds a file named\n`locked` to the entry's directory. The file contains the reason in\nplain text. For example, if a linked working tree's `.git` file points\nto `/path/main/.git/worktrees/test-next` then a file named\n`/path/main/.git/worktrees/test-next/locked` will prevent the\n`test-next` entry from being pruned.  See\nlinkgit:gitrepository-layout[5] for details.\n\nWhen `extensions.worktreeConfig` is enabled, the config file\n`.git/worktrees/<id>/config.worktree` is read after `.git/config` is.\n\nLIST OUTPUT FORMAT\n------------------\nThe `worktree list` command has two output formats. The default format shows the\ndetails on a single line with columns.  For example:\n\n------------\n$ git worktree list\n/path/to/bare-source            (bare)\n/path/to/linked-worktree        abcd1234 [master]\n/path/to/other-linked-worktree  1234abc  (detached HEAD)\n------------\n\nThe command also shows annotations for each working tree, according to its state.\nThese annotations are:\n\n * `locked`, if the working tree is locked.\n * `prunable`, if the working tree can be pruned via `git worktree prune`.\n\n------------\n$ git worktree list\n/path/to/linked-worktree    abcd1234 [master]\n/path/to/locked-worktreee   acbd5678 (brancha) locked\n/path/to/prunable-worktree  5678abc  (detached HEAD) prunable\n------------\n\nFor these annotations, a reason might also be available and this can be\nseen using the verbose mode. The annotation is then moved to the next line\nindented followed by the additional information.\n\n------------\n$ git worktree list --verbose\n/path/to/linked-worktree              abcd1234 [master]\n/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked\n/path/to/locked-worktree-with-reason  1234abcd (brancha)\n\tlocked: working tree path is mounted on a portable device\n/path/to/prunable-worktree            5678abc1 (detached HEAD)\n\tprunable: gitdir file points to non-existent location\n------------\n\nNote that the annotation is moved to the next line if the additional\ninformation is available, otherwise it stays on the same line as the\nworking tree itself.\n\nPorcelain Format\n~~~~~~~~~~~~~~~~\nThe porcelain format has a line per attribute.  Attributes are listed with a\nlabel and value separated by a single space.  Boolean attributes (like `bare`\nand `detached`) are listed as a label only, and are present only\nif the value is true.  Some attributes (like `locked`) can be listed as a label\nonly or with a value depending upon whether a reason is available.  The first\nattribute of a working tree is always `worktree`, an empty line indicates the\nend of the record.  For example:\n\n------------\n$ git worktree list --porcelain\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\nworktree /path/to/linked-worktree-locked-no-reason\nHEAD 5678abc5678abc5678abc5678abc5678abc5678c\nbranch refs/heads/locked-no-reason\nlocked\n\nworktree /path/to/linked-worktree-locked-with-reason\nHEAD 3456def3456def3456def3456def3456def3456b\nbranch refs/heads/locked-with-reason\nlocked reason why is locked\n\nworktree /path/to/linked-worktree-prunable\nHEAD 1233def1234def1234def1234def1234def1234b\ndetached\nprunable gitdir file points to non-existent location\n\n------------\n\nIf the lock reason contains \"unusual\" characters such as newline, they\nare escaped and the entire reason is quoted as explained for the\nconfiguration variable `core.quotePath` (see linkgit:git-config[1]).\nFor Example:\n\n------------\n$ git worktree list --porcelain\n...\nlocked \"reason\\nwhy is locked\"\n...\n------------\n"
        },
        "EXAMPLES": {
            "name": "EXAMPLES",
            "start_index": 18797,
            "end_index": 18816,
            "value": "You are in the middle of a refactoring session and your boss comes in and\ndemands that you fix something immediately. You might typically use\nlinkgit:git-stash[1] to store your changes away temporarily, however, your\nworking tree is in such a state of disarray (with new, moved, and removed\nfiles, and other bits and pieces strewn around) that you don't want to risk\ndisturbing any of it. Instead, you create a temporary linked working tree to\nmake the emergency fix, remove it when done, and then resume your earlier\nrefactoring session.\n\n------------\n$ git worktree add -b emergency-fix ../temp master\n$ pushd ../temp\n# ... hack hack hack ...\n$ git commit -a -m 'emergency fix for boss'\n$ popd\n$ git worktree remove ../temp\n------------\n"
        },
        "BUGS": {
            "name": "BUGS",
            "start_index": 19555,
            "end_index": 19566,
            "value": "Multiple checkout in general is still experimental, and the support\nfor submodules is incomplete. It is NOT recommended to make multiple\ncheckouts of a superproject.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 19732,
            "end_index": 19741,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git-write-tree.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 36,
            "end_index": 47,
            "value": "git-write-tree - Create a tree object from the current index\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 109,
            "end_index": 128,
            "value": "[verse]\n'git write-tree' [--missing-ok] [--prefix=<prefix>/]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 189,
            "end_index": 214,
            "value": "Creates a tree object using the current index. The name of the new\ntree object is printed to standard output.\n\nThe index must be in a fully merged state.\n\nConceptually, 'git write-tree' sync()s the current index contents\ninto a set of tree files.\nIn order to have that match what is actually in your directory right\nnow, you need to have done a 'git update-index' phase before you did the\n'git write-tree'.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 622,
            "end_index": 639,
            "value": "\n--missing-ok::\n\tNormally 'git write-tree' ensures that the objects referenced by the\n\tdirectory exist in the object database.  This option disables this\n\tcheck.\n\n--prefix=<prefix>/::\n\tWrites a tree object that represents a subdirectory\n\t`<prefix>`.  This can be used to write the tree object\n\tfor a subproject that is in the named subdirectory.\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 984,
            "end_index": 993,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    },
    "git.txt": {
        "NAME": {
            "name": "NAME",
            "start_index": 14,
            "end_index": 25,
            "value": "git - the stupid content tracker\n\n"
        },
        "SYNOPSIS": {
            "name": "SYNOPSIS",
            "start_index": 59,
            "end_index": 78,
            "value": "[verse]\n'git' [--version] [--help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--super-prefix=<path>] [--config-env <name>=<envvar>]\n    <command> [<args>]\n"
        },
        "DESCRIPTION": {
            "name": "DESCRIPTION",
            "start_index": 426,
            "end_index": 451,
            "value": "Git is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals.\n\nSee linkgit:gittutorial[7] to get started, then see\nlinkgit:giteveryday[7] for a useful minimum set of\ncommands.  The link:user-manual.html[Git User's Manual] has a more\nin-depth introduction.\n\nAfter you mastered the basic concepts, you can come back to this\npage to learn what commands Git offers.  You can learn more about\nindividual Git commands with \"git help command\".  linkgit:gitcli[7]\nmanual page gives you an overview of the command-line command syntax.\n\nA formatted and hyperlinked copy of the latest Git documentation\ncan be viewed at https://git.github.io/htmldocs/git.html\nor https://git-scm.com/docs.\n\n"
        },
        "OPTIONS": {
            "name": "OPTIONS",
            "start_index": 1235,
            "end_index": 1252,
            "value": "\n--version::\n\tPrints the Git suite version that the 'git' program came from.\n\n--help::\n\tPrints the synopsis and a list of the most commonly used\n\tcommands. If the option `--all` or `-a` is given then all\n\tavailable commands are printed. If a Git command is named this\n\toption will bring up the manual page for that command.\n+\nOther options are available to control how the manual page is\ndisplayed. See linkgit:git-help[1] for more information,\nbecause `git --help ...` is converted internally into `git\nhelp ...`.\n\n-C <path>::\n\tRun as if git was started in '<path>' instead of the current working\n\tdirectory.  When multiple `-C` options are given, each subsequent\n\tnon-absolute `-C <path>` is interpreted relative to the preceding `-C\n\t<path>`.  If '<path>' is present but empty, e.g. `-C \"\"`, then the\n\tcurrent working directory is left unchanged.\n+\nThis option affects options that expect path name like `--git-dir` and\n`--work-tree` in that their interpretations of the path names would be\nmade relative to the working directory caused by the `-C` option. For\nexample the following invocations are equivalent:\n\n    git --git-dir=a.git --work-tree=b -C c status\n    git --git-dir=c/a.git --work-tree=c/b status\n\n-c <name>=<value>::\n\tPass a configuration parameter to the command. The value\n\tgiven will override values from configuration files.\n\tThe <name> is expected in the same format as listed by\n\t'git config' (subkeys separated by dots).\n+\nNote that omitting the `=` in `git -c foo.bar ...` is allowed and sets\n`foo.bar` to the boolean true value (just like `[foo]bar` would in a\nconfig file). Including the equals but with an empty value (like `git -c\nfoo.bar= ...`) sets `foo.bar` to the empty string which `git config\n--type=bool` will convert to `false`.\n\n--config-env=<name>=<envvar>::\n\tLike `-c <name>=<value>`, give configuration variable\n\t'<name>' a value, where <envvar> is the name of an\n\tenvironment variable from which to retrieve the value. Unlike\n\t`-c` there is no shortcut for directly setting the value to an\n\tempty string, instead the environment variable itself must be\n\tset to the empty string.  It is an error if the `<envvar>` does not exist\n\tin the environment. `<envvar>` may not contain an equals sign\n\tto avoid ambiguity with `<name>` containing one.\n+\nThis is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on OS's where\nother processes might be able to read your cmdline\n(e.g. `/proc/self/cmdline`), but not your environ\n(e.g. `/proc/self/environ`). That behavior is the default on\nLinux, but may not be on your system.\n+\nNote that this might add security for variables such as\n`http.extraHeader` where the sensitive information is part of\nthe value, but not e.g. `url.<base>.insteadOf` where the\nsensitive information can be part of the key.\n\n--exec-path[=<path>]::\n\tPath to wherever your core Git programs are installed.\n\tThis can also be controlled by setting the GIT_EXEC_PATH\n\tenvironment variable. If no path is given, 'git' will print\n\tthe current setting and then exit.\n\n--html-path::\n\tPrint the path, without trailing slash, where Git's HTML\n\tdocumentation is installed and exit.\n\n--man-path::\n\tPrint the manpath (see `man(1)`) for the man pages for\n\tthis version of Git and exit.\n\n--info-path::\n\tPrint the path where the Info files documenting this\n\tversion of Git are installed and exit.\n\n-p::\n--paginate::\n\tPipe all output into 'less' (or if set, $PAGER) if standard\n\toutput is a terminal.  This overrides the `pager.<cmd>`\n\tconfiguration options (see the \"Configuration Mechanism\" section\n\tbelow).\n\n-P::\n--no-pager::\n\tDo not pipe Git output into a pager.\n\n--git-dir=<path>::\n\tSet the path to the repository (\".git\" directory). This can also be\n\tcontrolled by setting the `GIT_DIR` environment variable. It can be\n\tan absolute path or relative path to current working directory.\n+\nSpecifying the location of the \".git\" directory using this\noption (or `GIT_DIR` environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the `--work-tree=<path>` option (or `GIT_WORK_TREE`\nenvironment variable)\n+\nIf you just want to run git as if it was started in `<path>` then use\n`git -C <path>`.\n\n--work-tree=<path>::\n\tSet the path to the working tree. It can be an absolute path\n\tor a path relative to the current working directory.\n\tThis can also be controlled by setting the GIT_WORK_TREE\n\tenvironment variable and the core.worktree configuration\n\tvariable (see core.worktree in linkgit:git-config[1] for a\n\tmore detailed discussion).\n\n--namespace=<path>::\n\tSet the Git namespace.  See linkgit:gitnamespaces[7] for more\n\tdetails.  Equivalent to setting the `GIT_NAMESPACE` environment\n\tvariable.\n\n--super-prefix=<path>::\n\tCurrently for internal use only.  Set a prefix which gives a path from\n\tabove a repository down to its root.  One use is to give submodules\n\tcontext about the superproject that invoked it.\n\n--bare::\n\tTreat the repository as a bare repository.  If GIT_DIR\n\tenvironment is not set, it is set to the current working\n\tdirectory.\n\n--no-replace-objects::\n\tDo not use replacement refs to replace Git objects. See\n\tlinkgit:git-replace[1] for more information.\n\n--literal-pathspecs::\n\tTreat pathspecs literally (i.e. no globbing, no pathspec magic).\n\tThis is equivalent to setting the `GIT_LITERAL_PATHSPECS` environment\n\tvariable to `1`.\n\n--glob-pathspecs::\n\tAdd \"glob\" magic to all pathspec. This is equivalent to setting\n\tthe `GIT_GLOB_PATHSPECS` environment variable to `1`. Disabling\n\tglobbing on individual pathspecs can be done using pathspec\n\tmagic \":(literal)\"\n\n--noglob-pathspecs::\n\tAdd \"literal\" magic to all pathspec. This is equivalent to setting\n\tthe `GIT_NOGLOB_PATHSPECS` environment variable to `1`. Enabling\n\tglobbing on individual pathspecs can be done using pathspec\n\tmagic \":(glob)\"\n\n--icase-pathspecs::\n\tAdd \"icase\" magic to all pathspec. This is equivalent to setting\n\tthe `GIT_ICASE_PATHSPECS` environment variable to `1`.\n\n--no-optional-locks::\n\tDo not perform optional operations that require locks. This is\n\tequivalent to setting the `GIT_OPTIONAL_LOCKS` to `0`.\n\n--list-cmds=group[,group...]::\n\tList commands by group. This is an internal/experimental\n\toption and may change or be removed in the future. Supported\n\tgroups are: builtins, parseopt (builtin commands that use\n\tparse-options), main (all commands in libexec directory),\n\tothers (all other commands in `$PATH` that have git- prefix),\n\tlist-<category> (see categories in command-list.txt),\n\tnohelpers (exclude helper commands), alias and config\n\t(retrieve command list from config variable completion.commands)\n\nGIT COMMANDS\n------------\n\nWe divide Git into high level (\"porcelain\") commands and low level\n(\"plumbing\") commands.\n\nHigh-level commands (porcelain)\n-------------------------------\n\nWe separate the porcelain commands into the main commands and some\nancillary user utilities.\n\nMain porcelain commands\n~~~~~~~~~~~~~~~~~~~~~~~\n\ninclude::cmds-mainporcelain.txt[]\n\nAncillary Commands\n~~~~~~~~~~~~~~~~~~\nManipulators:\n\ninclude::cmds-ancillarymanipulators.txt[]\n\nInterrogators:\n\ninclude::cmds-ancillaryinterrogators.txt[]\n\n\nInteracting with Others\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThese commands are to interact with foreign SCM and with other\npeople via patch over e-mail.\n\ninclude::cmds-foreignscminterface.txt[]\n\nReset, restore and revert\n~~~~~~~~~~~~~~~~~~~~~~~~~\nThere are three commands with similar names: `git reset`,\n`git restore` and `git revert`.\n\n* linkgit:git-revert[1] is about making a new commit that reverts the\n  changes made by other commits.\n\n* linkgit:git-restore[1] is about restoring files in the working tree\n  from either the index or another commit. This command does not\n  update your branch. The command can also be used to restore files in\n  the index from another commit.\n\n* linkgit:git-reset[1] is about updating your branch, moving the tip\n  in order to add or remove commits from the branch. This operation\n  changes the commit history.\n+\n`git reset` can also be used to restore the index, overlapping with\n`git restore`.\n\n\nLow-level commands (plumbing)\n-----------------------------\n\nAlthough Git includes its\nown porcelain layer, its low-level commands are sufficient to support\ndevelopment of alternative porcelains.  Developers of such porcelains\nmight start by reading about linkgit:git-update-index[1] and\nlinkgit:git-read-tree[1].\n\nThe interface (input, output, set of options and the semantics)\nto these low-level commands are meant to be a lot more stable\nthan Porcelain level commands, because these commands are\nprimarily for scripted use.  The interface to Porcelain commands\non the other hand are subject to change in order to improve the\nend user experience.\n\nThe following description divides\nthe low-level commands into commands that manipulate objects (in\nthe repository, index, and working tree), commands that interrogate and\ncompare objects, and commands that move objects and references between\nrepositories.\n\n\nManipulation commands\n~~~~~~~~~~~~~~~~~~~~~\n\ninclude::cmds-plumbingmanipulators.txt[]\n\n\nInterrogation commands\n~~~~~~~~~~~~~~~~~~~~~~\n\ninclude::cmds-plumbinginterrogators.txt[]\n\nIn general, the interrogate commands do not touch the files in\nthe working tree.\n\n\nSyncing repositories\n~~~~~~~~~~~~~~~~~~~~\n\ninclude::cmds-synchingrepositories.txt[]\n\nThe following are helper commands used by the above; end users\ntypically do not use them directly.\n\ninclude::cmds-synchelpers.txt[]\n\n\nInternal helper commands\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese are internal helper commands used by other commands; end\nusers typically do not use them directly.\n\ninclude::cmds-purehelpers.txt[]\n"
        },
        "Guides": {
            "name": "Guides",
            "start_index": 11208,
            "end_index": 11223,
            "value": "\nThe following documentation pages are guides about Git concepts.\n\ninclude::cmds-guide.txt[]\n\n\nConfiguration Mechanism\n-----------------------\n\nGit uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this:\n\n------------\n#\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\"\n\n------------\n\nVarious commands read from the configuration file and adjust\ntheir operation accordingly.  See linkgit:git-config[1] for a\nlist and more details about the configuration mechanism.\n\n\nIdentifier Terminology\n----------------------\n<object>::\n\tIndicates the object name for any type of object.\n\n<blob>::\n\tIndicates a blob object name.\n\n<tree>::\n\tIndicates a tree object name.\n\n<commit>::\n\tIndicates a commit object name.\n\n<tree-ish>::\n\tIndicates a tree, commit or tag object name.  A\n\tcommand that takes a <tree-ish> argument ultimately wants to\n\toperate on a <tree> object but automatically dereferences\n\t<commit> and <tag> objects that point at a <tree>.\n\n<commit-ish>::\n\tIndicates a commit or tag object name.  A\n\tcommand that takes a <commit-ish> argument ultimately wants to\n\toperate on a <commit> object but automatically dereferences\n\t<tag> objects that point at a <commit>.\n\n<type>::\n\tIndicates that an object type is required.\n\tCurrently one of: `blob`, `tree`, `commit`, or `tag`.\n\n<file>::\n\tIndicates a filename - almost always relative to the\n\troot of the tree structure `GIT_INDEX_FILE` describes.\n\nSymbolic Identifiers\n--------------------\nAny Git command accepting any <object> can also use the following\nsymbolic notation:\n\nHEAD::\n\tindicates the head of the current branch.\n\n<tag>::\n\ta valid tag 'name'\n\t(i.e. a `refs/tags/<tag>` reference).\n\n<head>::\n\ta valid head 'name'\n\t(i.e. a `refs/heads/<head>` reference).\n\nFor a more complete list of ways to spell object names, see\n\"SPECIFYING REVISIONS\" section in linkgit:gitrevisions[7].\n\n\nFile/Directory Structure\n------------------------\n\nPlease see the linkgit:gitrepository-layout[5] document.\n\nRead linkgit:githooks[5] for more details about each hook.\n\nHigher level SCMs may provide and manage additional information in the\n`$GIT_DIR`.\n\n"
        },
        "Terminology": {
            "name": "Terminology",
            "start_index": 13537,
            "end_index": 13562,
            "value": "Please see linkgit:gitglossary[7].\n\n\nEnvironment Variables\n---------------------\nVarious Git commands use the following environment variables:\n\nThe Git Repository\n~~~~~~~~~~~~~~~~~~\nThese environment variables apply to 'all' core Git commands. Nb: it\nis worth noting that they may be used/overridden by SCMS sitting above\nGit so take care if using a foreign front-end.\n\n`GIT_INDEX_FILE`::\n\tThis environment allows the specification of an alternate\n\tindex file. If not specified, the default of `$GIT_DIR/index`\n\tis used.\n\n`GIT_INDEX_VERSION`::\n\tThis environment variable allows the specification of an index\n\tversion for new repositories.  It won't affect existing index\n\tfiles.  By default index file version 2 or 3 is used. See\n\tlinkgit:git-update-index[1] for more information.\n\n`GIT_OBJECT_DIRECTORY`::\n\tIf the object storage directory is specified via this\n\tenvironment variable then the sha1 directories are created\n\tunderneath - otherwise the default `$GIT_DIR/objects`\n\tdirectory is used.\n\n`GIT_ALTERNATE_OBJECT_DIRECTORIES`::\n\tDue to the immutable nature of Git objects, old objects can be\n\tarchived into shared, read-only directories. This variable\n\tspecifies a \":\" separated (on Windows \";\" separated) list\n\tof Git object directories which can be used to search for Git\n\tobjects. New objects will not be written to these directories.\n+\nEntries that begin with `\"` (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value\n`\"path-with-\\\"-and-:-in-it\":vanilla-path` has two paths:\n`path-with-\"-and-:-in-it` and `vanilla-path`.\n\n`GIT_DIR`::\n\tIf the `GIT_DIR` environment variable is set then it\n\tspecifies a path to use instead of the default `.git`\n\tfor the base of the repository.\n\tThe `--git-dir` command-line option also sets this value.\n\n`GIT_WORK_TREE`::\n\tSet the path to the root of the working tree.\n\tThis can also be controlled by the `--work-tree` command-line\n\toption and the core.worktree configuration variable.\n\n`GIT_NAMESPACE`::\n\tSet the Git namespace; see linkgit:gitnamespaces[7] for details.\n\tThe `--namespace` command-line option also sets this value.\n\n`GIT_CEILING_DIRECTORIES`::\n\tThis should be a colon-separated list of absolute paths.  If\n\tset, it is a list of directories that Git should not chdir up\n\tinto while looking for a repository directory (useful for\n\texcluding slow-loading network directories).  It will not\n\texclude the current working directory or a GIT_DIR set on the\n\tcommand line or in the environment.  Normally, Git has to read\n\tthe entries in this list and resolve any symlink that\n\tmight be present in order to compare them with the current\n\tdirectory.  However, if even this access is slow, you\n\tcan add an empty entry to the list to tell Git that the\n\tsubsequent entries are not symlinks and needn't be resolved;\n\te.g.,\n\t`GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink`.\n\n`GIT_DISCOVERY_ACROSS_FILESYSTEM`::\n\tWhen run in a directory that does not have \".git\" repository\n\tdirectory, Git tries to find such a directory in the parent\n\tdirectories to find the top of the working tree, but by default it\n\tdoes not cross filesystem boundaries.  This environment variable\n\tcan be set to true to tell Git not to stop at filesystem\n\tboundaries.  Like `GIT_CEILING_DIRECTORIES`, this will not affect\n\tan explicit repository directory set via `GIT_DIR` or on the\n\tcommand line.\n\n`GIT_COMMON_DIR`::\n\tIf this variable is set to a path, non-worktree files that are\n\tnormally in $GIT_DIR will be taken from this path\n\tinstead. Worktree-specific files such as HEAD or index are\n\ttaken from $GIT_DIR. See linkgit:gitrepository-layout[5] and\n\tlinkgit:git-worktree[1] for\n\tdetails. This variable has lower precedence than other path\n\tvariables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...\n\n`GIT_DEFAULT_HASH`::\n\tIf this variable is set, the default hash algorithm for new\n\trepositories will be set to this value. This value is currently\n\tignored when cloning; the setting of the remote repository\n\tis used instead. The default is \"sha1\". THIS VARIABLE IS\n\tEXPERIMENTAL! See `--object-format` in linkgit:git-init[1].\n\nGit Commits\n~~~~~~~~~~~\n`GIT_AUTHOR_NAME`::\n\tThe human-readable name used in the author identity when creating commit or\n\ttag objects, or when writing reflogs. Overrides the `user.name` and\n\t`author.name` configuration settings.\n\n`GIT_AUTHOR_EMAIL`::\n\tThe email address used in the author identity when creating commit or\n\ttag objects, or when writing reflogs. Overrides the `user.email` and\n\t`author.email` configuration settings.\n\n`GIT_AUTHOR_DATE`::\n\tThe date used for the author identity when creating commit or tag objects, or\n\twhen writing reflogs. See linkgit:git-commit[1] for valid formats.\n\n`GIT_COMMITTER_NAME`::\n\tThe human-readable name used in the committer identity when creating commit or\n\ttag objects, or when writing reflogs. Overrides the `user.name` and\n\t`committer.name` configuration settings.\n\n`GIT_COMMITTER_EMAIL`::\n\tThe email address used in the author identity when creating commit or\n\ttag objects, or when writing reflogs. Overrides the `user.email` and\n\t`committer.email` configuration settings.\n\n`GIT_COMMITTER_DATE`::\n\tThe date used for the committer identity when creating commit or tag objects, or\n\twhen writing reflogs. See linkgit:git-commit[1] for valid formats.\n\n`EMAIL`::\n\tThe email address used in the author and committer identities if no other\n\trelevant environment variable or configuration setting has been set.\n\nGit Diffs\n~~~~~~~~~\n`GIT_DIFF_OPTS`::\n\tOnly valid setting is \"--unified=??\" or \"-u??\" to set the\n\tnumber of context lines shown when a unified diff is created.\n\tThis takes precedence over any \"-U\" or \"--unified\" option\n\tvalue passed on the Git diff command line.\n\n`GIT_EXTERNAL_DIFF`::\n\tWhen the environment variable `GIT_EXTERNAL_DIFF` is set, the\n\tprogram named by it is called to generate diffs, and Git\n\tdoes not use its builtin diff machinery.\n\tFor a path that is added, removed, or modified,\n\t`GIT_EXTERNAL_DIFF` is called with 7 parameters:\n\n\tpath old-file old-hex old-mode new-file new-hex new-mode\n+\nwhere:\n\n\t<old|new>-file:: are files GIT_EXTERNAL_DIFF can use to read the\n                         contents of <old|new>,\n\t<old|new>-hex:: are the 40-hexdigit SHA-1 hashes,\n\t<old|new>-mode:: are the octal representation of the file modes.\n+\nThe file parameters can point at the user's working file\n(e.g. `new-file` in \"git-diff-files\"), `/dev/null` (e.g. `old-file`\nwhen a new file is added), or a temporary file (e.g. `old-file` in the\nindex).  `GIT_EXTERNAL_DIFF` should not worry about unlinking the\ntemporary file --- it is removed when `GIT_EXTERNAL_DIFF` exits.\n+\nFor a path that is unmerged, `GIT_EXTERNAL_DIFF` is called with 1\nparameter, <path>.\n+\nFor each path `GIT_EXTERNAL_DIFF` is called, two environment variables,\n`GIT_DIFF_PATH_COUNTER` and `GIT_DIFF_PATH_TOTAL` are set.\n\n`GIT_DIFF_PATH_COUNTER`::\n\tA 1-based counter incremented by one for every path.\n\n`GIT_DIFF_PATH_TOTAL`::\n\tThe total number of paths.\n\nother\n~~~~~\n`GIT_MERGE_VERBOSITY`::\n\tA number controlling the amount of output shown by\n\tthe recursive merge strategy.  Overrides merge.verbosity.\n\tSee linkgit:git-merge[1]\n\n`GIT_PAGER`::\n\tThis environment variable overrides `$PAGER`. If it is set\n\tto an empty string or to the value \"cat\", Git will not launch\n\ta pager.  See also the `core.pager` option in\n\tlinkgit:git-config[1].\n\n`GIT_PROGRESS_DELAY`::\n\tA number controlling how many seconds to delay before showing\n\toptional progress indicators. Defaults to 2.\n\n`GIT_EDITOR`::\n\tThis environment variable overrides `$EDITOR` and `$VISUAL`.\n\tIt is used by several Git commands when, on interactive mode,\n\tan editor is to be launched. See also linkgit:git-var[1]\n\tand the `core.editor` option in linkgit:git-config[1].\n\n`GIT_SEQUENCE_EDITOR`::\n\tThis environment variable overrides the configured Git editor\n\twhen editing the todo list of an interactive rebase. See also\n\tlinkgit:git-rebase[1] and the `sequence.editor` option in\n\tlinkgit:git-config[1].\n\n`GIT_SSH`::\n`GIT_SSH_COMMAND`::\n\tIf either of these environment variables is set then 'git fetch'\n\tand 'git push' will use the specified command instead of 'ssh'\n\twhen they need to connect to a remote system.\n\tThe command-line parameters passed to the configured command are\n\tdetermined by the ssh variant.  See `ssh.variant` option in\n\tlinkgit:git-config[1] for details.\n+\n`$GIT_SSH_COMMAND` takes precedence over `$GIT_SSH`, and is interpreted\nby the shell, which allows additional arguments to be included.\n`$GIT_SSH` on the other hand must be just the path to a program\n(which can be a wrapper shell script, if additional arguments are\nneeded).\n+\nUsually it is easier to configure any desired options through your\npersonal `.ssh/config` file.  Please consult your ssh documentation\nfor further details.\n\n`GIT_SSH_VARIANT`::\n\tIf this environment variable is set, it overrides Git's autodetection\n\twhether `GIT_SSH`/`GIT_SSH_COMMAND`/`core.sshCommand` refer to OpenSSH,\n\tplink or tortoiseplink. This variable overrides the config setting\n\t`ssh.variant` that serves the same purpose.\n\n`GIT_ASKPASS`::\n\tIf this environment variable is set, then Git commands which need to\n\tacquire passwords or passphrases (e.g. for HTTP or IMAP authentication)\n\twill call this program with a suitable prompt as command-line argument\n\tand read the password from its STDOUT. See also the `core.askPass`\n\toption in linkgit:git-config[1].\n\n`GIT_TERMINAL_PROMPT`::\n\tIf this environment variable is set to `0`, git will not prompt\n\ton the terminal (e.g., when asking for HTTP authentication).\n\n`GIT_CONFIG_NOSYSTEM`::\n\tWhether to skip reading settings from the system-wide\n\t`$(prefix)/etc/gitconfig` file.  This environment variable can\n\tbe used along with `$HOME` and `$XDG_CONFIG_HOME` to create a\n\tpredictable environment for a picky script, or you can set it\n\ttemporarily to avoid using a buggy `/etc/gitconfig` file while\n\twaiting for someone with sufficient permissions to fix it.\n\n`GIT_FLUSH`::\n\tIf this environment variable is set to \"1\", then commands such\n\tas 'git blame' (in incremental mode), 'git rev-list', 'git log',\n\t'git check-attr' and 'git check-ignore' will\n\tforce a flush of the output stream after each record have been\n\tflushed. If this\n\tvariable is set to \"0\", the output of these commands will be done\n\tusing completely buffered I/O.   If this environment variable is\n\tnot set, Git will choose buffered or record-oriented flushing\n\tbased on whether stdout appears to be redirected to a file or not.\n\n`GIT_TRACE`::\n\tEnables general trace messages, e.g. alias expansion, built-in\n\tcommand execution and external command execution.\n+\nIf this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr.\n+\nIf the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor.\n+\nAlternatively, if the variable is set to an absolute path\n(starting with a '/' character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.\n+\nUnsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages.\n\n`GIT_TRACE_FSMONITOR`::\n\tEnables trace messages for the filesystem monitor extension.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_PACK_ACCESS`::\n\tEnables trace messages for all accesses to any packs. For each\n\taccess, the pack file name and an offset in the pack is\n\trecorded. This may be helpful for troubleshooting some\n\tpack-related performance problems.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_PACKET`::\n\tEnables trace messages for all packets coming in or out of a\n\tgiven program. This can help with debugging object negotiation\n\tor other protocol issues. Tracing is turned off at a packet\n\tstarting with \"PACK\" (but see `GIT_TRACE_PACKFILE` below).\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_PACKFILE`::\n\tEnables tracing of packfiles sent or received by a\n\tgiven program. Unlike other trace output, this trace is\n\tverbatim: no headers, and no quoting of binary data. You almost\n\tcertainly want to direct into a file (e.g.,\n\t`GIT_TRACE_PACKFILE=/tmp/my.pack`) rather than displaying it on\n\tthe terminal or mixing it with other trace output.\n+\nNote that this is currently only implemented for the client side\nof clones and fetches.\n\n`GIT_TRACE_PERFORMANCE`::\n\tEnables performance related trace messages, e.g. total execution\n\ttime of each Git command.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_REFS`::\n\tEnables trace messages for operations on the ref database.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_SETUP`::\n\tEnables trace messages printing the .git, working tree and current\n\tworking directory after Git has completed its setup phase.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_SHALLOW`::\n\tEnables trace messages that can help debugging fetching /\n\tcloning of shallow repositories.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_CURL`::\n\tEnables a curl full trace dump of all incoming and outgoing data,\n\tincluding descriptive information, of the git transport protocol.\n\tThis is similar to doing curl `--trace-ascii` on the command line.\n\tSee `GIT_TRACE` for available trace output options.\n\n`GIT_TRACE_CURL_NO_DATA`::\n\tWhen a curl trace is enabled (see `GIT_TRACE_CURL` above), do not dump\n\tdata (that is, only dump info lines and headers).\n\n`GIT_TRACE2`::\n\tEnables more detailed trace messages from the \"trace2\" library.\n\tOutput from `GIT_TRACE2` is a simple text-based format for human\n\treadability.\n+\nIf this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr.\n+\nIf the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor.\n+\nAlternatively, if the variable is set to an absolute path\n(starting with a '/' character), Git will interpret this\nas a file path and will try to append the trace messages\nto it.  If the path already exists and is a directory, the\ntrace messages will be written to files (one per process)\nin that directory, named according to the last component\nof the SID and an optional counter (to avoid filename\ncollisions).\n+\nIn addition, if the variable is set to\n`af_unix:[<socket_type>:]<absolute-pathname>`, Git will try\nto open the path as a Unix Domain Socket.  The socket type\ncan be either `stream` or `dgram`.\n+\nUnsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages.\n+\nSee link:technical/api-trace2.html[Trace2 documentation]\nfor full details.\n\n\n`GIT_TRACE2_EVENT`::\n\tThis setting writes a JSON-based format that is suited for machine\n\tinterpretation.\n\tSee `GIT_TRACE2` for available trace output options and\n\tlink:technical/api-trace2.html[Trace2 documentation] for full details.\n\n`GIT_TRACE2_PERF`::\n\tIn addition to the text-based messages available in `GIT_TRACE2`, this\n\tsetting writes a column-based format for understanding nesting\n\tregions.\n\tSee `GIT_TRACE2` for available trace output options and\n\tlink:technical/api-trace2.html[Trace2 documentation] for full details.\n\n`GIT_TRACE_REDACT`::\n\tBy default, when tracing is activated, Git redacts the values of\n\tcookies, the \"Authorization:\" header, and the \"Proxy-Authorization:\"\n\theader. Set this variable to `0` to prevent this redaction.\n\n`GIT_LITERAL_PATHSPECS`::\n\tSetting this variable to `1` will cause Git to treat all\n\tpathspecs literally, rather than as glob patterns. For example,\n\trunning `GIT_LITERAL_PATHSPECS=1 git log -- '*.c'` will search\n\tfor commits that touch the path `*.c`, not any paths that the\n\tglob `*.c` matches. You might want this if you are feeding\n\tliteral paths to Git (e.g., paths previously given to you by\n\t`git ls-tree`, `--raw` diff output, etc).\n\n`GIT_GLOB_PATHSPECS`::\n\tSetting this variable to `1` will cause Git to treat all\n\tpathspecs as glob patterns (aka \"glob\" magic).\n\n`GIT_NOGLOB_PATHSPECS`::\n\tSetting this variable to `1` will cause Git to treat all\n\tpathspecs as literal (aka \"literal\" magic).\n\n`GIT_ICASE_PATHSPECS`::\n\tSetting this variable to `1` will cause Git to treat all\n\tpathspecs as case-insensitive.\n\n`GIT_REFLOG_ACTION`::\n\tWhen a ref is updated, reflog entries are created to keep\n\ttrack of the reason why the ref was updated (which is\n\ttypically the name of the high-level command that updated\n\tthe ref), in addition to the old and new values of the ref.\n\tA scripted Porcelain command can use set_reflog_action\n\thelper function in `git-sh-setup` to set its name to this\n\tvariable when it is invoked as the top level command by the\n\tend user, to be recorded in the body of the reflog.\n\n`GIT_REF_PARANOIA`::\n\tIf set to `1`, include broken or badly named refs when iterating\n\tover lists of refs. In a normal, non-corrupted repository, this\n\tdoes nothing. However, enabling it may help git to detect and\n\tabort some operations in the presence of broken refs. Git sets\n\tthis variable automatically when performing destructive\n\toperations like linkgit:git-prune[1]. You should not need to set\n\tit yourself unless you want to be paranoid about making sure\n\tan operation has touched every ref (e.g., because you are\n\tcloning a repository to make a backup).\n\n`GIT_ALLOW_PROTOCOL`::\n\tIf set to a colon-separated list of protocols, behave as if\n\t`protocol.allow` is set to `never`, and each of the listed\n\tprotocols has `protocol.<name>.allow` set to `always`\n\t(overriding any existing configuration). In other words, any\n\tprotocol not mentioned will be disallowed (i.e., this is a\n\twhitelist, not a blacklist). See the description of\n\t`protocol.allow` in linkgit:git-config[1] for more details.\n\n`GIT_PROTOCOL_FROM_USER`::\n\tSet to 0 to prevent protocols used by fetch/push/clone which are\n\tconfigured to the `user` state.  This is useful to restrict recursive\n\tsubmodule initialization from an untrusted repository or for programs\n\twhich feed potentially-untrusted URLS to git commands.  See\n\tlinkgit:git-config[1] for more details.\n\n`GIT_PROTOCOL`::\n\tFor internal use only.  Used in handshaking the wire protocol.\n\tContains a colon ':' separated list of keys with optional values\n\t'key[=value]'.  Presence of unknown keys and values must be\n\tignored.\n\n`GIT_OPTIONAL_LOCKS`::\n\tIf set to `0`, Git will complete any requested operation without\n\tperforming any optional sub-operations that require taking a lock.\n\tFor example, this will prevent `git status` from refreshing the\n\tindex as a side effect. This is useful for processes running in\n\tthe background which do not want to cause lock contention with\n\tother operations on the repository.  Defaults to `1`.\n\n`GIT_REDIRECT_STDIN`::\n`GIT_REDIRECT_STDOUT`::\n`GIT_REDIRECT_STDERR`::\n\tWindows-only: allow redirecting the standard input/output/error\n\thandles to paths specified by the environment variables. This is\n\tparticularly useful in multi-threaded applications where the\n\tcanonical way to pass standard handles via `CreateProcess()` is\n\tnot an option because it would require the handles to be marked\n\tinheritable (and consequently *every* spawned process would\n\tinherit them, possibly blocking regular Git operations). The\n\tprimary intended use case is to use named pipes for communication\n\t(e.g. `\\\\.\\pipe\\my-git-stdin-123`).\n+\nTwo special values are supported: `off` will simply close the\ncorresponding standard handle, and if `GIT_REDIRECT_STDERR` is\n`2>&1`, standard error will be redirected to the same handle as\nstandard output.\n\n`GIT_PRINT_SHA1_ELLIPSIS` (deprecated)::\n\tIf set to `yes`, print an ellipsis following an\n\t(abbreviated) SHA-1 value.  This affects indications of\n\tdetached HEADs (linkgit:git-checkout[1]) and the raw\n\tdiff output (linkgit:git-diff[1]).  Printing an\n\tellipsis in the cases mentioned is no longer considered\n\tadequate and support for it is likely to be removed in the\n\tforeseeable future (along with the variable).\n\nDiscussion[[Discussion]]\n------------------------\n\nMore detail on the following is available from the\nlink:user-manual.html#git-concepts[Git concepts chapter of the\nuser-manual] and linkgit:gitcore-tutorial[7].\n\nA Git project normally consists of a working directory with a \".git\"\nsubdirectory at the top level.  The .git directory contains, among other\nthings, a compressed object database representing the complete history\nof the project, an \"index\" file which links that history to the current\ncontents of the working tree, and named pointers into that history such\nas tags and branch heads.\n\nThe object database contains objects of three main types: blobs, which\nhold file data; trees, which point to blobs and other trees to build up\ndirectory hierarchies; and commits, which each reference a single tree\nand some number of parent commits.\n\nThe commit, equivalent to what other systems call a \"changeset\" or\n\"version\", represents a step in the project's history, and each parent\nrepresents an immediately preceding step.  Commits with more than one\nparent represent merges of independent lines of development.\n\nAll objects are named by the SHA-1 hash of their contents, normally\nwritten as a string of 40 hex digits.  Such names are globally unique.\nThe entire history leading up to a commit can be vouched for by signing\njust that commit.  A fourth object type, the tag, is provided for this\npurpose.\n\nWhen first created, objects are stored in individual files, but for\nefficiency may later be compressed together into \"pack files\".\n\nNamed pointers called refs mark interesting points in history.  A ref\nmay contain the SHA-1 name of an object or the name of another ref.  Refs\nwith names beginning `ref/head/` contain the SHA-1 name of the most\nrecent commit (or \"head\") of a branch under development.  SHA-1 names of\ntags of interest are stored under `ref/tags/`.  A special ref named\n`HEAD` contains the name of the currently checked-out branch.\n\nThe index file is initialized with a list of all paths and, for each\npath, a blob object and a set of attributes.  The blob object represents\nthe contents of the file as of the head of the current branch.  The\nattributes (last modified time, size, etc.) are taken from the\ncorresponding file in the working tree.  Subsequent changes to the\nworking tree can be found by comparing these attributes.  The index may\nbe updated with new content, and new commits may be created from the\ncontent stored in the index.\n\nThe index is also capable of storing multiple entries (called \"stages\")\nfor a given pathname.  These stages are used to hold the various\nunmerged version of a file when a merge is in progress.\n\nFURTHER DOCUMENTATION\n---------------------\n\nSee the references in the \"description\" section to get started\nusing Git.  The following is probably more detail than necessary\nfor a first-time user.\n\nThe link:user-manual.html#git-concepts[Git concepts chapter of the\nuser-manual] and linkgit:gitcore-tutorial[7] both provide\nintroductions to the underlying Git architecture.\n\nSee linkgit:gitworkflows[7] for an overview of recommended workflows.\n\nSee also the link:howto-index.html[howto] documents for some useful\nexamples.\n\nThe internals are documented in the\nlink:technical/api-index.html[Git API documentation].\n\nUsers migrating from CVS may also want to\nread linkgit:gitcvs-migration[7].\n\n"
        },
        "Authors": {
            "name": "Authors",
            "start_index": 37111,
            "end_index": 37128,
            "value": "Git was started by Linus Torvalds, and is currently maintained by Junio\nC Hamano. Numerous contributions have come from the Git mailing list\n<git@vger.kernel.org>.  http://www.openhub.net/p/git/contributors/summary\ngives you a more complete list of contributors.\n\nIf you have a clone of git.git itself, the\noutput of linkgit:git-shortlog[1] and linkgit:git-blame[1] can show you\nthe authors for specific parts of the project.\n\nReporting Bugs\n--------------\n\nReport bugs to the Git mailing list <git@vger.kernel.org> where the\ndevelopment and maintenance is primarily done.  You do not have to be\nsubscribed to the list to send a message there.  See the list archive\nat https://lore.kernel.org/git for previous bug reports and other\ndiscussions.\n\nIssues which are security relevant should be disclosed privately to\nthe Git Security mailing list <git-security@googlegroups.com>.\n\nSEE ALSO\n--------\nlinkgit:gittutorial[7], linkgit:gittutorial-2[7],\nlinkgit:giteveryday[7], linkgit:gitcvs-migration[7],\nlinkgit:gitglossary[7], linkgit:gitcore-tutorial[7],\nlinkgit:gitcli[7], link:user-manual.html[The Git User's Manual],\nlinkgit:gitworkflows[7]\n"
        },
        "GIT": {
            "name": "GIT",
            "start_index": 38269,
            "end_index": 38278,
            "value": "Part of the linkgit:git[1] suite\n"
        }
    }
}